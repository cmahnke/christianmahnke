/*! Bundled license information:

three/build/three.core.js:
three/build/three.module.js:
  (**
   * @license
   * Copyright 2010-2025 Three.js Authors
   * SPDX-License-Identifier: MIT
   *)
*/(()=>{function s(e,t){let s=e.length;Array.isArray(e[0])||(e=[e]),Array.isArray(t[0])||(t=t.map(e=>[e]));let o=t[0].length,i=t[0].map((e,n)=>t.map(e=>e[n])),n=e.map(e=>i.map(t=>{let n=0;if(!Array.isArray(e)){for(let s of t)n+=e*s;return n}for(let s=0;s<e.length;s++)n+=e[s]*(t[s]||0);return n}));return s===1&&(n=n[0]),o===1?n.map(e=>e[0]):n}function W(e){return y(e)==="string"}function y(e){let t=Object.prototype.toString.call(e);return(t.match(/^\[object\s+(.*?)\]$/)[1]||"").toLowerCase()}function ee(e,{precision:t,unit:n}){return b(e)?"none":At(e,t)+(n??"")}function b(e){return Number.isNaN(e)||e instanceof Number&&e?.none}function i(e){return b(e)?0:e}function At(e,t){if(e===0)return 0;let n=~~e,s=0;n&&t&&(s=~~Math.log10(Math.abs(n))+1);const o=10**(t-s);return Math.floor(e*o+.5)/o}Dt={deg:1,grad:.9,rad:180/Math.PI,turn:360};function Nt(e){if(!e)return;e=e.trim();const n=/^([a-z]+)\((.+?)\)$/i,s=/^-?[\d.]+$/,o=/%|deg|g?rad|turn$/,i=/\/?\s*(none|[-\w.]+(?:%|deg|g?rad|turn)?)/g;let t=e.match(n);if(t){let e=[];return t[2].replace(i,(t,n)=>{let a=n.match(o),i=n;if(a){let e=a[0],t=i.slice(0,-e.length);e==="%"?(i=new Number(t/100),i.type="<percentage>"):(i=new Number(t*Dt[e]),i.type="<angle>",i.unit=e)}else s.test(i)?(i=new Number(i),i.type="<number>"):i==="none"&&(i=new Number(NaN),i.none=!0);t.startsWith("/")&&(i=i instanceof Number?i:new Number(i),i.alpha=!0),typeof i=="object"&&i instanceof Number&&(i.raw=n),e.push(i)}),{name:t[1].toLowerCase(),rawName:t[1],rawArgs:t[2],args:e}}}function Ht(e){return e[e.length-1]}function z(e,t,n){return isNaN(e)?t:isNaN(t)?e:e+(t-e)*n}function tn(e,t,n){return(n-e)/(t-e)}function ke(e,t,n){return z(t[0],t[1],tn(e[0],e[1],n))}function Yn(e){return e.map(e=>e.split("|").map(e=>{e=e.trim();let t=e.match(/^(<[a-z]+>)\[(-?[.\d]+),\s*(-?[.\d]+)\]?$/);if(t){let e=new String(t[1]);return e.range=[+t[2],+t[3]],e}return e}))}function Jn(e,t,n){return Math.max(Math.min(n,t),e)}function ie(e,t){return Math.sign(e)===Math.sign(t)?e:-e}function m(e,t){return ie((e<0?-e:e)**t,e)}function $e(e,t){return t===0?0:e/t}function Kn(e,t,n=0,s=e.length){for(;n<s;){const o=n+s>>1;e[o]<t?n=o+1:s=o}return n}In=Object.freeze({__proto__:null,bisectLeft:Kn,clamp:Jn,copySign:ie,interpolate:z,interpolateInv:tn,isNone:b,isString:W,last:Ht,mapRange:ke,multiplyMatrices:s,parseCoordGrammar:Yn,parseFunction:Nt,serializeNumber:ee,skipNone:i,spow:m,toPrecision:At,type:y,zdiv:$e}),Ln=class{add(e,t,n){if(typeof arguments[0]!="string"){for(var e in arguments[0])this.add(e,arguments[0][e],arguments[1]);return}(Array.isArray(e)?e:[e]).forEach(function(e){this[e]=this[e]||[],t&&this[e][n?"unshift":"push"](t)},this)}run(e,t){this[e]=this[e]||[],this[e].forEach(function(e){e.call(t&&t.context?t.context:t,t)})}},g=new Ln,u={gamut_mapping:"css",precision:5,deltaE:"76",verbose:globalThis?.process?.env?.NODE_ENV?.toLowerCase()!=="test",warn:function(t){this.verbose&&globalThis?.console?.warn?.(t)}},r={D50:[.3457/.3585,1,(1-.3457-.3585)/.3585],D65:[.3127/.329,1,(1-.3127-.329)/.329]};function Ge(e){return Array.isArray(e)?e:r[e]}function ce(e,t,n,o={}){if(e=Ge(e),t=Ge(t),!e||!t)throw new TypeError(`Missing white point to convert ${e?"":"from"}${!e&&!t?"/":""}${t?"":"to"}`);if(e===t)return n;let i={W1:e,W2:t,XYZ:n,options:o};if(g.run("chromatic-adaptation-start",i),i.M||(i.W1===r.D65&&i.W2===r.D50?i.M=[[1.0479297925449969,.022946870601609652,-.05019226628920524],[.02962780877005599,.9904344267538799,-.017073799063418826],[-.009243040646204504,.015055191490298152,.7518742814281371]]:i.W1===r.D50&&i.W2===r.D65&&(i.M=[[.955473421488075,-.02309845494876471,.06325924320057072],[-.0283697093338637,1.0099953980813041,.021041441191917323],[.012314014864481998,-.020507649298898964,1.330365926242124]])),g.run("chromatic-adaptation-end",i),i.M)return s(i.M,i.XYZ);throw new TypeError("Only Bradford CAT with white points D50 and D65 supported for now.")}Tn=new Set(["<number>","<percentage>","<angle>"]);function Fn(e,t,n,s){let o=Object.entries(e.coords).map(([e,o],i)=>{let d=t.coordGrammar[i],r=s[i],c=r?.type,a;if(r.none?a=d.find(e=>Tn.has(e)):a=d.find(e=>e==c),!a){let t=o.name||e;throw new TypeError(`${c??r.raw} not allowed for ${t} in ${n}()`)}let l=a.range;c==="<percentage>"&&(l||=[0,1]);let u=o.range||o.refRange;return l&&u&&(s[i]=ke(l,u,s[i])),a});return o}function Mn(t,{meta:n}={}){let s={str:String(t)?.trim()};if(g.run("parse-start",s),s.color)return s.color;if(s.parsed=Nt(s.str),s.parsed){{let t=s.parsed.name;if(t==="color"){let t=s.parsed.args.shift(),o=t.startsWith("--")?t.substring(2):`--${t}`,i=[t,o],c=s.parsed.rawArgs.indexOf("/")>0?s.parsed.args.pop():1;for(let a of e.all){let o=a.getFormat("color");if(o&&(i.includes(o.id)||o.ids?.filter(e=>i.includes(e)).length)){const e=Object.keys(a.coords).map((e,t)=>s.parsed.args[t]||0);let i;return o.coordGrammar&&(i=Fn(a,o,"color",e)),n&&Object.assign(n,{formatId:"color",types:i}),o.id.startsWith("--")&&!t.startsWith("--")&&u.warn(`${a.name} is a non-standard space and not currently supported in the CSS spec. Use prefixed color(${o.id}) instead of color(${t}).`),t.startsWith("--")&&!o.id.startsWith("--")&&u.warn(`${a.name} is a standard space and supported in the CSS spec. Use color(${o.id}) instead of prefixed color(${t}).`),{spaceId:a.id,coords:e,alpha:c}}}let a="",r=t in e.registry?t:o;if(r in e.registry){let t=e.registry[r].formats?.color?.id;t&&(a=`Did you mean color(${t})?`)}throw new TypeError(`Cannot parse color(${t}). `+(a||"Missing a plugin?"))}for(let i of e.all){let o=i.getFormat(t);if(o&&o.type==="function"){let e=1;(o.lastAlpha||Ht(s.parsed.args).alpha)&&(e=s.parsed.args.pop());let a=s.parsed.args,r;return o.coordGrammar&&(r=Fn(i,o,t,a)),n&&Object.assign(n,{formatId:o.name,types:r}),{spaceId:i.id,coords:a,alpha:e}}}}}else for(let t of e.all)for(let i in t.formats){let e=t.formats[i];if(e.type!=="custom")continue;if(e.test&&!e.test(s.str))continue;let o=e.parse(s.str);if(o)return o.alpha??=1,n&&(n.formatId=i),o}throw new TypeError(`Could not parse ${t} as a color. Missing a plugin?`)}function t(n){if(Array.isArray(n))return n.map(t);if(!n)throw new TypeError("Empty color reference");W(n)&&(n=Mn(n));let s=n.space||n.spaceId;return s instanceof e||(n.space=e.get(s)),n.alpha===0[0]&&(n.alpha=1),n}Sn=75e-6,e=class _ColorSpace{constructor(e){this.id=e.id,this.name=e.name,this.base=e.base?_ColorSpace.get(e.base):null,this.aliases=e.aliases,this.base&&(this.fromBase=e.fromBase,this.toBase=e.toBase);let t=e.coords??this.base.coords;for(let e in t)"name"in t[e]||(t[e].name=e);this.coords=t;let n=e.white??this.base.white??"D65";this.white=Ge(n),this.formats=e.formats??{};for(let e in this.formats){let t=this.formats[e];t.type||="function",t.name||=e}this.formats.color?.id||(this.formats.color={...this.formats.color??{},id:e.cssId||this.id}),e.gamutSpace?this.gamutSpace=e.gamutSpace==="self"?this:_ColorSpace.get(e.gamutSpace):this.isPolar?this.gamutSpace=this.base:this.gamutSpace=this,this.gamutSpace.isUnbounded&&(this.inGamut=()=>!0),this.referred=e.referred,Object.defineProperty(this,"path",{value:Ks(this).reverse(),writable:!1,enumerable:!0,configurable:!0}),g.run("colorspace-init-end",this)}inGamut(e,{epsilon:t=Sn}={}){if(!this.equals(this.gamutSpace))return e=this.to(this.gamutSpace,e),this.gamutSpace.inGamut(e,{epsilon:t});let n=Object.values(this.coords);return e.every((e,s)=>{let o=n[s];if(o.type!=="angle"&&o.range){if(Number.isNaN(e))return!0;let[n,s]=o.range;return(n===0[0]||e>=n-t)&&(s===0[0]||e<=s+t)}return!0})}get isUnbounded(){return Object.values(this.coords).every(e=>!("range"in e))}get cssId(){return this.formats?.color?.id||this.id}get isPolar(){for(let e in this.coords)if(this.coords[e].type==="angle")return!0;return!1}getFormat(e){if(typeof e=="object")return e=sn(e,this),e;let t;return e==="default"?t=Object.values(this.formats)[0]:t=this.formats[e],t?(t=sn(t,this),t):null}equals(e){return!!e&&(this===e||this.id===e||this.id===e.id)}to(e,n){if(arguments.length===1){const s=t(e);[e,n]=[s.space,s.coords]}if(e=_ColorSpace.get(e),this.equals(e))return n;n=n.map(e=>Number.isNaN(e)?0:e);let s=this.path,o=e.path,a,i;for(let e=0;e<s.length;e++)if(s[e].equals(o[e]))a=s[e],i=e;else break;if(!a)throw new Error(`Cannot convert between color spaces ${this} and ${e}: no connection space was found`);for(let e=s.length-1;e>i;e--)n=s[e].toBase(n);for(let e=i+1;e<o.length;e++)n=o[e].fromBase(n);return n}from(e,n){if(arguments.length===1){const s=t(e);[e,n]=[s.space,s.coords]}return e=_ColorSpace.get(e),e.to(this,n)}toString(){return`${this.name} (${this.id})`}getMinCoords(){let e=[];for(let n in this.coords){let t=this.coords[n],s=t.range||t.refRange;e.push(s?.min??0)}return e}static registry={};static get all(){return[...new Set(Object.values(_ColorSpace.registry))]}static register(e,t){if(arguments.length===1&&(t=arguments[0],e=t.id),t=this.get(t),this.registry[e]&&this.registry[e]!==t)throw new Error(`Duplicate color space registration: '${e}'`);if(this.registry[e]=t,arguments.length===1&&t.aliases)for(let e of t.aliases)this.register(e,t);return t}static get(e,...t){if(!e||e instanceof _ColorSpace)return e;let n=y(e);if(n==="string"){let t=_ColorSpace.registry[e.toLowerCase()];if(!t)throw new TypeError(`No color space found with id = "${e}"`);return t}if(t.length)return _ColorSpace.get(...t);throw new TypeError(`${e} is not a valid color space`)}static resolveCoord(e,t){let o=y(e),n,s;if(o==="string"?e.includes(".")?[n,s]=e.split("."):[n,s]=[,e]:Array.isArray(e)?[n,s]=e:(n=e.space,s=e.coordId),n=_ColorSpace.get(n),n||(n=t),!n)throw new TypeError(`Cannot resolve coordinate reference ${e}: No color space specified and relative references are not allowed here`);if(o=y(s),o==="number"||o==="string"&&s>=0){let e=Object.entries(n.coords)[s];if(e)return{space:n,id:e[0],index:s,...e[1]}}n=_ColorSpace.get(n);let i=s.toLowerCase(),a=0;for(let e in n.coords){let t=n.coords[e];if(e.toLowerCase()===i||t.name?.toLowerCase()===i)return{space:n,id:e,index:a,...t};a++}throw new TypeError(`No "${s}" coordinate found in ${n.name}. Its coordinates are: ${Object.keys(n.coords).join(", ")}`)}static DEFAULT_FORMAT={type:"functions",name:"color"}};function Ks(e){let t=[e];for(let n=e;n=n.base;)t.push(n);return t}function sn(e,{coords:t}={}){if(e.coords&&!e.coordGrammar){e.type||="function",e.name||="color",e.coordGrammar=Yn(e.coords);let n=Object.entries(t).map(([t,n],s)=>{let o=e.coordGrammar[s][0],r=n.range||n.refRange,a=o.range,i="";return o=="<percentage>"?(a=[0,100],i="%"):o=="<angle>"&&(i="deg"),{fromRange:r,toRange:a,suffix:i}});e.serializeCoords=(e,t)=>e.map((e,s)=>{let{fromRange:o,toRange:i,suffix:a}=n[s];return o&&i&&(e=ke(o,i,e)),e=ee(e,{precision:t,unit:a}),e})}return e}a=new e({id:"xyz-d65",name:"XYZ D65",coords:{x:{name:"X"},y:{name:"Y"},z:{name:"Z"}},white:"D65",formats:{color:{ids:["xyz-d65","xyz"]}},aliases:["xyz"]}),c=class extends e{constructor(e){e.coords||(e.coords={r:{range:[0,1],name:"Red"},g:{range:[0,1],name:"Green"},b:{range:[0,1],name:"Blue"}}),e.base||(e.base=a),e.toXYZ_M&&e.fromXYZ_M&&(e.toBase??=t=>{let n=s(e.toXYZ_M,t);return this.white!==this.base.white&&(n=ce(this.white,this.base.white,n)),n},e.fromBase??=t=>(t=ce(this.base.white,this.white,t),s(e.fromXYZ_M,t))),e.referred??="display",super(e)}};function L(n,s){return n=t(n),!s||n.space.equals(s)?n.coords.slice():(s=e.get(s),s.from(n))}function h(n,s){n=t(n);let{space:o,index:i}=e.resolveCoord(s,n.space),a=L(n,o);return a[i]}function it(n,s,o){return n=t(n),s=e.get(s),n.coords=s.to(n.space,o),n}it.returns="color";function p(n,s,o){if(n=t(n),arguments.length===2&&y(arguments[1])==="object"){let e=arguments[1];for(let t in e)p(n,t,e[t])}else{typeof o=="function"&&(o=o(h(n,s)));let{space:t,index:a}=e.resolveCoord(s,n.space),i=L(n,t);i[a]=o,it(n,t,i)}return n}p.returns="color",he=new e({id:"xyz-d50",name:"XYZ D50",white:"D50",base:a,fromBase:e=>ce(a.white,"D50",e),toBase:e=>ce("D50",a.white,e)}),qt=216/24389,gt=24/116,$=24389/27,X=r.D50,d=new e({id:"lab",name:"Lab",coords:{l:{refRange:[0,100],name:"Lightness"},a:{refRange:[-125,125]},b:{refRange:[-125,125]}},white:X,base:he,fromBase(e){let n=e.map((e,t)=>e/X[t]),t=n.map(e=>e>qt?Math.cbrt(e):($*e+16)/116);return[116*t[1]-16,500*(t[0]-t[1]),200*(t[1]-t[2])]},toBase(e){let t=[];t[1]=(e[0]+16)/116,t[0]=e[1]/500+t[1],t[2]=t[1]-e[2]/200;let n=[t[0]>gt?t[0]**3:(116*t[0]-16)/$,e[0]>8?((e[0]+16)/116)**3:e[0]/$,t[2]>gt?t[2]**3:(116*t[2]-16)/$];return n.map((e,t)=>e*X[t])},formats:{lab:{coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}});function f(e){return(e%360+360)%360}function no(e,t){if(e==="raw")return t;let[s,o]=t.map(f),n=o-s;return e==="increasing"?n<0&&(o+=360):e==="decreasing"?n>0&&(s+=360):e==="longer"?-180<n&&n<180&&(n>0?s+=360:o+=360):e==="shorter"&&(n>180?s+=360:n<-180&&(o+=360)),[s,o]}M=new e({id:"lch",name:"LCH",coords:{l:{refRange:[0,100],name:"Lightness"},c:{refRange:[0,150],name:"Chroma"},h:{refRange:[0,360],type:"angle",name:"Hue"}},base:d,fromBase(e){let[i,t,n]=e,s;const o=.02;return(t<0?-t:t)<o&&(n<0?-n:n)<o?s=NaN:s=Math.atan2(n,t)*180/Math.PI,[i,(t**2+n**2)**.5,f(s)]},toBase(e){let[s,t,n]=e;return t<0&&(t=0),isNaN(n)&&(n=0),[s,t*Math.cos(n*Math.PI/180),t*Math.sin(n*Math.PI/180)]},formats:{lch:{coords:["<number> | <percentage>","<number> | <percentage>","<number> | <angle>"]}}}),vt=25**7,D=Math.PI,jt=180/D,w=D/180;function Tt(e){const t=e*e,n=t*t*t*e;return n}function Ft(e,n,{kL:s=1,kC:o=1,kH:i=1}={}){[e,n]=t([e,n]);let[C,T,b]=d.from(e),k=M.from(d,[C,T,b])[1],[y,P,j]=d.from(n),E=M.from(d,[y,P,j])[1];k<0&&(k=0),E<0&&(E=0);let V=(k+E)/2,A=Tt(V),L=.5*(1-(A/(A+vt))**.5),O=(1+L)*T,_=(1+L)*P,c=(O**2+b**2)**.5,g=(_**2+j**2)**.5,p=O===0&&b===0?0:Math.atan2(b,O),f=_===0&&j===0?0:Math.atan2(j,_);p<0&&(p+=2*D),f<0&&(f+=2*D),p*=jt,f*=jt;let q=y-C,N=g-c,r=f-p,l=p+f,F=r<0?-r:r,m;c*g===0?m=0:F<=180?m=r:r>180?m=r-360:r<-180?m=r+360:u.warn("the unthinkable has happened");let z=2*(g*c)**.5*Math.sin(m*w/2),$=(C+y)/2,x=(c+g)/2,R=Tt(x),a;c*g===0?a=l:F<=180?a=l/2:l<360?a=(l+360)/2:a=(l-360)/2;let H=($-50)**2,B=1+.015*H/(20+H)**.5,I=1+.045*x,h=1;h-=.17*Math.cos((a-30)*w),h+=.24*Math.cos(2*a*w),h+=.32*Math.cos((3*a+6)*w),h-=.2*Math.cos((4*a-63)*w);let S=1+.015*x*h,W=30*Math.exp(-1*((a-275)/25)**2),U=2*(R/(R+vt))**.5,K=-1*Math.sin(2*W*w)*U,v=(q/(s*B))**2;return v+=(N/(o*I))**2,v+=(z/(i*S))**2,v+=K*(N/(o*I))*(z/(i*S)),v**.5}St=[[.819022437996703,.3619062600528904,-.1288737815209879],[.0329836539323885,.9292868615863434,.0361446663506424],[.0481771893596242,.2642395317527308,.6335478284694309]],xt=[[1.2268798758459243,-.5578149944602171,.2813910456659647],[-.0405757452148008,1.112286803280317,-.0717110580655164],[-.0763729366746601,-.4214933324022432,1.5869240198367816]],ns=[[.210454268309314,.7936177747023054,-.0040720430116193],[1.9779985324311684,-2.42859224204858,.450593709617411],[.0259040424655478,.7827717124575296,-.8086757549230774]],Jt=[[1,.3963377773761749,.2158037573099136],[1,-.1055613458156586,-.0638541728258133],[1,-.0894841775298119,-1.2914855480194092]],x=new e({id:"oklab",name:"Oklab",coords:{l:{refRange:[0,1],name:"Lightness"},a:{refRange:[-.4,.4]},b:{refRange:[-.4,.4]}},white:"D65",base:a,fromBase(e){let t=s(St,e),n=t.map(e=>Math.cbrt(e));return s(ns,n)},toBase(e){let t=s(Jt,e),n=t.map(e=>e**3);return s(xt,n)},formats:{oklab:{coords:["<percentage> | <number>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}});function Je(e,n){[e,n]=t([e,n]);let[s,o,i]=x.from(e),[a,r,c]=x.from(n),l=s-a,d=o-r,u=i-c;return(l**2+d**2+u**2)**.5}ds=75e-6;function O(n,s,{epsilon:o=ds}={}){n=t(n),s||(s=n.space),s=e.get(s);let i=n.coords;return s!==n.space&&(i=s.from(n)),s.inGamut(i,{epsilon:o})}function A(e){return{space:e.space,coords:e.coords.slice(),alpha:e.alpha}}function En(t,n,s="lab"){s=e.get(s);let o=s.from(t),i=s.from(n);return o.reduce((e,t,n)=>{let s=i[n];return isNaN(t)||isNaN(s)?e:e+(s-t)**2},0)**.5}function Ys(e,t){return En(e,t,"lab")}nn=Math.PI,be=nn/180;function co(e,n,{l:s=2,c:o=1}={}){[e,n]=t([e,n]);let[r,p,m]=d.from(e),[,i,a]=M.from(d,[r,p,m]),[g,f,j]=d.from(n),c=M.from(d,[g,f,j])[1];i<0&&(i=0),c<0&&(c=0);let E=r-g,h=i-c,x=p-f,O=m-j,w=x**2+O**2-h**2,y=.511;r>=16&&(y=.040975*r/(1+.01765*r));let _=.0638*i/(1+.0131*i)+.638,u;Number.isNaN(a)&&(a=0),a>=164&&a<=345?u=.56+Math.abs(.2*Math.cos((a+168)*be)):u=.36+Math.abs(.4*Math.cos((a+35)*be));let b=i**4,v=(b/(b+1900))**.5,C=_*(v*u+1-v),l=(E/(s*y))**2;return l+=(h/(o*_))**2,l+=w/C**2,l**.5}st=203,Z=new e({id:"xyz-abs-d65",cssId:"--xyz-abs-d65",name:"Absolute XYZ D65",coords:{x:{refRange:[0,9504.7],name:"Xa"},y:{refRange:[0,1e4],name:"Ya"},z:{refRange:[0,10888.3],name:"Za"}},base:a,fromBase(e){return e.map(e=>Math.max(e*st,0))},toBase(e){return e.map(e=>Math.max(e/st,0))}}),N=1.15,H=.66,je=2610/2**14,Mt=2**14/2610,_e=3424/2**12,we=2413/2**7,Oe=2392/2**7,Yt=1.7*2523/2**5,Ce=2**5/(1.7*2523),I=-.56,ue=16295499532821565e-27,cn=[[.41478972,.579999,.014648],[-.20151,1.120649,.0531008],[-.0166008,.2648,.6684799]],_n=[[1.9242264357876067,-1.0047923125953657,.037651404030618],[.35031676209499907,.7264811939316552,-.06538442294808501],[-.09098281098284752,-.3127282905230739,1.5227665613052603]],wn=[[.5,.5,0],[3.524,-4.066708,.542708],[.199076,1.096799,-1.295875]],Cn=[[1,.1386050432715393,.05804731615611886],[.9999999999999999,-.1386050432715393,-.05804731615611886],[.9999999999999998,-.09601924202631895,-.8118918960560388]],Te=new e({id:"jzazbz",name:"Jzazbz",coords:{jz:{refRange:[0,1],name:"Jz"},az:{refRange:[-.5,.5]},bz:{refRange:[-.5,.5]}},base:Z,fromBase(e){let[t,i,n]=e,a=N*t-(N-1)*n,r=H*i-(H-1)*t,c=s(cn,[a,r,n]),l=c.map(function(e){let t=_e+we*(e/1e4)**je,n=1+Oe*(e/1e4)**je;return(t/n)**Yt}),[o,d,u]=s(wn,l),h=(1+I)*o/(1+I*o)-ue;return[h,d,u]},toBase(e){let[t,i,a]=e,r=(t+ue)/(1+I-I*(t+ue)),c=s(Cn,[r,i,a]),l=c.map(function(e){let t=_e-e**Ce,n=Oe*e**Ce-we,s=1e4*(t/n)**Mt;return s}),[d,u,n]=s(_n,l),o=(d+(N-1)*n)/N,h=(u+(H-1)*o)/H;return[o,h,n]},formats:{color:{coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}}),de=new e({id:"jzczhz",name:"JzCzHz",coords:{jz:{refRange:[0,1],name:"Jz"},cz:{refRange:[0,1],name:"Chroma"},hz:{refRange:[0,360],type:"angle",name:"Hue"}},base:Te,fromBase(e){let[i,t,n]=e,s;const o=2e-4;return(t<0?-t:t)<o&&(n<0?-n:n)<o?s=NaN:s=Math.atan2(n,t)*180/Math.PI,[i,(t**2+n**2)**.5,f(s)]},toBase(e){return[e[0],e[1]*Math.cos(e[2]*Math.PI/180),e[1]*Math.sin(e[2]*Math.PI/180)]}});function Bs(e,n){[e,n]=t([e,n]);let[r,i,s]=de.from(e),[c,a,o]=de.from(n),l=r-c,d=i-a;Number.isNaN(s)&&Number.isNaN(o)?(s=0,o=0):Number.isNaN(s)?s=o:Number.isNaN(o)&&(o=s);let u=s-o,h=2*(i*a)**.5*Math.sin(u/2*(Math.PI/180));return(l**2+d**2+h**2)**.5}Ne=3424/4096,Le=2413/128,Re=2392/128,Pe=2610/16384,zn=2523/32,Pn=16384/2610,Be=32/2523,Bn=[[.3592832590121217,.6976051147779502,-.035891593232029],[-.1920808463704993,1.100476797037432,.0753748658519118],[.0070797844607479,.0748396662186362,.8433265453898765]],es=[[2048/4096,2048/4096,0],[6610/4096,-13613/4096,7003/4096],[17933/4096,-17390/4096,-543/4096]],Ot=[[.9999999999999998,.0086090370379328,.111029625003026],[.9999999999999998,-.0086090370379328,-.1110296250030259],[.9999999999999998,.5600313357106791,-.3206271749873188]],rs=[[2.0701522183894223,-1.3263473389671563,.2066510476294053],[.3647385209748072,.6805660249472273,-.0453045459220347],[-.0497472075358123,-.0492609666966131,1.1880659249923042]],re=new e({id:"ictcp",name:"ICTCP",coords:{i:{refRange:[0,1],name:"I"},ct:{refRange:[-.5,.5],name:"CT"},cp:{refRange:[-.5,.5],name:"CP"}},base:Z,fromBase(e){let t=s(Bn,e);return ys(t)},toBase(e){let t=Ds(e);return s(rs,t)}});function ys(e){let t=e.map(function(e){let t=Ne+Le*(e/1e4)**Pe,n=1+Re*(e/1e4)**Pe;return(t/n)**zn});return s(es,t)}function Ds(e){let t=s(Ot,e),n=t.map(function(e){let t=Math.max(e**Be-Ne,0),n=Le-Re*e**Be;return 1e4*(t/n)**Pn});return n}function Hs(e,n){[e,n]=t([e,n]);let[s,o,i]=re.from(e),[a,r,c]=re.from(n);return 720*((s-a)**2+.25*(o-r)**2+(i-c)**2)**.5}An=r.D65,Qe=.42,Ze=1/Qe,Q=2*Math.PI,et=[[.401288,.650173,-.051461],[-.250268,1.204414,.045854],[-.002079,.048952,.953127]],bn=[[1.8620678550872327,-1.0112546305316843,.14918677544445175],[.38752654323613717,.6214474419314753,-.008973985167612518],[-.015841498849333856,-.03412293802851557,1.0499644368778496]],mn=[[460,451,288],[460,-891,-261],[460,-220,-6300]],hn={dark:[.8,.525,.8],dim:[.9,.59,.9],average:[1,.69,1]},_={h:[20.14,90,164.25,237.53,380.14],e:[.8,.7,1,1.2,.8],H:[0,100,200,300,400]},Zt=180/Math.PI,at=Math.PI/180;function Qt(e,t){const n=e.map(e=>{const n=m(t*(e<0?-e:e)*.01,Qe);return 400*ie(n,e)/(n+27.13)});return n}function Js(e,t){const n=100/t*27.13**Ze;return e.map(e=>{const t=e<0?-e:e;return ie(n*m(t/(400-t),Ze),e)})}function eo(e){let t=f(e);t<=_.h[0]&&(t+=360);const n=Kn(_.h,t)-1,[o,i]=_.h.slice(n,n+2),[a,r]=_.e.slice(n,n+2),c=_.H[n],s=(t-o)/a;return c+100*s/(s+(i-t)/r)}function to(e){let t=(e%400+400)%400;const n=Math.floor(.01*t);t=t%100;const[o,a]=_.h.slice(n,n+2),[i,s]=_.e.slice(n,n+2);return f((t*(s*o-i*a)-100*o*s)/(t*(s-i)-100*s))}function Ut(e,t,n,o,i){const a={};a.discounting=i,a.refWhite=e,a.surround=o;const l=e.map(e=>e*100);a.la=t,a.yb=n;const d=l[1],u=s(et,l);o=hn[a.surround];const h=o[0];a.c=o[1],a.nc=o[2];const m=1/(5*a.la+1),r=m**4;a.fl=r*a.la+.1*(1-r)*(1-r)*Math.cbrt(5*a.la),a.flRoot=a.fl**.25,a.n=a.yb/d,a.z=1.48+a.n**.5,a.nbb=.725*a.n**-.2,a.ncb=a.nbb;const f=Math.max(Math.min(h*(1-1/3.6*Math.exp((-a.la-42)/92)),1),0);a.dRgb=u.map(e=>z(1,d/e,f)),a.dRgbInv=a.dRgb.map(e=>1/e);const p=u.map((e,t)=>e*a.dRgb[t]),c=Qt(p,a.fl);return a.aW=a.nbb*(2*c[0]+c[1]+.05*c[2]),a}ht=Ut(An,64/Math.PI*.2,20,"average",!1);function mt(e,t){if(!(e.J!==0[0]^e.Q!==0[0]))throw new Error("Conversion requires one and only one: 'J' or 'Q'");if(!(e.C!==0[0]^e.M!==0[0]^e.s!==0[0]))throw new Error("Conversion requires one and only one: 'C', 'M' or 's'");if(!(e.h!==0[0]^e.H!==0[0]))throw new Error("Conversion requires one and only one: 'h' or 'H'");if(e.J===0||e.Q===0)return[0,0,0];let o=0;e.h!==0[0]?o=f(e.h)*at:o=to(e.H)*at;const l=Math.cos(o),r=Math.sin(o);let n=0;e.J!==0[0]?n=m(e.J,1/2)*.1:e.Q!==0[0]&&(n=.25*t.c*e.Q/((t.aW+4)*t.flRoot));let i=0;e.C!==0[0]?i=e.C/n:e.M!==0[0]?i=e.M/t.flRoot/n:e.s!==0[0]&&(i=4e-4*e.s**2*(t.aW+4)/t.c);const c=m(i*(1.64-.29**t.n)**-.73,10/9),u=.25*(Math.cos(o+2)+3.8),h=t.aW*m(n,2/t.c/t.z),p=5e4/13*t.nc*t.ncb*u,a=h/t.nbb,d=23*(a+.305)*$e(c,23*p+c*(11*l+108*r)),g=d*l,v=d*r,b=Js(s(mn,[a,g,v]).map(e=>e*1/1403),t.fl);return s(bn,b.map((e,n)=>e*t.dRgbInv[n])).map(e=>e/100)}function Vt(e,t){const v=e.map(e=>e*100),n=Qt(s(et,v).map((e,n)=>e*t.dRgb[n]),t.fl),a=n[0]+(-12*n[1]+n[2])/11,l=(n[0]+n[1]-2*n[2])/9,r=(Math.atan2(l,a)%Q+Q)%Q,j=.25*(Math.cos(r+2)+3.8),u=5e4/13*t.nc*t.ncb*$e(j*(a**2+l**2)**.5,n[0]+n[1]+1.05*n[2]+.305),d=m(u,.9)*(1.64-.29**t.n)**.73,h=t.nbb*(2*n[0]+n[1]+.05*n[2]),o=m(h/t.aW,.5*t.c*t.z),p=100*m(o,2),g=4/t.c*o*(t.aW+4)*t.flRoot,i=d*o,b=i*t.flRoot,c=f(r*Zt),y=eo(c),_=50*m(t.c*d/(t.aW+4),1/2);return{J:p,C:i,h:c,s:_,Q:g,M:b,H:y}}Bt=new e({id:"cam16-jmh",cssId:"--cam16-jmh",name:"CAM16-JMh",coords:{j:{refRange:[0,100],name:"J"},m:{refRange:[0,105],name:"Colorfulness"},h:{refRange:[0,360],type:"angle",name:"Hue"}},base:a,fromBase(e){const t=Vt(e,ht);return[t.J,t.M,t.h]},toBase(e){return mt({J:e[0],M:e[1],h:e[2]},ht)}}),It=r.D65,Lt=216/24389,bt=24389/27;function so(e){const t=e>Lt?Math.cbrt(e):(bt*e+16)/116;return 116*t-16}function yt(e){return e>8?((e+16)/116)**3:e/bt}function js(e,t){let[i,a,n]=e,o=[],s=0;if(n===0)return[0,0,0];let r=yt(n);n>0?s=.00379058511492914*n**2+.608983189401032*n+.9155088574762233:s=9514440756550361e-21*n**2+.08693057439788597*n-21.928975842194614;const d=2e-12,u=15;let c=0,l=1/0;for(;c<=u;){o=mt({J:s,C:a,h:i},t);const e=Math.abs(o[1]-r);if(e<l){if(e<=d)return o;l=e}s=s-(o[1]-r)*s/(2*o[1]),c+=1}return mt({J:s,C:a,h:i},t)}function lo(e){const n=so(e[1]);if(n===0)return[0,0,0];const s=Vt(e,se);return[f(s.h),s.C,n]}se=Ut(It,200/Math.PI*yt(50),yt(50)*100,"average",!1),S=new e({id:"hct",name:"HCT",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},c:{refRange:[0,145],name:"Colorfulness"},t:{refRange:[0,100],name:"Tone"}},base:a,fromBase(e){return lo(e)},toBase(e){return js(e,se)},formats:{color:{id:"--hct",coords:["<number> | <angle>","<percentage> | <number>","<percentage> | <number>"]}}}),Ct=Math.PI/180,ge=[1,.007,.0228];function kt(e){e[1]<0&&(e=S.fromBase(S.toBase(e)));const t=Math.log(Math.max(1+ge[2]*e[1]*se.flRoot,1))/ge[2],n=e[0]*Ct,s=t*Math.cos(n),o=t*Math.sin(n);return[e[2],s,o]}function ro(e,n){[e,n]=t([e,n]);let[s,o,i]=kt(S.from(e)),[a,r,c]=kt(S.from(n));return((s-a)**2+(o-r)**2+(i-c)**2)**.5}C={deltaE76:Ys,deltaECMC:co,deltaE2000:Ft,deltaEJz:Bs,deltaEITP:Hs,deltaEOK:Je,deltaEHCT:ro};function ao(e){const t=e?Math.floor(Math.log10(e<0?-e:e)):0;return Math.max(parseFloat(`1e${t-2}`),1e-6)}pe={hct:{method:"hct.c",jnd:2,deltaEMethod:"hct",blackWhiteClamp:{}},"hct-tonal":{method:"hct.c",jnd:0,deltaEMethod:"hct",blackWhiteClamp:{channel:"hct.t",min:0,max:100}}};function v(s,{method:o=u.gamut_mapping,space:i=0[0],deltaEMethod:a="",jnd:c=2,blackWhiteClamp:l={}}={}){if(s=t(s),W(arguments[1])?i=arguments[1]:i||(i=s.space),i=e.get(i),O(s,i,{epsilon:0}))return s;let d;if(o==="css")d=oo(s,{space:i});else{if(o!=="clip"&&!O(s,i)){Object.prototype.hasOwnProperty.call(pe,o)&&({method:o,jnd:c,deltaEMethod:a,blackWhiteClamp:l}=pe[o]);let t=Ft;if(a!=="")for(let e in C)if("deltae"+a.toLowerCase()===e.toLowerCase()){t=C[e];break}let u=v(n(s,i),{method:"clip",space:i});if(t(s,u)>c){if(Object.keys(l).length===3){let o=e.resolveCoord(l.channel),t=h(n(s,o.space),o.id);if(b(t)&&(t=0),t>=l.max)return n({space:"xyz-d65",coords:r.D65},s.space);if(t<=l.min)return n({space:"xyz-d65",coords:[0,0,0]},s.space)}let u=e.resolveCoord(o),y=u.space,m=u.id,a=n(s,y);a.coords.forEach((e,t)=>{b(e)&&(a.coords[t]=0)});let _=u.range||u.refRange,w=_[0],j=ao(c),f=w,g=h(a,m);for(;g-f>j;){let e=A(a);e=v(e,{space:i,method:"clip"});let n=t(a,e);n-c<j?f=h(a,m):g=h(a,m),p(a,m,(f+g)/2)}d=n(a,i)}else d=u}else d=n(s,i);if(o==="clip"||!O(d,i,{epsilon:0})){let e=Object.values(i.coords).map(e=>e.range||[]);d.coords=d.coords.map((t,n)=>{let[s,o]=e[n];return s!==0[0]&&(t=Math.max(s,t)),o!==0[0]&&(t=Math.min(t,o)),t})}}return i!==s.space&&(d=n(d,s.space)),s.coords=d.coords,s}v.returns="color",_t={WHITE:{space:x,coords:[1,0,0]},BLACK:{space:x,coords:[0,0,0]}};function oo(s,{space:o}={}){const d=.02,h=1e-4;s=t(s),o||(o=s.space),o=e.get(o);const g=e.get("oklch");if(o.isUnbounded)return n(s,o);const a=n(s,g);let m=a.coords[0];if(m>=1){const e=n(_t.WHITE,o);return e.alpha=s.alpha,n(e,o)}if(m<=0){const e=n(_t.BLACK,o);return e.alpha=s.alpha,n(e,o)}if(O(a,o,{epsilon:0}))return n(a,o);function f(e){const t=n(e,o),s=Object.values(o.coords);return t.coords=t.coords.map((e,t)=>{if("range"in s[t]){const[n,o]=s[t].range;return Jn(n,e,o)}return e}),t}let c=0,u=a.coords[1],p=!0,i=A(a),r=f(i),l=Je(r,i);if(l<d)return r;for(;u-c>h;){const e=(c+u)/2;if(i.coords[1]=e,p&&O(i,o,{epsilon:0}))c=e;else if(r=f(i),l=Je(r,i),l<d){if(d-l<h)break;p=!1,c=e}else u=e}return r}function n(n,s,{inGamut:o}={}){n=t(n),s=e.get(s);let a=s.from(n),i={space:s,coords:a,alpha:n.alpha};return o&&(i=v(i,o===!0?0[0]:o)),i}n.returns="color";function G(n,{precision:s=u.precision,format:o="default",inGamut:i=!0,...a}={}){let c;n=t(n);let l=o;o=n.space.getFormat(o)??n.space.getFormat("default")??e.DEFAULT_FORMAT;let r=n.coords.slice();if(i||=o.toGamut,i&&!O(n)&&(r=v(A(n),i===!0?0[0]:i).coords),o.type==="custom")if(a.precision=s,o.serialize)c=o.serialize(r,n.alpha,a);else throw new TypeError(`format ${l} can only be used to parse colors, not for serialization`);else{let t=o.name||"color";o.serializeCoords?r=o.serializeCoords(r,s):s!==null&&(r=r.map(e=>ee(e,{precision:s})));let i=[...r];if(t==="color"){let e=o.id||o.ids?.[0]||n.space.id;i.unshift(e)}let e=n.alpha;s!==null&&(e=ee(e,{precision:s}));let a=n.alpha>=1||o.noAlpha?"":`${o.commas?",":" /"} ${e}`;c=`${t}(${i.join(o.commas?", ":" ")}${a})`}return c}if(Rt=[[.6369580483012914,.14461690358620832,.1688809751641721],[.2627002120112671,.6779980715188708,.05930171646986196],[0,.028072693049087428,1.060985057710791]],Pt=[[1.716651187971268,-.355670783776392,-.25336628137366],[-.666684351832489,1.616481236634939,.0157685458139111],[.017639857445311,-.042770613257809,.942103121235474]],q=new c({id:"rec2020-linear",cssId:"--rec2020-linear",name:"Linear REC.2020",white:"D65",toXYZ_M:Rt,fromXYZ_M:Pt}),V=1.09929682680944,pt=.018053968510807,ft=new c({id:"rec2020",name:"REC.2020",base:q,toBase(e){return e.map(function(e){return e<pt*4.5?e/4.5:((e+V-1)/V)**(1/.45)})},fromBase(e){return e.map(function(e){return e>=pt?V*e**.45-(V-1):4.5*e})}}),$t=[[.4865709486482162,.26566769316909306,.1982172852343625],[.2289745640697488,.6917385218365064,.079286914093745],[0,.04511338185890264,1.043944368900976]],Wt=[[2.493496911941425,-.9313836179191239,-.40271078445071684],[-.8294889695615747,1.7626640603183463,.023624685841943577],[.03584583024378447,-.07617238926804182,.9568845240076872]],ut=new c({id:"p3-linear",cssId:"--display-p3-linear",name:"Linear P3",white:"D65",toXYZ_M:$t,fromXYZ_M:Wt}),Kt=[[.41239079926595934,.357584339383878,.1804807884018343],[.21263900587151027,.715168678767756,.07219231536073371],[.01933081871559182,.11919477979462598,.9505321522496607]],o=[[3.2409699419045226,-1.537383177570094,-.4986107602930034],[-.9692436362808796,1.8759675015077202,.04155505740717559],[.05563007969699366,-.20397695888897652,1.0569715142428786]],dt=new c({id:"srgb-linear",name:"Linear sRGB",white:"D65",toXYZ_M:Kt,fromXYZ_M:o}),lt={aliceblue:[240/255,248/255,1],antiquewhite:[250/255,235/255,215/255],aqua:[0,1,1],aquamarine:[127/255,1,212/255],azure:[240/255,1,1],beige:[245/255,245/255,220/255],bisque:[1,228/255,196/255],black:[0,0,0],blanchedalmond:[1,235/255,205/255],blue:[0,0,1],blueviolet:[138/255,43/255,226/255],brown:[165/255,42/255,42/255],burlywood:[222/255,184/255,135/255],cadetblue:[95/255,158/255,160/255],chartreuse:[127/255,1,0],chocolate:[210/255,105/255,30/255],coral:[1,127/255,80/255],cornflowerblue:[100/255,149/255,237/255],cornsilk:[1,248/255,220/255],crimson:[220/255,20/255,60/255],cyan:[0,1,1],darkblue:[0,0,139/255],darkcyan:[0,139/255,139/255],darkgoldenrod:[184/255,134/255,11/255],darkgray:[169/255,169/255,169/255],darkgreen:[0,100/255,0],darkgrey:[169/255,169/255,169/255],darkkhaki:[189/255,183/255,107/255],darkmagenta:[139/255,0,139/255],darkolivegreen:[85/255,107/255,47/255],darkorange:[1,140/255,0],darkorchid:[153/255,50/255,204/255],darkred:[139/255,0,0],darksalmon:[233/255,150/255,122/255],darkseagreen:[143/255,188/255,143/255],darkslateblue:[72/255,61/255,139/255],darkslategray:[47/255,79/255,79/255],darkslategrey:[47/255,79/255,79/255],darkturquoise:[0,206/255,209/255],darkviolet:[148/255,0,211/255],deeppink:[1,20/255,147/255],deepskyblue:[0,191/255,1],dimgray:[105/255,105/255,105/255],dimgrey:[105/255,105/255,105/255],dodgerblue:[30/255,144/255,1],firebrick:[178/255,34/255,34/255],floralwhite:[1,250/255,240/255],forestgreen:[34/255,139/255,34/255],fuchsia:[1,0,1],gainsboro:[220/255,220/255,220/255],ghostwhite:[248/255,248/255,1],gold:[1,215/255,0],goldenrod:[218/255,165/255,32/255],gray:[128/255,128/255,128/255],green:[0,128/255,0],greenyellow:[173/255,1,47/255],grey:[128/255,128/255,128/255],honeydew:[240/255,1,240/255],hotpink:[1,105/255,180/255],indianred:[205/255,92/255,92/255],indigo:[75/255,0,130/255],ivory:[1,1,240/255],khaki:[240/255,230/255,140/255],lavender:[230/255,230/255,250/255],lavenderblush:[1,240/255,245/255],lawngreen:[124/255,252/255,0],lemonchiffon:[1,250/255,205/255],lightblue:[173/255,216/255,230/255],lightcoral:[240/255,128/255,128/255],lightcyan:[224/255,1,1],lightgoldenrodyellow:[250/255,250/255,210/255],lightgray:[211/255,211/255,211/255],lightgreen:[144/255,238/255,144/255],lightgrey:[211/255,211/255,211/255],lightpink:[1,182/255,193/255],lightsalmon:[1,160/255,122/255],lightseagreen:[32/255,178/255,170/255],lightskyblue:[135/255,206/255,250/255],lightslategray:[119/255,136/255,153/255],lightslategrey:[119/255,136/255,153/255],lightsteelblue:[176/255,196/255,222/255],lightyellow:[1,1,224/255],lime:[0,1,0],limegreen:[50/255,205/255,50/255],linen:[250/255,240/255,230/255],magenta:[1,0,1],maroon:[128/255,0,0],mediumaquamarine:[102/255,205/255,170/255],mediumblue:[0,0,205/255],mediumorchid:[186/255,85/255,211/255],mediumpurple:[147/255,112/255,219/255],mediumseagreen:[60/255,179/255,113/255],mediumslateblue:[123/255,104/255,238/255],mediumspringgreen:[0,250/255,154/255],mediumturquoise:[72/255,209/255,204/255],mediumvioletred:[199/255,21/255,133/255],midnightblue:[25/255,25/255,112/255],mintcream:[245/255,1,250/255],mistyrose:[1,228/255,225/255],moccasin:[1,228/255,181/255],navajowhite:[1,222/255,173/255],navy:[0,0,128/255],oldlace:[253/255,245/255,230/255],olive:[128/255,128/255,0],olivedrab:[107/255,142/255,35/255],orange:[1,165/255,0],orangered:[1,69/255,0],orchid:[218/255,112/255,214/255],palegoldenrod:[238/255,232/255,170/255],palegreen:[152/255,251/255,152/255],paleturquoise:[175/255,238/255,238/255],palevioletred:[219/255,112/255,147/255],papayawhip:[1,239/255,213/255],peachpuff:[1,218/255,185/255],peru:[205/255,133/255,63/255],pink:[1,192/255,203/255],plum:[221/255,160/255,221/255],powderblue:[176/255,224/255,230/255],purple:[128/255,0,128/255],rebeccapurple:[102/255,51/255,153/255],red:[1,0,0],rosybrown:[188/255,143/255,143/255],royalblue:[65/255,105/255,225/255],saddlebrown:[139/255,69/255,19/255],salmon:[250/255,128/255,114/255],sandybrown:[244/255,164/255,96/255],seagreen:[46/255,139/255,87/255],seashell:[1,245/255,238/255],sienna:[160/255,82/255,45/255],silver:[192/255,192/255,192/255],skyblue:[135/255,206/255,235/255],slateblue:[106/255,90/255,205/255],slategray:[112/255,128/255,144/255],slategrey:[112/255,128/255,144/255],snow:[1,250/255,250/255],springgreen:[0,1,127/255],steelblue:[70/255,130/255,180/255],tan:[210/255,180/255,140/255],teal:[0,128/255,128/255],thistle:[216/255,191/255,216/255],tomato:[1,99/255,71/255],turquoise:[64/255,224/255,208/255],violet:[238/255,130/255,238/255],wheat:[245/255,222/255,179/255],white:[1,1,1],whitesmoke:[245/255,245/255,245/255],yellow:[1,1,0],yellowgreen:[154/255,205/255,50/255]},ct=Array(3).fill("<percentage> | <number>[0, 255]"),rt=Array(3).fill("<number>[0, 255]"),E=new c({id:"srgb",name:"sRGB",base:dt,fromBase:e=>e.map(e=>{let t=e<0?-1:1,n=e*t;return n>.0031308?t*(1.055*n**(1/2.4)-.055):12.92*e}),toBase:e=>e.map(e=>{let t=e<0?-1:1,n=e*t;return n<=.04045?e/12.92:t*((n+.055)/1.055)**2.4}),formats:{rgb:{coords:ct},rgb_number:{name:"rgb",commas:!0,coords:rt,noAlpha:!0},color:{},rgba:{coords:ct,commas:!0,lastAlpha:!0},rgba_number:{name:"rgba",commas:!0,coords:rt},hex:{type:"custom",toGamut:!0,test:e=>/^#([a-f0-9]{3,4}){1,2}$/i.test(e),parse(e){e.length<=5&&(e=e.replace(/[a-f0-9]/gi,"$&$&"));let t=[];return e.replace(/[a-f0-9]{2}/gi,e=>{t.push(parseInt(e,16)/255)}),{spaceId:"srgb",coords:t.slice(0,3),alpha:t.slice(3)[0]}},serialize:(e,t,{collapse:n=!0}={})=>{t<1&&e.push(t),e=e.map(e=>Math.round(e*255));let s=n&&e.every(e=>e%17===0),o=e.map(e=>s?(e/17).toString(16):e.toString(16).padStart(2,"0")).join("");return"#"+o}},keyword:{type:"custom",test:e=>/^[a-z]+$/i.test(e),parse(e){e=e.toLowerCase();let t={spaceId:"srgb",coords:null,alpha:1};if(e==="transparent"?(t.coords=lt.black,t.alpha=0):t.coords=lt[e],t.coords)return t}}}}),ot=new c({id:"p3",cssId:"display-p3",name:"P3",base:ut,fromBase:E.fromBase,toBase:E.toBase}),u.display_space=E,typeof CSS!="undefined"&&CSS.supports)for(let e of[d,ft,ot]){let t=e.getMinCoords(),n={space:e,coords:t,alpha:1},s=G(n);if(CSS.supports("color",s)){u.display_space=e;break}}function Qs(e,{space:t=u.display_space,...s}={}){let o=G(e,s);if(typeof CSS=="undefined"||CSS.supports("color",o)||!u.display_space)o=new String(o),o.color=e;else{let a=e,r=e.coords.some(b)||b(e.alpha);if(r&&!(Zs??=CSS.supports("color","hsl(none 50% 50%)"))&&(a=A(e),a.coords=a.coords.map(i),a.alpha=i(a.alpha),o=G(a,s),CSS.supports("color",o)))return o=new String(o),o.color=a,o;a=n(a,t),o=new String(G(a,s)),o.color=a}return o}function Xs(e,n){return e=t(e),n=t(n),e.space===n.space&&e.alpha===n.alpha&&e.coords.every((e,t)=>e===n.coords[t])}function j(e){return h(e,[a,"y"])}function on(e,t){p(e,[a,"y"],t)}function Gs(e){Object.defineProperty(e.prototype,"luminance",{get(){return j(this)},set(e){on(this,e)}})}rn=Object.freeze({__proto__:null,getLuminance:j,register:Gs,setLuminance:on});function qs(e,n){e=t(e),n=t(n);let s=Math.max(j(e),0),o=Math.max(j(n),0);return o>s&&([s,o]=[o,s]),(s+.05)/(o+.05)}ln=.56,dn=.57,un=.62,wt=.65,nt=.022,fn=1.414,pn=.1,gn=5e-4,vn=1.14,tt=.027,jn=1.14;function yn(e){return e>=nt?e:e+(nt-e)**fn}function T(e){let t=e<0?-1:1,n=e<0?-e:e;return t*n**2.4}function Us(e,s){s=t(s),e=t(e);let i,o,a,r,c,l;s=n(s,"srgb"),[r,c,l]=s.coords;let h=T(r)*.2126729+T(c)*.7151522+T(l)*.072175;e=n(e,"srgb"),[r,c,l]=e.coords;let m=T(r)*.2126729+T(c)*.7151522+T(l)*.072175,d=yn(h),u=yn(m),f=u>d;return Math.abs(u-d)<gn?o=0:f?(i=u**ln-d**dn,o=i*vn):(i=u**wt-d**un,o=i*jn),(o<0?-o:o)<pn?a=0:o>0?a=o-tt:a=o+tt,a*100}function $s(e,n){e=t(e),n=t(n);let s=Math.max(j(e),0),o=Math.max(j(n),0);o>s&&([s,o]=[o,s]);let i=s+o;return i===0?0:(s-o)/i}xn=5e4;function io(e,n){e=t(e),n=t(n);let o=Math.max(j(e),0),s=Math.max(j(n),0);return s>o&&([o,s]=[s,o]),s===0?xn:(o-s)/s}function bs(e,n){e=t(e),n=t(n);let s=h(e,[d,"l"]),o=h(n,[d,"l"]);return Math.abs(s-o)}kn=216/24389,Xe=24/116,P=24389/27,te=r.D65,ne=new e({id:"lab-d65",name:"Lab D65",coords:{l:{refRange:[0,100],name:"Lightness"},a:{refRange:[-125,125]},b:{refRange:[-125,125]}},white:te,base:a,fromBase(e){let n=e.map((e,t)=>e/te[t]),t=n.map(e=>e>kn?Math.cbrt(e):(P*e+16)/116);return[116*t[1]-16,500*(t[0]-t[1]),200*(t[1]-t[2])]},toBase(e){let t=[];t[1]=(e[0]+16)/116,t[0]=e[1]/500+t[1],t[2]=t[1]-e[2]/200;let n=[t[0]>Xe?t[0]**3:(116*t[0]-16)/P,e[0]>8?((e[0]+16)/116)**3:e[0]/P,t[2]>Xe?t[2]**3:(116*t[2]-16)/P];return n.map((e,t)=>e*te[t])},formats:{"lab-d65":{coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}}),J=5**.5*.5+.5;function Is(e,n){e=t(e),n=t(n);let o=h(e,[ne,"l"]),i=h(n,[ne,"l"]),a=Math.abs(o**J-i**J),s=a**(1/J)*Math.SQRT2-40;return s<7.5?0:s}B=Object.freeze({__proto__:null,contrastAPCA:Us,contrastDeltaPhi:Is,contrastLstar:bs,contrastMichelson:$s,contrastWCAG21:qs,contrastWeber:io});function Ps(e,n,s={}){W(s)&&(s={algorithm:s});let{algorithm:o,...i}=s;if(!o){let e=Object.keys(B).map(e=>e.replace(/^contrast/,"")).join(", ");throw new TypeError(`contrast() function needs a contrast algorithm. Please specify one of: ${e}`)}e=t(e),n=t(n);for(let t in B)if("contrast"+o.toLowerCase()===t.toLowerCase())return B[t](e,n,i);throw new TypeError(`Unknown contrast algorithm: ${o}`)}function ae(e){let[t,n,o]=L(e,a),s=t+15*n+3*o;return[4*t/s,9*n/s]}function Rn(e){let[t,n,o]=L(e,a),s=t+n+o;return[t/s,n/s]}function Rs(e){Object.defineProperty(e.prototype,"uv",{get(){return ae(this)}}),Object.defineProperty(e.prototype,"xy",{get(){return Rn(this)}})}Hn=Object.freeze({__proto__:null,register:Rs,uv:ae,xy:Rn});function Y(e,t,n={}){W(n)&&(n={method:n});let{method:s=u.deltaE,...o}=n;for(let n in C)if("deltae"+s.toLowerCase()===n.toLowerCase())return C[n](e,t,o);throw new TypeError(`Unknown deltaE method: ${s}`)}function Ls(t,n=.25){let s=e.get("oklch","lch"),o=[s,"l"];return p(t,o,e=>e*(1+n))}function Ns(t,n=.25){let s=e.get("oklch","lch"),o=[s,"l"];return p(t,o,e=>e*(1-n))}$n=Object.freeze({__proto__:null,darken:Ns,lighten:Ls});function Wn(e,n,s=.5,o={}){[e,n]=[t(e),t(n)],y(s)==="object"&&([s,o]=[.5,s]);let i=R(e,n,o);return i(s)}function Un(e,n,s={}){let i;Ye(e)&&([i,s]=[e,n],[e,n]=i.rangeArgs.colors);let{maxDeltaE:r,deltaEMethod:d,steps:l=2,maxSteps:c=1e3,...u}=s;i||([e,n]=[t(e),t(n)],i=R(e,n,u));let h=Y(e,n),a=r>0?Math.max(l,Math.ceil(h/r)+1):l,o=[];if(c!==0[0]&&(a=Math.min(a,c)),a===1)o=[{p:.5,color:i(.5)}];else{let e=1/(a-1);o=Array.from({length:a},(t,n)=>{let s=n*e;return{p:s,color:i(s)}})}if(r>0){let e=o.reduce((e,t,n)=>{if(n===0)return 0;let s=Y(t.color,o[n-1].color,d);return Math.max(e,s)},0);for(;e>r;){e=0;for(let t=1;t<o.length&&o.length<c;t++){let s=o[t-1],a=o[t],n=(a.p+s.p)/2,r=i(n);e=Math.max(e,Y(r,s.color),Y(r,a.color)),o.splice(t,0,{p:n,color:i(n)}),t++}}}return o=o.map(e=>e.color),o}function R(s,o,i={}){if(Ye(s)){let[e,t]=[s,o];return R(...e.rangeArgs.colors,{...e.rangeArgs.options,...t})}let{space:a,outputSpace:r,progression:c,premultiplied:l}=i;s=t(s),o=t(o),s=A(s),o=A(o);let d={colors:[s,o],options:i};if(a?a=e.get(a):a=e.registry[u.interpolationSpace]||s.space,r=r?e.get(r):a,s=n(s,a),o=n(o,a),s=v(s),o=v(o),a.coords.h&&a.coords.h.type==="angle"){let r=i.hue=i.hue||"shorter",n=[a,"h"],[e,t]=[h(s,n),h(o,n)];isNaN(e)&&!isNaN(t)?e=t:isNaN(t)&&!isNaN(e)&&(t=e),[e,t]=no(r,[e,t]),p(s,n,e),p(o,n,t)}return l&&(s.coords=s.coords.map(e=>e*s.alpha),o.coords=o.coords.map(e=>e*o.alpha)),Object.assign(e=>{e=c?c(e):e;let d=s.coords.map((t,n)=>{let s=o.coords[n];return z(t,s,e)}),i=z(s.alpha,o.alpha,e),t={space:a,coords:d,alpha:i};return l&&(t.coords=t.coords.map(e=>e/i)),r!==a&&(t=n(t,r)),t},{rangeArgs:d})}function Ye(e){return y(e)==="function"&&!!e.rangeArgs}u.interpolationSpace="lab";function zs(e){e.defineFunction("mix",Wn,{returns:"color"}),e.defineFunction("range",R,{returns:"function<color>"}),e.defineFunction("steps",Un,{returns:"array<color>"})}var In,Ln,r,u,g,Tn,Sn,e,a,c,he,qt,gt,d,M,St,xt,ns,Jt,x,$,X,vt,D,jt,w,ds,nn,be,st,N,H,Z,je,Mt,_e,we,Oe,Yt,Ce,I,ue,cn,_n,wn,Cn,Te,de,Ne,Le,Re,Pe,zn,Pn,Be,Bn,es,Ot,rs,re,An,Qe,Ze,Q,et,bn,mn,hn,_,Zt,at,ht,Bt,It,Lt,bt,se,S,Ct,ge,C,pe,_t,Rt,Pt,V,Xt,Gt,xe,K,oe,U,q,pt,ft,$t,Wt,ut,Kt,o,dt,lt,ct,rt,E,ot,Zs,rn,ln,dn,un,wt,nt,fn,pn,gn,vn,tt,jn,xn,kn,Xe,P,te,ne,B,J,Hn,$n,Dt,Gn,Vn,Ve,Ie,Nn,Dn,He,De,ze,Fe,On,Me,Se,Ae,me,an,Ee,zt,ye,l,Et,mo,Ts=Object.freeze({__proto__:null,isRange:Ye,mix:Wn,range:R,register:zs,steps:Un}),Xn=new e({id:"hsl",name:"HSL",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},l:{range:[0,100],name:"Lightness"}},base:E,fromBase:e=>{let o=Math.max(...e),l=Math.min(...e),[c,i,a]=e,[t,s,n]=[NaN,0,(l+o)/2],r=o-l;if(r!==0){switch(s=n===0||n===1?0:(o-n)/Math.min(n,1-n),o){case c:t=(i-a)/r+(i<a?6:0);break;case i:t=(a-c)/r+2;break;case a:t=(c-i)/r+4}t=t*60}return s<0&&(t+=180,s=s<0?-s:s),t>=360&&(t-=360),[t,s*100,n*100]},toBase:e=>{let[t,o,n]=e;t=t%360,t<0&&(t+=360),o/=100,n/=100;function s(e){let s=(e+t/30)%12,i=o*Math.min(n,1-n);return n-i*Math.max(-1,Math.min(s-3,9-s,1))}return[s(0),s(8),s(4)]},formats:{hsl:{coords:["<number> | <angle>","<percentage>","<percentage>"]},hsla:{coords:["<number> | <angle>","<percentage>","<percentage>"],commas:!0,lastAlpha:!0}}}),Qn=new e({id:"hsv",name:"HSV",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},v:{range:[0,100],name:"Value"}},base:Xn,fromBase(e){let[o,s,t]=e;s/=100,t/=100;let n=t+s*Math.min(t,1-t);return[o,n===0?0:200*(1-t/n),100*n]},toBase(e){let[o,s,n]=e;s/=100,n/=100;let t=n*(1-s/2);return[o,t===0||t===1?0:(n-t)/Math.min(t,1-t)*100,t*100]},formats:{color:{id:"--hsv",coords:["<number> | <angle>","<percentage> | <number>","<percentage> | <number>"]}}}),Fs=new e({id:"hwb",name:"HWB",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},w:{range:[0,100],name:"Whiteness"},b:{range:[0,100],name:"Blackness"}},base:Qn,fromBase(e){let[n,s,t]=e;return[n,t*(100-s)/100,100-t]},toBase(e){let[o,t,n]=e;t/=100,n/=100;let i=t+n;if(i>=1){let e=t/i;return[o,0,e*100]}let s=1-n,a=s===0?0:1-t/s;return[o,a*100,s*100]},formats:{hwb:{coords:["<number> | <angle>","<percentage> | <number>","<percentage> | <number>"]}}}),Ms=[[.5766690429101305,.1855582379065463,.1882286462349947],[.29734497525053605,.6273635662554661,.07529145849399788],[.02703136138641234,.07068885253582723,.9913375368376388]],Ss=[[2.0415879038107465,-.5650069742788596,-.34473135077832956],[-.9692436362808795,1.8759675015077202,.04155505740717557],[.013444280632031142,-.11836239223101838,1.0151749943912054]],ts=new c({id:"a98rgb-linear",cssId:"--a98-rgb-linear",name:"Linear Adobe\xAE 98 RGB compatible",white:"D65",toXYZ_M:Ms,fromXYZ_M:Ss}),As=new c({id:"a98rgb",cssId:"a98-rgb",name:"Adobe\xAE 98 RGB compatible",base:ts,toBase:e=>e.map(e=>(e<0?-e:e)**(563/256)*Math.sign(e)),fromBase:e=>e.map(e=>(e<0?-e:e)**(256/563)*Math.sign(e))}),ks=[[.7977666449006423,.13518129740053308,.0313477341283922],[.2880748288194013,.711835234241873,8993693872564e-17],[0,0,.8251046025104602]],Es=[[1.3457868816471583,-.25557208737979464,-.05110186497554526],[-.5446307051249019,1.5082477428451468,.02052744743642139],[0,0,1.2119675456389452]],is=new c({id:"prophoto-linear",cssId:"--prophoto-rgb-linear",name:"Linear ProPhoto",white:"D50",base:he,toXYZ_M:ks,fromXYZ_M:Es}),Cs=1/512,xs=16/512,Os=new c({id:"prophoto",cssId:"prophoto-rgb",name:"ProPhoto",base:is,toBase(e){return e.map(e=>e<xs?e/16:e**1.8)},fromBase(e){return e.map(e=>e>=Cs?e**(1/1.8):16*e)}}),ws=new e({id:"oklch",name:"Oklch",coords:{l:{refRange:[0,1],name:"Lightness"},c:{refRange:[0,.4],name:"Chroma"},h:{refRange:[0,360],type:"angle",name:"Hue"}},white:"D65",base:x,fromBase(e){let[i,t,n]=e,s;const o=2e-4;return(t<0?-t:t)<o&&(n<0?-n:n)<o?s=NaN:s=Math.atan2(n,t)*180/Math.PI,[i,(t**2+n**2)**.5,f(s)]},toBase(e){let[i,o,t]=e,n,s;return isNaN(t)?(n=0,s=0):(n=o*Math.cos(t*Math.PI/180),s=o*Math.sin(t*Math.PI/180)),[i,n,s]},formats:{oklch:{coords:["<percentage> | <number>","<number> | <percentage>[0,1]","<number> | <angle>"]}}}),us=r.D65,_s=216/24389,ms=24389/27,[fs,ps]=ae({space:a,coords:us}),gs=new e({id:"luv",name:"Luv",coords:{l:{refRange:[0,100],name:"Lightness"},u:{refRange:[-215,215]},v:{refRange:[-215,215]}},white:us,base:a,fromBase(e){let s=[i(e[0]),i(e[1]),i(e[2])],t=s[1],[o,r]=ae({space:a,coords:s});if(!Number.isFinite(o)||!Number.isFinite(r))return[0,0,0];let n=t<=_s?ms*t:116*Math.cbrt(t)-16;return[n,13*n*(o-fs),13*n*(r-ps)]},toBase(e){let[t,n,s]=e;if(t===0||b(t))return[0,0,0];n=i(n),s=i(s);let r=n/(13*t)+fs,o=s/(13*t)+ps,a=t<=8?t/ms:((t+16)/116)**3;return[a*(9*r/(4*o)),a,a*((12-3*r-20*o)/(4*o))]},formats:{color:{id:"--luv",coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}}),qe=new e({id:"lchuv",name:"LChuv",coords:{l:{refRange:[0,100],name:"Lightness"},c:{refRange:[0,220],name:"Chroma"},h:{refRange:[0,360],type:"angle",name:"Hue"}},base:gs,fromBase(e){let[i,t,n]=e,s;const o=.02;return(t<0?-t:t)<o&&(n<0?-n:n)<o?s=NaN:s=Math.atan2(n,t)*180/Math.PI,[i,(t**2+n**2)**.5,f(s)]},toBase(e){let[s,t,n]=e;return t<0&&(t=0),isNaN(n)&&(n=0),[s,t*Math.cos(n*Math.PI/180),t*Math.sin(n*Math.PI/180)]},formats:{color:{id:"--lchuv",coords:["<number> | <percentage>","<number> | <percentage>","<number> | <angle>"]}}}),Ws=216/24389,Vs=24389/27,vs=o[0][0],hs=o[0][1],Ke=o[0][2],ls=o[1][0],cs=o[1][1],Ue=o[1][2],os=o[2][0],ss=o[2][1],We=o[2][2];function k(e,t,n){const s=t/(Math.sin(n)-e*Math.cos(n));return s<0?1/0:s}function fe(e){const i=(e+16)**3/1560896,t=i>Ws?i:e/Vs,a=t*(284517*vs-94839*Ke),r=t*(838422*Ke+769860*hs+731718*vs),n=t*(632260*Ke-126452*hs),c=t*(284517*ls-94839*Ue),l=t*(838422*Ue+769860*cs+731718*ls),s=t*(632260*Ue-126452*cs),d=t*(284517*os-94839*We),u=t*(838422*We+769860*ss+731718*os),o=t*(632260*We-126452*ss);return{r0s:a/n,r0i:r*e/n,r1s:a/(n+126452),r1i:(r-769860)*e/(n+126452),g0s:c/s,g0i:l*e/s,g1s:c/(s+126452),g1i:(l-769860)*e/(s+126452),b0s:d/o,b0i:u*e/o,b1s:d/(o+126452),b1i:(u-769860)*e/(o+126452)}}function Zn(e,t){const n=t/360*Math.PI*2,s=k(e.r0s,e.r0i,n),o=k(e.r1s,e.r1i,n),i=k(e.g0s,e.g0i,n),a=k(e.g1s,e.g1i,n),r=k(e.b0s,e.b0i,n),c=k(e.b1s,e.b1i,n);return Math.min(s,o,i,a,r,c)}Gn=new e({id:"hsluv",name:"HSLuv",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},l:{range:[0,100],name:"Lightness"}},base:qe,gamutSpace:E,fromBase(e){let[t,o,s]=[i(e[0]),i(e[1]),i(e[2])],n;if(t>99.9999999)n=0,t=100;else if(t<1e-8)n=0,t=0;else{let e=fe(t),i=Zn(e,s);n=o/i*100}return[s,n,t]},toBase(e){let[s,o,t]=[i(e[0]),i(e[1]),i(e[2])],n;if(t>99.9999999)t=100,n=0;else if(t<1e-8)t=0,n=0;else{let e=fe(t),i=Zn(e,s);n=i/100*o}return[t,n,s]},formats:{color:{id:"--hsluv",coords:["<number> | <angle>","<percentage> | <number>","<percentage> | <number>"]}}}),o[0][0],o[0][1],o[0][2],o[1][0],o[1][1],o[1][2],o[2][0],o[2][1],o[2][2];function F(e,t){return(t<0?-t:t)/(e**2+1)**.5}function qn(e){let t=F(e.r0s,e.r0i),n=F(e.r1s,e.r1i),s=F(e.g0s,e.g0i),o=F(e.g1s,e.g1i),i=F(e.b0s,e.b0i),a=F(e.b1s,e.b1i);return Math.min(t,n,s,o,i,a)}Vn=new e({id:"hpluv",name:"HPLuv",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},l:{range:[0,100],name:"Lightness"}},base:qe,gamutSpace:"self",fromBase(e){let[t,s,o]=[i(e[0]),i(e[1]),i(e[2])],n;if(t>99.9999999)n=0,t=100;else if(t<1e-8)n=0,t=0;else{let e=fe(t),o=qn(e);n=s/o*100}return[o,n,t]},toBase(e){let[s,o,t]=[i(e[0]),i(e[1]),i(e[2])],n;if(t>99.9999999)t=100,n=0;else if(t<1e-8)t=0,n=0;else{let e=fe(t),s=qn(e);n=s/100*o}return[t,n,s]},formats:{color:{id:"--hpluv",coords:["<number> | <angle>","<percentage> | <number>","<percentage> | <number>"]}}}),Ve=203,Ie=2610/2**14,Nn=2**14/2610,Dn=2523/2**5,He=2**5/2523,De=3424/2**12,ze=2413/2**7,Fe=2392/2**7,On=new c({id:"rec2100pq",cssId:"rec2100-pq",name:"REC.2100-PQ",base:q,toBase(e){return e.map(function(e){let t=(Math.max(e**He-De,0)/(ze-Fe*e**He))**Nn;return t*1e4/Ve})},fromBase(e){return e.map(function(e){let t=Math.max(e*Ve/1e4,0),n=De+ze*t**Ie,s=1+Fe*t**Ie;return(n/s)**Dn})}}),Me=.17883277,Se=.28466892,Ae=.55991073,me=3.7743,an=new c({id:"rec2100hlg",cssId:"rec2100-hlg",name:"REC.2100-HLG",referred:"scene",base:q,toBase(e){return e.map(function(e){return e<=.5?e**2/3*me:(Math.exp((e-Ae)/Me)+Se)/12*me})},fromBase(e){return e.map(function(e){return e/=me,e<=1/12?(3*e)**.5:Me*Math.log(12*e-Se)+Ae})}}),Ee={},g.add("chromatic-adaptation-start",e=>{e.options.method&&(e.M=en(e.W1,e.W2,e.options.method))}),g.add("chromatic-adaptation-end",e=>{e.M||(e.M=en(e.W1,e.W2,e.options.method))});function le({id:e,toCone_M:t,fromCone_M:n}){Ee[e]=arguments[0]}function en(e,t,n="Bradford"){let o=Ee[n],[i,a,r]=s(o.toCone_M,e),[c,l,d]=s(o.toCone_M,t),u=[[c/i,0,0],[0,l/a,0],[0,0,d/r]],h=s(u,o.toCone_M),m=s(o.fromCone_M,h);return m}le({id:"von Kries",toCone_M:[[.40024,.7076,-.08081],[-.2263,1.16532,.0457],[0,0,.91822]],fromCone_M:[[1.8599363874558397,-1.1293816185800916,.21989740959619328],[.3611914362417676,.6388124632850422,-6370596838649899e-21],[0,0,1.0890636230968613]]}),le({id:"Bradford",toCone_M:[[.8951,.2664,-.1614],[-.7502,1.7135,.0367],[.0389,-.0685,1.0296]],fromCone_M:[[.9869929054667121,-.14705425642099013,.15996265166373122],[.4323052697233945,.5183602715367774,.049291228212855594],[-.00852866457517732,.04004282165408486,.96848669578755]]}),le({id:"CAT02",toCone_M:[[.7328,.4296,-.1624],[-.7036,1.6975,.0061],[.003,.0136,.9834]],fromCone_M:[[1.0961238208355142,-.27886900021828726,.18274517938277307],[.4543690419753592,.4735331543074117,.07209780371722911],[-.009627608738429355,-.00569803121611342,1.0153256399545427]]}),le({id:"CAT16",toCone_M:[[.401288,.650173,-.051461],[-.250268,1.204414,.045854],[-.002079,.048952,.953127]],fromCone_M:[[1.862067855087233,-1.0112546305316845,.14918677544445172],[.3875265432361372,.6214474419314753,-.008973985167612521],[-.01584149884933386,-.03412293802851557,1.0499644368778496]]}),Object.assign(r,{A:[1.0985,1,.35585],C:[.98074,1,1.18232],D55:[.95682,1,.92149],D75:[.94972,1,1.22638],E:[1,1,1],F2:[.99186,1,.67393],F7:[.95041,1,1.08747],F11:[1.00962,1,.6435]}),r.ACES=[.32168/.33767,1,(1-.32168-.33767)/.33767],Xt=[[.6624541811085053,.13400420645643313,.1561876870049078],[.27222871678091454,.6740817658111484,.05368951740793705],[-.005574649490394108,.004060733528982826,1.0103391003129971]],Gt=[[1.6410233796943257,-.32480329418479,-.23642469523761225],[-.6636628587229829,1.6153315916573379,.016756347685530137],[.011721894328375376,-.008284441996237409,.9883948585390215]],xe=new c({id:"acescg",cssId:"--acescg",name:"ACEScg",coords:{r:{range:[0,65504],name:"Red"},g:{range:[0,65504],name:"Green"},b:{range:[0,65504],name:"Blue"}},referred:"scene",white:r.ACES,toXYZ_M:Xt,fromXYZ_M:Gt}),K=2**-16,oe=-.35828683,U=(Math.log2(65504)+9.72)/17.52,zt=new c({id:"acescc",cssId:"--acescc",name:"ACEScc",coords:{r:{range:[oe,U],name:"Red"},g:{range:[oe,U],name:"Green"},b:{range:[oe,U],name:"Blue"}},referred:"scene",base:xe,toBase(e){const t=(9.72-15)/17.52;return e.map(function(e){return e<=t?(2**(e*17.52-9.72)-K)*2:e<U?2**(e*17.52-9.72):65504})},fromBase(e){return e.map(function(e){return e<=0?(Math.log2(K)+9.72)/17.52:e<K?(Math.log2(K+e*.5)+9.72)/17.52:(Math.log2(e)+9.72)/17.52})}}),ye=Object.freeze({__proto__:null,A98RGB:As,A98RGB_Linear:ts,ACEScc:zt,ACEScg:xe,CAM16_JMh:Bt,HCT:S,HPLuv:Vn,HSL:Xn,HSLuv:Gn,HSV:Qn,HWB:Fs,ICTCP:re,JzCzHz:de,Jzazbz:Te,LCH:M,LCHuv:qe,Lab:d,Lab_D65:ne,Luv:gs,OKLCH:ws,OKLab:x,P3:ot,P3_Linear:ut,ProPhoto:Os,ProPhoto_Linear:is,REC_2020:ft,REC_2020_Linear:q,REC_2100_HLG:an,REC_2100_PQ:On,XYZ_ABS_D65:Z,XYZ_D50:he,XYZ_D65:a,sRGB:E,sRGB_Linear:dt}),l=class _Color{constructor(...i){let n;i.length===1&&(n=t(i[0]));let a,o,s;n?(a=n.space||n.spaceId,o=n.coords,s=n.alpha):[a,o,s]=i,Object.defineProperty(this,"space",{value:e.get(a),writable:!1,enumerable:!0,configurable:!0}),this.coords=o?o.slice():[0,0,0],this.alpha=s>1||s===0[0]?1:s<0?0:s;for(let e=0;e<this.coords.length;e++)this.coords[e]==="NaN"&&(this.coords[e]=NaN);for(let e in this.space.coords)Object.defineProperty(this,e,{get:()=>this.get(e),set:t=>this.set(e,t)})}get spaceId(){return this.space.id}clone(){return new _Color(this.space,this.coords,this.alpha)}toJSON(){return{spaceId:this.spaceId,coords:this.coords,alpha:this.alpha}}display(...t){let e=Qs(this,...t);return e.color=new _Color(e.color),e}static get(e,...t){return e instanceof _Color?e:new _Color(e,...t)}static defineFunction(e,t,n=t){let{instance:i=!0,returns:s}=n,o=function(...n){let e=t(...n);if(s==="color")e=_Color.get(e);else if(s==="function<color>"){let t=e;e=function(...e){let n=t(...e);return _Color.get(n)},Object.assign(e,t)}else s==="array<color>"&&(e=e.map(e=>_Color.get(e)));return e};e in _Color||(_Color[e]=o),i&&(_Color.prototype[e]=function(...e){return o(this,...e)})}static defineFunctions(e){for(let t in e)_Color.defineFunction(t,e[t],e[t])}static extend(e){if(e.register)e.register(_Color);else for(let t in e)_Color.defineFunction(t,e[t])}},l.defineFunctions({get:h,getAll:L,set:p,setAll:it,to:n,equals:Xs,inGamut:O,toGamut:v,distance:En,toString:G}),Object.assign(l,{util:In,hooks:g,WHITES:r,Space:e,spaces:e.registry,parse:Mn,defaults:u});for(let t of Object.keys(ye))e.register(ye[t]);for(let t in e.registry)ve(t,e.registry[t]);g.add("colorspace-init-end",e=>{ve(e.id,e),e.aliases?.forEach(t=>{ve(t,e)})});function ve(t,n){let s=t.replace(/-/g,"_");Object.defineProperty(l.prototype,s,{get(){let s=this.getAll(t);return typeof Proxy=="undefined"?s:new Proxy(s,{has:(t,s)=>{try{return e.resolveCoord([n,s]),!0}catch{}return Reflect.has(t,s)},get:(t,s,o)=>{if(s&&typeof s!="symbol"&&!(s in t)){let{index:o}=e.resolveCoord([n,s]);if(o>=0)return t[o]}return Reflect.get(t,s,o)},set:(s,o,i,a)=>{if(o&&typeof o!="symbol"&&!(o in s)||o>=0){let{index:a}=e.resolveCoord([n,o]);if(a>=0)return s[a]=i,this.setAll(t,s),!0}return Reflect.set(s,o,i,a)}})},set(e){this.setAll(t,e)},configurable:!0,enumerable:!0})}l.extend(C),l.extend({deltaE:Y}),Object.assign(l,{deltaEMethods:C}),l.extend($n),l.extend({contrast:Ps}),l.extend(Hn),l.extend(rn),l.extend(Ts),l.extend(B),Et=class _Uint16Image{height;width;data;static DEFAULT_COLORSPACE="rec2100-hlg";static SDR_MULTIPLIER=2**16-1;static COLORSPACES={"rec2100-hlg":"rec2100hlg","display-p3":"p3",srgb:"sRGB","rec2100-pq":"rec2100pq"};colorSpace;constructor(e,t,n){n==null?this.colorSpace=_Uint16Image.DEFAULT_COLORSPACE:this.colorSpace=n,this.height=t,this.width=e,this.data=new Uint16Array(t*e*4)}fill(e){if(e.length!=4)return;for(let t=0;t<this.data.length;t+=4)this.data[t]=e[0],this.data[t+1]=e[1],this.data[t+2]=e[2],this.data[t+3]=e[3];return this}getPixel(e,t){const n=(t*this.width+e)*4;return this.data.slice(n,n+4)}setPixel(e,t,n){const s=(t*this.width+e)*4;this.data[s+0]=n[0],this.data[s+1]=n[1],this.data[s+2]=n[2],this.data[s+3]=n[3]}static scaleUint8ToUint16(e){return e<<8|e}getImageData(){return this.data===0[0]||this.data===null?null:new ImageData(this.data,this.width,this.height,{colorSpace:this.colorSpace})}static convertPixelToRec2100_hlg(e){const s=_Uint16Image.COLORSPACES["rec2100-hlg"],o=new l("srgb",Array.from(e.slice(0,3)).map(e=>e/255),e[3]/255),t=o.to(s),n=t.coords.map(e=>Math.round(e*_Uint16Image.SDR_MULTIPLIER));return n.push(t.alpha*_Uint16Image.SDR_MULTIPLIER),Uint16Array.from(n)}static convertArrayToRec2100_hlg(e){const t=new Uint16Array(e.length);for(let n=0;n<e.length;n+=4){const s=e.slice(n,n+4),o=_Uint16Image.convertPixelToRec2100_hlg(s);t.set(o,n)}return t}pixelCallback(e){for(let t=0;t<this.data.length;t+=4)this.data.set(e(this.data[t],this.data[t+1],this.data[t+2],this.data[t+3]),t)}static async loadSDRImageData(e){return fetch(e).then(e=>e.blob()).then(e=>createImageBitmap(e)).then(e=>{const{width:n,height:s}=e,o=new OffscreenCanvas(n,s),t=o.getContext("2d");return t?.drawImage(e,0,0),t}).then(e=>e?.getImageData(0,0,e?.canvas.width,e?.canvas.height))}static fromImageData(e){const t=new _Uint16Image(e.width,e.height);if(e.colorSpace=="srgb")t.data=_Uint16Image.convertArrayToRec2100_hlg(e.data);else if(e.colorSpace==_Uint16Image.DEFAULT_COLORSPACE)t.data=e.data;else throw new Error(`ColorSpace ${e.colorSpace} isn't supported!`);return t}static async fromURL(e){return _Uint16Image.loadSDRImageData(e).then(e=>{if(e!==0[0])return _Uint16Image.fromImageData(e)})}setImageData(e){if(this.width=e.width,this.height=e.height,e.colorSpace=="srgb")this.data=_Uint16Image.convertArrayToRec2100_hlg(e.data);else if(e.colorSpace==_Uint16Image.DEFAULT_COLORSPACE)this.data=e.data;else throw new Error(`ColorSpace ${e.colorSpace} isn't supported!`);this.colorSpace=_Uint16Image.DEFAULT_COLORSPACE}clone(){const e=new _Uint16Image(this.width,this.height,this.colorSpace);return e.data=this.data.slice(),e}};function uo(){try{const e=screen.colorDepth/3,t=e>8,n=window.matchMedia("(dynamic-range: high)").matches,s=window.matchMedia("(color-gamut: rec2020)").matches||window.matchMedia("(color-gamut: p3)").matches;return!!(s&&n)&&e===Math.round(e)&&!!t}catch(e){return console.error("Bad window.screen test",e),!1}}function ho(){const e="rec2100-pq";try{const t=document.createElement("canvas");if(!t.getContext)return!1;const n=t.getContext("2d",{colorSpace:e,pixelFormat:"float16"});return n!==null}catch{return console.error("Bad canvas ColorSpace test - make sure that the Chromium browser flag 'enable-experimental-web-platform-features' has been enabled"),!1}}mo={colorSpace:Et.DEFAULT_COLORSPACE,pixelFormat:"float16"},window.checkHDR=uo,window.checkHDRCanvas=ho})(),(()=>{ba="180",q8=0,Hl=1,W8=2,Il=1,r6=2,fn=3,ot=0,B=1,Fe=2,Qe=0,rt=1,bo=2,wo=3,Oo=4,xo=5,Se=100,Vl=101,$l=102,T8=103,M8=104,Pn=200,ql=201,Jl=202,td=203,_a=204,wa=205,nd=206,ad=207,cd=208,ld=209,dd=210,c6=211,l6=212,d6=213,m6=214,Ma=0,Ta=1,za=2,ps=3,Da=4,Na=5,La=6,Ba=7,r8=0,tp=1,np=2,Ke=0,sp=1,lp=2,wp=3,Op=4,xp=5,Ap=6,Sp=7,Cd=300,Zt=301,Qt=302,Po=303,Ho=304,Cs=306,Es=1e3,$t=1001,js=1002,V=1003,Ed=1004,An=1005,ie=1006,Bo=1007,Be=1008,Y=1009,Fs=1010,Ns=1011,St=1012,ue=1013,I=1014,X=1015,ht=1016,Fc=1017,Mc=1018,dt=1020,Ac=35902,kc=35899,Sd=1021,sr=1022,G=1023,nt=1026,tt=1027,or=1028,Yo=1029,ur=1030,Go=1031,Fp=1032,Xo=1033,Xn=33776,Un=33777,qn=33778,Wn=33779,br=35840,jr=35841,_r=35842,ia=35843,ei=36196,ti=37492,oi=37496,ai=37808,ri=37809,ci=37810,li=37811,ui=37812,hi=37813,mi=37814,fi=37815,pi=37816,gi=37817,vi=37818,bi=37819,Oi=37820,xi=37821,Ci=36492,zd=36494,Dd=36495,Ei=36283,ki=36284,Si=36285,zi=36286,Tp=3200,zp=3201,Pd=0,Nm=1,$e="",lt="srgb",Rs="srgb-linear",Ni="linear",c="srgb",Gp=0,Ds=7680,Jp=7681,eg=7682,ng=7683,Ng=34055,g7=34056,nv=5386,pv=512,h9=513,cb=514,ub=515,fb=516,Cb=517,Hb=518,Xd=519,Qd=512,Jd=513,eu=514,Ic=515,ru=516,lu=517,du=518,uu=519,$c=35044,Ri=35048,Qh="300 es",Re=2e3,Os=2001,Pi={COMPUTE:"compute",RENDER:"render"},fs=class{addEventListener(e,t){this._listeners===0[0]&&(this._listeners={});const n=this._listeners;n[e]===0[0]&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){const n=this._listeners;return n!==0[0]&&n[e]!==0[0]&&n[e].indexOf(t)!==-1}removeEventListener(e,t){const s=this._listeners;if(s===0[0])return;const n=s[e];if(n!==0[0]){const e=n.indexOf(t);e!==-1&&n.splice(e,1)}}dispatchEvent(e){const t=this._listeners;if(t===0[0])return;const n=t[e.type];if(n!==0[0]){e.target=this;const t=n.slice(0);for(let n=0,s=t.length;n<s;n++)t[n].call(this,e);e.target=null}}},Ae=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],Gh=1234567,Ia=Math.PI/180,Ii=180/Math.PI;function is(){const e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0,s=Math.random()*4294967295|0,o=Ae[e&255]+Ae[e>>8&255]+Ae[e>>16&255]+Ae[e>>24&255]+"-"+Ae[t&255]+Ae[t>>8&255]+"-"+Ae[t>>16&15|64]+Ae[t>>24&255]+"-"+Ae[n&63|128]+Ae[n>>8&255]+"-"+Ae[n>>16&255]+Ae[n>>24&255]+Ae[s&255]+Ae[s>>8&255]+Ae[s>>16&255]+Ae[s>>24&255];return o.toLowerCase()}function M(e,t,n){return Math.max(t,Math.min(n,e))}function qh(e,t){return(e%t+t)%t}function sD(e,t,n,s,o){return s+(e-t)*(o-s)/(n-t)}function nD(e,t,n){return e!==t?(n-e)/(t-e):0}function Zc(e,t,n){return(1-n)*e+n*t}function Xz(e,t,n,s){return Zc(e,t,1-Math.exp(-n*s))}function Kz(e,t=1){return t-Math.abs(qh(e,t*2)-t)}function Wz(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t),e*e*(3-2*e))}function Vz(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t),e*e*e*(e*(e*6-15)+10))}function Bz(e,t){return e+Math.floor(Math.random()*(t-e+1))}function Iz(e,t){return e+Math.random()*(t-e)}function Hz(e){return e*(.5-Math.random())}function Pz(e){e!==0[0]&&(Gh=e);let t=Gh+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function Fz(e){return e*Ia}function Az(e){return e*Ii}function Oz(e){return(e&e-1)===0&&e!==0}function fz(e){return 2**Math.ceil(Math.log(e)/Math.LN2)}function dz(e){return 2**Math.floor(Math.log(e)/Math.LN2)}function lz(e,t,n,s,o){const l=Math.cos,d=Math.sin,i=l(n/2),a=d(n/2),r=l((t+s)/2),c=d((t+s)/2),u=l((t-s)/2),h=d((t-s)/2),m=l((s-t)/2),f=d((s-t)/2);switch(o){case"XYX":e.set(i*c,a*u,a*h,i*r);break;case"YZY":e.set(a*h,i*c,a*u,i*r);break;case"ZXZ":e.set(a*u,a*h,i*c,i*r);break;case"XZX":e.set(i*c,a*f,a*m,i*r);break;case"YXY":e.set(a*m,i*c,a*f,i*r);break;case"ZYZ":e.set(a*f,a*m,i*c,i*r);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+o)}}function We(e,t){switch(t.constructor){case Float32Array:return e;case Uint32Array:return e/4294967295;case Uint16Array:return e/65535;case Uint8Array:return e/255;case Int32Array:return Math.max(e/2147483647,-1);case Int16Array:return Math.max(e/32767,-1);case Int8Array:return Math.max(e/127,-1);default:throw new Error("Invalid component type.")}}function y(e,t){switch(t.constructor){case Float32Array:return e;case Uint32Array:return Math.round(e*4294967295);case Uint16Array:return Math.round(e*65535);case Uint8Array:return Math.round(e*255);case Int32Array:return Math.round(e*2147483647);case Int16Array:return Math.round(e*32767);case Int8Array:return Math.round(e*127);default:throw new Error("Invalid component type.")}}hy={DEG2RAD:Ia,RAD2DEG:Ii,generateUUID:is,clamp:M,euclideanModulo:qh,mapLinear:sD,inverseLerp:nD,lerp:Zc,damp:Xz,pingpong:Kz,smoothstep:Wz,smootherstep:Vz,randInt:Bz,randFloat:Iz,randFloatSpread:Hz,seededRandom:Pz,degToRad:Fz,radToDeg:Az,isPowerOfTwo:Oz,ceilPowerOfTwo:fz,floorPowerOfTwo:dz,setQuaternionFromProperEuler:lz,normalize:y,denormalize:We},w=class _Vector2{constructor(e=0,t=0){_Vector2.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const n=this.x,s=this.y,t=e.elements;return this.x=t[0]*n+t[3]*s+t[6],this.y=t[1]*n+t[4]*s+t[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=M(this.x,e.x,t.x),this.y=M(this.y,e.y,t.y),this}clampScalar(e,t){return this.x=M(this.x,e,t),this.y=M(this.y,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(M(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x|0,this.y=this.y|0,this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return(this.x*this.x+this.y*this.y)**.5}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){const e=Math.atan2(-this.y,-this.x)+Math.PI;return e}angleTo(e){const t=(this.lengthSq()*e.lengthSq())**.5;if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(M(n,-1,1))}distanceTo(e){return this.distanceToSquared(e)**.5}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),s=Math.sin(t),o=this.x-e.x,i=this.y-e.y;return this.x=o*n-i*s+e.x,this.y=o*s+i*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}},po=class{constructor(e=0,t=0,n=0,s=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=s}static slerpFlat(e,t,n,s,o,i,a){let r=n[s+0],c=n[s+1],l=n[s+2],d=n[s+3];const u=o[i+0],h=o[i+1],m=o[i+2],f=o[i+3];if(a===0){e[t+0]=r,e[t+1]=c,e[t+2]=l,e[t+3]=d;return}if(a===1){e[t+0]=u,e[t+1]=h,e[t+2]=m,e[t+3]=f;return}if(d!==f||r!==u||c!==h||l!==m){let e=1-a;const t=r*u+c*h+l*m+d*f,s=t>=0?1:-1,o=1-t*t;if(o>Number.EPSILON){const n=o**.5,i=Math.atan2(n,t*s);e=Math.sin(e*i)/n,a=Math.sin(a*i)/n}const n=a*s;if(r=r*e+u*n,c=c*e+h*n,l=l*e+m*n,d=d*e+f*n,e===1-a){const e=1/(r*r+c*c+l*l+d*d)**.5;r*=e,c*=e,l*=e,d*=e}}e[t]=r,e[t+1]=c,e[t+2]=l,e[t+3]=d}static multiplyQuaternionsFlat(e,t,n,s,o,i){const a=n[s],r=n[s+1],c=n[s+2],l=n[s+3],d=o[i],u=o[i+1],h=o[i+2],m=o[i+3];return e[t]=a*m+l*d+r*h-c*u,e[t+1]=r*m+l*u+c*d-a*h,e[t+2]=c*m+l*h+a*u-r*d,e[t+3]=l*m-a*d-r*u-c*h,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,s){return this._x=e,this._y=t,this._z=n,this._w=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){const d=e._x,u=e._y,h=e._z,m=e._order,c=Math.cos,l=Math.sin,n=c(d/2),s=c(u/2),o=c(h/2),i=l(d/2),a=l(u/2),r=l(h/2);switch(m){case"XYZ":this._x=i*s*o+n*a*r,this._y=n*a*o-i*s*r,this._z=n*s*r+i*a*o,this._w=n*s*o-i*a*r;break;case"YXZ":this._x=i*s*o+n*a*r,this._y=n*a*o-i*s*r,this._z=n*s*r-i*a*o,this._w=n*s*o+i*a*r;break;case"ZXY":this._x=i*s*o-n*a*r,this._y=n*a*o+i*s*r,this._z=n*s*r+i*a*o,this._w=n*s*o-i*a*r;break;case"ZYX":this._x=i*s*o-n*a*r,this._y=n*a*o+i*s*r,this._z=n*s*r-i*a*o,this._w=n*s*o+i*a*r;break;case"YZX":this._x=i*s*o+n*a*r,this._y=n*a*o+i*s*r,this._z=n*s*r-i*a*o,this._w=n*s*o-i*a*r;break;case"XZY":this._x=i*s*o-n*a*r,this._y=n*a*o-i*s*r,this._z=n*s*r+i*a*o,this._w=n*s*o+i*a*r;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+m)}return t===!0&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const s=t/2,n=Math.sin(s);return this._x=e.x*n,this._y=e.y*n,this._z=e.z*n,this._w=Math.cos(s),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],a=t[8],r=t[1],s=t[5],c=t[9],l=t[2],d=t[6],o=t[10],u=n+s+o;if(u>0){const e=.5/(u+1)**.5;this._w=.25/e,this._x=(d-c)*e,this._y=(a-l)*e,this._z=(r-i)*e}else if(n>s&&n>o){const e=2*(1+n-s-o)**.5;this._w=(d-c)/e,this._x=.25*e,this._y=(i+r)/e,this._z=(a+l)/e}else if(s>o){const e=2*(1+s-n-o)**.5;this._w=(a-l)/e,this._x=(i+r)/e,this._y=.25*e,this._z=(c+d)/e}else{const e=2*(1+o-n-s)**.5;this._w=(r-i)/e,this._x=(a+l)/e,this._y=(c+d)/e,this._z=.25*e}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<1e-8?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(M(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const s=Math.min(1,t/n);return this.slerp(e,s),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)**.5}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,s=e._y,o=e._z,i=e._w,a=t._x,r=t._y,c=t._z,l=t._w;return this._x=n*l+i*a+s*c-o*r,this._y=s*l+i*r+o*a-n*c,this._z=o*l+i*c+n*r-s*a,this._w=i*l-n*a-s*r-o*c,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const s=this._x,o=this._y,i=this._z,a=this._w;let n=a*e._w+s*e._x+o*e._y+i*e._z;if(n<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,n=-n):this.copy(e),n>=1)return this._w=a,this._x=s,this._y=o,this._z=i,this;const d=1-n*n;if(d<=Number.EPSILON){const e=1-t;return this._w=e*a+t*this._w,this._x=e*s+t*this._x,this._y=e*o+t*this._y,this._z=e*i+t*this._z,this.normalize(),this}const l=d**.5,u=Math.atan2(l,n),r=Math.sin((1-t)*u)/l,c=Math.sin(t*u)/l;return this._w=a*r+this._w*c,this._x=s*r+this._x*c,this._y=o*r+this._y*c,this._z=i*r+this._z*c,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),n=Math.random(),s=(1-n)**.5,o=n**.5;return this.set(s*Math.sin(e),s*Math.cos(e),o*Math.sin(t),o*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}},t=class _Vector3{constructor(e=0,t=0,n=0){_Vector3.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return n===0[0]&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(Oh.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(Oh.setFromAxisAngle(e,t))}applyMatrix3(e){const n=this.x,s=this.y,o=this.z,t=e.elements;return this.x=t[0]*n+t[3]*s+t[6]*o,this.y=t[1]*n+t[4]*s+t[7]*o,this.z=t[2]*n+t[5]*s+t[8]*o,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const n=this.x,s=this.y,o=this.z,t=e.elements,i=1/(t[3]*n+t[7]*s+t[11]*o+t[15]);return this.x=(t[0]*n+t[4]*s+t[8]*o+t[12])*i,this.y=(t[1]*n+t[5]*s+t[9]*o+t[13])*i,this.z=(t[2]*n+t[6]*s+t[10]*o+t[14])*i,this}applyQuaternion(e){const o=this.x,i=this.y,a=this.z,t=e.x,n=e.y,s=e.z,r=e.w,c=2*(n*a-s*i),l=2*(s*o-t*a),d=2*(t*i-n*o);return this.x=o+r*c+n*d-s*l,this.y=i+r*l+s*c-t*d,this.z=a+r*d+t*l-n*c,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const n=this.x,s=this.y,o=this.z,t=e.elements;return this.x=t[0]*n+t[4]*s+t[8]*o,this.y=t[1]*n+t[5]*s+t[9]*o,this.z=t[2]*n+t[6]*s+t[10]*o,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=M(this.x,e.x,t.x),this.y=M(this.y,e.y,t.y),this.z=M(this.z,e.z,t.z),this}clampScalar(e,t){return this.x=M(this.x,e,t),this.y=M(this.y,e,t),this.z=M(this.z,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(M(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x|0,this.y=this.y|0,this.z=this.z|0,this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return(this.x*this.x+this.y*this.y+this.z*this.z)**.5}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,s=e.y,o=e.z,i=t.x,a=t.y,r=t.z;return this.x=s*r-o*a,this.y=o*i-n*r,this.z=n*a-s*i,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return Au.copy(this).projectOnVector(e),this.sub(Au)}reflect(e){return this.sub(Au.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=(this.lengthSq()*e.lengthSq())**.5;if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(M(n,-1,1))}distanceTo(e){return this.distanceToSquared(e)**.5}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,s=this.z-e.z;return t*t+n*n+s*s}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const s=Math.sin(t)*e;return this.x=s*Math.sin(n),this.y=Math.cos(t)*e,this.z=s*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),s=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=s,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,n=(1-e*e)**.5;return this.x=n*Math.cos(t),this.y=e,this.z=n*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}},Au=new t,Oh=new po,b=class _Matrix3{constructor(e,t,n,s,o,i,a,r,c){_Matrix3.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],e!==0[0]&&this.set(e,t,n,s,o,i,a,r,c)}set(e,t,n,s,o,i,a,r,c){const l=this.elements;return l[0]=e,l[1]=s,l[2]=a,l[3]=t,l[4]=o,l[5]=r,l[6]=n,l[7]=i,l[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,s=t.elements,o=this.elements,i=n[0],a=n[3],r=n[6],c=n[1],l=n[4],d=n[7],u=n[2],h=n[5],m=n[8],f=s[0],p=s[3],g=s[6],v=s[1],b=s[4],j=s[7],y=s[2],_=s[5],w=s[8];return o[0]=i*f+a*v+r*y,o[3]=i*p+a*b+r*_,o[6]=i*g+a*j+r*w,o[1]=c*f+l*v+d*y,o[4]=c*p+l*b+d*_,o[7]=c*g+l*j+d*w,o[2]=u*f+h*v+m*y,o[5]=u*p+h*b+m*_,o[8]=u*g+h*j+m*w,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],s=e[2],o=e[3],i=e[4],a=e[5],r=e[6],c=e[7],l=e[8];return t*i*l-t*a*c-n*o*l+n*a*r+s*o*c-s*i*r}invert(){const e=this.elements,n=e[0],s=e[1],o=e[2],d=e[3],a=e[4],i=e[5],r=e[6],c=e[7],l=e[8],u=l*a-i*c,h=i*r-l*d,m=c*d-a*r,f=n*u+s*h+o*m;if(f===0)return this.set(0,0,0,0,0,0,0,0,0);const t=1/f;return e[0]=u*t,e[1]=(o*c-l*s)*t,e[2]=(i*s-o*a)*t,e[3]=h*t,e[4]=(l*n-o*r)*t,e[5]=(o*d-i*n)*t,e[6]=m*t,e[7]=(s*r-c*n)*t,e[8]=(a*n-s*d)*t,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,s,o,i,a){const r=Math.cos(o),c=Math.sin(o);return this.set(n*r,n*c,-n*(r*i+c*a)+i+e,-s*c,s*r,-s*(-c*i+r*a)+a+t,0,0,1),this}scale(e,t){return this.premultiply(Su.makeScale(e,t)),this}rotate(e){return this.premultiply(Su.makeRotation(-e)),this}translate(e,t){return this.premultiply(Su.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,n,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,n=e.elements;for(let e=0;e<9;e++)if(t[e]!==n[e])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return(new this.constructor).fromArray(this.elements)}},Su=new b;function yh(e){for(let t=e.length-1;t>=0;--t)if(e[t]>=65535)return!0;return!1}function Mu(e){return document.createElementNS("http://www.w3.org/1999/xhtml",e)}function my(){const e=Mu("canvas");return e.style.display="block",e}gh={};function gt(e){if(e in gh)return;gh[e]=!0,console.warn(e)}function az(e,t,n){return new Promise(function(s,o){function i(){switch(e.clientWaitSync(t,e.SYNC_FLUSH_COMMANDS_BIT,0)){case e.WAIT_FAILED:o();break;case e.TIMEOUT_EXPIRED:setTimeout(i,n);break;default:s()}}setTimeout(i,n)})}fh=(new b).set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),mh=(new b).set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function iz(){const e={enabled:!0,workingColorSpace:Rs,spaces:{},convert:function(e,t,n){return this.enabled===!1||t===n||!t||!n?e:(this.spaces[t].transfer===c&&(e.r=Gn(e.r),e.g=Gn(e.g),e.b=Gn(e.b)),this.spaces[t].primaries!==this.spaces[n].primaries&&(e.applyMatrix3(this.spaces[t].toXYZ),e.applyMatrix3(this.spaces[n].fromXYZ)),this.spaces[n].transfer===c&&(e.r=Ra(e.r),e.g=Ra(e.g),e.b=Ra(e.b)),e)},workingToColorSpace:function(e,t){return this.convert(e,this.workingColorSpace,t)},colorSpaceToWorking:function(e,t){return this.convert(e,t,this.workingColorSpace)},getPrimaries:function(e){return this.spaces[e].primaries},getTransfer:function(e){return e===$e?Ni:this.spaces[e].transfer},getToneMappingMode:function(e){return this.spaces[e].outputColorSpaceConfig.toneMappingMode||"standard"},getLuminanceCoefficients:function(e,t=this.workingColorSpace){return e.fromArray(this.spaces[t].luminanceCoefficients)},define:function(e){Object.assign(this.spaces,e)},_getMatrix:function(e,t,n){return e.copy(this.spaces[t].toXYZ).multiply(this.spaces[n].fromXYZ)},_getDrawingBufferColorSpace:function(e){return this.spaces[e].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(e=this.workingColorSpace){return this.spaces[e].workingColorSpaceConfig.unpackColorSpace},fromWorkingColorSpace:function(t,n){return gt("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace()."),e.workingToColorSpace(t,n)},toWorkingColorSpace:function(t,n){return gt("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking()."),e.colorSpaceToWorking(t,n)}},t=[.64,.33,.3,.6,.15,.06],n=[.2126,.7152,.0722],s=[.3127,.329];return e.define({[Rs]:{primaries:t,whitePoint:s,transfer:Ni,toXYZ:fh,fromXYZ:mh,luminanceCoefficients:n,workingColorSpaceConfig:{unpackColorSpace:lt},outputColorSpaceConfig:{drawingBufferColorSpace:lt}},[lt]:{primaries:t,whitePoint:s,transfer:c,toXYZ:fh,fromXYZ:mh,luminanceCoefficients:n,outputColorSpaceConfig:{drawingBufferColorSpace:lt}}}),e}v=iz();function Gn(e){return e<.04045?e*.0773993808:(e*.9478672986+.0521327014)**2.4}function Ra(e){return e<.0031308?e*12.92:1.055*e**.41666-.055}fy=class{static getDataURL(e,t="image/png"){if(/^data:/i.test(e.src))return e.src;if(typeof HTMLCanvasElement=="undefined")return e.src;let n;if(e instanceof HTMLCanvasElement)n=e;else{Pa===0[0]&&(Pa=Mu("canvas")),Pa.width=e.width,Pa.height=e.height;const t=Pa.getContext("2d");e instanceof ImageData?t.putImageData(e,0,0):t.drawImage(e,0,0,e.width,e.height),n=Pa}return n.toDataURL(t)}static sRGBToLinear(e){if(typeof HTMLImageElement!="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&e instanceof ImageBitmap){const t=Mu("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const o=n.getImageData(0,0,e.width,e.height),s=o.data;for(let e=0;e<s.length;e++)s[e]=Gn(s[e]/255)*255;return n.putImageData(o,0,0),t}if(e.data){const t=e.data.slice(0);for(let e=0;e<t.length;e++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[e]=Math.floor(Gn(t[e]/255)*255):t[e]=Gn(t[e]);return{data:t,width:e.width,height:e.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}},wy=0,zu=class{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:wy++}),this.uuid=is(),this.data=e,this.dataReady=!0,this.version=0}getSize(e){const t=this.data;return typeof HTMLVideoElement!="undefined"&&t instanceof HTMLVideoElement?e.set(t.videoWidth,t.videoHeight,0):t instanceof VideoFrame?e.set(t.displayHeight,t.displayWidth,0):t!==null?e.set(t.width,t.height,t.depth||0):e.set(0,0,0),e}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const s=e===0[0]||typeof e=="string";if(!s&&e.images[this.uuid]!==0[0])return e.images[this.uuid];const n={uuid:this.uuid,url:""},t=this.data;if(t!==null){let e;if(Array.isArray(t)){e=[];for(let n=0,s=t.length;n<s;n++)t[n].isDataTexture?e.push(ah(t[n].image)):e.push(ah(t[n]))}else e=ah(t);n.url=e}return s||(e.images[this.uuid]=n),n}};function ah(e){return typeof HTMLImageElement!="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&e instanceof ImageBitmap?fy.getDataURL(e):e.data?{data:Array.from(e.data),width:e.width,height:e.height,type:e.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}My=0,Nu=new t,Te=class _Texture extends fs{constructor(e=_Texture.DEFAULT_IMAGE,t=_Texture.DEFAULT_MAPPING,n=$t,s=$t,o=ie,i=Be,a=G,r=Y,c=_Texture.DEFAULT_ANISOTROPY,l=$e){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:My++}),this.uuid=is(),this.name="",this.source=new zu(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=n,this.wrapT=s,this.magFilter=o,this.minFilter=i,this.anisotropy=c,this.format=a,this.internalFormat=null,this.type=r,this.offset=new w(0,0),this.repeat=new w(1,1),this.center=new w(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new b,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=l,this.userData={},this.updateRanges=[],this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.isArrayTexture=!!(e&&e.depth&&e.depth>1),this.pmremVersion=0}get width(){return this.source.getSize(Nu).x}get height(){return this.source.getSize(Nu).y}get depth(){return this.source.getSize(Nu).z}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}clone(){return(new this.constructor).copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.renderTarget=e.renderTarget,this.isRenderTargetTexture=e.isRenderTargetTexture,this.isArrayTexture=e.isArrayTexture,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}setValues(e){for(const s in e){const t=e[s];if(t===0[0]){console.warn(`THREE.Texture.setValues(): parameter '${s}' has value of undefined.`);continue}const n=this[s];if(n===0[0]){console.warn(`THREE.Texture.setValues(): property '${s}' does not exist.`);continue}n&&t&&n.isVector2&&t.isVector2?n.copy(t):n&&t&&n.isVector3&&t.isVector3?n.copy(t):n&&t&&n.isMatrix3&&t.isMatrix3?n.copy(t):this[s]=t}}toJSON(e){const n=e===0[0]||typeof e=="string";if(!n&&e.textures[this.uuid]!==0[0])return e.textures[this.uuid];const t={metadata:{version:4.7,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(t.userData=this.userData),n||(e.textures[this.uuid]=t),t}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==Cd)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case Es:e.x=e.x-Math.floor(e.x);break;case $t:e.x=e.x<0?0:1;break;case js:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case Es:e.y=e.y-Math.floor(e.y);break;case $t:e.y=e.y<0?0:1;break;case js:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(e){e===!0&&this.pmremVersion++}},Te.DEFAULT_IMAGE=null,Te.DEFAULT_MAPPING=Cd,Te.DEFAULT_ANISOTROPY=1,j=class _Vector4{constructor(e=0,t=0,n=0,s=1){_Vector4.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=s}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,s){return this.x=e,this.y=t,this.z=n,this.w=s,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==0[0]?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const n=this.x,s=this.y,o=this.z,i=this.w,t=e.elements;return this.x=t[0]*n+t[4]*s+t[8]*o+t[12]*i,this.y=t[1]*n+t[5]*s+t[9]*o+t[13]*i,this.z=t[2]*n+t[6]*s+t[10]*o+t[14]*i,this.w=t[3]*n+t[7]*s+t[11]*o+t[15]*i,this}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this.w/=e.w,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=(1-e.w*e.w)**.5;return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let v,n,s,o;const a=.01,m=.1,t=e.elements,f=t[0],i=t[4],r=t[8],c=t[1],p=t[5],l=t[9],d=t[2],u=t[6],g=t[10];if(Math.abs(i-c)<a&&Math.abs(r-d)<a&&Math.abs(l-u)<a){if(Math.abs(i+c)<m&&Math.abs(r+d)<m&&Math.abs(l+u)<m&&Math.abs(f+p+g-3)<m)return this.set(1,0,0,0),this;v=Math.PI;const e=(f+1)/2,t=(p+1)/2,h=(g+1)/2,b=(i+c)/4,j=(r+d)/4,y=(l+u)/4;return e>t&&e>h?e<a?(n=0,s=.707106781,o=.707106781):(n=e**.5,s=b/n,o=j/n):t>h?t<a?(n=.707106781,s=0,o=.707106781):(s=t**.5,n=b/s,o=y/s):h<a?(n=.707106781,s=.707106781,o=0):(o=h**.5,n=j/o,s=y/o),this.set(n,s,o,v),this}let h=((u-l)*(u-l)+(r-d)*(r-d)+(c-i)*(c-i))**.5;return(h<0?-h:h)<.001&&(h=1),this.x=(u-l)/h,this.y=(r-d)/h,this.z=(c-i)/h,this.w=Math.acos((f+p+g-1)/2),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this.w=t[15],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=M(this.x,e.x,t.x),this.y=M(this.y,e.y,t.y),this.z=M(this.z,e.z,t.z),this.w=M(this.w,e.w,t.w),this}clampScalar(e,t){return this.x=M(this.x,e,t),this.y=M(this.y,e,t),this.z=M(this.z,e,t),this.w=M(this.w,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(M(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x|0,this.y=this.y|0,this.z=this.z|0,this.w=this.w|0,this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)**.5}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}},zs=class extends fs{constructor(e=1,t=1,n={}){super(),n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:ie,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1,depth:1,multiview:!1},n),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=n.depth,this.scissor=new j(0,0,e,t),this.scissorTest=!1,this.viewport=new j(0,0,e,t);const s={width:e,height:t,depth:n.depth},o=new Te(s);this.textures=[];const i=n.count;for(let e=0;e<i;e++)this.textures[e]=o.clone(),this.textures[e].isRenderTargetTexture=!0,this.textures[e].renderTarget=this;this._setTextureOptions(n),this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=n.depthTexture,this.samples=n.samples,this.multiview=n.multiview}_setTextureOptions(e={}){const t={minFilter:ie,generateMipmaps:!1,flipY:!1,internalFormat:null};e.mapping!==0[0]&&(t.mapping=e.mapping),e.wrapS!==0[0]&&(t.wrapS=e.wrapS),e.wrapT!==0[0]&&(t.wrapT=e.wrapT),e.wrapR!==0[0]&&(t.wrapR=e.wrapR),e.magFilter!==0[0]&&(t.magFilter=e.magFilter),e.minFilter!==0[0]&&(t.minFilter=e.minFilter),e.format!==0[0]&&(t.format=e.format),e.type!==0[0]&&(t.type=e.type),e.anisotropy!==0[0]&&(t.anisotropy=e.anisotropy),e.colorSpace!==0[0]&&(t.colorSpace=e.colorSpace),e.flipY!==0[0]&&(t.flipY=e.flipY),e.generateMipmaps!==0[0]&&(t.generateMipmaps=e.generateMipmaps),e.internalFormat!==0[0]&&(t.internalFormat=e.internalFormat);for(let e=0;e<this.textures.length;e++){const n=this.textures[e];n.setValues(t)}}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}set depthTexture(e){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),e!==null&&(e.renderTarget=this),this._depthTexture=e}get depthTexture(){return this._depthTexture}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e,this.height=t,this.depth=n;for(let s=0,o=this.textures.length;s<o;s++)this.textures[s].image.width=e,this.textures[s].image.height=t,this.textures[s].image.depth=n,this.textures[s].isArrayTexture=this.textures[s].image.depth>1;this.dispose()}this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return(new this.constructor).copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.textures.length=0;for(let t=0,n=e.textures.length;t<n;t++){this.textures[t]=e.textures[t].clone(),this.textures[t].isRenderTargetTexture=!0,this.textures[t].renderTarget=this;const s=Object.assign({},e.textures[t].image);this.textures[t].source=new zu(s)}return this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.resolveDepthBuffer=e.resolveDepthBuffer,this.resolveStencilBuffer=e.resolveStencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}},Ss=class extends zs{constructor(e=1,t=1,n={}){super(e,t,n),this.isWebGLRenderTarget=!0}},Lu=class extends Te{constructor(e=null,t=1,n=1,s=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:s},this.magFilter=V,this.minFilter=V,this.wrapR=$t,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}},Fy=class extends Te{constructor(e=null,t=1,n=1,s=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:s},this.magFilter=V,this.minFilter=V,this.wrapR=$t,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}},Or=class{constructor(e=new t(1/0,1/0,1/0),n=new t(-(1/0),-(1/0),-(1/0))){this.isBox3=!0,this.min=e,this.max=n}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3)this.expandByPoint(Tt.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++)this.expandByPoint(Tt.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=Tt.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return(new this.constructor).copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-(1/0),this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(n!==0[0]){const s=n.getAttribute("position");if(t===!0&&s!==0[0]&&e.isInstancedMesh!==!0)for(let t=0,n=s.count;t<n;t++)e.isMesh===!0?e.getVertexPosition(t,Tt):Tt.fromBufferAttribute(s,t),Tt.applyMatrix4(e.matrixWorld),this.expandByPoint(Tt);else e.boundingBox!==0[0]?(e.boundingBox===null&&e.computeBoundingBox(),Gr.copy(e.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),Gr.copy(n.boundingBox)),Gr.applyMatrix4(e.matrixWorld),this.union(Gr)}const s=e.children;for(let e=0,n=s.length;e<n;e++)this.expandByObject(s[e],t);return this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y&&e.z>=this.min.z&&e.z<=this.max.z}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y&&e.max.z>=this.min.z&&e.min.z<=this.max.z}intersectsSphere(e){return this.clampPoint(e.center,Tt),Tt.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(Cr),Kr.subVectors(this.max,Cr),wi.subVectors(e.a,Cr),_i.subVectors(e.b,Cr),yi.subVectors(e.c,Cr),bs.subVectors(_i,wi),Vn.subVectors(yi,_i),Vs.subVectors(wi,yi);let t=[0,-bs.z,bs.y,0,-Vn.z,Vn.y,0,-Vs.z,Vs.y,bs.z,0,-bs.x,Vn.z,0,-Vn.x,Vs.z,0,-Vs.x,-bs.y,bs.x,0,-Vn.y,Vn.x,0,-Vs.y,Vs.x,0];return!!K3(t,wi,_i,yi,Kr)&&(t=[1,0,0,0,1,0,0,0,1],!!K3(t,wi,_i,yi,Kr)&&(Hr.crossVectors(bs,Vn),t=[Hr.x,Hr.y,Hr.z],K3(t,wi,_i,yi,Kr)))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,Tt).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(Tt).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(mn[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),mn[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),mn[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),mn[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),mn[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),mn[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),mn[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),mn[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(mn),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}toJSON(){return{min:this.min.toArray(),max:this.max.toArray()}}fromJSON(e){return this.min.fromArray(e.min),this.max.fromArray(e.max),this}},mn=[new t,new t,new t,new t,new t,new t,new t,new t],Tt=new t,Gr=new Or,wi=new t,_i=new t,yi=new t,bs=new t,Vn=new t,Vs=new t,Cr=new t,Kr=new t,Hr=new t,xs=new t;function K3(e,t,n,s,o){for(let i=0,l=e.length-3;i<=l;i+=3){xs.fromArray(e,i);const d=o.x*Math.abs(xs.x)+o.y*Math.abs(xs.y)+o.z*Math.abs(xs.z),a=t.dot(xs),r=n.dot(xs),c=s.dot(xs);if(Math.max(-Math.max(a,r,c),Math.min(a,r,c))>d)return!1}return!0}Ry=new Or,Mr=new t,Bu=new t,$r=class{constructor(e=new t,n=-1){this.isSphere=!0,this.center=e,this.radius=n}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==0[0]?n.copy(t):Ry.setFromPoints(e).getCenter(n);let s=0;for(let t=0,o=e.length;t<o;t++)s=Math.max(s,n.distanceToSquared(e[t]));return this.radius=s**.5,this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;Mr.subVectors(e,this.center);const t=Mr.lengthSq();if(t>this.radius*this.radius){const e=t**.5,n=(e-this.radius)*.5;this.center.addScaledVector(Mr,n/e),this.radius+=n}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(Bu.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(Mr.copy(e.center).add(Bu)),this.expandByPoint(Mr.copy(e.center).sub(Bu))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return(new this.constructor).copy(this)}toJSON(){return{radius:this.radius,center:this.center.toArray()}}fromJSON(e){return this.radius=e.radius,this.center.fromArray(e.center),this}},Tn=new t,Vu=new t,Zr=new t,rs=new t,$u=new t,tc=new t,Wu=new t,Py=class{constructor(e=new t,n=new t(0,0,-1)){this.origin=e,this.direction=n}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,Tn)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return this.distanceSqToPoint(e)**.5}distanceSqToPoint(e){const t=Tn.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(Tn.copy(this.origin).addScaledVector(this.direction,t),Tn.distanceToSquared(e))}distanceSqToSegment(e,t,n,s){Vu.copy(e).add(t).multiplyScalar(.5),Zr.copy(t).sub(e).normalize(),rs.copy(this.origin).sub(Vu);const a=e.distanceTo(t)*.5,r=-this.direction.dot(Zr),l=rs.dot(this.direction),c=-rs.dot(Zr),u=rs.lengthSq(),m=Math.abs(1-r*r);let i,o,d,h;if(m>0)if(i=r*c-l,o=r*l-c,h=a*m,i>=0)if(o>=-h)if(o<=h){const e=1/m;i*=e,o*=e,d=i*(i+r*o+2*l)+o*(r*i+o+2*c)+u}else o=a,i=Math.max(0,-(r*o+l)),d=-i*i+o*(o+2*c)+u;else o=-a,i=Math.max(0,-(r*o+l)),d=-i*i+o*(o+2*c)+u;else o<=-h?(i=Math.max(0,-(-r*a+l)),o=i>0?-a:Math.min(Math.max(-a,-c),a),d=-i*i+o*(o+2*c)+u):o<=h?(i=0,o=Math.min(Math.max(-a,-c),a),d=o*(o+2*c)+u):(i=Math.max(0,-(r*a+l)),o=i>0?a:Math.min(Math.max(-a,-c),a),d=-i*i+o*(o+2*c)+u);else o=r>0?-a:a,i=Math.max(0,-(r*o+l)),d=-i*i+o*(o+2*c)+u;return n&&n.copy(this.origin).addScaledVector(this.direction,i),s&&s.copy(Vu).addScaledVector(Zr,o),d}intersectSphere(e,t){Tn.subVectors(e.center,this.origin);const n=Tn.dot(this.direction),s=Tn.dot(Tn)-n*n,o=e.radius*e.radius;if(s>o)return null;const i=(o-s)**.5,a=n-i,r=n+i;return r<0?null:a<0?this.at(r,t):this.at(a,t)}intersectsSphere(e){return!(e.radius<0)&&this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);if(t===0)return!0;const n=e.normal.dot(this.direction);return n*t<0}intersectBox(e,t){let n,s,i,a,r,c;const l=1/this.direction.x,d=1/this.direction.y,u=1/this.direction.z,o=this.origin;return l>=0?(n=(e.min.x-o.x)*l,s=(e.max.x-o.x)*l):(n=(e.max.x-o.x)*l,s=(e.min.x-o.x)*l),d>=0?(i=(e.min.y-o.y)*d,a=(e.max.y-o.y)*d):(i=(e.max.y-o.y)*d,a=(e.min.y-o.y)*d),n>a||i>s?null:((i>n||isNaN(n))&&(n=i),(a<s||isNaN(s))&&(s=a),u>=0?(r=(e.min.z-o.z)*u,c=(e.max.z-o.z)*u):(r=(e.max.z-o.z)*u,c=(e.min.z-o.z)*u),n>c||r>s?null:((r>n||n!==n)&&(n=r),(c<s||s!==s)&&(s=c),s<0?null:this.at(n>=0?n:s,t)))}intersectsBox(e){return this.intersectBox(e,Tn)!==null}intersectTriangle(e,t,n,s,o){$u.subVectors(t,e),tc.subVectors(n,e),Wu.crossVectors($u,tc);let i=this.direction.dot(Wu),a;if(i>0){if(s)return null;a=1}else if(i<0)a=-1,i=-i;else return null;rs.subVectors(this.origin,e);const r=a*this.direction.dot(tc.crossVectors(rs,tc));if(r<0)return null;const c=a*this.direction.dot($u.cross(rs));if(c<0)return null;if(r+c>i)return null;const l=-a*rs.dot(Wu);return l<0?null:this.at(l/i,o)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}},W=class _Matrix4{constructor(e,t,n,s,o,i,a,r,c,l,d,u,h,m,f,p){_Matrix4.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e!==0[0]&&this.set(e,t,n,s,o,i,a,r,c,l,d,u,h,m,f,p)}set(e,t,n,s,o,i,a,r,c,l,d,u,h,m,f,p){const g=this.elements;return g[0]=e,g[4]=t,g[8]=n,g[12]=s,g[1]=o,g[5]=i,g[9]=a,g[13]=r,g[2]=c,g[6]=l,g[10]=d,g[14]=u,g[3]=h,g[7]=m,g[11]=f,g[15]=p,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new _Matrix4).fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,s=1/Ko.setFromMatrixColumn(e,0).length(),o=1/Ko.setFromMatrixColumn(e,1).length(),i=1/Ko.setFromMatrixColumn(e,2).length();return t[0]=n[0]*s,t[1]=n[1]*s,t[2]=n[2]*s,t[3]=0,t[4]=n[4]*o,t[5]=n[5]*o,t[6]=n[6]*o,t[7]=0,t[8]=n[8]*i,t[9]=n[9]*i,t[10]=n[10]*i,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,c=e.x,l=e.y,d=e.z,i=Math.cos(c),n=Math.sin(c),a=Math.cos(l),s=Math.sin(l),r=Math.cos(d),o=Math.sin(d);if(e.order==="XYZ"){const e=i*r,c=i*o,l=n*r,d=n*o;t[0]=a*r,t[4]=-a*o,t[8]=s,t[1]=c+l*s,t[5]=e-d*s,t[9]=-n*a,t[2]=d-e*s,t[6]=l+c*s,t[10]=i*a}else if(e.order==="YXZ"){const e=a*r,c=a*o,l=s*r,d=s*o;t[0]=e+d*n,t[4]=l*n-c,t[8]=i*s,t[1]=i*o,t[5]=i*r,t[9]=-n,t[2]=c*n-l,t[6]=d+e*n,t[10]=i*a}else if(e.order==="ZXY"){const e=a*r,c=a*o,l=s*r,d=s*o;t[0]=e-d*n,t[4]=-i*o,t[8]=l+c*n,t[1]=c+l*n,t[5]=i*r,t[9]=d-e*n,t[2]=-i*s,t[6]=n,t[10]=i*a}else if(e.order==="ZYX"){const e=i*r,c=i*o,l=n*r,d=n*o;t[0]=a*r,t[4]=l*s-c,t[8]=e*s+d,t[1]=a*o,t[5]=d*s+e,t[9]=c*s-l,t[2]=-s,t[6]=n*a,t[10]=i*a}else if(e.order==="YZX"){const e=i*a,c=i*s,l=n*a,d=n*s;t[0]=a*r,t[4]=d-e*o,t[8]=l*o+c,t[1]=o,t[5]=i*r,t[9]=-n*r,t[2]=-s*r,t[6]=c*o+l,t[10]=e-d*o}else if(e.order==="XZY"){const e=i*a,c=i*s,l=n*a,d=n*s;t[0]=a*r,t[4]=-o,t[8]=s*r,t[1]=e*o+d,t[5]=i*r,t[9]=c*o-l,t[2]=l*o-c,t[6]=n*r,t[10]=d*o+e}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(Vy,e,$y)}lookAt(e,t,n){const s=this.elements;return mt.subVectors(e,t),mt.lengthSq()===0&&(mt.z=1),mt.normalize(),Jn.crossVectors(n,mt),Jn.lengthSq()===0&&(Math.abs(n.z)===1?mt.x+=1e-4:mt.z+=1e-4,mt.normalize(),Jn.crossVectors(n,mt)),Jn.normalize(),Ec.crossVectors(mt,Jn),s[0]=Jn.x,s[4]=Ec.x,s[8]=mt.x,s[1]=Jn.y,s[5]=Ec.y,s[9]=mt.y,s[2]=Jn.z,s[6]=Ec.z,s[10]=mt.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,s=t.elements,o=this.elements,i=n[0],a=n[4],r=n[8],c=n[12],l=n[1],d=n[5],u=n[9],h=n[13],m=n[2],f=n[6],p=n[10],g=n[14],v=n[3],b=n[7],j=n[11],y=n[15],_=s[0],w=s[4],O=s[8],x=s[12],C=s[1],E=s[5],k=s[9],A=s[13],S=s[2],M=s[6],F=s[10],T=s[14],z=s[3],D=s[7],N=s[11],L=s[15];return o[0]=i*_+a*C+r*S+c*z,o[4]=i*w+a*E+r*M+c*D,o[8]=i*O+a*k+r*F+c*N,o[12]=i*x+a*A+r*T+c*L,o[1]=l*_+d*C+u*S+h*z,o[5]=l*w+d*E+u*M+h*D,o[9]=l*O+d*k+u*F+h*N,o[13]=l*x+d*A+u*T+h*L,o[2]=m*_+f*C+p*S+g*z,o[6]=m*w+f*E+p*M+g*D,o[10]=m*O+f*k+p*F+g*N,o[14]=m*x+f*A+p*T+g*L,o[3]=v*_+b*C+j*S+y*z,o[7]=v*w+b*E+j*M+y*D,o[11]=v*O+b*k+j*F+y*N,o[15]=v*x+b*A+j*T+y*L,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],s=e[8],o=e[12],i=e[1],a=e[5],r=e[9],c=e[13],l=e[2],d=e[6],u=e[10],h=e[14],m=e[3],f=e[7],p=e[11],g=e[15];return m*(+o*r*d-s*c*d-o*a*u+n*c*u+s*a*h-n*r*h)+f*(+t*r*h-t*c*u+o*i*u-s*i*h+s*c*l-o*r*l)+p*(+t*c*d-t*a*h-o*i*d+n*i*h+o*a*l-n*c*l)+g*(-s*a*l-t*r*d+t*a*u+s*i*d-n*i*u+n*r*l)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const s=this.elements;return e.isVector3?(s[12]=e.x,s[13]=e.y,s[14]=e.z):(s[12]=e,s[13]=t,s[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],s=e[2],o=e[3],d=e[4],f=e[5],r=e[6],c=e[7],l=e[8],i=e[9],u=e[10],h=e[11],m=e[12],a=e[13],p=e[14],g=e[15],b=i*p*c-a*u*c+a*r*h-f*p*h-i*r*g+f*u*g,j=m*u*c-l*p*c-m*r*h+d*p*h+l*r*g-d*u*g,y=l*a*c-m*i*c+m*f*h-d*a*h-l*f*g+d*i*g,_=m*i*r-l*a*r-m*f*u+d*a*u+l*f*p-d*i*p,w=t*b+n*j+s*y+o*_;if(w===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const v=1/w;return e[0]=b*v,e[1]=(a*u*o-i*p*o-a*s*h+n*p*h+i*s*g-n*u*g)*v,e[2]=(f*p*o-a*r*o+a*s*c-n*p*c-f*s*g+n*r*g)*v,e[3]=(i*r*o-f*u*o-i*s*c+n*u*c+f*s*h-n*r*h)*v,e[4]=j*v,e[5]=(l*p*o-m*u*o+m*s*h-t*p*h-l*s*g+t*u*g)*v,e[6]=(m*r*o-d*p*o-m*s*c+t*p*c+d*s*g-t*r*g)*v,e[7]=(d*u*o-l*r*o+l*s*c-t*u*c-d*s*h+t*r*h)*v,e[8]=y*v,e[9]=(m*i*o-l*a*o-m*n*h+t*a*h+l*n*g-t*i*g)*v,e[10]=(d*a*o-m*f*o+m*n*c-t*a*c-d*n*g+t*f*g)*v,e[11]=(l*f*o-d*i*o-l*n*c+t*i*c+d*n*h-t*f*h)*v,e[12]=_*v,e[13]=(l*a*s-m*i*s+m*n*u-t*a*u-l*n*p+t*i*p)*v,e[14]=(m*f*s-d*a*s-m*n*r+t*a*r+d*n*p-t*f*p)*v,e[15]=(d*i*s-l*f*s+l*n*r-t*i*r-d*n*u+t*f*u)*v,this}scale(e){const t=this.elements,n=e.x,s=e.y,o=e.z;return t[0]*=n,t[4]*=s,t[8]*=o,t[1]*=n,t[5]*=s,t[9]*=o,t[2]*=n,t[6]*=s,t[10]*=o,t[3]*=n,t[7]*=s,t[11]*=o,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],s=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.max(t,n,s)**.5}makeTranslation(e,t,n){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const a=Math.cos(t),s=Math.sin(t),c=1-a,r=e.x,o=e.y,n=e.z,i=c*r,l=c*o;return this.set(i*r+a,i*o-s*n,i*n+s*o,0,i*o+s*n,l*o+a,l*n-s*r,0,i*n-s*o,l*n+s*r,c*n*n+a,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,s,o,i){return this.set(1,n,o,0,e,1,i,0,t,s,1,0,0,0,0,1),this}compose(e,t,n){const s=this.elements,o=t._x,i=t._y,r=t._z,c=t._w,w=o+o,d=i+i,a=r+r,_=o*w,y=o*d,m=o*a,f=i*d,p=i*a,g=r*a,v=c*w,b=c*d,j=c*a,h=n.x,u=n.y,l=n.z;return s[0]=(1-(f+g))*h,s[1]=(y+j)*h,s[2]=(m-b)*h,s[3]=0,s[4]=(y-j)*u,s[5]=(1-(_+g))*u,s[6]=(p+v)*u,s[7]=0,s[8]=(m+b)*l,s[9]=(p-v)*l,s[10]=(1-(_+f))*l,s[11]=0,s[12]=e.x,s[13]=e.y,s[14]=e.z,s[15]=1,this}decompose(e,t,n){const s=this.elements;let o=Ko.set(s[0],s[1],s[2]).length();const c=Ko.set(s[4],s[5],s[6]).length(),l=Ko.set(s[8],s[9],s[10]).length(),d=this.determinant();d<0&&(o=-o),e.x=s[12],e.y=s[13],e.z=s[14],Ft.copy(this);const i=1/o,a=1/c,r=1/l;return Ft.elements[0]*=i,Ft.elements[1]*=i,Ft.elements[2]*=i,Ft.elements[4]*=a,Ft.elements[5]*=a,Ft.elements[6]*=a,Ft.elements[8]*=r,Ft.elements[9]*=r,Ft.elements[10]*=r,t.setFromRotationMatrix(Ft),n.x=o,n.y=c,n.z=l,this}makePerspective(e,t,n,s,o,i,a=Re,r=!1){const c=this.elements,u=2*o/(t-e),h=2*o/(n-s),m=(t+e)/(t-e),f=(n+s)/(n-s);let l,d;if(r)l=o/(i-o),d=i*o/(i-o);else if(a===Re)l=-(i+o)/(i-o),d=-2*i*o/(i-o);else if(a===Os)l=-i/(i-o),d=-i*o/(i-o);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return c[0]=u,c[4]=0,c[8]=m,c[12]=0,c[1]=0,c[5]=h,c[9]=f,c[13]=0,c[2]=0,c[6]=0,c[10]=l,c[14]=d,c[3]=0,c[7]=0,c[11]=-1,c[15]=0,this}makeOrthographic(e,t,n,s,o,i,a=Re,r=!1){const c=this.elements,u=2/(t-e),h=2/(n-s),m=-(t+e)/(t-e),f=-(n+s)/(n-s);let l,d;if(r)l=1/(i-o),d=i/(i-o);else if(a===Re)l=-2/(i-o),d=-(i+o)/(i-o);else if(a===Os)l=-1/(i-o),d=-o/(i-o);else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return c[0]=u,c[4]=0,c[8]=0,c[12]=m,c[1]=0,c[5]=h,c[9]=0,c[13]=f,c[2]=0,c[6]=0,c[10]=l,c[14]=d,c[3]=0,c[7]=0,c[11]=0,c[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let e=0;e<16;e++)if(t[e]!==n[e])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}},Ko=new t,Ft=new W,Vy=new t(0,0,0),$y=new t(1,1,1),Jn=new t,Ec=new t,mt=new t,H3=new W,P3=new po,Hn=class _Euler{constructor(e=0,t=0,n=0,s=_Euler.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=s}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,s=this._order){return this._x=e,this._y=t,this._z=n,this._order=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const s=e.elements,o=s[0],r=s[4],c=s[8],l=s[1],i=s[5],d=s[9],u=s[2],h=s[6],a=s[10];switch(t){case"XYZ":this._y=Math.asin(M(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-d,a),this._z=Math.atan2(-r,o)):(this._x=Math.atan2(h,i),this._z=0);break;case"YXZ":this._x=Math.asin(-M(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(c,a),this._z=Math.atan2(l,i)):(this._y=Math.atan2(-u,o),this._z=0);break;case"ZXY":this._x=Math.asin(M(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(-u,a),this._z=Math.atan2(-r,i)):(this._y=0,this._z=Math.atan2(l,o));break;case"ZYX":this._y=Math.asin(-M(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(h,a),this._z=Math.atan2(l,o)):(this._x=0,this._z=Math.atan2(-r,i));break;case"YZX":this._z=Math.asin(M(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-d,i),this._y=Math.atan2(-u,o)):(this._x=0,this._y=Math.atan2(c,a));break;case"XZY":this._z=Math.asin(-M(r,-1,1)),Math.abs(r)<.9999999?(this._x=Math.atan2(h,i),this._y=Math.atan2(c,o)):(this._x=Math.atan2(-d,a),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return H3.makeRotationFromQuaternion(e),this.setFromRotationMatrix(H3,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return P3.setFromEuler(this),this.setFromQuaternion(P3,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==0[0]&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}},Hn.DEFAULT_ORDER="XYZ",R3=class{constructor(){this.mask=1|0}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=4294967295|0}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}},Gy=0,F3=new t,Lo=new po,_n=new W,Gc=new t,Ea=new t,e_=new t,s_=new po,A3=new t(1,0,0),E3=new t(0,1,0),x3=new t(0,0,1),O3={type:"added"},o_={type:"removed"},jo={type:"childadded",child:null},Yu={type:"childremoved",child:null},Sn=class _Object3D extends fs{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:Gy++}),this.uuid=is(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=_Object3D.DEFAULT_UP.clone();const s=new t,e=new Hn,n=new po,o=new t(1,1,1);function i(){n.setFromEuler(e,!1)}function a(){e.setFromQuaternion(n,0[0],!1)}e._onChange(i),n._onChange(a),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:s},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:o},modelViewMatrix:{value:new W},normalMatrix:{value:new b}}),this.matrix=new W,this.matrixWorld=new W,this.matrixAutoUpdate=_Object3D.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=_Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new R3,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.customDepthMaterial=0[0],this.customDistanceMaterial=0[0],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return Lo.setFromAxisAngle(e,t),this.quaternion.multiply(Lo),this}rotateOnWorldAxis(e,t){return Lo.setFromAxisAngle(e,t),this.quaternion.premultiply(Lo),this}rotateX(e){return this.rotateOnAxis(A3,e)}rotateY(e){return this.rotateOnAxis(E3,e)}rotateZ(e){return this.rotateOnAxis(x3,e)}translateOnAxis(e,t){return F3.copy(e).applyQuaternion(this.quaternion),this.position.add(F3.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(A3,e)}translateY(e){return this.translateOnAxis(E3,e)}translateZ(e){return this.translateOnAxis(x3,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(_n.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?Gc.copy(e):Gc.set(e,t,n);const s=this.parent;this.updateWorldMatrix(!0,!1),Ea.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?_n.lookAt(Ea,Gc,this.up):_n.lookAt(Gc,Ea,this.up),this.quaternion.setFromRotationMatrix(_n),s&&(_n.extractRotation(s.matrixWorld),Lo.setFromRotationMatrix(_n),this.quaternion.premultiply(Lo.invert()))}add(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.removeFromParent(),e.parent=this,this.children.push(e),e.dispatchEvent(O3),jo.child=e,this.dispatchEvent(jo),jo.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(o_),Yu.child=e,this.dispatchEvent(Yu),Yu.child=null),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),_n.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),_n.multiply(e.parent.matrixWorld)),e.applyMatrix4(_n),e.removeFromParent(),e.parent=this,this.children.push(e),e.updateWorldMatrix(!1,!0),e.dispatchEvent(O3),jo.child=e,this.dispatchEvent(jo),jo.child=null,this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,o=this.children.length;n<o;n++){const i=this.children[n],s=i.getObjectByProperty(e,t);if(s!==0[0])return s}}getObjectsByProperty(e,t,n=[]){this[e]===t&&n.push(this);const s=this.children;for(let o=0,i=s.length;o<i;o++)s[o].getObjectsByProperty(e,t,n);return n}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Ea,e,e_),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Ea,s_,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,s=t.length;n<s;n++){const o=t[n];o.updateMatrixWorld(e)}}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),t===!0){const e=this.children;for(let t=0,n=e.length;t<n;t++){const s=e[t];s.updateWorldMatrix(!1,!0)}}}toJSON(e){const i=e===0[0]||typeof e=="string",n={};i&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.7,type:"Object",generator:"Object3D.toJSON"});const t={};t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),this.castShadow===!0&&(t.castShadow=!0),this.receiveShadow===!0&&(t.receiveShadow=!0),this.visible===!1&&(t.visible=!1),this.frustumCulled===!1&&(t.frustumCulled=!1),this.renderOrder!==0&&(t.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(t.userData=this.userData),t.layers=this.layers.mask,t.matrix=this.matrix.toArray(),t.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(t.matrixAutoUpdate=!1),this.isInstancedMesh&&(t.type="InstancedMesh",t.count=this.count,t.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(t.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(t.type="BatchedMesh",t.perObjectFrustumCulled=this.perObjectFrustumCulled,t.sortObjects=this.sortObjects,t.drawRanges=this._drawRanges,t.reservedRanges=this._reservedRanges,t.geometryInfo=this._geometryInfo.map(e=>({...e,boundingBox:e.boundingBox?e.boundingBox.toJSON():0[0],boundingSphere:e.boundingSphere?e.boundingSphere.toJSON():0[0]})),t.instanceInfo=this._instanceInfo.map(e=>({...e})),t.availableInstanceIds=this._availableInstanceIds.slice(),t.availableGeometryIds=this._availableGeometryIds.slice(),t.nextIndexStart=this._nextIndexStart,t.nextVertexStart=this._nextVertexStart,t.geometryCount=this._geometryCount,t.maxInstanceCount=this._maxInstanceCount,t.maxVertexCount=this._maxVertexCount,t.maxIndexCount=this._maxIndexCount,t.geometryInitialized=this._geometryInitialized,t.matricesTexture=this._matricesTexture.toJSON(e),t.indirectTexture=this._indirectTexture.toJSON(e),this._colorsTexture!==null&&(t.colorsTexture=this._colorsTexture.toJSON(e)),this.boundingSphere!==null&&(t.boundingSphere=this.boundingSphere.toJSON()),this.boundingBox!==null&&(t.boundingBox=this.boundingBox.toJSON()));function o(t,n){return t[n.uuid]===0[0]&&(t[n.uuid]=n.toJSON(e)),n.uuid}if(this.isScene)this.background&&(this.background.isColor?t.background=this.background.toJSON():this.background.isTexture&&(t.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(t.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){t.geometry=o(e.geometries,this.geometry);const n=this.geometry.parameters;if(n!==0[0]&&n.shapes!==0[0]){const t=n.shapes;if(Array.isArray(t))for(let n=0,s=t.length;n<s;n++){const i=t[n];o(e.shapes,i)}else o(e.shapes,t)}}if(this.isSkinnedMesh&&(t.bindMode=this.bindMode,t.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==0[0]&&(o(e.skeletons,this.skeleton),t.skeleton=this.skeleton.uuid)),this.material!==0[0])if(Array.isArray(this.material)){const n=[];for(let t=0,s=this.material.length;t<s;t++)n.push(o(e.materials,this.material[t]));t.material=n}else t.material=o(e.materials,this.material);if(this.children.length>0){t.children=[];for(let n=0;n<this.children.length;n++)t.children.push(this.children[n].toJSON(e).object)}if(this.animations.length>0){t.animations=[];for(let n=0;n<this.animations.length;n++){const s=this.animations[n];t.animations.push(o(e.animations,s))}}if(i){const t=s(e.geometries),o=s(e.materials),i=s(e.textures),a=s(e.images),r=s(e.shapes),c=s(e.skeletons),l=s(e.animations),d=s(e.nodes);t.length>0&&(n.geometries=t),o.length>0&&(n.materials=o),i.length>0&&(n.textures=i),a.length>0&&(n.images=a),r.length>0&&(n.shapes=r),c.length>0&&(n.skeletons=c),l.length>0&&(n.animations=l),d.length>0&&(n.nodes=d)}return n.object=t,n;function s(e){const t=[];for(const s in e){const n=e[s];delete n.metadata,t.push(n)}return t}}clone(e){return(new this.constructor).copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let t=0;t<e.children.length;t++){const n=e.children[t];this.add(n.clone())}return this}},Sn.DEFAULT_UP=new t(0,1,0),Sn.DEFAULT_MATRIX_AUTO_UPDATE=!0,Sn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0,Et=new t,Dn=new t,Zu=new t,gn=new t,vo=new t,fo=new t,c3=new t,e1=new t,i1=new t,a1=new t,r1=new j,l1=new j,d1=new j,ja=class _Triangle{constructor(e=new t,n=new t,s=new t){this.a=e,this.b=n,this.c=s}static getNormal(e,t,n,s){s.subVectors(n,t),Et.subVectors(e,t),s.cross(Et);const o=s.lengthSq();return o>0?s.multiplyScalar(1/o**.5):s.set(0,0,0)}static getBarycoord(e,t,n,s,o){Et.subVectors(s,t),Dn.subVectors(n,t),Zu.subVectors(e,t);const a=Et.dot(Et),i=Et.dot(Dn),r=Et.dot(Zu),c=Dn.dot(Dn),l=Dn.dot(Zu),d=a*c-i*i;if(d===0)return o.set(0,0,0),null;const u=1/d,h=(c*r-i*l)*u,m=(a*l-i*r)*u;return o.set(1-h-m,m,h)}static containsPoint(e,t,n,s){return this.getBarycoord(e,t,n,s,gn)!==null&&gn.x>=0&&gn.y>=0&&gn.x+gn.y<=1}static getInterpolation(e,t,n,s,o,i,a,r){return this.getBarycoord(e,t,n,s,gn)===null?(r.x=0,r.y=0,"z"in r&&(r.z=0),"w"in r&&(r.w=0),null):(r.setScalar(0),r.addScaledVector(o,gn.x),r.addScaledVector(i,gn.y),r.addScaledVector(a,gn.z),r)}static getInterpolatedAttribute(e,t,n,s,o,i){return r1.setScalar(0),l1.setScalar(0),d1.setScalar(0),r1.fromBufferAttribute(e,t),l1.fromBufferAttribute(e,n),d1.fromBufferAttribute(e,s),i.setScalar(0),i.addScaledVector(r1,o.x),i.addScaledVector(l1,o.y),i.addScaledVector(d1,o.z),i}static isFrontFacing(e,t,n,s){return Et.subVectors(n,t),Dn.subVectors(e,t),Et.cross(Dn).dot(s)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,s){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[s]),this}setFromAttributeAndIndices(e,t,n,s){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,s),this}clone(){return(new this.constructor).copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return Et.subVectors(this.c,this.b),Dn.subVectors(this.a,this.b),Et.cross(Dn).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return _Triangle.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return _Triangle.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,n,s,o){return _Triangle.getInterpolation(e,this.a,this.b,this.c,t,n,s,o)}containsPoint(e){return _Triangle.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return _Triangle.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const o=this.a,d=this.b,h=this.c;let u,i;vo.subVectors(d,o),fo.subVectors(h,o),e1.subVectors(e,o);const a=vo.dot(e1),r=fo.dot(e1);if(a<=0&&r<=0)return t.copy(o);i1.subVectors(e,d);const n=vo.dot(i1),c=fo.dot(i1);if(n>=0&&c<=n)return t.copy(d);const m=a*c-n*r;if(m<=0&&a>=0&&n<=0)return u=a/(a-n),t.copy(o).addScaledVector(vo,u);a1.subVectors(e,h);const l=vo.dot(a1),s=fo.dot(a1);if(s>=0&&l<=s)return t.copy(h);const f=l*r-a*s;if(f<=0&&r>=0&&s<=0)return i=r/(r-s),t.copy(o).addScaledVector(fo,i);const p=n*s-l*c;if(p<=0&&c-n>=0&&l-s>=0)return c3.subVectors(h,d),i=(c-n)/(c-n+(l-s)),t.copy(d).addScaledVector(c3,i);const g=1/(p+f+m);return u=f*g,i=m*g,t.copy(o).addScaledVector(vo,u).addScaledVector(fo,i)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}},q2={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Qn={h:0,s:0,l:0},bl={h:0,s:0,l:0};function U2(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+(t-e)*6*n:n<1/2?t:n<2/3?e+(t-e)*6*(2/3-n):e}T=class{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,n)}set(e,t,n){if(t===0[0]&&n===0[0]){const t=e;t&&t.isColor?this.copy(t):typeof t=="number"?this.setHex(t):typeof t=="string"&&this.setStyle(t)}else this.setRGB(e,t,n);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=lt){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,v.colorSpaceToWorking(this,t),this}setRGB(e,t,n,s=v.workingColorSpace){return this.r=e,this.g=t,this.b=n,v.colorSpaceToWorking(this,s),this}setHSL(e,t,n,s=v.workingColorSpace){if(e=qh(e,1),t=M(t,0,1),n=M(n,0,1),t===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+t):n+t-n*t,o=2*n-s;this.r=U2(o,s,e+1/3),this.g=U2(o,s,e),this.b=U2(o,s,e-1/3)}return v.colorSpaceToWorking(this,s),this}setStyle(e,t=lt){function s(t){if(t===0[0])return;parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let n;if(n=/^(\w+)\(([^)]*)\)/.exec(e)){let o;const a=n[1],i=n[2];switch(a){case"rgb":case"rgba":if(o=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i))return s(o[4]),this.setRGB(Math.min(255,parseInt(o[1],10))/255,Math.min(255,parseInt(o[2],10))/255,Math.min(255,parseInt(o[3],10))/255,t);if(o=/^\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i))return s(o[4]),this.setRGB(Math.min(100,parseInt(o[1],10))/100,Math.min(100,parseInt(o[2],10))/100,Math.min(100,parseInt(o[3],10))/100,t);break;case"hsl":case"hsla":if(o=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)%\s*,\s*(\d*\.?\d+)%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i))return s(o[4]),this.setHSL(parseFloat(o[1])/360,parseFloat(o[2])/100,parseFloat(o[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(n=/^#([A-Fa-f\d]+)$/.exec(e)){const s=n[1],o=s.length;if(o===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,t);if(o===6)return this.setHex(parseInt(s,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=lt){const n=q2[e.toLowerCase()];return n!==0[0]?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=Gn(e.r),this.g=Gn(e.g),this.b=Gn(e.b),this}copyLinearToSRGB(e){return this.r=Ra(e.r),this.g=Ra(e.g),this.b=Ra(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=lt){return v.workingToColorSpace(xe.copy(this),e),Math.round(M(xe.r*255,0,255))*65536+Math.round(M(xe.g*255,0,255))*256+Math.round(M(xe.b*255,0,255))}getHexString(e=lt){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=v.workingColorSpace){v.workingToColorSpace(xe.copy(this),t);const a=xe.r,n=xe.g,s=xe.b,o=Math.max(a,n,s),r=Math.min(a,n,s);let i,c;const l=(r+o)/2;if(r===o)i=0,c=0;else{const e=o-r;switch(c=l<=.5?e/(o+r):e/(2-o-r),o){case a:i=(n-s)/e+(n<s?6:0);break;case n:i=(s-a)/e+2;break;case s:i=(a-n)/e+4;break}i/=6}return e.h=i,e.s=c,e.l=l,e}getRGB(e,t=v.workingColorSpace){return v.workingToColorSpace(xe.copy(this),t),e.r=xe.r,e.g=xe.g,e.b=xe.b,e}getStyle(e=lt){v.workingToColorSpace(xe.copy(this),e);const t=xe.r,n=xe.g,s=xe.b;return e!==lt?`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${s.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(s*255)})`}offsetHSL(e,t,n){return this.getHSL(Qn),this.setHSL(Qn.h+e,Qn.s+t,Qn.l+n)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(Qn),e.getHSL(bl);const n=Zc(Qn.h,bl.h,t),s=Zc(Qn.s,bl.s,t),o=Zc(Qn.l,bl.l,t);return this.setHSL(n,s,o),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const n=this.r,s=this.g,o=this.b,t=e.elements;return this.r=t[0]*n+t[3]*s+t[6]*o,this.g=t[1]*n+t[4]*s+t[7]*o,this.b=t[2]*n+t[5]*s+t[8]*o,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}},xe=new T,T.NAMES=q2,a_=0,Do=class extends fs{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:a_++}),this.uuid=is(),this.name="",this.type="Material",this.blending=rt,this.side=ot,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=_a,this.blendDst=wa,this.blendEquation=Se,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new T(0,0,0),this.blendAlpha=0,this.depthFunc=ps,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Xd,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Ds,this.stencilZFail=Ds,this.stencilZPass=Ds,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.allowOverride=!0,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!==e>0&&this.version++,this._alphaTest=e}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e===0[0])return;for(const s in e){const n=e[s];if(n===0[0]){console.warn(`THREE.Material: parameter '${s}' has value of undefined.`);continue}const t=this[s];if(t===0[0]){console.warn(`THREE.Material: '${s}' is not a property of THREE.${this.type}.`);continue}t&&t.isColor?t.set(n):t&&t.isVector3&&n&&n.isVector3?t.copy(n):this[s]=n}}toJSON(e){const n=e===0[0]||typeof e=="string";n&&(e={textures:{},images:{}});const t={metadata:{version:4.7,type:"Material",generator:"Material.toJSON"}};t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),this.color&&this.color.isColor&&(t.color=this.color.getHex()),this.roughness!==0[0]&&(t.roughness=this.roughness),this.metalness!==0[0]&&(t.metalness=this.metalness),this.sheen!==0[0]&&(t.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(t.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==0[0]&&(t.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(t.emissive=this.emissive.getHex()),this.emissiveIntensity!==0[0]&&this.emissiveIntensity!==1&&(t.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(t.specular=this.specular.getHex()),this.specularIntensity!==0[0]&&(t.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(t.specularColor=this.specularColor.getHex()),this.shininess!==0[0]&&(t.shininess=this.shininess),this.clearcoat!==0[0]&&(t.clearcoat=this.clearcoat),this.clearcoatRoughness!==0[0]&&(t.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(t.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(t.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(t.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,t.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.sheenColorMap&&this.sheenColorMap.isTexture&&(t.sheenColorMap=this.sheenColorMap.toJSON(e).uuid),this.sheenRoughnessMap&&this.sheenRoughnessMap.isTexture&&(t.sheenRoughnessMap=this.sheenRoughnessMap.toJSON(e).uuid),this.dispersion!==0[0]&&(t.dispersion=this.dispersion),this.iridescence!==0[0]&&(t.iridescence=this.iridescence),this.iridescenceIOR!==0[0]&&(t.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==0[0]&&(t.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(t.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(t.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==0[0]&&(t.anisotropy=this.anisotropy),this.anisotropyRotation!==0[0]&&(t.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(t.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(t.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(t.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(t.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(t.lightMap=this.lightMap.toJSON(e).uuid,t.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(t.aoMap=this.aoMap.toJSON(e).uuid,t.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(t.bumpMap=this.bumpMap.toJSON(e).uuid,t.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(t.normalMap=this.normalMap.toJSON(e).uuid,t.normalMapType=this.normalMapType,t.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(t.displacementMap=this.displacementMap.toJSON(e).uuid,t.displacementScale=this.displacementScale,t.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(t.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(t.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(t.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(t.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(t.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(t.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(t.envMap=this.envMap.toJSON(e).uuid,this.combine!==0[0]&&(t.combine=this.combine)),this.envMapRotation!==0[0]&&(t.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==0[0]&&(t.envMapIntensity=this.envMapIntensity),this.reflectivity!==0[0]&&(t.reflectivity=this.reflectivity),this.refractionRatio!==0[0]&&(t.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(t.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==0[0]&&(t.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(t.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==0[0]&&(t.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(t.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==0[0]&&this.attenuationDistance!==1/0&&(t.attenuationDistance=this.attenuationDistance),this.attenuationColor!==0[0]&&(t.attenuationColor=this.attenuationColor.getHex()),this.size!==0[0]&&(t.size=this.size),this.shadowSide!==null&&(t.shadowSide=this.shadowSide),this.sizeAttenuation!==0[0]&&(t.sizeAttenuation=this.sizeAttenuation),this.blending!==rt&&(t.blending=this.blending),this.side!==ot&&(t.side=this.side),this.vertexColors===!0&&(t.vertexColors=!0),this.opacity<1&&(t.opacity=this.opacity),this.transparent===!0&&(t.transparent=!0),this.blendSrc!==_a&&(t.blendSrc=this.blendSrc),this.blendDst!==wa&&(t.blendDst=this.blendDst),this.blendEquation!==Se&&(t.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(t.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(t.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(t.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(t.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(t.blendAlpha=this.blendAlpha),this.depthFunc!==ps&&(t.depthFunc=this.depthFunc),this.depthTest===!1&&(t.depthTest=this.depthTest),this.depthWrite===!1&&(t.depthWrite=this.depthWrite),this.colorWrite===!1&&(t.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(t.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==Xd&&(t.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(t.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(t.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==Ds&&(t.stencilFail=this.stencilFail),this.stencilZFail!==Ds&&(t.stencilZFail=this.stencilZFail),this.stencilZPass!==Ds&&(t.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(t.stencilWrite=this.stencilWrite),this.rotation!==0[0]&&this.rotation!==0&&(t.rotation=this.rotation),this.polygonOffset===!0&&(t.polygonOffset=!0),this.polygonOffsetFactor!==0&&(t.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(t.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==0[0]&&this.linewidth!==1&&(t.linewidth=this.linewidth),this.dashSize!==0[0]&&(t.dashSize=this.dashSize),this.gapSize!==0[0]&&(t.gapSize=this.gapSize),this.scale!==0[0]&&(t.scale=this.scale),this.dithering===!0&&(t.dithering=!0),this.alphaTest>0&&(t.alphaTest=this.alphaTest),this.alphaHash===!0&&(t.alphaHash=!0),this.alphaToCoverage===!0&&(t.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(t.premultipliedAlpha=!0),this.forceSinglePass===!0&&(t.forceSinglePass=!0),this.wireframe===!0&&(t.wireframe=!0),this.wireframeLinewidth>1&&(t.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(t.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(t.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(t.flatShading=!0),this.visible===!1&&(t.visible=!1),this.toneMapped===!1&&(t.toneMapped=!1),this.fog===!1&&(t.fog=!1),Object.keys(this.userData).length>0&&(t.userData=this.userData);function s(e){const t=[];for(const s in e){const n=e[s];delete n.metadata,t.push(n)}return t}if(n){const n=s(e.textures),o=s(e.images);n.length>0&&(t.textures=n),o.length>0&&(t.images=o)}return t}clone(){return(new this.constructor).copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const e=t.length;n=new Array(e);for(let s=0;s!==e;++s)n[s]=t[s].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}},sn=class extends Do{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new T(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Hn,this.combine=r8,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}},un=NT();function NT(){const o=new ArrayBuffer(4),a=new Float32Array(o),r=new Uint32Array(o),e=new Uint32Array(512),t=new Uint32Array(512);for(let n=0;n<256;++n){const s=n-127;s<-27?(e[n]=0,e[n|256]=32768,t[n]=24,t[n|256]=24):s<-14?(e[n]=1024>>-s-14,e[n|256]=1024>>-s-14|32768,t[n]=-s-1,t[n|256]=-s-1):s<=15?(e[n]=s+15<<10,e[n|256]=s+15<<10|32768,t[n]=13,t[n|256]=13):s<128?(e[n]=31744,e[n|256]=64512,t[n]=24,t[n|256]=24):(e[n]=31744,e[n|256]=64512,t[n]=13,t[n|256]=13)}const s=new Uint32Array(2048),n=new Uint32Array(64),i=new Uint32Array(64);for(let e=1;e<1024;++e){let t=e<<13,n=0;for(;(t&8388608)===0;)t<<=1,n-=8388608;t&=~8388608,n+=947912704,s[e]=t|n}for(let e=1024;e<2048;++e)s[e]=939524096+(e-1024<<13);for(let e=1;e<31;++e)n[e]=e<<23;n[31]=1199570944,n[32]=2147483648;for(let e=33;e<63;++e)n[e]=2147483648+(e-32<<23);n[63]=3347054592;for(let e=1;e<64;++e)e!==32&&(i[e]=1024);return{floatView:a,uint32View:r,baseTable:e,shiftTable:t,mantissaTable:s,exponentTable:n,offsetTable:i}}function jt(e){(e<0?-e:e)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),e=M(e,-65504,65504),un.floatView[0]=e;const t=un.uint32View[0],n=t>>23&511;return un.baseTable[n]+((t&8388607)>>un.shiftTable[n])}function m1(e){const t=e>>10;return un.uint32View[0]=un.mantissaTable[un.offsetTable[t]+(e&1023)]+un.exponentTable[t],un.floatView[0]}te=new t,Tc=new w,c_=0,Me=class{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:c_++}),this.name="",this.array=e,this.itemSize=t,this.count=e!==0[0]?e.length/t:0,this.normalized=n,this.usage=$c,this.updateRanges=[],this.gpuType=X,this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let s=0,o=this.itemSize;s<o;s++)this.array[e+s]=t.array[n+s];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)Tc.fromBufferAttribute(this,t),Tc.applyMatrix3(e),this.setXY(t,Tc.x,Tc.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)te.fromBufferAttribute(this,t),te.applyMatrix3(e),this.setXYZ(t,te.x,te.y,te.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)te.fromBufferAttribute(this,t),te.applyMatrix4(e),this.setXYZ(t,te.x,te.y,te.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)te.fromBufferAttribute(this,t),te.applyNormalMatrix(e),this.setXYZ(t,te.x,te.y,te.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)te.fromBufferAttribute(this,t),te.transformDirection(e),this.setXYZ(t,te.x,te.y,te.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let n=this.array[e*this.itemSize+t];return this.normalized&&(n=We(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=y(n,this.array)),this.array[e*this.itemSize+t]=n,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=We(t,this.array)),t}setX(e,t){return this.normalized&&(t=y(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=We(t,this.array)),t}setY(e,t){return this.normalized&&(t=y(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=We(t,this.array)),t}setZ(e,t){return this.normalized&&(t=y(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=We(t,this.array)),t}setW(e,t){return this.normalized&&(t=y(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=y(t,this.array),n=y(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,s){return e*=this.itemSize,this.normalized&&(t=y(t,this.array),n=y(n,this.array),s=y(s,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=s,this}setXYZW(e,t,n,s,o){return e*=this.itemSize,this.normalized&&(t=y(t,this.array),n=y(n,this.array),s=y(s,this.array),o=y(o,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=s,this.array[e+3]=o,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==$c&&(e.usage=this.usage),e}},p1=class extends Me{constructor(e,t,n){super(new Uint16Array(e),t,n)}},g1=class extends Me{constructor(e,t,n){super(new Uint32Array(e),t,n)}},R2=class extends Me{constructor(e,t,n){super(new Uint16Array(e),t,n),this.isFloat16BufferAttribute=!0}getX(e){let t=m1(this.array[e*this.itemSize]);return this.normalized&&(t=We(t,this.array)),t}setX(e,t){return this.normalized&&(t=y(t,this.array)),this.array[e*this.itemSize]=jt(t),this}getY(e){let t=m1(this.array[e*this.itemSize+1]);return this.normalized&&(t=We(t,this.array)),t}setY(e,t){return this.normalized&&(t=y(t,this.array)),this.array[e*this.itemSize+1]=jt(t),this}getZ(e){let t=m1(this.array[e*this.itemSize+2]);return this.normalized&&(t=We(t,this.array)),t}setZ(e,t){return this.normalized&&(t=y(t,this.array)),this.array[e*this.itemSize+2]=jt(t),this}getW(e){let t=m1(this.array[e*this.itemSize+3]);return this.normalized&&(t=We(t,this.array)),t}setW(e,t){return this.normalized&&(t=y(t,this.array)),this.array[e*this.itemSize+3]=jt(t),this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=y(t,this.array),n=y(n,this.array)),this.array[e+0]=jt(t),this.array[e+1]=jt(n),this}setXYZ(e,t,n,s){return e*=this.itemSize,this.normalized&&(t=y(t,this.array),n=y(n,this.array),s=y(s,this.array)),this.array[e+0]=jt(t),this.array[e+1]=jt(n),this.array[e+2]=jt(s),this}setXYZW(e,t,n,s,o){return e*=this.itemSize,this.normalized&&(t=y(t,this.array),n=y(n,this.array),s=y(s,this.array),o=y(o,this.array)),this.array[e+0]=jt(t),this.array[e+1]=jt(n),this.array[e+2]=jt(s),this.array[e+3]=jt(o),this}},Le=class extends Me{constructor(e,t,n){super(new Float32Array(e),t,n)}},l_=0,pt=new W,v1=new Sn,Qo=new t,at=new Or,wr=new Or,he=new t,Cn=class _BufferGeometry extends fs{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:l_++}),this.uuid=is(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(yh(e)?g1:p1)(e,1):this.index=e,this}setIndirect(e){return this.indirect=e,this}getIndirect(){return this.indirect}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==0[0]}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==0[0]&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==0[0]){const t=(new b).getNormalMatrix(e);n.applyNormalMatrix(t),n.needsUpdate=!0}const s=this.attributes.tangent;return s!==0[0]&&(s.transformDirection(e),s.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return pt.makeRotationFromQuaternion(e),this.applyMatrix4(pt),this}rotateX(e){return pt.makeRotationX(e),this.applyMatrix4(pt),this}rotateY(e){return pt.makeRotationY(e),this.applyMatrix4(pt),this}rotateZ(e){return pt.makeRotationZ(e),this.applyMatrix4(pt),this}translate(e,t,n){return pt.makeTranslation(e,t,n),this.applyMatrix4(pt),this}scale(e,t,n){return pt.makeScale(e,t,n),this.applyMatrix4(pt),this}lookAt(e){return v1.lookAt(e),v1.updateMatrix(),this.applyMatrix4(v1.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Qo).negate(),this.translate(Qo.x,Qo.y,Qo.z),this}setFromPoints(e){const t=this.getAttribute("position");if(t===0[0]){const t=[];for(let n=0,o=e.length;n<o;n++){const s=e[n];t.push(s.x,s.y,s.z||0)}this.setAttribute("position",new Le(t,3))}else{const n=Math.min(e.length,t.count);for(let s=0;s<n;s++){const o=e[s];t.setXYZ(s,o.x,o.y,o.z||0)}e.length>t.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),t.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Or);const e=this.attributes.position,n=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new t(-(1/0),-(1/0),-(1/0)),new t(1/0,1/0,1/0));return}if(e!==0[0]){if(this.boundingBox.setFromBufferAttribute(e),n)for(let e=0,t=n.length;e<t;e++){const s=n[e];at.setFromBufferAttribute(s),this.morphTargetsRelative?(he.addVectors(this.boundingBox.min,at.min),this.boundingBox.expandByPoint(he),he.addVectors(this.boundingBox.max,at.max),this.boundingBox.expandByPoint(he)):(this.boundingBox.expandByPoint(at.min),this.boundingBox.expandByPoint(at.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new $r);const e=this.attributes.position,n=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new t,1/0);return}if(e){const s=this.boundingSphere.center;if(at.setFromBufferAttribute(e),n)for(let e=0,t=n.length;e<t;e++){const s=n[e];wr.setFromBufferAttribute(s),this.morphTargetsRelative?(he.addVectors(at.min,wr.min),at.expandByPoint(he),he.addVectors(at.max,wr.max),at.expandByPoint(he)):(at.expandByPoint(wr.min),at.expandByPoint(wr.max))}at.getCenter(s);let t=0;for(let n=0,o=e.count;n<o;n++)he.fromBufferAttribute(e,n),t=Math.max(t,s.distanceToSquared(he));if(n)for(let o=0,a=n.length;o<a;o++){const i=n[o],r=this.morphTargetsRelative;for(let n=0,o=i.count;n<o;n++)he.fromBufferAttribute(i,n),r&&(Qo.fromBufferAttribute(e,n),he.add(Qo)),t=Math.max(t,s.distanceToSquared(he))}this.boundingSphere.radius=t**.5,isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,s=this.attributes;if(e===null||s.position===0[0]||s.normal===0[0]||s.uv===0[0]){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const a=s.position,_=s.normal,b=s.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new Me(new Float32Array(4*a.count),4));const x=this.getAttribute("tangent"),c=[],l=[];for(let e=0;e<a.count;e++)c[e]=new t,l[e]=new t;const g=new t,h=new t,u=new t,p=new w,n=new w,i=new w,m=new t,d=new t;function O(e,t,s){g.fromBufferAttribute(a,e),h.fromBufferAttribute(a,t),u.fromBufferAttribute(a,s),p.fromBufferAttribute(b,e),n.fromBufferAttribute(b,t),i.fromBufferAttribute(b,s),h.sub(g),u.sub(g),n.sub(p),i.sub(p);const o=1/(n.x*i.y-i.x*n.y);if(!isFinite(o))return;m.copy(h).multiplyScalar(i.y).addScaledVector(u,-n.y).multiplyScalar(o),d.copy(u).multiplyScalar(n.x).addScaledVector(h,-i.x).multiplyScalar(o),c[e].add(m),c[t].add(m),c[s].add(m),l[e].add(d),l[t].add(d),l[s].add(d)}let o=this.groups;o.length===0&&(o=[{start:0,count:e.count}]);for(let t=0,i=o.length;t<i;++t){const n=o[t],s=n.start,a=n.count;for(let t=s,n=s+a;t<n;t+=3)O(e.getX(t+0),e.getX(t+1),e.getX(t+2))}const r=new t,j=new t,f=new t,y=new t;function v(e){f.fromBufferAttribute(_,e),y.copy(f);const t=c[e];r.copy(t),r.sub(f.multiplyScalar(f.dot(t))).normalize(),j.crossVectors(y,t);const n=j.dot(l[e]),s=n<0?-1:1;x.setXYZW(e,r.x,r.y,r.z,s)}for(let t=0,i=o.length;t<i;++t){const n=o[t],s=n.start,a=n.count;for(let t=s,n=s+a;t<n;t+=3)v(e.getX(t+0)),v(e.getX(t+1)),v(e.getX(t+2))}}computeVertexNormals(){const n=this.index,e=this.getAttribute("position");if(e!==0[0]){let o=this.getAttribute("normal");if(o===0[0])o=new Me(new Float32Array(e.count*3),3),this.setAttribute("normal",o);else for(let e=0,t=o.count;e<t;e++)o.setXYZ(e,0,0,0);const l=new t,i=new t,d=new t,a=new t,r=new t,c=new t,s=new t,u=new t;if(n)for(let t=0,p=n.count;t<p;t+=3){const h=n.getX(t+0),m=n.getX(t+1),f=n.getX(t+2);l.fromBufferAttribute(e,h),i.fromBufferAttribute(e,m),d.fromBufferAttribute(e,f),s.subVectors(d,i),u.subVectors(l,i),s.cross(u),a.fromBufferAttribute(o,h),r.fromBufferAttribute(o,m),c.fromBufferAttribute(o,f),a.add(s),r.add(s),c.add(s),o.setXYZ(h,a.x,a.y,a.z),o.setXYZ(m,r.x,r.y,r.z),o.setXYZ(f,c.x,c.y,c.z)}else for(let t=0,n=e.count;t<n;t+=3)l.fromBufferAttribute(e,t+0),i.fromBufferAttribute(e,t+1),d.fromBufferAttribute(e,t+2),s.subVectors(d,i),u.subVectors(l,i),s.cross(u),o.setXYZ(t+0,s.x,s.y,s.z),o.setXYZ(t+1,s.x,s.y,s.z),o.setXYZ(t+2,s.x,s.y,s.z);this.normalizeNormals(),o.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)he.fromBufferAttribute(e,t),he.normalize(),e.setXYZ(t,he.x,he.y,he.z)}toNonIndexed(){function t(e,t){const o=e.array,n=e.itemSize,a=e.normalized,i=new o.constructor(t.length*n);let s=0,r=0;for(let a=0,c=t.length;a<c;a++){e.isInterleavedBufferAttribute?s=t[a]*e.data.stride+e.offset:s=t[a]*n;for(let e=0;e<n;e++)i[r++]=o[s++]}return new Me(i,n,a)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new _BufferGeometry,n=this.index.array,s=this.attributes;for(const o in s){const i=s[o],a=t(i,n);e.setAttribute(o,a)}const o=this.morphAttributes;for(const s in o){const i=[],a=o[s];for(let e=0,s=a.length;e<s;e++){const o=a[e],r=t(o,n);i.push(r)}e.morphAttributes[s]=i}e.morphTargetsRelative=this.morphTargetsRelative;const i=this.groups;for(let t=0,s=i.length;t<s;t++){const n=i[t];e.addGroup(n.start,n.count,n.materialIndex)}return e}toJSON(){const e={metadata:{version:4.7,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==0[0]){const t=this.parameters;for(const n in t)t[n]!==0[0]&&(e[n]=t[n]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const t in n){const s=n[t];e.data.attributes[t]=s.toJSON(e.data)}const s={};let o=!1;for(const n in this.morphAttributes){const i=this.morphAttributes[n],t=[];for(let n=0,s=i.length;n<s;n++){const o=i[n];t.push(o.toJSON(e.data))}t.length>0&&(s[n]=t,o=!0)}o&&(e.data.morphAttributes=s,e.data.morphTargetsRelative=this.morphTargetsRelative);const i=this.groups;i.length>0&&(e.data.groups=JSON.parse(JSON.stringify(i)));const a=this.boundingSphere;return a!==null&&(e.data.boundingSphere=a.toJSON()),e}clone(){return(new this.constructor).copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone());const s=e.attributes;for(const e in s){const n=s[e];this.setAttribute(e,n.clone(t))}const o=e.morphAttributes;for(const e in o){const n=[],s=o[e];for(let e=0,o=s.length;e<o;e++)n.push(s[e].clone(t));this.morphAttributes[e]=n}this.morphTargetsRelative=e.morphTargetsRelative;const i=e.groups;for(let e=0,n=i.length;e<n;e++){const t=i[e];this.addGroup(t.start,t.count,t.materialIndex)}const a=e.boundingBox;a!==null&&(this.boundingBox=a.clone());const r=e.boundingSphere;return r!==null&&(this.boundingSphere=r.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}},D2=new W,As=new Py,Ir=new $r,T2=new t,Pr=new t,Rr=new t,Lr=new t,y1=new t,Dc=new t,k2=new t,Lc=new t,be=class extends Sn{constructor(e=new Cn,t=new sn){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.morphTargetDictionary=0[0],this.morphTargetInfluences=0[0],this.count=1,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==0[0]&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==0[0]&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const n=this.geometry,e=n.morphAttributes,t=Object.keys(e);if(t.length>0){const n=e[t[0]];if(n!==0[0]){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,t=n.length;e<t;e++){const s=n[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[s]=e}}}}getVertexPosition(e,t){const n=this.geometry,i=n.attributes.position,s=n.morphAttributes.position,a=n.morphTargetsRelative;t.fromBufferAttribute(i,e);const o=this.morphTargetInfluences;if(s&&o){Dc.set(0,0,0);for(let n=0,r=s.length;n<r;n++){const i=o[n],c=s[n];if(i===0)continue;y1.fromBufferAttribute(c,e),a?Dc.addScaledVector(y1,i):Dc.addScaledVector(y1.sub(t),i)}t.add(Dc)}return t}raycast(e,t){const n=this.geometry,o=this.material,s=this.matrixWorld;if(o===0[0])return;if(n.boundingSphere===null&&n.computeBoundingSphere(),Ir.copy(n.boundingSphere),Ir.applyMatrix4(s),As.copy(e.ray).recast(e.near),Ir.containsPoint(As.origin)===!1){if(As.intersectSphere(Ir,T2)===null)return;if(As.origin.distanceToSquared(T2)>(e.far-e.near)**2)return}if(D2.copy(s).invert(),As.copy(e.ray).applyMatrix4(D2),n.boundingBox!==null&&As.intersectsBox(n.boundingBox)===!1)return;this._computeIntersections(e,t,As)}_computeIntersections(e,t,n){let s;const a=this.geometry,r=this.material,i=a.index,h=a.attributes.position,c=a.attributes.uv,l=a.attributes.uv1,d=a.attributes.normal,u=a.groups,o=a.drawRange;if(i!==null)if(Array.isArray(r))for(let h=0,m=u.length;h<m;h++){const a=u[h],f=r[a.materialIndex],p=Math.max(a.start,o.start),g=Math.min(i.count,Math.min(a.start+a.count,o.start+o.count));for(let o=p,r=g;o<r;o+=3){const u=i.getX(o),h=i.getX(o+1),m=i.getX(o+2);s=O1(this,f,e,n,c,l,d,u,h,m),s&&(s.faceIndex=Math.floor(o/3),s.face.materialIndex=a.materialIndex,t.push(s))}}else{const a=Math.max(0,o.start),u=Math.min(i.count,o.start+o.count);for(let o=a,h=u;o<h;o+=3){const m=i.getX(o),f=i.getX(o+1),p=i.getX(o+2);s=O1(this,r,e,n,c,l,d,m,f,p),s&&(s.faceIndex=Math.floor(o/3),t.push(s))}}else if(h!==0[0])if(Array.isArray(r))for(let a=0,m=u.length;a<m;a++){const i=u[a],f=r[i.materialIndex],p=Math.max(i.start,o.start),g=Math.min(h.count,Math.min(i.start+i.count,o.start+o.count));for(let o=p,a=g;o<a;o+=3){const r=o,u=o+1,h=o+2;s=O1(this,f,e,n,c,l,d,r,u,h),s&&(s.faceIndex=Math.floor(o/3),s.face.materialIndex=i.materialIndex,t.push(s))}}else{const i=Math.max(0,o.start),a=Math.min(h.count,o.start+o.count);for(let o=i,u=a;o<u;o+=3){const h=o,m=o+1,f=o+2;s=O1(this,r,e,n,c,l,d,h,m,f),s&&(s.faceIndex=Math.floor(o/3),t.push(s))}}}};function ST(e,t,n,s,o,i,a,r){let c;if(t.side===B?c=s.intersectTriangle(a,i,o,!0,r):c=s.intersectTriangle(o,i,a,t.side===ot,r),c===null)return null;Lc.copy(r),Lc.applyMatrix4(e.matrixWorld);const l=n.ray.origin.distanceTo(Lc);return l<n.near||l>n.far?null:{distance:l,point:Lc.clone(),object:e}}function O1(e,n,s,o,i,a,r,c,l,d){e.getVertexPosition(c,Pr),e.getVertexPosition(l,Rr),e.getVertexPosition(d,Lr);const u=ST(e,n,s,o,Pr,Rr,Lr,k2);if(u){const e=new t;ja.getBarycoord(k2,Pr,Rr,Lr,e),i&&(u.uv=ja.getInterpolatedAttribute(i,c,l,d,e,new w)),a&&(u.uv1=ja.getInterpolatedAttribute(a,c,l,d,e,new w)),r&&(u.normal=ja.getInterpolatedAttribute(r,c,l,d,e,new t),u.normal.dot(o.direction)>0&&u.normal.multiplyScalar(-1));const n={a:c,b:l,c:d,normal:new t,materialIndex:0};ja.getNormal(Pr,Rr,Lr,n.normal),u.face=n,u.barycoord=e}return u}kr=class _BoxGeometry extends Cn{constructor(e=1,n=1,s=1,o=1,i=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:n,depth:s,widthSegments:o,heightSegments:i,depthSegments:a};const f=this;o=Math.floor(o),i=Math.floor(i),a=Math.floor(a);const l=[],u=[],h=[],d=[];let c=0,m=0;r("z","y","x",-1,-1,s,n,e,a,i,0),r("z","y","x",1,-1,s,n,-e,a,i,1),r("x","z","y",1,1,e,s,n,o,a,2),r("x","z","y",1,-1,e,s,-n,o,a,3),r("x","y","z",1,-1,e,n,s,o,i,4),r("x","y","z",-1,-1,e,n,-s,o,i,5),this.setIndex(l),this.setAttribute("position",new Le(u,3)),this.setAttribute("normal",new Le(h,3)),this.setAttribute("uv",new Le(d,2));function r(e,n,s,o,i,a,r,p,g,v,b){const O=a/g,x=r/v,C=a/2,E=r/2,k=p/2,y=g+1,A=v+1;let w=0,_=0;const j=new t;for(let t=0;t<A;t++){const a=t*x-E;for(let r=0;r<y;r++){const c=r*O-C;j[e]=c*o,j[n]=a*i,j[s]=k,u.push(j.x,j.y,j.z),j[e]=0,j[n]=0,j[s]=p>0?1:-1,h.push(j.x,j.y,j.z),d.push(r/g),d.push(1-t/v),w+=1}}for(let e=0;e<v;e++)for(let t=0;t<g;t++){const o=c+t+y*e,n=c+t+y*(e+1),i=c+(t+1)+y*(e+1),s=c+(t+1)+y*e;l.push(o,n,s),l.push(n,i,s),_+=6}f.addGroup(m,_,b),m+=_,c+=w}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new _BoxGeometry(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}};function Er(e){const t={};for(const n in e){t[n]={};for(const o in e[n]){const s=e[n][o];s&&(s.isColor||s.isMatrix3||s.isMatrix4||s.isVector2||s.isVector3||s.isVector4||s.isTexture||s.isQuaternion)?s.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[n][o]=null):t[n][o]=s.clone():Array.isArray(s)?t[n][o]=s.slice():t[n][o]=s}}return t}function qe(e){const t={};for(let n=0;n<e.length;n++){const s=Er(e[n]);for(const e in s)t[e]=s[e]}return t}function xT(e){const t=[];for(let n=0;n<e.length;n++)t.push(e[n].clone());return t}function f_(e){const t=e.getRenderTarget();return t===null?e.outputColorSpace:t.isXRRenderTarget===!0?t.texture.colorSpace:v.workingColorSpace}M_={clone:Er,merge:qe},z_=`
void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}
`,B_=`
void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}
`,us=class extends Do{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=z_,this.fragmentShader=B_,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=0[0],this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==0[0]&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Er(e.uniforms),this.uniformsGroups=xT(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const s in this.uniforms){const o=this.uniforms[s],n=o.value;n&&n.isTexture?t.uniforms[s]={type:"t",value:n.toJSON(e).uuid}:n&&n.isColor?t.uniforms[s]={type:"c",value:n.getHex()}:n&&n.isVector2?t.uniforms[s]={type:"v2",value:n.toArray()}:n&&n.isVector3?t.uniforms[s]={type:"v3",value:n.toArray()}:n&&n.isVector4?t.uniforms[s]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?t.uniforms[s]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?t.uniforms[s]={type:"m4",value:n.toArray()}:t.uniforms[s]={value:n}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const n={};for(const e in this.extensions)this.extensions[e]===!0&&(n[e]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}},x1=class extends Sn{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new W,this.projectionMatrix=new W,this.projectionMatrixInverse=new W,this.coordinateSystem=Re,this._reversedDepth=!1}get reversedDepth(){return this._reversedDepth}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}},ds=new t,g2=new w,f2=new w,Ee=class extends x1{constructor(e=50,t=1,n=.1,s=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=s,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=Ii*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(Ia*.5*this.fov);return.5*this.getFilmHeight()/e}getEffectiveFOV(){return Ii*2*Math.atan(Math.tan(Ia*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,n){ds.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),t.set(ds.x,ds.y).multiplyScalar(-e/ds.z),ds.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(ds.x,ds.y).multiplyScalar(-e/ds.z)}getViewSize(e,t){return this.getViewBounds(e,g2,f2),t.subVectors(f2,g2)}setViewOffset(e,t,n,s,o,i){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=s,this.view.width=o,this.view.height=i,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const i=this.near;let t=i*Math.tan(Ia*.5*this.fov)/this.zoom,n=2*t,s=this.aspect*n,o=-.5*s;const e=this.view;if(this.view!==null&&this.view.enabled){const i=e.fullWidth,a=e.fullHeight;o+=e.offsetX*s/i,t-=e.offsetY*n/a,s*=e.width/i,n*=e.height/a}const a=this.filmOffset;a!==0&&(o+=i*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(o,o+s,t,t-n,i,this.far,this.coordinateSystem,this.reversedDepth),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}},Mi=-90,Fi=1,a2=class extends Sn{constructor(e,t,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const s=new Ee(Mi,Fi,e,t);s.layers=this.layers,this.add(s);const o=new Ee(Mi,Fi,e,t);o.layers=this.layers,this.add(o);const i=new Ee(Mi,Fi,e,t);i.layers=this.layers,this.add(i);const a=new Ee(Mi,Fi,e,t);a.layers=this.layers,this.add(a);const r=new Ee(Mi,Fi,e,t);r.layers=this.layers,this.add(r);const c=new Ee(Mi,Fi,e,t);c.layers=this.layers,this.add(c)}updateCoordinateSystem(){const a=this.coordinateSystem,r=this.children.concat(),[e,t,n,s,o,i]=r;for(const e of r)this.remove(e);if(a===Re)e.up.set(0,1,0),e.lookAt(1,0,0),t.up.set(0,1,0),t.lookAt(-1,0,0),n.up.set(0,0,-1),n.lookAt(0,1,0),s.up.set(0,0,1),s.lookAt(0,-1,0),o.up.set(0,1,0),o.lookAt(0,0,1),i.up.set(0,1,0),i.lookAt(0,0,-1);else if(a===Os)e.up.set(0,-1,0),e.lookAt(-1,0,0),t.up.set(0,-1,0),t.lookAt(1,0,0),n.up.set(0,0,1),n.lookAt(0,1,0),s.up.set(0,0,-1),s.lookAt(0,-1,0),o.up.set(0,-1,0),o.lookAt(0,0,1),i.up.set(0,-1,0),i.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+a);for(const e of r)this.add(e),e.updateMatrixWorld()}update(e,t){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:s}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[o,i,a,r,c,l]=this.children,d=e.getRenderTarget(),u=e.getActiveCubeFace(),h=e.getActiveMipmapLevel(),m=e.xr.enabled;e.xr.enabled=!1;const f=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0,s),e.render(t,o),e.setRenderTarget(n,1,s),e.render(t,i),e.setRenderTarget(n,2,s),e.render(t,a),e.setRenderTarget(n,3,s),e.render(t,r),e.setRenderTarget(n,4,s),e.render(t,c),n.texture.generateMipmaps=f,e.setRenderTarget(n,5,s),e.render(t,l),e.setRenderTarget(d,u,h),e.xr.enabled=m,n.texture.needsPMREMUpdate=!0}},oa=class extends Te{constructor(e=[],t=Zt,n,s,o,i,a,r,c,l){super(e,t,n,s,o,i,a,r,c,l),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}},i2=class extends Ss{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},s=[n,n,n,n,n,n];this.texture=new oa(s),this._setTextureOptions(t),this.texture.isRenderTargetTexture=!0}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new kr(5,5,5),o=new us({name:"CubemapFromEquirect",uniforms:Er(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:B,blending:Qe});o.uniforms.tEquirect.value=t;const s=new be(i,o),a=t.minFilter;t.minFilter===Be&&(t.minFilter=ie);const r=new a2(1,10,this);return r.update(e,s),t.minFilter=a,s.geometry.dispose(),s.material.dispose(),this}clear(e,t=!0,n=!0,s=!0){const o=e.getRenderTarget();for(let o=0;o<6;o++)e.setRenderTarget(this,o),e.clear(t,n,s);e.setRenderTarget(o)}},hc=class extends Sn{constructor(){super(),this.isGroup=!0,this.type="Group"}},U_={type:"move"},Wc=class{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new hc,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new hc,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new t,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new t),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new hc,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new t,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new t),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const n of e.hand.values())this._getHandJoint(t,n)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let i=null,a=null,c=null;const s=this._targetRay,o=this._grip,r=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(r&&e.hand){c=!0;for(const i of e.hand.values()){const o=t.getJointPose(i,n),s=this._getHandJoint(r,i);o!==null&&(s.matrix.fromArray(o.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale),s.matrixWorldNeedsUpdate=!0,s.jointRadius=o.radius),s.visible=o!==null}const a=r.joints["index-finger-tip"],l=r.joints["thumb-tip"],s=a.position.distanceTo(l.position),o=.02,i=.005;r.inputState.pinching&&s>o+i?(r.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!r.inputState.pinching&&s<=o-i&&(r.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else o!==null&&e.gripSpace&&(a=t.getPose(e.gripSpace,n),a!==null&&(o.matrix.fromArray(a.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,a.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(a.linearVelocity)):o.hasLinearVelocity=!1,a.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(a.angularVelocity)):o.hasAngularVelocity=!1));s!==null&&(i=t.getPose(e.targetRaySpace,n),i===null&&a!==null&&(i=a),i!==null&&(s.matrix.fromArray(i.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale),s.matrixWorldNeedsUpdate=!0,i.linearVelocity?(s.hasLinearVelocity=!0,s.linearVelocity.copy(i.linearVelocity)):s.hasLinearVelocity=!1,i.angularVelocity?(s.hasAngularVelocity=!0,s.angularVelocity.copy(i.angularVelocity)):s.hasAngularVelocity=!1,this.dispatchEvent(U_)))}return s!==null&&(s.visible=i!==null),o!==null&&(o.visible=a!==null),r!==null&&(r.visible=c!==null),this}_getHandJoint(e,t){if(e.joints[t.jointName]===0[0]){const n=new hc;n.matrixAutoUpdate=!1,n.visible=!1,e.joints[t.jointName]=n,e.add(n)}return e.joints[t.jointName]}},Uc=class extends Sn{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new Hn,this.environmentIntensity=1,this.environmentRotation=new Hn,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,this.backgroundRotation.copy(e.backgroundRotation),this.environmentIntensity=e.environmentIntensity,this.environmentRotation.copy(e.environmentRotation),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(t.object.backgroundIntensity=this.backgroundIntensity),t.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(t.object.environmentIntensity=this.environmentIntensity),t.object.environmentRotation=this.environmentRotation.toArray(),t}},n2=class{constructor(e,t){this.isInterleavedBuffer=!0,this.array=e,this.stride=t,this.count=e!==0[0]?e.length/t:0,this.usage=$c,this.updateRanges=[],this.version=0,this.uuid=is()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,n){e*=this.stride,n*=t.stride;for(let s=0,o=this.stride;s<o;s++)this.array[e+s]=t.array[n+s];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===0[0]&&(e.arrayBuffers={}),this.array.buffer._uuid===0[0]&&(this.array.buffer._uuid=is()),e.arrayBuffers[this.array.buffer._uuid]===0[0]&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const n=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),t=new this.constructor(n,this.stride);return t.setUsage(this.usage),t}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===0[0]&&(e.arrayBuffers={}),this.array.buffer._uuid===0[0]&&(this.array.buffer._uuid=is()),e.arrayBuffers[this.array.buffer._uuid]===0[0]&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}},Ie=new t,Z_=class _InterleavedBufferAttribute{constructor(e,t,n,s=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=s}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++)Ie.fromBufferAttribute(this,t),Ie.applyMatrix4(e),this.setXYZ(t,Ie.x,Ie.y,Ie.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)Ie.fromBufferAttribute(this,t),Ie.applyNormalMatrix(e),this.setXYZ(t,Ie.x,Ie.y,Ie.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)Ie.fromBufferAttribute(this,t),Ie.transformDirection(e),this.setXYZ(t,Ie.x,Ie.y,Ie.z);return this}getComponent(e,t){let n=this.array[e*this.data.stride+this.offset+t];return this.normalized&&(n=We(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=y(n,this.array)),this.data.array[e*this.data.stride+this.offset+t]=n,this}setX(e,t){return this.normalized&&(t=y(t,this.array)),this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.normalized&&(t=y(t,this.array)),this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.normalized&&(t=y(t,this.array)),this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.normalized&&(t=y(t,this.array)),this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(t=We(t,this.array)),t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(t=We(t,this.array)),t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(t=We(t,this.array)),t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(t=We(t,this.array)),t}setXY(e,t,n){return e=e*this.data.stride+this.offset,this.normalized&&(t=y(t,this.array),n=y(n,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this}setXYZ(e,t,n,s){return e=e*this.data.stride+this.offset,this.normalized&&(t=y(t,this.array),n=y(n,this.array),s=y(s,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=s,this}setXYZW(e,t,n,s,o){return e=e*this.data.stride+this.offset,this.normalized&&(t=y(t,this.array),n=y(n,this.array),s=y(s,this.array),o=y(o,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=s,this.data.array[e+3]=o,this}clone(e){if(e===0[0]){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let t=0;t<this.count;t++){const n=t*this.data.stride+this.offset;for(let t=0;t<this.itemSize;t++)e.push(this.data.array[n+t])}return new Me(new this.array.constructor(e),this.itemSize,this.normalized)}return e.interleavedBuffers===0[0]&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===0[0]&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new _InterleavedBufferAttribute(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===0[0]){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let t=0;t<this.count;t++){const n=t*this.data.stride+this.offset;for(let t=0;t<this.itemSize;t++)e.push(this.data.array[n+t])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:e,normalized:this.normalized}}return e.interleavedBuffers===0[0]&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===0[0]&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}},sw=class extends Te{constructor(e=null,t=1,n=1,s,o,i,a,r,c=V,l=V,d,u){super(null,i,a,r,c,l,s,o,d,u),this.isDataTexture=!0,this.image={data:e,width:t,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}},lw=class extends Me{constructor(e,t,n,s=1){super(e,t,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=s}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}},B1=new t,bw=new t,_w=new b,Mn=class{constructor(e=new t(1,0,0),n=0){this.isPlane=!0,this.normal=e,this.constant=n}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,s){return this.normal.set(e,t,n),this.constant=s,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const s=B1.subVectors(n,t).cross(bw.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(s,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const s=e.delta(B1),o=this.normal.dot(s);if(o===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const n=-(e.start.dot(this.normal)+this.constant)/o;return n<0||n>1?null:t.copy(e.start).addScaledVector(s,n)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||_w.getNormalMatrix(e),s=this.coplanarPoint(B1).applyMatrix4(e),o=this.normal.applyMatrix3(n).normalize();return this.constant=-s.dot(o),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return(new this.constructor).copy(this)}},mo=new $r,Ow=new w(.5,.5),Al=new t,Ml=class{constructor(e=new Mn,t=new Mn,n=new Mn,s=new Mn,o=new Mn,i=new Mn){this.planes=[e,t,n,s,o,i]}set(e,t,n,s,o,i){const a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(n),a[3].copy(s),a[4].copy(o),a[5].copy(i),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e,t=Re,n=!1){const o=this.planes,s=e.elements,y=s[0],v=s[1],d=s[2],c=s[3],f=s[4],m=s[5],l=s[6],r=s[7],p=s[8],g=s[9],u=s[10],a=s[11],b=s[12],j=s[13],h=s[14],i=s[15];if(o[0].setComponents(c-y,r-f,a-p,i-b).normalize(),o[1].setComponents(c+y,r+f,a+p,i+b).normalize(),o[2].setComponents(c+v,r+m,a+g,i+j).normalize(),o[3].setComponents(c-v,r-m,a-g,i-j).normalize(),n)o[4].setComponents(d,l,u,h).normalize(),o[5].setComponents(c-d,r-l,a-u,i-h).normalize();else if(o[4].setComponents(c-d,r-l,a-u,i-h).normalize(),t===Re)o[5].setComponents(c+d,r+l,a+u,i+h).normalize();else if(t===Os)o[5].setComponents(d,l,u,h).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);return this}intersectsObject(e){if(e.boundingSphere!==0[0])e.boundingSphere===null&&e.computeBoundingSphere(),mo.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),mo.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(mo)}intersectsSprite(e){mo.center.set(0,0,0);const t=Ow.distanceTo(e.center);return mo.radius=.7071067811865476+t,mo.applyMatrix4(e.matrixWorld),this.intersectsSphere(mo)}intersectsSphere(e){const t=this.planes,n=e.center,s=-e.radius;for(let e=0;e<6;e++){const o=t[e].distanceToPoint(n);if(o<s)return!1}return!0}intersectsBox(e){const t=this.planes;for(let s=0;s<6;s++){const n=t[s];if(Al.x=n.normal.x>0?e.max.x:e.min.x,Al.y=n.normal.y>0?e.max.y:e.min.y,Al.z=n.normal.z>0?e.max.z:e.min.z,n.distanceToPoint(Al)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}},rn=new W,nn=new Ml,xw=class _FrustumArray{constructor(){this.coordinateSystem=Re}intersectsObject(e,t){if(!t.isArrayCamera||t.cameras.length===0)return!1;for(let s=0;s<t.cameras.length;s++){const n=t.cameras[s];if(rn.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),nn.setFromProjectionMatrix(rn,n.coordinateSystem,n.reversedDepth),nn.intersectsObject(e))return!0}return!1}intersectsSprite(e,t){if(!t||!t.cameras||t.cameras.length===0)return!1;for(let s=0;s<t.cameras.length;s++){const n=t.cameras[s];if(rn.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),nn.setFromProjectionMatrix(rn,n.coordinateSystem,n.reversedDepth),nn.intersectsSprite(e))return!0}return!1}intersectsSphere(e,t){if(!t||!t.cameras||t.cameras.length===0)return!1;for(let s=0;s<t.cameras.length;s++){const n=t.cameras[s];if(rn.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),nn.setFromProjectionMatrix(rn,n.coordinateSystem,n.reversedDepth),nn.intersectsSphere(e))return!0}return!1}intersectsBox(e,t){if(!t||!t.cameras||t.cameras.length===0)return!1;for(let s=0;s<t.cameras.length;s++){const n=t.cameras[s];if(rn.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),nn.setFromProjectionMatrix(rn,n.coordinateSystem,n.reversedDepth),nn.intersectsBox(e))return!0}return!1}containsPoint(e,t){if(!t||!t.cameras||t.cameras.length===0)return!1;for(let s=0;s<t.cameras.length;s++){const n=t.cameras[s];if(rn.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),nn.setFromProjectionMatrix(rn,n.coordinateSystem,n.reversedDepth),nn.containsPoint(e))return!0}return!1}clone(){return new _FrustumArray}},Cw=class extends Te{constructor(e,t){super({width:e,height:t}),this.isFramebufferTexture=!0,this.magFilter=V,this.minFilter=V,this.generateMipmaps=!1,this.needsUpdate=!0}},At=class extends Te{constructor(e,t,n=I,s,o,i,a=V,r=V,c,l=nt,d=1){if(l!==nt&&l!==tt)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");const u={width:e,height:t,depth:d};super(u,s,o,i,a,r,l,n,c),this.isDepthTexture=!0,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.source=new zu(Object.assign({},e.image)),this.compareFunction=e.compareFunction,this}toJSON(e){const t=super.toJSON(e);return this.compareFunction!==null&&(t.compareFunction=this.compareFunction),t}},D0=class extends Te{constructor(e=null){super(),this.sourceTexture=e,this.isExternalTexture=!0}copy(e){return super.copy(e),this.sourceTexture=e.sourceTexture,this}},Ew=class _CylinderGeometry extends Cn{constructor(e=1,n=1,s=1,o=32,i=1,a=!1,r=0,c=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:n,height:s,radialSegments:o,heightSegments:i,openEnded:a,thetaStart:r,thetaLength:c};const v=this;o=Math.floor(o),i=Math.floor(i);const l=[],h=[],m=[],f=[];let d=0;const u=[],g=s/2;let p=0;j(),a===!1&&(e>0&&b(!0),n>0&&b(!1)),this.setIndex(l),this.setAttribute("position",new Le(h,3)),this.setAttribute("normal",new Le(m,3)),this.setAttribute("uv",new Le(f,2));function j(){const b=new t,a=new t;let j=0;const y=(n-e)/s;for(let t=0;t<=i;t++){const p=[],l=t/i,v=l*(n-e)+e;for(let e=0;e<=o;e++){const t=e/o,n=t*c+r,i=Math.sin(n),u=Math.cos(n);a.x=v*i,a.y=-l*s+g,a.z=v*u,h.push(a.x,a.y,a.z),b.set(i,y,u).normalize(),m.push(b.x,b.y,b.z),f.push(t,1-l),p.push(d++)}u.push(p)}for(let t=0;t<o;t++)for(let s=0;s<i;s++){const r=u[s][t],o=u[s+1][t],c=u[s+1][t+1],a=u[s][t+1];(e>0||s!==0)&&(l.push(r,o,a),j+=3),(n>0||s!==i-1)&&(l.push(o,c,a),j+=3)}v.addGroup(p,j,0),p+=j}function b(s){const y=d,u=new w,i=new t;let b=0;const j=s===!0?e:n,a=s===!0?1:-1;for(let e=1;e<=o;e++)h.push(0,g*a,0),m.push(0,a,0),f.push(.5,.5),d++;const _=d;for(let e=0;e<=o;e++){const l=e/o,t=l*c+r,n=Math.cos(t),s=Math.sin(t);i.x=j*s,i.y=g*a,i.z=j*n,h.push(i.x,i.y,i.z),m.push(0,a,0),u.x=n*.5+.5,u.y=s*.5*a+.5,f.push(u.x,u.y),d++}for(let e=0;e<o;e++){const n=y+e,t=_+e;s===!0?l.push(t,t+1,n):l.push(t+1,t,n),b+=3}v.addGroup(p,b,s===!0?1:2),p+=b}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new _CylinderGeometry(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}},U1=class _PlaneGeometry extends Cn{constructor(e=1,t=1,n=1,s=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:s};const u=e/2,h=t/2,i=Math.floor(n),a=Math.floor(s),o=i+1,m=a+1,f=e/i,p=t/a,r=[],l=[],d=[],c=[];for(let e=0;e<m;e++){const t=e*p-h;for(let n=0;n<o;n++){const s=n*f-u;l.push(s,-t,0),d.push(0,0,1),c.push(n/i),c.push(1-e/a)}}for(let e=0;e<a;e++)for(let t=0;t<i;t++){const a=t+o*e,n=t+o*(e+1),c=t+1+o*(e+1),s=t+1+o*e;r.push(a,n,s),r.push(n,c,s)}this.setIndex(r),this.setAttribute("position",new Le(l,3)),this.setAttribute("normal",new Le(d,3)),this.setAttribute("uv",new Le(c,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new _PlaneGeometry(e.width,e.height,e.widthSegments,e.heightSegments)}},kw=class _SphereGeometry extends Cn{constructor(e=1,n=32,s=16,o=0,i=Math.PI*2,a=0,r=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:n,heightSegments:s,phiStart:o,phiLength:i,thetaStart:a,thetaLength:r},n=Math.max(3,Math.floor(n)),s=Math.max(2,Math.floor(s));const h=Math.min(a+r,Math.PI);let g=0;const l=[],c=new t,d=new t,u=[],m=[],f=[],p=[];for(let t=0;t<=s;t++){const b=[],u=t/s;let v=0;t===0&&a===0?v=.5/n:t===s&&h===Math.PI&&(v=-.5/n);for(let t=0;t<=n;t++){const s=t/n;c.x=-e*Math.cos(o+s*i)*Math.sin(a+u*r),c.y=e*Math.cos(a+u*r),c.z=e*Math.sin(o+s*i)*Math.sin(a+u*r),m.push(c.x,c.y,c.z),d.copy(c).normalize(),f.push(d.x,d.y,d.z),p.push(s+v,1-u),b.push(g++)}l.push(b)}for(let e=0;e<s;e++)for(let t=0;t<n;t++){const r=l[e][t+1],o=l[e][t],c=l[e+1][t],i=l[e+1][t+1];(e!==0||a>0)&&u.push(r,o,i),(e!==s-1||h<Math.PI)&&u.push(o,c,i)}this.setIndex(u),this.setAttribute("position",new Le(m,3)),this.setAttribute("normal",new Le(f,3)),this.setAttribute("uv",new Le(p,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new _SphereGeometry(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}},Tw=class extends Do{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=Tp,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}},zw=class extends Do{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}},q1=class extends x1{constructor(e=-1,t=1,n=1,s=-1,o=.1,i=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=s,this.near=o,this.far=i,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,s,o,i){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=s,this.view.width=o,this.view.height=i,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const n=(this.right-this.left)/(2*this.zoom),s=(this.top-this.bottom)/(2*this.zoom),o=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let e=o-n,a=o+n,t=i+s,r=i-s;if(this.view!==null&&this.view.enabled){const n=(this.right-this.left)/this.view.fullWidth/this.zoom,s=(this.top-this.bottom)/this.view.fullHeight/this.zoom;e+=n*this.view.offsetX,a=e+n*this.view.width,t-=s*this.view.offsetY,r=t-s*this.view.height}this.projectionMatrix.makeOrthographic(e,a,t,r,this.near,this.far,this.coordinateSystem,this.reversedDepth),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}},E0=class extends Ee{constructor(e=[]){super(),this.isArrayCamera=!0,this.isMultiViewCamera=!1,this.cameras=e}},Dw=class extends n2{constructor(e,t,n=1){super(e,t),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=n}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}clone(e){const t=super.clone(e);return t.meshPerAttribute=this.meshPerAttribute,t}toJSON(e){const t=super.toJSON(e);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}},w0=class _Matrix2{constructor(e,t,n,s){_Matrix2.prototype.isMatrix2=!0,this.elements=[1,0,0,1],e!==0[0]&&this.set(e,t,n,s)}identity(){return this.set(1,0,0,1),this}fromArray(e,t=0){for(let n=0;n<4;n++)this.elements[n]=e[n+t];return this}set(e,t,n,s){const o=this.elements;return o[0]=e,o[2]=t,o[1]=n,o[3]=s,this}};function _0(e,t,n,s){const o=DF(s);switch(n){case Sd:return e*t;case or:return e*t/o.components*o.byteLength;case Yo:return e*t/o.components*o.byteLength;case ur:return e*t*2/o.components*o.byteLength;case Go:return e*t*2/o.components*o.byteLength;case sr:return e*t*3/o.components*o.byteLength;case G:return e*t*4/o.components*o.byteLength;case Xo:return e*t*4/o.components*o.byteLength;case Xn:case Un:return Math.floor((e+3)/4)*Math.floor((t+3)/4)*8;case qn:case Wn:return Math.floor((e+3)/4)*Math.floor((t+3)/4)*16;case jr:case ia:return Math.max(e,16)*Math.max(t,8)/4;case br:case _r:return Math.max(e,8)*Math.max(t,8)/2;case ei:case ti:return Math.floor((e+3)/4)*Math.floor((t+3)/4)*8;case oi:return Math.floor((e+3)/4)*Math.floor((t+3)/4)*16;case ai:return Math.floor((e+3)/4)*Math.floor((t+3)/4)*16;case ri:return Math.floor((e+4)/5)*Math.floor((t+3)/4)*16;case ci:return Math.floor((e+4)/5)*Math.floor((t+4)/5)*16;case li:return Math.floor((e+5)/6)*Math.floor((t+4)/5)*16;case ui:return Math.floor((e+5)/6)*Math.floor((t+5)/6)*16;case hi:return Math.floor((e+7)/8)*Math.floor((t+4)/5)*16;case mi:return Math.floor((e+7)/8)*Math.floor((t+5)/6)*16;case fi:return Math.floor((e+7)/8)*Math.floor((t+7)/8)*16;case pi:return Math.floor((e+9)/10)*Math.floor((t+4)/5)*16;case gi:return Math.floor((e+9)/10)*Math.floor((t+5)/6)*16;case vi:return Math.floor((e+9)/10)*Math.floor((t+7)/8)*16;case bi:return Math.floor((e+9)/10)*Math.floor((t+9)/10)*16;case Oi:return Math.floor((e+11)/12)*Math.floor((t+9)/10)*16;case xi:return Math.floor((e+11)/12)*Math.floor((t+11)/12)*16;case Ci:case zd:case Dd:return Math.ceil(e/4)*Math.ceil(t/4)*16;case Ei:case ki:return Math.ceil(e/4)*Math.ceil(t/4)*8;case Si:case zi:return Math.ceil(e/4)*Math.ceil(t/4)*16}throw new Error(`Unable to determine texture byte length for ${n} format.`)}function DF(e){switch(e){case Y:case Fs:return{byteLength:1,components:1};case St:case Ns:case ht:return{byteLength:2,components:1};case Fc:case Mc:return{byteLength:2,components:4};case I:case ue:case X:return{byteLength:4,components:1};case Ac:case kc:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${e}.`)}typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:ba}})),typeof window!="undefined"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=ba);function Lw(){let e=null,t=!1,n=null,s=null;function o(t,i){n(t,i),s=e.requestAnimationFrame(o)}return{start:function(){if(t===!0)return;if(n===null)return;s=e.requestAnimationFrame(o),t=!0},stop:function(){e.cancelAnimationFrame(s),t=!1},setAnimationLoop:function(e){n=e},setContext:function(t){e=t}}}function TF(e){const t=new WeakMap;function n(t,n){const s=t.array,a=t.usage,r=s.byteLength,i=e.createBuffer();e.bindBuffer(n,i),e.bufferData(n,s,a),t.onUploadCallback();let o;if(s instanceof Float32Array)o=e.FLOAT;else if(typeof Float16Array!="undefined"&&s instanceof Float16Array)o=e.HALF_FLOAT;else if(s instanceof Uint16Array)t.isFloat16BufferAttribute?o=e.HALF_FLOAT:o=e.UNSIGNED_SHORT;else if(s instanceof Int16Array)o=e.SHORT;else if(s instanceof Uint32Array)o=e.UNSIGNED_INT;else if(s instanceof Int32Array)o=e.INT;else if(s instanceof Int8Array)o=e.BYTE;else if(s instanceof Uint8Array)o=e.UNSIGNED_BYTE;else if(s instanceof Uint8ClampedArray)o=e.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+s);return{buffer:i,type:o,bytesPerElement:s.BYTES_PER_ELEMENT,version:t.version,size:r}}function s(t,n,s){const i=n.array,o=n.updateRanges;if(e.bindBuffer(s,t),o.length===0)e.bufferSubData(s,0,i);else{o.sort((e,t)=>e.start-t.start);let t=0;for(let s=1;s<o.length;s++){const e=o[t],n=o[s];n.start<=e.start+e.count+1?e.count=Math.max(e.count,n.start+n.count-e.start):(++t,o[t]=n)}o.length=t+1;for(let t=0,a=o.length;t<a;t++){const n=o[t];e.bufferSubData(s,n.start*i.BYTES_PER_ELEMENT,i,n.start,n.count)}n.clearUpdateRanges()}n.onUploadCallback()}function o(e){return e.isInterleavedBufferAttribute&&(e=e.data),t.get(e)}function i(n){n.isInterleavedBufferAttribute&&(n=n.data);const s=t.get(n);s&&(e.deleteBuffer(s.buffer),t.delete(n))}function a(e,o){if(e.isInterleavedBufferAttribute&&(e=e.data),e.isGLBufferAttribute){const n=t.get(e);(!n||n.version<e.version)&&t.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version});return}const i=t.get(e);if(i===0[0])t.set(e,n(e,o));else if(i.version<e.version){if(i.size!==e.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");s(i.buffer,e,o),i.version=e.version}}return{get:o,remove:i,update:a}}Pw=`
#ifdef USE_ALPHAHASH

	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;

#endif
`,Hw=`
#ifdef USE_ALPHAHASH

	/**
	 * See: https://casual-effects.com/research/Wyman2017Hashed/index.html
	 */

	const float ALPHA_HASH_SCALE = 0.05; // Derived from trials only, and may be changed.

	float hash2D( vec2 value ) {

		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );

	}

	float hash3D( vec3 value ) {

		return hash2D( vec2( hash2D( value.xy ), value.z ) );

	}

	float getAlphaHashThreshold( vec3 position ) {

		// Find the discretized derivatives of our coordinates
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );

		// Find two nearest log-discretized noise scales
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);

		// Compute alpha thresholds at our two noise scales
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);

		// Factor to interpolate lerp with
		float lerpFactor = fract( log2( pixScale ) );

		// Interpolate alpha threshold from noise at two scales
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;

		// Pass into CDF to compute uniformly distrib threshold
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);

		// Find our final, uniformly distributed alpha threshold (ατ)
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;

		// Avoids ατ == 0. Could also do ατ =1-ατ
		return clamp( threshold , 1.0e-6, 1.0 );

	}

#endif
`,Iw=`
#ifdef USE_ALPHAMAP

	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;

#endif
`,Bw=`
#ifdef USE_ALPHAMAP

	uniform sampler2D alphaMap;

#endif
`,Vw=`
#ifdef USE_ALPHATEST

	#ifdef ALPHA_TO_COVERAGE

	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;

	#else

	if ( diffuseColor.a < alphaTest ) discard;

	#endif

#endif
`,$w=`
#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif
`,Yw=`
#ifdef USE_AOMAP

	// reads channel R, compatible with a combined OcclusionRoughnessMetallic (RGB) texture
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;

	reflectedLight.indirectDiffuse *= ambientOcclusion;

	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif

	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif

	#if defined( USE_ENVMAP ) && defined( STANDARD )

		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );

		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );

	#endif

#endif
`,tO=`
#ifdef USE_AOMAP

	uniform sampler2D aoMap;
	uniform float aoMapIntensity;

#endif
`,iO=`
#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif

	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {

		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );

	}

	float getIndirectIndex( const in int i ) {

		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );

	}

#endif

#ifdef USE_BATCHING_COLOR

	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {

		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;

	}

#endif
`,aO=`
#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif
`,NO=`
vec3 transformed = vec3( position );

#ifdef USE_ALPHAHASH

	vPosition = vec3( position );

#endif
`,LO=`
vec3 objectNormal = vec3( normal );

#ifdef USE_TANGENT

	vec3 objectTangent = vec3( tangent.xyz );

#endif
`,IO=`

float G_BlinnPhong_Implicit( /* const in float dotNL, const in float dotNV */ ) {

	// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)
	return 0.25;

}

float D_BlinnPhong( const in float shininess, const in float dotNH ) {

	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );

}

vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {

	vec3 halfDir = normalize( lightDir + viewDir );

	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );

	vec3 F = F_Schlick( specularColor, 1.0, dotVH );

	float G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );

	float D = D_BlinnPhong( shininess, dotNH );

	return F * ( G * D );

} // validated

`,BO=`

#ifdef USE_IRIDESCENCE

	// XYZ to linear-sRGB color space
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);

	// Assume air interface for top
	// Note: We don't handle the case fresnel0 == 1
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {

		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );

	}

	// Conversion FO/IOR
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {

		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );

	}

	// ior is a value between 1.0 and 3.0. 1.0 is air interface
	float IorToFresnel0( float transmittedIor, float incidentIor ) {

		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));

	}

	// Fresnel equations for dielectric/dielectric interfaces.
	// Ref: https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html
	// Evaluation XYZ sensitivity curves in Fourier space
	vec3 evalSensitivity( float OPD, vec3 shift ) {

		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );

		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;

		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;

	}

	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {

		vec3 I;

		// Force iridescenceIOR -> outsideIOR when thinFilmThickness -> 0.0
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		// Evaluate the cosTheta on the base layer (Snell law)
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );

		// Handle TIR:
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {

			return vec3( 1.0 );

		}

		float cosTheta2 = sqrt( cosTheta2Sq );

		// First interface
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;

		// Second interface
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) ); // guard against 1.0
		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;

		// Phase shift
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;

		// Compound terms
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );

		// Reflectance term for m = 0 (DC term amplitude)
		vec3 C0 = R12 + Rs;
		I = C0;

		// Reflectance term for m > 0 (pairs of diracs)
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {

			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;

		}

		// Since out of gamut colors might be produced, negative color values are clamped to 0.
		return max( I, vec3( 0.0 ) );

	}

#endif

`,VO=`
#ifdef USE_BUMPMAP

	uniform sampler2D bumpMap;
	uniform float bumpScale;

	// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen
	// https://mmikk.github.io/papers3d/mm_sfgrad_bump.pdf

	// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)

	vec2 dHdxy_fwd() {

		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );

		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;

		return vec2( dBx, dBy );

	}

	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {

		// normalize is done to ensure that the bump map looks the same regardless of the texture's scale
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm; // normalized

		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );

		float fDet = dot( vSigmaX, R1 ) * faceDirection;

		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );

	}

#endif
`,$O=`
#if NUM_CLIPPING_PLANES > 0

	vec4 plane;

	#ifdef ALPHA_TO_COVERAGE

		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;

		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {

			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );

			if ( clipOpacity == 0.0 ) discard;

		}
		#pragma unroll_loop_end

		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES

			float unionClipOpacity = 1.0;

			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {

				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );

			}
			#pragma unroll_loop_end

			clipOpacity *= 1.0 - unionClipOpacity;

		#endif

		diffuseColor.a *= clipOpacity;

		if ( diffuseColor.a == 0.0 ) discard;

	#else

		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {

			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;

		}
		#pragma unroll_loop_end

		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES

			bool clipped = true;

			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {

				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;

			}
			#pragma unroll_loop_end

			if ( clipped ) discard;

		#endif

	#endif

#endif
`,WO=`
#if NUM_CLIPPING_PLANES > 0

	varying vec3 vClipPosition;

	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];

#endif
`,UO=`
#if NUM_CLIPPING_PLANES > 0

	varying vec3 vClipPosition;

#endif
`,KO=`
#if NUM_CLIPPING_PLANES > 0

	vClipPosition = - mvPosition.xyz;

#endif
`,qO=`
#if defined( USE_COLOR_ALPHA )

	diffuseColor *= vColor;

#elif defined( USE_COLOR )

	diffuseColor.rgb *= vColor;

#endif
`,ex=`
#if defined( USE_COLOR_ALPHA )

	varying vec4 vColor;

#elif defined( USE_COLOR )

	varying vec3 vColor;

#endif
`,tx=`
#if defined( USE_COLOR_ALPHA )

	varying vec4 vColor;

#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )

	varying vec3 vColor;

#endif
`,nx=`
#if defined( USE_COLOR_ALPHA )

	vColor = vec4( 1.0 );

#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )

	vColor = vec3( 1.0 );

#endif

#ifdef USE_COLOR

	vColor *= color;

#endif

#ifdef USE_INSTANCING_COLOR

	vColor.xyz *= instanceColor.xyz;

#endif

#ifdef USE_BATCHING_COLOR

	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );

	vColor.xyz *= batchingColor.xyz;

#endif
`,sx=`
#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6

#ifndef saturate
// <tonemapping_pars_fragment> may have defined saturate() already
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )

float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }

// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.
// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/
highp float rand( const in vec2 uv ) {

	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );

	return fract( sin( sn ) * c );

}

#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif

struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};

struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};

#ifdef USE_ALPHAHASH

	varying vec3 vPosition;

#endif

vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

}

vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {

	// dir can be either a direction vector or a normal vector
	// upper-left 3x3 of matrix is assumed to be orthogonal

	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );

}

mat3 transposeMat3( const in mat3 m ) {

	mat3 tmp;

	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );

	return tmp;

}

bool isPerspectiveMatrix( mat4 m ) {

	return m[ 2 ][ 3 ] == - 1.0;

}

vec2 equirectUv( in vec3 dir ) {

	// dir is assumed to be unit length

	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;

	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;

	return vec2( u, v );

}

vec3 BRDF_Lambert( const in vec3 diffuseColor ) {

	return RECIPROCAL_PI * diffuseColor;

} // validated

vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {

	// Original approximation by Christophe Schlick '94
	// float fresnel = pow( 1.0 - dotVH, 5.0 );

	// Optimized variant (presented by Epic at SIGGRAPH '13)
	// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );

	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );

} // validated

float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {

	// Original approximation by Christophe Schlick '94
	// float fresnel = pow( 1.0 - dotVH, 5.0 );

	// Optimized variant (presented by Epic at SIGGRAPH '13)
	// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );

	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );

} // validated
`,ix=`
#ifdef ENVMAP_TYPE_CUBE_UV

	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0

	// These shader functions convert between the UV coordinates of a single face of
	// a cubemap, the 0-5 integer index of a cube face, and the direction vector for
	// sampling a textureCube (not generally normalized ).

	float getFace( vec3 direction ) {

		vec3 absDirection = abs( direction );

		float face = - 1.0;

		if ( absDirection.x > absDirection.z ) {

			if ( absDirection.x > absDirection.y )

				face = direction.x > 0.0 ? 0.0 : 3.0;

			else

				face = direction.y > 0.0 ? 1.0 : 4.0;

		} else {

			if ( absDirection.z > absDirection.y )

				face = direction.z > 0.0 ? 2.0 : 5.0;

			else

				face = direction.y > 0.0 ? 1.0 : 4.0;

		}

		return face;

	}

	// RH coordinate system; PMREM face-indexing convention
	vec2 getUV( vec3 direction, float face ) {

		vec2 uv;

		if ( face == 0.0 ) {

			uv = vec2( direction.z, direction.y ) / abs( direction.x ); // pos x

		} else if ( face == 1.0 ) {

			uv = vec2( - direction.x, - direction.z ) / abs( direction.y ); // pos y

		} else if ( face == 2.0 ) {

			uv = vec2( - direction.x, direction.y ) / abs( direction.z ); // pos z

		} else if ( face == 3.0 ) {

			uv = vec2( - direction.z, direction.y ) / abs( direction.x ); // neg x

		} else if ( face == 4.0 ) {

			uv = vec2( - direction.x, direction.z ) / abs( direction.y ); // neg y

		} else {

			uv = vec2( direction.x, direction.y ) / abs( direction.z ); // neg z

		}

		return 0.5 * ( uv + 1.0 );

	}

	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {

		float face = getFace( direction );

		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );

		mipInt = max( mipInt, cubeUV_minMipLevel );

		float faceSize = exp2( mipInt );

		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0; // #25071

		if ( face > 2.0 ) {

			uv.y += faceSize;

			face -= 3.0;

		}

		uv.x += face * faceSize;

		uv.x += filterInt * 3.0 * cubeUV_minTileSize;

		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );

		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;

		#ifdef texture2DGradEXT

			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb; // disable anisotropic filtering

		#else

			return texture2D( envMap, uv ).rgb;

		#endif

	}

	// These defines must match with PMREMGenerator

	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0

	float roughnessToMip( float roughness ) {

		float mip = 0.0;

		if ( roughness >= cubeUV_r1 ) {

			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;

		} else if ( roughness >= cubeUV_r4 ) {

			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;

		} else if ( roughness >= cubeUV_r5 ) {

			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;

		} else if ( roughness >= cubeUV_r6 ) {

			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;

		} else {

			mip = - 2.0 * log2( 1.16 * roughness ); // 1.16 = 1.79^0.25
		}

		return mip;

	}

	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {

		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );

		float mipF = fract( mip );

		float mipInt = floor( mip );

		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );

		if ( mipF == 0.0 ) {

			return vec4( color0, 1.0 );

		} else {

			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );

			return vec4( mix( color0, color1, mipF ), 1.0 );

		}

	}

#endif
`,lx=`

vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT

	vec3 transformedTangent = objectTangent;

#endif

#ifdef USE_BATCHING

	// this is in lieu of a per-instance normal-matrix
	// shear transforms in the instance matrix are not supported

	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;

	#ifdef USE_TANGENT

		transformedTangent = bm * transformedTangent;

	#endif

#endif

#ifdef USE_INSTANCING

	// this is in lieu of a per-instance normal-matrix
	// shear transforms in the instance matrix are not supported

	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;

	#ifdef USE_TANGENT

		transformedTangent = im * transformedTangent;

	#endif

#endif

transformedNormal = normalMatrix * transformedNormal;

#ifdef FLIP_SIDED

	transformedNormal = - transformedNormal;

#endif

#ifdef USE_TANGENT

	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;

	#ifdef FLIP_SIDED

		transformedTangent = - transformedTangent;

	#endif

#endif
`,mx=`
#ifdef USE_DISPLACEMENTMAP

	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;

#endif
`,gx=`
#ifdef USE_DISPLACEMENTMAP

	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );

#endif
`,bx=`
#ifdef USE_EMISSIVEMAP

	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );

	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE

		// use inline sRGB decode until browsers properly support SRGB8_ALPHA8 with video textures (#26516)

		emissiveColor = sRGBTransferEOTF( emissiveColor );

	#endif

	totalEmissiveRadiance *= emissiveColor.rgb;

#endif
`,Cx=`
#ifdef USE_EMISSIVEMAP

	uniform sampler2D emissiveMap;

#endif
`,Ex=`
gl_FragColor = linearToOutputTexel( gl_FragColor );
`,kx=`

vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}

vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}

vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}

`,Ax=`
#ifdef USE_ENVMAP

	#ifdef ENV_WORLDPOS

		vec3 cameraToFrag;

		if ( isOrthographic ) {

			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );

		} else {

			cameraToFrag = normalize( vWorldPosition - cameraPosition );

		}

		// Transforming Normal Vectors with the Inverse Transformation
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );

		#ifdef ENVMAP_MODE_REFLECTION

			vec3 reflectVec = reflect( cameraToFrag, worldNormal );

		#else

			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );

		#endif

	#else

		vec3 reflectVec = vReflect;

	#endif

	#ifdef ENVMAP_TYPE_CUBE

		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );

	#else

		vec4 envColor = vec4( 0.0 );

	#endif

	#ifdef ENVMAP_BLENDING_MULTIPLY

		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );

	#elif defined( ENVMAP_BLENDING_MIX )

		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );

	#elif defined( ENVMAP_BLENDING_ADD )

		outgoingLight += envColor.xyz * specularStrength * reflectivity;

	#endif

#endif
`,Sx=`
#ifdef USE_ENVMAP

	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;

	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif
`,zx=`
#ifdef USE_ENVMAP

	uniform float reflectivity;

	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )

		#define ENV_WORLDPOS

	#endif

	#ifdef ENV_WORLDPOS

		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif

#endif
`,Nx=`
#ifdef USE_ENVMAP

	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )

		#define ENV_WORLDPOS

	#endif

	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;

	#else

		varying vec3 vReflect;
		uniform float refractionRatio;

	#endif

#endif
`,Vx=`
#ifdef USE_ENVMAP

	#ifdef ENV_WORLDPOS

		vWorldPosition = worldPosition.xyz;

	#else

		vec3 cameraToVertex;

		if ( isOrthographic ) {

			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );

		} else {

			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );

		}

		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );

		#ifdef ENVMAP_MODE_REFLECTION

			vReflect = reflect( cameraToVertex, worldNormal );

		#else

			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );

		#endif

	#endif

#endif
`,Yx=`
#ifdef USE_FOG

	vFogDepth = - mvPosition.z;

#endif
`,Jx=`
#ifdef USE_FOG

	varying float vFogDepth;

#endif
`,aC=`
#ifdef USE_FOG

	#ifdef FOG_EXP2

		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );

	#else

		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );

	#endif

	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );

#endif
`,lC=`
#ifdef USE_FOG

	uniform vec3 fogColor;
	varying float vFogDepth;

	#ifdef FOG_EXP2

		uniform float fogDensity;

	#else

		uniform float fogNear;
		uniform float fogFar;

	#endif

#endif
`,mC=`

#ifdef USE_GRADIENTMAP

	uniform sampler2D gradientMap;

#endif

vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {

	// dotNL will be from -1.0 to 1.0
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );

	#ifdef USE_GRADIENTMAP

		return vec3( texture2D( gradientMap, coord ).r );

	#else

		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );

	#endif

}
`,bC=`
#ifdef USE_LIGHTMAP

	uniform sampler2D lightMap;
	uniform float lightMapIntensity;

#endif
`,jC=`
LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;
`,yC=`
varying vec3 vViewPosition;

struct LambertMaterial {

	vec3 diffuseColor;
	float specularStrength;

};

void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {

	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;

	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );

}

void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {

	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );

}

#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert
`,$k=`
uniform bool receiveShadow;
uniform vec3 ambientLightColor;

#if defined( USE_LIGHT_PROBES )

	uniform vec3 lightProbe[ 9 ];

#endif

// get the irradiance (radiance convolved with cosine lobe) at the point 'normal' on the unit sphere
// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {

	// normal is assumed to have unit length

	float x = normal.x, y = normal.y, z = normal.z;

	// band 0
	vec3 result = shCoefficients[ 0 ] * 0.886227;

	// band 1
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;

	// band 2
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );

	return result;

}

vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {

	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );

	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );

	return irradiance;

}

vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {

	vec3 irradiance = ambientLightColor;

	return irradiance;

}

float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {

	// based upon Frostbite 3 Moving to Physically-based Rendering
	// page 32, equation 26: E[window1]
	// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );

	if ( cutoffDistance > 0.0 ) {

		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );

	}

	return distanceFalloff;

}

float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {

	return smoothstep( coneCosine, penumbraCosine, angleCosine );

}

#if NUM_DIR_LIGHTS > 0

	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};

	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];

	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {

		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;

	}

#endif


#if NUM_POINT_LIGHTS > 0

	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};

	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];

	// light is an out parameter as having it as a return value caused compiler errors on some devices
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {

		vec3 lVector = pointLight.position - geometryPosition;

		light.direction = normalize( lVector );

		float lightDistance = length( lVector );

		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );

	}

#endif


#if NUM_SPOT_LIGHTS > 0

	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};

	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];

	// light is an out parameter as having it as a return value caused compiler errors on some devices
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {

		vec3 lVector = spotLight.position - geometryPosition;

		light.direction = normalize( lVector );

		float angleCos = dot( light.direction, spotLight.direction );

		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );

		if ( spotAttenuation > 0.0 ) {

			float lightDistance = length( lVector );

			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );

		} else {

			light.color = vec3( 0.0 );
			light.visible = false;

		}

	}

#endif


#if NUM_RECT_AREA_LIGHTS > 0

	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};

	// Pre-computed values of LinearTransformedCosine approximation of BRDF
	// BRDF approximation Texture is 64x64
	uniform sampler2D ltc_1; // RGBA Float
	uniform sampler2D ltc_2; // RGBA Float

	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];

#endif


#if NUM_HEMI_LIGHTS > 0

	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};

	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];

	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {

		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;

		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );

		return irradiance;

	}

#endif
`,$S=`
#ifdef USE_ENVMAP

	vec3 getIBLIrradiance( const in vec3 normal ) {

		#ifdef ENVMAP_TYPE_CUBE_UV

			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );

			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );

			return PI * envMapColor.rgb * envMapIntensity;

		#else

			return vec3( 0.0 );

		#endif

	}

	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {

		#ifdef ENVMAP_TYPE_CUBE_UV

			vec3 reflectVec = reflect( - viewDir, normal );

			// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );

			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );

			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );

			return envMapColor.rgb * envMapIntensity;

		#else

			return vec3( 0.0 );

		#endif

	}

	#ifdef USE_ANISOTROPY

		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {

			#ifdef ENVMAP_TYPE_CUBE_UV

			  // https://google.github.io/filament/Filament.md.html#lighting/imagebasedlights/anisotropy
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );

				return getIBLRadiance( viewDir, bentNormal, roughness );

			#else

				return vec3( 0.0 );

			#endif

		}

	#endif

#endif
`,BS=`
ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;
`,IS=`
varying vec3 vViewPosition;

struct ToonMaterial {

	vec3 diffuseColor;

};

void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {

	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;

	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );

}

void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {

	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );

}

#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
`,RS=`
BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;
`,LS=`
varying vec3 vViewPosition;

struct BlinnPhongMaterial {

	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;

};

void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {

	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;

	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );

	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;

}

void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {

	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );

}

#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
`,NS=`
PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );

vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );

material.roughness = max( roughnessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.
material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );

#ifdef IOR

	material.ior = ior;

	#ifdef USE_SPECULAR

		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;

		#ifdef USE_SPECULAR_COLORMAP

			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;

		#endif

		#ifdef USE_SPECULAR_INTENSITYMAP

			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;

		#endif

		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );

	#else

		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;

	#endif

	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );

#else

	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;

#endif

#ifdef USE_CLEARCOAT

	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;

	#ifdef USE_CLEARCOATMAP

		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;

	#endif

	#ifdef USE_CLEARCOAT_ROUGHNESSMAP

		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;

	#endif

	material.clearcoat = saturate( material.clearcoat ); // Burley clearcoat model
	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );

#endif

#ifdef USE_DISPERSION

	material.dispersion = dispersion;

#endif

#ifdef USE_IRIDESCENCE

	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;

	#ifdef USE_IRIDESCENCEMAP

		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;

	#endif

	#ifdef USE_IRIDESCENCE_THICKNESSMAP

		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;

	#else

		material.iridescenceThickness = iridescenceThicknessMaximum;

	#endif

#endif

#ifdef USE_SHEEN

	material.sheenColor = sheenColor;

	#ifdef USE_SHEEN_COLORMAP

		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;

	#endif

	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );

	#ifdef USE_SHEEN_ROUGHNESSMAP

		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;

	#endif

#endif

#ifdef USE_ANISOTROPY

	#ifdef USE_ANISOTROPYMAP

		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;

	#else

		vec2 anisotropyV = anisotropyVector;

	#endif

	material.anisotropy = length( anisotropyV );

	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}

	// Roughness along the anisotropy bitangent is the material roughness, while the tangent roughness increases with anisotropy.
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );

	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;

#endif
`,zS=`

struct PhysicalMaterial {

	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;

	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif

	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif

	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif

	#ifdef IOR
		float ior;
	#endif

	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif

	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif

};

// temporary
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );

vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );

    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}

// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2
// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {

	float a2 = pow2( alpha );

	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );

	return 0.5 / max( gv + gl, EPSILON );

}

// Microfacet Models for Refraction through Rough Surfaces - equation (33)
// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html
// alpha is "roughness squared" in Disney’s reparameterization
float D_GGX( const in float alpha, const in float dotNH ) {

	float a2 = pow2( alpha );

	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1

	return RECIPROCAL_PI * a2 / pow2( denom );

}

// https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf
#ifdef USE_ANISOTROPY

	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {

		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );

		return saturate(v);

	}

	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {

		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;

		return RECIPROCAL_PI * a2 * pow2 ( w2 );

	}

#endif

#ifdef USE_CLEARCOAT

	// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {

		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;

		float alpha = pow2( roughness ); // UE4's roughness

		vec3 halfDir = normalize( lightDir + viewDir );

		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );

		vec3 F = F_Schlick( f0, f90, dotVH );

		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );

		float D = D_GGX( alpha, dotNH );

		return F * ( V * D );

	}

#endif

vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {

	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;

	float alpha = pow2( roughness ); // UE4's roughness

	vec3 halfDir = normalize( lightDir + viewDir );

	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );

	vec3 F = F_Schlick( f0, f90, dotVH );

	#ifdef USE_IRIDESCENCE

		F = mix( F, material.iridescenceFresnel, material.iridescence );

	#endif

	#ifdef USE_ANISOTROPY

		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );

		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );

		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );

	#else

		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );

		float D = D_GGX( alpha, dotNH );

	#endif

	return F * ( V * D );

}

// Rect Area Light

// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines
// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt
// code: https://github.com/selfshadow/ltc_code/

vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {

	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;

	float dotNV = saturate( dot( N, V ) );

	// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );

	uv = uv * LUT_SCALE + LUT_BIAS;

	return uv;

}

float LTC_ClippedSphereFormFactor( const in vec3 f ) {

	// Real-Time Area Lighting: a Journey from Research to Production (p.102)
	// An approximation of the form factor of a horizon-clipped rectangle.

	float l = length( f );

	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );

}

vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {

	float x = dot( v1, v2 );

	float y = abs( x );

	// rational polynomial approximation to theta / sin( theta ) / 2PI
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;

	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;

	return cross( v1, v2 ) * theta_sintheta;

}

vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {

	// bail if point is on back side of plane of light
	// assumes ccw winding order of light vertices
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );

	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );

	// construct orthonormal basis around N
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system

	// compute transform
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );

	// transform rect
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );

	// project rect onto sphere
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );

	// calculate vector form factor
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );

	// adjust for horizon clipping
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );

/*
	// alternate method of adjusting for horizon clipping (see reference)
	// refactoring required
	float len = length( vectorFormFactor );
	float z = vectorFormFactor.z / len;

	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;

	// tabulated horizon-clipped sphere, apparently...
	vec2 uv = vec2( z * 0.5 + 0.5, len );
	uv = uv * LUT_SCALE + LUT_BIAS;

	float scale = texture2D( ltc_2, uv ).w;

	float result = len * scale;
*/

	return vec3( result );

}

// End Rect Area Light

#if defined( USE_SHEEN )

// https://github.com/google/filament/blob/master/shaders/src/brdf.fs
float D_Charlie( float roughness, float dotNH ) {

	float alpha = pow2( roughness );

	// Estevez and Kulla 2017, "Production Friendly Microfacet Sheen BRDF"
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 ); // 2^(-14/2), so sin2h^2 > 0 in fp16

	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );

}

// https://github.com/google/filament/blob/master/shaders/src/brdf.fs
float V_Neubelt( float dotNV, float dotNL ) {

	// Neubelt and Pettineo 2013, "Crafting a Next-gen Material Pipeline for The Order: 1886"
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );

}

vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {

	vec3 halfDir = normalize( lightDir + viewDir );

	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );

	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );

	return sheenColor * ( D * V );

}

#endif

// This is a curve-fit approximation to the "Charlie sheen" BRDF integrated over the hemisphere from
// Estevez and Kulla 2017, "Production Friendly Microfacet Sheen BRDF". The analysis can be found
// in the Sheen section of https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {

	float dotNV = saturate( dot( normal, viewDir ) );

	float r2 = roughness * roughness;

	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;

	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;

	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );

	return saturate( DG * RECIPROCAL_PI );

}

// Analytical approximation of the DFG LUT, one half of the
// split-sum approximation used in indirect specular lighting.
// via 'environmentBRDF' from "Physically Based Shading on Mobile"
// https://www.unrealengine.com/blog/physically-based-shading-on-mobile
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {

	float dotNV = saturate( dot( normal, viewDir ) );

	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );

	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );

	vec4 r = roughness * c0 + c1;

	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;

	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;

	return fab;

}

vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {

	vec2 fab = DFGApprox( normal, viewDir, roughness );

	return specularColor * fab.x + specularF90 * fab.y;

}

// Fdez-Ag\xFCera's "Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting"
// Approximates multiscattering in order to preserve energy.
// http://www.jcgt.org/published/0008/01/03/
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif

	vec2 fab = DFGApprox( normal, viewDir, roughness );

	#ifdef USE_IRIDESCENCE

		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );

	#else

		vec3 Fr = specularColor;

	#endif

	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;

	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;

	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619; // 1/21
	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );

	singleScatter += FssEss;
	multiScatter += Fms * Ems;

}

#if NUM_RECT_AREA_LIGHTS > 0

	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {

		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;

		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight; // counterclockwise; light shines in local neg z direction
		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;

		vec2 uv = LTC_Uv( normal, viewDir, roughness );

		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );

		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);

		// LTC Fresnel Approximation by Stephen Hill
		// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );

		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );

		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );

	}

#endif

void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {

	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );

	vec3 irradiance = dotNL * directLight.color;

	#ifdef USE_CLEARCOAT

		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );

		vec3 ccIrradiance = dotNLcc * directLight.color;

		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );

	#endif

	#ifdef USE_SHEEN

		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );

	#endif

	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );

	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}

void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {

	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );

}

void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {

	#ifdef USE_CLEARCOAT

		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );

	#endif

	#ifdef USE_SHEEN

		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );

	#endif

	// Both indirect specular and indirect diffuse light accumulate here

	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;

	#ifdef USE_IRIDESCENCE

		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );

	#else

		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );

	#endif

	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );

	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;

	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;

}

#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical

// ref: https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {

	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );

}
`,kS=`
/**
 * This is a template that can be used to light a material, it uses pluggable
 * RenderEquations (RE)for specific lighting scenarios.
 *
 * Instructions for use:
 * - Ensure that both RE_Direct, RE_IndirectDiffuse and RE_IndirectSpecular are defined
 * - Create a material parameter that is to be passed as the third parameter to your lighting functions.
 *
 * TODO:
 * - Add area light support.
 * - Add sphere light support.
 * - Add diffuse light probe (irradiance cubemap) support.
 */

vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );

vec3 geometryClearcoatNormal = vec3( 0.0 );

#ifdef USE_CLEARCOAT

	geometryClearcoatNormal = clearcoatNormal;

#endif

#ifdef USE_IRIDESCENCE

	float dotNVi = saturate( dot( normal, geometryViewDir ) );

	if ( material.iridescenceThickness == 0.0 ) {

		material.iridescence = 0.0;

	} else {

		material.iridescence = saturate( material.iridescence );

	}

	if ( material.iridescence > 0.0 ) {

		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );

		// Iridescence F0 approximation
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );

	}

#endif

IncidentLight directLight;

#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )

	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {

		pointLight = pointLights[ i ];

		getPointLightInfo( pointLight, geometryPosition, directLight );

		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif

		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )

	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;

	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {

		spotLight = spotLights[ i ];

		getSpotLightInfo( spotLight, geometryPosition, directLight );

		// spot lights are ordered [shadows with maps, shadows without maps, maps without shadows, none]
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif

		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif

		#undef SPOT_LIGHT_MAP_INDEX

		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif

		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )

	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {

		directionalLight = directionalLights[ i ];

		getDirectionalLightInfo( directionalLight, directLight );

		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif

		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )

	RectAreaLight rectAreaLight;

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {

		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if defined( RE_IndirectDiffuse )

	vec3 iblIrradiance = vec3( 0.0 );

	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );

	#if defined( USE_LIGHT_PROBES )

		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );

	#endif

	#if ( NUM_HEMI_LIGHTS > 0 )

		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {

			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );

		}
		#pragma unroll_loop_end

	#endif

#endif

#if defined( RE_IndirectSpecular )

	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );

#endif
`,OS=`
#if defined( RE_IndirectDiffuse )

	#ifdef USE_LIGHTMAP

		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;

		irradiance += lightMapIrradiance;

	#endif

	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )

		iblIrradiance += getIBLIrradiance( geometryNormal );

	#endif

#endif

#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )

	#ifdef USE_ANISOTROPY

		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );

	#else

		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );

	#endif

	#ifdef USE_CLEARCOAT

		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );

	#endif

#endif
`,dS=`
#if defined( RE_IndirectDiffuse )

	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

#endif

#if defined( RE_IndirectSpecular )

	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

#endif
`,lS=`
#if defined( USE_LOGARITHMIC_DEPTH_BUFFER )

	// Doing a strict comparison with == 1.0 can cause noise artifacts
	// on some platforms. See issue #17623.
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;

#endif
`,rS=`
#if defined( USE_LOGARITHMIC_DEPTH_BUFFER )

	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;

#endif
`,G8=`
#ifdef USE_LOGARITHMIC_DEPTH_BUFFER

	varying float vFragDepth;
	varying float vIsPerspective;

#endif
`,iS=`
#ifdef USE_LOGARITHMIC_DEPTH_BUFFER

	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );

#endif
`,oS=`
#ifdef USE_MAP

	vec4 sampledDiffuseColor = texture2D( map, vMapUv );

	#ifdef DECODE_VIDEO_TEXTURE

		// use inline sRGB decode until browsers properly support SRGB8_ALPHA8 with video textures (#26516)

		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );

	#endif

	diffuseColor *= sampledDiffuseColor;

#endif
`,sS=`
#ifdef USE_MAP

	uniform sampler2D map;

#endif
`,nS=`
#if defined( USE_MAP ) || defined( USE_ALPHAMAP )

	#if defined( USE_POINTS_UV )

		vec2 uv = vUv;

	#else

		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;

	#endif

#endif

#ifdef USE_MAP

	diffuseColor *= texture2D( map, uv );

#endif

#ifdef USE_ALPHAMAP

	diffuseColor.a *= texture2D( alphaMap, uv ).g;

#endif
`,tS=`
#if defined( USE_POINTS_UV )

	varying vec2 vUv;

#else

	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )

		uniform mat3 uvTransform;

	#endif

#endif

#ifdef USE_MAP

	uniform sampler2D map;

#endif

#ifdef USE_ALPHAMAP

	uniform sampler2D alphaMap;

#endif
`,eS=`
float metalnessFactor = metalness;

#ifdef USE_METALNESSMAP

	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );

	// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture
	metalnessFactor *= texelMetalness.b;

#endif
`,JA=`
#ifdef USE_METALNESSMAP

	uniform sampler2D metalnessMap;

#endif
`,ZA=`
#ifdef USE_INSTANCING_MORPH

	float morphTargetInfluences[ MORPHTARGETS_COUNT ];

	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;

	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {

		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;

	}
#endif
`,QA=`
#if defined( USE_MORPHCOLORS )

	// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:
	// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in normal = sum((target - base) * influence)
	// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting
	vColor *= morphTargetBaseInfluence;

	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {

		#if defined( USE_COLOR_ALPHA )

			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];

		#elif defined( USE_COLOR )

			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];

		#endif

	}

#endif
`,XA=`
#ifdef USE_MORPHNORMALS

	// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:
	// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in normal = sum((target - base) * influence)
	// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting
	objectNormal *= morphTargetBaseInfluence;

	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {

		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];

	}

#endif
`,GA=`
#ifdef USE_MORPHTARGETS

	#ifndef USE_INSTANCING_MORPH

		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];

	#endif

	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;

	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {

		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;

		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );

	}

#endif
`,YA=`
#ifdef USE_MORPHTARGETS

	// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:
	// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in position = sum((target - base) * influence)
	// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting
	transformed *= morphTargetBaseInfluence;

	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {

		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];

	}

#endif
`,qA=`
float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;

#ifdef FLAT_SHADED

	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );

#else

	vec3 normal = normalize( vNormal );

	#ifdef DOUBLE_SIDED

		normal *= faceDirection;

	#endif

#endif

#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )

	#ifdef USE_TANGENT

		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );

	#else

		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);

	#endif

	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )

		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;

	#endif

#endif

#ifdef USE_CLEARCOAT_NORMALMAP

	#ifdef USE_TANGENT

		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );

	#else

		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );

	#endif

	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )

		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;

	#endif

#endif

// non perturbed normal for clearcoat among others

vec3 nonPerturbedNormal = normal;

`,KA=`

#ifdef USE_NORMALMAP_OBJECTSPACE

	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals

	#ifdef FLIP_SIDED

		normal = - normal;

	#endif

	#ifdef DOUBLE_SIDED

		normal = normal * faceDirection;

	#endif

	normal = normalize( normalMatrix * normal );

#elif defined( USE_NORMALMAP_TANGENTSPACE )

	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;

	normal = normalize( tbn * mapN );

#elif defined( USE_BUMPMAP )

	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );

#endif
`,UA=`
#ifndef FLAT_SHADED

	varying vec3 vNormal;

	#ifdef USE_TANGENT

		varying vec3 vTangent;
		varying vec3 vBitangent;

	#endif

#endif
`,WA=`
#ifndef FLAT_SHADED

	varying vec3 vNormal;

	#ifdef USE_TANGENT

		varying vec3 vTangent;
		varying vec3 vBitangent;

	#endif

#endif
`,$A=`
#ifndef FLAT_SHADED // normal is computed with derivatives when FLAT_SHADED

	vNormal = normalize( transformedNormal );

	#ifdef USE_TANGENT

		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );

	#endif

#endif
`,VA=`
#ifdef USE_NORMALMAP

	uniform sampler2D normalMap;
	uniform vec2 normalScale;

#endif

#ifdef USE_NORMALMAP_OBJECTSPACE

	uniform mat3 normalMatrix;

#endif

#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )

	// Normal Mapping Without Precomputed Tangents
	// http://www.thetenthplanet.de/archives/1180

	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {

		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );

		vec3 N = surf_norm; // normalized

		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );

		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;

		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );

		return mat3( T * scale, B * scale, N );

	}

#endif
`,BA=`
#ifdef USE_CLEARCOAT

	vec3 clearcoatNormal = nonPerturbedNormal;

#endif
`,RA=`
#ifdef USE_CLEARCOAT_NORMALMAP

	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;

	clearcoatNormal = normalize( tbn2 * clearcoatMapN );

#endif
`,DA=`

#ifdef USE_CLEARCOATMAP

	uniform sampler2D clearcoatMap;

#endif

#ifdef USE_CLEARCOAT_NORMALMAP

	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;

#endif

#ifdef USE_CLEARCOAT_ROUGHNESSMAP

	uniform sampler2D clearcoatRoughnessMap;

#endif
`,AA=`

#ifdef USE_IRIDESCENCEMAP

	uniform sampler2D iridescenceMap;

#endif

#ifdef USE_IRIDESCENCE_THICKNESSMAP

	uniform sampler2D iridescenceThicknessMap;

#endif
`,CA=`
#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif

#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif

gl_FragColor = vec4( outgoingLight, diffuseColor.a );
`,xA=`
vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}

vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}

const float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)
const float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)
const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;

const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );

const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );

vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}

vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	// the 0.9999 tweak is unimportant, very tiny empirical improvement
	// return vec3( vuf * Inv255, gf * PackUpscale, bf * 0.9999 );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}

vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}

float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}

float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}

float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}

vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}

vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}

// NOTE: viewZ, the z-coordinate in camera space, is negative for points in front of the camera

float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	// -near maps to 0; -far maps to 1
	return ( viewZ + near ) / ( near - far );
}

float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	// maps orthographic depth in [ 0, 1 ] to viewZ
	return depth * ( near - far ) - near;
}

// NOTE: https://twitter.com/gonnavis/status/1377183786949959682

float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	// -near maps to 0; -far maps to 1
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}

float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	// maps perspective depth in [ 0, 1 ] to viewZ
	return ( near * far ) / ( ( far - near ) * depth - far );
}
`,OA=`
#ifdef PREMULTIPLIED_ALPHA

	// Get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.
	gl_FragColor.rgb *= gl_FragColor.a;

#endif
`,bA=`
vec4 mvPosition = vec4( transformed, 1.0 );

#ifdef USE_BATCHING

	mvPosition = batchingMatrix * mvPosition;

#endif

#ifdef USE_INSTANCING

	mvPosition = instanceMatrix * mvPosition;

#endif

mvPosition = modelViewMatrix * mvPosition;

gl_Position = projectionMatrix * mvPosition;
`,vA=`
#ifdef DITHERING

	gl_FragColor.rgb = dithering( gl_FragColor.rgb );

#endif
`,hA=`
#ifdef DITHERING

	// based on https://www.shadertoy.com/view/MslGR8
	vec3 dithering( vec3 color ) {
		//Calculate grid position
		float grid_position = rand( gl_FragCoord.xy );

		//Shift the individual colors differently, thus making it even harder to see the dithering pattern
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );

		//modify shift according to grid position.
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );

		//shift the color by dither_shift
		return color + dither_shift_RGB;
	}

#endif
`,dA=`
float roughnessFactor = roughness;

#ifdef USE_ROUGHNESSMAP

	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );

	// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture
	roughnessFactor *= texelRoughness.g;

#endif
`,lA=`
#ifdef USE_ROUGHNESSMAP

	uniform sampler2D roughnessMap;

#endif
`,aA=`
#if NUM_SPOT_LIGHT_COORDS > 0

	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];

#endif

#if NUM_SPOT_LIGHT_MAPS > 0

	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];

#endif

#ifdef USE_SHADOWMAP

	#if NUM_DIR_LIGHT_SHADOWS > 0

		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];

		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};

		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];

	#endif

	#if NUM_SPOT_LIGHT_SHADOWS > 0

		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];

		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};

		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];

	#endif

	#if NUM_POINT_LIGHT_SHADOWS > 0

		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];

		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};

		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];

	#endif

	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {

		float depth = unpackRGBAToDepth( texture2D( depths, uv ) );

		#ifdef USE_REVERSED_DEPTH_BUFFER

			return step( depth, compare );

		#else

			return step( compare, depth );

		#endif

	}

	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {

		return unpackRGBATo2Half( texture2D( shadow, uv ) );

	}

	float VSMShadow( sampler2D shadow, vec2 uv, float compare ) {

		float occlusion = 1.0;

		vec2 distribution = texture2DDistribution( shadow, uv );

		#ifdef USE_REVERSED_DEPTH_BUFFER

			float hard_shadow = step( distribution.x, compare );

		#else

			float hard_shadow = step( compare, distribution.x );

		#endif

		if ( hard_shadow != 1.0 ) {

			float distance = compare - distribution.x;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance ); // Chebeyshevs inequality
			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 ); // 0.3 reduces light bleed
			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );

		}
		return occlusion;

	}

	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {

		float shadow = 1.0;

		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;

		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;

		if ( frustumTest ) {

		#if defined( SHADOWMAP_TYPE_PCF )

			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;

			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;

			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );

		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )

			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;

			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;

			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );

		#elif defined( SHADOWMAP_TYPE_VSM )

			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );

		#else // no percentage-closer filtering:

			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );

		#endif

		}

		return mix( 1.0, shadow, shadowIntensity );

	}

	// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D
	// vector suitable for 2D texture mapping. This code uses the following layout for the
	// 2D texture:
	//
	// xzXZ
	//  y Y
	//
	// Y - Positive y direction
	// y - Negative y direction
	// X - Positive x direction
	// x - Negative x direction
	// Z - Positive z direction
	// z - Negative z direction
	//
	// Source and test bed:
	// https://gist.github.com/tschw/da10c43c467ce8afd0c4

	vec2 cubeToUV( vec3 v, float texelSizeY ) {

		// Number of texels to avoid at the edge of each square

		vec3 absV = abs( v );

		// Intersect unit cube

		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;

		// Apply scale to avoid seams

		// two texels less per square (one texel will do for NEAREST)
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );

		// Unwrap

		// space: -1 ... 1 range for each square
		//
		// #X##		dim    := ( 4 , 2 )
		//  # #		center := ( 1 , 1 )

		vec2 planar = v.xy;

		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;

		if ( absV.z >= almostOne ) {

			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;

		} else if ( absV.x >= almostOne ) {

			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;

		} else if ( absV.y >= almostOne ) {

			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;

		}

		// Transform to UV space

		// scale := 0.5 / dim
		// translate := ( center + 0.5 ) / dim
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );

	}

	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {

		float shadow = 1.0;

		// for point lights, the uniform @vShadowCoord is re-purposed to hold
		// the vector from the light to the world-space position of the fragment.
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );

		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {

			// dp = normalized distance from light to fragment position
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear ); // need to clamp?
			dp += shadowBias;

			// bd3D = base direction 3D
			vec3 bd3D = normalize( lightToPosition );

			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );

			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )

				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;

				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );

			#else // no percentage-closer filtering

				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );

			#endif

		}

		return mix( 1.0, shadow, shadowIntensity );

	}

#endif
`,iA=`

#if NUM_SPOT_LIGHT_COORDS > 0

	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];

#endif

#ifdef USE_SHADOWMAP

	#if NUM_DIR_LIGHT_SHADOWS > 0

		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];

		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};

		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];

	#endif

	#if NUM_SPOT_LIGHT_SHADOWS > 0

		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};

		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];

	#endif

	#if NUM_POINT_LIGHT_SHADOWS > 0

		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];

		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};

		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];

	#endif

	/*
	#if NUM_RECT_AREA_LIGHTS > 0

		// TODO (abelnation): uniforms for area light shadows

	#endif
	*/

#endif
`,oA=`

#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )

	// Offsetting the position used for querying occlusion along the world normal can be used to reduce shadow acne.
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;

#endif

#if defined( USE_SHADOWMAP )

	#if NUM_DIR_LIGHT_SHADOWS > 0

		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {

			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;

		}
		#pragma unroll_loop_end

	#endif

	#if NUM_POINT_LIGHT_SHADOWS > 0

		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {

			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;

		}
		#pragma unroll_loop_end

	#endif

	/*
	#if NUM_RECT_AREA_LIGHTS > 0

		// TODO (abelnation): update vAreaShadowCoord with area light info

	#endif
	*/

#endif

// spot lights can be evaluated without active shadow mapping (when SpotLight.map is used)

#if NUM_SPOT_LIGHT_COORDS > 0

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {

		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;

	}
	#pragma unroll_loop_end

#endif


`,sA=`
float getShadowMask() {

	float shadow = 1.0;

	#ifdef USE_SHADOWMAP

	#if NUM_DIR_LIGHT_SHADOWS > 0

	DirectionalLightShadow directionalLight;

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {

		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;

	}
	#pragma unroll_loop_end

	#endif

	#if NUM_SPOT_LIGHT_SHADOWS > 0

	SpotLightShadow spotLight;

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {

		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;

	}
	#pragma unroll_loop_end

	#endif

	#if NUM_POINT_LIGHT_SHADOWS > 0

	PointLightShadow pointLight;

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {

		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;

	}
	#pragma unroll_loop_end

	#endif

	/*
	#if NUM_RECT_AREA_LIGHTS > 0

		// TODO (abelnation): update shadow for Area light

	#endif
	*/

	#endif

	return shadow;

}
`,tA=`
#ifdef USE_SKINNING

	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );

#endif
`,eA=`
#ifdef USE_SKINNING

	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;

	uniform highp sampler2D boneTexture;

	mat4 getBoneMatrix( const in float i ) {

		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );

		return mat4( v1, v2, v3, v4 );

	}

#endif
`,Jk=`
#ifdef USE_SKINNING

	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );

	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;

	transformed = ( bindMatrixInverse * skinned ).xyz;

#endif
`,Zk=`
#ifdef USE_SKINNING

	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;

	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;

	#ifdef USE_TANGENT

		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;

	#endif

#endif
`,Gk=`
float specularStrength;

#ifdef USE_SPECULARMAP

	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;

#else

	specularStrength = 1.0;

#endif
`,qk=`
#ifdef USE_SPECULARMAP

	uniform sampler2D specularMap;

#endif
`,Ik=`
#if defined( TONE_MAPPING )

	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );

#endif
`,Rk=`
#ifndef saturate
// <common> may have defined saturate() already
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif

uniform float toneMappingExposure;

// exposure only
vec3 LinearToneMapping( vec3 color ) {

	return saturate( toneMappingExposure * color );

}

// source: https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf
vec3 ReinhardToneMapping( vec3 color ) {

	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );

}

// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/
vec3 CineonToneMapping( vec3 color ) {

	// filmic operator by Jim Hejl and Richard Burgess-Dawson
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );

}

// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs
vec3 RRTAndODTFit( vec3 v ) {

	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;

}

// this implementation of ACES is modified to accommodate a brighter viewing environment.
// the scale factor of 1/0.6 is subjective. see discussion in #19621.

vec3 ACESFilmicToneMapping( vec3 color ) {

	// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ), // transposed from source
		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);

	// ODT_SAT => XYZ => D60_2_D65 => sRGB
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ), // transposed from source
		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);

	color *= toneMappingExposure / 0.6;

	color = ACESInputMat * color;

	// Apply RRT and ODT
	color = RRTAndODTFit( color );

	color = ACESOutputMat * color;

	// Clamp to [0, 1]
	return saturate( color );

}

// Matrices for rec 2020 <> rec 709 color space conversion
// matrix provided in row-major order so it has been transposed
// https://www.itu.int/pub/R-REP-BT.2407-2017
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);

const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);

// https://iolite-engine.com/blog_posts/minimal_agx_implementation
// Mean error^2: 3.6705141e-06
vec3 agxDefaultContrastApprox( vec3 x ) {

	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;

	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;

}

// AgX Tone Mapping implementation based on Filament, which in turn is based
// on Blender's implementation using rec 2020 primaries
// https://github.com/google/filament/pull/7236
// Inputs and outputs are encoded as Linear-sRGB.

vec3 AgXToneMapping( vec3 color ) {

	// AgX constants
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);

	// explicit AgXOutsetMatrix generated from Filaments AgXOutsetMatrixInv
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);

	// LOG2_MIN      = -10.0
	// LOG2_MAX      =  +6.5
	// MIDDLE_GRAY   =  0.18
	const float AgxMinEv = - 12.47393;  // log2( pow( 2, LOG2_MIN ) * MIDDLE_GRAY )
	const float AgxMaxEv = 4.026069;    // log2( pow( 2, LOG2_MAX ) * MIDDLE_GRAY )

	color *= toneMappingExposure;

	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;

	color = AgXInsetMatrix * color;

	// Log2 encoding
	color = max( color, 1e-10 ); // avoid 0 or negative numbers for log2
	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );

	color = clamp( color, 0.0, 1.0 );

	// Apply sigmoid
	color = agxDefaultContrastApprox( color );

	// Apply AgX look
	// v = agxLook(v, look);

	color = AgXOutsetMatrix * color;

	// Linearize
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );

	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;

	// Gamut mapping. Simple clamp for now.
	color = clamp( color, 0.0, 1.0 );

	return color;

}

// https://modelviewer.dev/examples/tone-mapping

vec3 NeutralToneMapping( vec3 color ) {

	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;

	color *= toneMappingExposure;

	float x = min( color.r, min( color.g, color.b ) );

	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;

	color -= offset;

	float peak = max( color.r, max( color.g, color.b ) );

	if ( peak < StartCompression ) return color;

	float d = 1. - StartCompression;

	float newPeak = 1. - d * d / ( peak + d - StartCompression );

	color *= newPeak / peak;

	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );

	return mix( color, vec3( newPeak ), g );

}

vec3 CustomToneMapping( vec3 color ) { return color; }
`,Nk=`
#ifdef USE_TRANSMISSION

	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;

	#ifdef USE_TRANSMISSIONMAP

		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;

	#endif

	#ifdef USE_THICKNESSMAP

		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;

	#endif

	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );

	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );

	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );

	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );

#endif
`,Tk=`
#ifdef USE_TRANSMISSION

	// Transmission code is based on glTF-Sampler-Viewer
	// https://github.com/KhronosGroup/glTF-Sample-Viewer

	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;

	#ifdef USE_TRANSMISSIONMAP

		uniform sampler2D transmissionMap;

	#endif

	#ifdef USE_THICKNESSMAP

		uniform sampler2D thicknessMap;

	#endif

	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;

	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;

	varying vec3 vWorldPosition;

	// Mipped Bicubic Texture Filtering by N8
	// https://www.shadertoy.com/view/Dl2SDW

	float w0( float a ) {

		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );

	}

	float w1( float a ) {

		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );

	}

	float w2( float a ){

		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );

	}

	float w3( float a ) {

		return ( 1.0 / 6.0 ) * ( a * a * a );

	}

	// g0 and g1 are the two amplitude functions
	float g0( float a ) {

		return w0( a ) + w1( a );

	}

	float g1( float a ) {

		return w2( a ) + w3( a );

	}

	// h0 and h1 are the two offset functions
	float h0( float a ) {

		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );

	}

	float h1( float a ) {

		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );

	}

	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {

		uv = uv * texelSize.zw + 0.5;

		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );

		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );

		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;

		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );

	}

	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {

		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );

	}

	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {

		// Direction of refracted light.
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );

		// Compute rotation-independent scaling of the model matrix.
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );

		// The thickness is specified in local space.
		return normalize( refractionVector ) * thickness * modelScale;

	}

	float applyIorToRoughness( const in float roughness, const in float ior ) {

		// Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and
		// an IOR of 1.5 results in the default amount of microfacet refraction.
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );

	}

	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {

		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );

	}

	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {

		if ( isinf( attenuationDistance ) ) {

			// Attenuation distance is +∞, i.e. the transmitted color is not attenuated at all.
			return vec3( 1.0 );

		} else {

			// Compute light attenuation using Beer's law.
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance ); // Beer's law
			return transmittance;

		}

	}

	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {

		vec4 transmittedLight;
		vec3 transmittance;

		#ifdef USE_DISPERSION

			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );

			for ( int i = 0; i < 3; i ++ ) {

				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;

				// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;

				// Sample framebuffer to get pixel the refracted ray hits.
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;

				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];

			}

			transmittedLight.a /= 3.0;

		#else

			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;

			// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;

			// Sample framebuffer to get pixel the refracted ray hits.
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );

		#endif

		vec3 attenuatedColor = transmittance * transmittedLight.rgb;

		// Get the specular component.
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );

		// As less light is transmitted, the opacity should be increased. This simple approximation does a decent job
		// of modulating a CSS background, and has no effect when the buffer is opaque, due to a solid object or clear color.
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;

		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );

	}
#endif
`,Ak=`
#if defined( USE_UV ) || defined( USE_ANISOTROPY )

	varying vec2 vUv;

#endif
#ifdef USE_MAP

	varying vec2 vMapUv;

#endif
#ifdef USE_ALPHAMAP

	varying vec2 vAlphaMapUv;

#endif
#ifdef USE_LIGHTMAP

	varying vec2 vLightMapUv;

#endif
#ifdef USE_AOMAP

	varying vec2 vAoMapUv;

#endif
#ifdef USE_BUMPMAP

	varying vec2 vBumpMapUv;

#endif
#ifdef USE_NORMALMAP

	varying vec2 vNormalMapUv;

#endif
#ifdef USE_EMISSIVEMAP

	varying vec2 vEmissiveMapUv;

#endif
#ifdef USE_METALNESSMAP

	varying vec2 vMetalnessMapUv;

#endif
#ifdef USE_ROUGHNESSMAP

	varying vec2 vRoughnessMapUv;

#endif
#ifdef USE_ANISOTROPYMAP

	varying vec2 vAnisotropyMapUv;

#endif
#ifdef USE_CLEARCOATMAP

	varying vec2 vClearcoatMapUv;

#endif
#ifdef USE_CLEARCOAT_NORMALMAP

	varying vec2 vClearcoatNormalMapUv;

#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP

	varying vec2 vClearcoatRoughnessMapUv;

#endif
#ifdef USE_IRIDESCENCEMAP

	varying vec2 vIridescenceMapUv;

#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP

	varying vec2 vIridescenceThicknessMapUv;

#endif
#ifdef USE_SHEEN_COLORMAP

	varying vec2 vSheenColorMapUv;

#endif
#ifdef USE_SHEEN_ROUGHNESSMAP

	varying vec2 vSheenRoughnessMapUv;

#endif
#ifdef USE_SPECULARMAP

	varying vec2 vSpecularMapUv;

#endif
#ifdef USE_SPECULAR_COLORMAP

	varying vec2 vSpecularColorMapUv;

#endif
#ifdef USE_SPECULAR_INTENSITYMAP

	varying vec2 vSpecularIntensityMapUv;

#endif
#ifdef USE_TRANSMISSIONMAP

	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;

#endif
#ifdef USE_THICKNESSMAP

	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;

#endif
`,kk=`
#if defined( USE_UV ) || defined( USE_ANISOTROPY )

	varying vec2 vUv;

#endif
#ifdef USE_MAP

	uniform mat3 mapTransform;
	varying vec2 vMapUv;

#endif
#ifdef USE_ALPHAMAP

	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;

#endif
#ifdef USE_LIGHTMAP

	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;

#endif
#ifdef USE_AOMAP

	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;

#endif
#ifdef USE_BUMPMAP

	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;

#endif
#ifdef USE_NORMALMAP

	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;

#endif
#ifdef USE_DISPLACEMENTMAP

	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;

#endif
#ifdef USE_EMISSIVEMAP

	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;

#endif
#ifdef USE_METALNESSMAP

	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;

#endif
#ifdef USE_ROUGHNESSMAP

	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;

#endif
#ifdef USE_ANISOTROPYMAP

	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;

#endif
#ifdef USE_CLEARCOATMAP

	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;

#endif
#ifdef USE_CLEARCOAT_NORMALMAP

	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;

#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP

	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;

#endif
#ifdef USE_SHEEN_COLORMAP

	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;

#endif
#ifdef USE_SHEEN_ROUGHNESSMAP

	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;

#endif
#ifdef USE_IRIDESCENCEMAP

	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;

#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP

	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;

#endif
#ifdef USE_SPECULARMAP

	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;

#endif
#ifdef USE_SPECULAR_COLORMAP

	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;

#endif
#ifdef USE_SPECULAR_INTENSITYMAP

	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;

#endif
#ifdef USE_TRANSMISSIONMAP

	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;

#endif
#ifdef USE_THICKNESSMAP

	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;

#endif
`,Ek=`
#if defined( USE_UV ) || defined( USE_ANISOTROPY )

	vUv = vec3( uv, 1 ).xy;

#endif
#ifdef USE_MAP

	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;

#endif
#ifdef USE_ALPHAMAP

	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_LIGHTMAP

	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_AOMAP

	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_BUMPMAP

	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_NORMALMAP

	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_DISPLACEMENTMAP

	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_EMISSIVEMAP

	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_METALNESSMAP

	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_ROUGHNESSMAP

	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_ANISOTROPYMAP

	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_CLEARCOATMAP

	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_CLEARCOAT_NORMALMAP

	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP

	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_IRIDESCENCEMAP

	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP

	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_SHEEN_COLORMAP

	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_SHEEN_ROUGHNESSMAP

	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_SPECULARMAP

	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_SPECULAR_COLORMAP

	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_SPECULAR_INTENSITYMAP

	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_TRANSMISSIONMAP

	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_THICKNESSMAP

	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;

#endif
`,Ck=`
#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0

	vec4 worldPosition = vec4( transformed, 1.0 );

	#ifdef USE_BATCHING

		worldPosition = batchingMatrix * worldPosition;

	#endif

	#ifdef USE_INSTANCING

		worldPosition = instanceMatrix * worldPosition;

	#endif

	worldPosition = modelMatrix * worldPosition;

#endif
`,xk=`
varying vec2 vUv;
uniform mat3 uvTransform;

void main() {

	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;

	gl_Position = vec4( position.xy, 1.0, 1.0 );

}
`,Ok=`
uniform sampler2D t2D;
uniform float backgroundIntensity;

varying vec2 vUv;

void main() {

	vec4 texColor = texture2D( t2D, vUv );

	#ifdef DECODE_VIDEO_TEXTURE

		// use inline sRGB decode until browsers properly support SRGB8_ALPHA8 with video textures

		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );

	#endif

	texColor.rgb *= backgroundIntensity;

	gl_FragColor = texColor;

	#include <tonemapping_fragment>
	#include <colorspace_fragment>

}
`,wk=`
varying vec3 vWorldDirection;

#include <common>

void main() {

	vWorldDirection = transformDirection( position, modelMatrix );

	#include <begin_vertex>
	#include <project_vertex>

	gl_Position.z = gl_Position.w; // set z to camera.far

}
`,uk=`

#ifdef ENVMAP_TYPE_CUBE

	uniform samplerCube envMap;

#elif defined( ENVMAP_TYPE_CUBE_UV )

	uniform sampler2D envMap;

#endif

uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;

varying vec3 vWorldDirection;

#include <cube_uv_reflection_fragment>

void main() {

	#ifdef ENVMAP_TYPE_CUBE

		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );

	#elif defined( ENVMAP_TYPE_CUBE_UV )

		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );

	#else

		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );

	#endif

	texColor.rgb *= backgroundIntensity;

	gl_FragColor = texColor;

	#include <tonemapping_fragment>
	#include <colorspace_fragment>

}
`,dk=`
varying vec3 vWorldDirection;

#include <common>

void main() {

	vWorldDirection = transformDirection( position, modelMatrix );

	#include <begin_vertex>
	#include <project_vertex>

	gl_Position.z = gl_Position.w; // set z to camera.far

}
`,lk=`
uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;

varying vec3 vWorldDirection;

void main() {

	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );

	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;

	#include <tonemapping_fragment>
	#include <colorspace_fragment>

}
`,ak=`
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

// This is used for computing an equivalent of gl_FragCoord.z that is as high precision as possible.
// Some platforms compute gl_FragCoord at a lower precision which makes the manually computed value better for
// depth-based postprocessing effects. Reproduced on iPad with A10 processor / iPadOS 13.3.1.
varying vec2 vHighPrecisionZW;

void main() {

	#include <uv_vertex>

	#include <batching_vertex>
	#include <skinbase_vertex>

	#include <morphinstance_vertex>

	#ifdef USE_DISPLACEMENTMAP

		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>

	#endif

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	vHighPrecisionZW = gl_Position.zw;

}
`,ek=`
#if DEPTH_PACKING == 3200

	uniform float opacity;

#endif

#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

varying vec2 vHighPrecisionZW;

void main() {

	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>

	#if DEPTH_PACKING == 3200

		diffuseColor.a = opacity;

	#endif

	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>

	#include <logdepthbuf_fragment>

	// Higher precision equivalent of gl_FragCoord.z

	#ifdef USE_REVERSED_DEPTH_BUFFER

		float fragCoordZ = vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ];

	#else

		float fragCoordZ = 0.5 * vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ] + 0.5;

	#endif

	#if DEPTH_PACKING == 3200

		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );

	#elif DEPTH_PACKING == 3201

		gl_FragColor = packDepthToRGBA( fragCoordZ );

	#elif DEPTH_PACKING == 3202

		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );

	#elif DEPTH_PACKING == 3203

		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );

	#endif

}
`,QE=`
#define DISTANCE

varying vec3 vWorldPosition;

#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>

	#include <batching_vertex>
	#include <skinbase_vertex>

	#include <morphinstance_vertex>

	#ifdef USE_DISPLACEMENTMAP

		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>

	#endif

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>

	vWorldPosition = worldPosition.xyz;

}
`,GE=`
#define DISTANCE

uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;

#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>

void main () {

	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>

	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>

	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist ); // clamp to [ 0, 1 ]

	gl_FragColor = packDepthToRGBA( dist );

}
`,KE=`
varying vec3 vWorldDirection;

#include <common>

void main() {

	vWorldDirection = transformDirection( position, modelMatrix );

	#include <begin_vertex>
	#include <project_vertex>

}
`,UE=`
uniform sampler2D tEquirect;

varying vec3 vWorldDirection;

#include <common>

void main() {

	vec3 direction = normalize( vWorldDirection );

	vec2 sampleUV = equirectUv( direction );

	gl_FragColor = texture2D( tEquirect, sampleUV );

	#include <tonemapping_fragment>
	#include <colorspace_fragment>

}
`,WE=`
uniform float scale;
attribute float lineDistance;

varying float vLineDistance;

#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	vLineDistance = scale * lineDistance;

	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>

}
`,LE=`
uniform vec3 diffuse;
uniform float opacity;

uniform float dashSize;
uniform float totalSize;

varying float vLineDistance;

#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>

	if ( mod( vLineDistance, totalSize ) > dashSize ) {

		discard;

	}

	vec3 outgoingLight = vec3( 0.0 );

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>

	outgoingLight = diffuseColor.rgb; // simple shader

	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>

}
`,zE=`
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>

	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )

		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>

	#endif

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>

}
`,TE=`
uniform vec3 diffuse;
uniform float opacity;

#ifndef FLAT_SHADED

	varying vec3 vNormal;

#endif

#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>

	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );

	// accumulation (baked indirect lighting only)
	#ifdef USE_LIGHTMAP

		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;

	#else

		reflectedLight.indirectDiffuse += vec3( 1.0 );

	#endif

	// modulation
	#include <aomap_fragment>

	reflectedLight.indirectDiffuse *= diffuseColor.rgb;

	vec3 outgoingLight = reflectedLight.indirectDiffuse;

	#include <envmap_fragment>

	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`,FE=`
#define LAMBERT

varying vec3 vViewPosition;

#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	vViewPosition = - mvPosition.xyz;

	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>

}
`,SE=`
#define LAMBERT

uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;

#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>

	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>

	// accumulation
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>

	// modulation
	#include <aomap_fragment>

	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;

	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`,AE=`
#define MATCAP

varying vec3 vViewPosition;

#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>

#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>

	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>

	vViewPosition = - mvPosition.xyz;

}
`,kE=`
#define MATCAP

uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;

varying vec3 vViewPosition;

#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>

	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5; // 0.495 to remove artifacts caused by undersized matcap disks

	#ifdef USE_MATCAP

		vec4 matcapColor = texture2D( matcap, uv );

	#else

		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 ); // default if matcap is missing

	#endif

	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;

	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`,CE=`
#define NORMAL

#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )

	varying vec3 vViewPosition;

#endif

#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <batching_vertex>

	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )

	vViewPosition = - mvPosition.xyz;

#endif

}
`,OE=`
#define NORMAL

uniform float opacity;

#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )

	varying vec3 vViewPosition;

#endif

#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );

	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>

	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );

	#ifdef OPAQUE

		gl_FragColor.a = 1.0;

	#endif

}
`,_E=`
#define PHONG

varying vec3 vViewPosition;

#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>

	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	vViewPosition = - mvPosition.xyz;

	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>

}
`,oE=`
#define PHONG

uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;

#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>

	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>

	// accumulation
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>

	// modulation
	#include <aomap_fragment>

	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;

	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`,tE=`
#define STANDARD

varying vec3 vViewPosition;

#ifdef USE_TRANSMISSION

	varying vec3 vWorldPosition;

#endif

#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	vViewPosition = - mvPosition.xyz;

	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>

#ifdef USE_TRANSMISSION

	vWorldPosition = worldPosition.xyz;

#endif
}
`,YC=`
#define STANDARD

#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif

uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;

#ifdef IOR
	uniform float ior;
#endif

#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;

	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif

	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif

#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif

#ifdef USE_DISPERSION
	uniform float dispersion;
#endif

#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif

#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;

	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif

	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif

#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;

	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif

varying vec3 vViewPosition;

#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>

	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>

	// accumulation
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>

	// modulation
	#include <aomap_fragment>

	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;

	#include <transmission_fragment>

	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;

	#ifdef USE_SHEEN

		// Sheen energy compensation approximation calculation can be found at the end of
		// https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );

		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;

	#endif

	#ifdef USE_CLEARCOAT

		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );

		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );

		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;

	#endif

	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`,WC=`
#define TOON

varying vec3 vViewPosition;

#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	vViewPosition = - mvPosition.xyz;

	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>

}
`,RC=`
#define TOON

uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;

#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>

	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>

	// accumulation
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>

	// modulation
	#include <aomap_fragment>

	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;

	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`,LC=`
uniform float size;
uniform float scale;

#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

#ifdef USE_POINTS_UV

	varying vec2 vUv;
	uniform mat3 uvTransform;

#endif

void main() {

	#ifdef USE_POINTS_UV

		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;

	#endif

	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>

	gl_PointSize = size;

	#ifdef USE_SIZEATTENUATION

		bool isPerspective = isPerspectiveMatrix( projectionMatrix );

		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );

	#endif

	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>

}
`,TC=`
uniform vec3 diffuse;
uniform float opacity;

#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>

	vec3 outgoingLight = vec3( 0.0 );

	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>

	outgoingLight = diffuseColor.rgb;

	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>

}
`,kC=`
#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>

void main() {

	#include <batching_vertex>

	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>

	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>

}
`,vC=`
uniform vec3 color;
uniform float opacity;

#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>

void main() {

	#include <logdepthbuf_fragment>

	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );

	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>

}
`,hC=`
uniform float rotation;
uniform vec2 center;

#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>

	vec4 mvPosition = modelViewMatrix[ 3 ];

	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );

	#ifndef USE_SIZEATTENUATION

		bool isPerspective = isPerspectiveMatrix( projectionMatrix );

		if ( isPerspective ) scale *= - mvPosition.z;

	#endif

	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;

	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;

	mvPosition.xy += rotatedPosition;

	gl_Position = projectionMatrix * mvPosition;

	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>

}
`,uC=`
uniform vec3 diffuse;
uniform float opacity;

#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>

	vec3 outgoingLight = vec3( 0.0 );

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>

	outgoingLight = diffuseColor.rgb;

	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>

}
`,O={alphahash_fragment:Pw,alphahash_pars_fragment:Hw,alphamap_fragment:Iw,alphamap_pars_fragment:Bw,alphatest_fragment:Vw,alphatest_pars_fragment:$w,aomap_fragment:Yw,aomap_pars_fragment:tO,batching_pars_vertex:iO,batching_vertex:aO,begin_vertex:NO,beginnormal_vertex:LO,bsdfs:IO,iridescence_fragment:BO,bumpmap_pars_fragment:VO,clipping_planes_fragment:$O,clipping_planes_pars_fragment:WO,clipping_planes_pars_vertex:UO,clipping_planes_vertex:KO,color_fragment:qO,color_pars_fragment:ex,color_pars_vertex:tx,color_vertex:nx,common:sx,cube_uv_reflection_fragment:ix,defaultnormal_vertex:lx,displacementmap_pars_vertex:mx,displacementmap_vertex:gx,emissivemap_fragment:bx,emissivemap_pars_fragment:Cx,colorspace_fragment:Ex,colorspace_pars_fragment:kx,envmap_fragment:Ax,envmap_common_pars_fragment:Sx,envmap_pars_fragment:zx,envmap_pars_vertex:Nx,envmap_physical_pars_fragment:$S,envmap_vertex:Vx,fog_vertex:Yx,fog_pars_vertex:Jx,fog_fragment:aC,fog_pars_fragment:lC,gradientmap_pars_fragment:mC,lightmap_pars_fragment:bC,lights_lambert_fragment:jC,lights_lambert_pars_fragment:yC,lights_pars_begin:$k,lights_toon_fragment:BS,lights_toon_pars_fragment:IS,lights_phong_fragment:RS,lights_phong_pars_fragment:LS,lights_physical_fragment:NS,lights_physical_pars_fragment:zS,lights_fragment_begin:kS,lights_fragment_maps:OS,lights_fragment_end:dS,logdepthbuf_fragment:lS,logdepthbuf_pars_fragment:rS,logdepthbuf_pars_vertex:G8,logdepthbuf_vertex:iS,map_fragment:oS,map_pars_fragment:sS,map_particle_fragment:nS,map_particle_pars_fragment:tS,metalnessmap_fragment:eS,metalnessmap_pars_fragment:JA,morphinstance_vertex:ZA,morphcolor_vertex:QA,morphnormal_vertex:XA,morphtarget_pars_vertex:GA,morphtarget_vertex:YA,normal_fragment_begin:qA,normal_fragment_maps:KA,normal_pars_fragment:UA,normal_pars_vertex:WA,normal_vertex:$A,normalmap_pars_fragment:VA,clearcoat_normal_fragment_begin:BA,clearcoat_normal_fragment_maps:RA,clearcoat_pars_fragment:DA,iridescence_pars_fragment:AA,opaque_fragment:CA,packing:xA,premultiplied_alpha_fragment:OA,project_vertex:bA,dithering_fragment:vA,dithering_pars_fragment:hA,roughnessmap_fragment:dA,roughnessmap_pars_fragment:lA,shadowmap_pars_fragment:aA,shadowmap_pars_vertex:iA,shadowmap_vertex:oA,shadowmask_pars_fragment:sA,skinbase_vertex:tA,skinning_pars_vertex:eA,skinning_vertex:Jk,skinnormal_vertex:Zk,specularmap_fragment:Gk,specularmap_pars_fragment:qk,tonemapping_fragment:Ik,tonemapping_pars_fragment:Rk,transmission_fragment:Nk,transmission_pars_fragment:Tk,uv_pars_fragment:Ak,uv_pars_vertex:kk,uv_vertex:Ek,worldpos_vertex:Ck,background_vert:xk,background_frag:Ok,backgroundCube_vert:wk,backgroundCube_frag:uk,cube_vert:dk,cube_frag:lk,depth_vert:ak,depth_frag:ek,distanceRGBA_vert:QE,distanceRGBA_frag:GE,equirect_vert:KE,equirect_frag:UE,linedashed_vert:WE,linedashed_frag:LE,meshbasic_vert:zE,meshbasic_frag:TE,meshlambert_vert:FE,meshlambert_frag:SE,meshmatcap_vert:AE,meshmatcap_frag:kE,meshnormal_vert:CE,meshnormal_frag:OE,meshphong_vert:_E,meshphong_frag:oE,meshphysical_vert:tE,meshphysical_frag:YC,meshtoon_vert:WC,meshtoon_frag:RC,points_vert:LC,points_frag:TC,shadow_vert:kC,shadow_frag:vC,sprite_vert:hC,sprite_frag:uC},r={common:{diffuse:{value:new T(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new b},alphaMap:{value:null},alphaMapTransform:{value:new b},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new b}},envmap:{envMap:{value:null},envMapRotation:{value:new b},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new b}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new b}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new b},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new b},normalScale:{value:new w(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new b},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new b}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new b}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new b}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new T(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new T(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new b},alphaTest:{value:0},uvTransform:{value:new b}},sprite:{diffuse:{value:new T(16777215)},opacity:{value:1},center:{value:new w(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new b},alphaMap:{value:null},alphaMapTransform:{value:new b},alphaTest:{value:0}}},Yt={basic:{uniforms:qe([r.common,r.specularmap,r.envmap,r.aomap,r.lightmap,r.fog]),vertexShader:O.meshbasic_vert,fragmentShader:O.meshbasic_frag},lambert:{uniforms:qe([r.common,r.specularmap,r.envmap,r.aomap,r.lightmap,r.emissivemap,r.bumpmap,r.normalmap,r.displacementmap,r.fog,r.lights,{emissive:{value:new T(0)}}]),vertexShader:O.meshlambert_vert,fragmentShader:O.meshlambert_frag},phong:{uniforms:qe([r.common,r.specularmap,r.envmap,r.aomap,r.lightmap,r.emissivemap,r.bumpmap,r.normalmap,r.displacementmap,r.fog,r.lights,{emissive:{value:new T(0)},specular:{value:new T(1118481)},shininess:{value:30}}]),vertexShader:O.meshphong_vert,fragmentShader:O.meshphong_frag},standard:{uniforms:qe([r.common,r.envmap,r.aomap,r.lightmap,r.emissivemap,r.bumpmap,r.normalmap,r.displacementmap,r.roughnessmap,r.metalnessmap,r.fog,r.lights,{emissive:{value:new T(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:O.meshphysical_vert,fragmentShader:O.meshphysical_frag},toon:{uniforms:qe([r.common,r.aomap,r.lightmap,r.emissivemap,r.bumpmap,r.normalmap,r.displacementmap,r.gradientmap,r.fog,r.lights,{emissive:{value:new T(0)}}]),vertexShader:O.meshtoon_vert,fragmentShader:O.meshtoon_frag},matcap:{uniforms:qe([r.common,r.bumpmap,r.normalmap,r.displacementmap,r.fog,{matcap:{value:null}}]),vertexShader:O.meshmatcap_vert,fragmentShader:O.meshmatcap_frag},points:{uniforms:qe([r.points,r.fog]),vertexShader:O.points_vert,fragmentShader:O.points_frag},dashed:{uniforms:qe([r.common,r.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:O.linedashed_vert,fragmentShader:O.linedashed_frag},depth:{uniforms:qe([r.common,r.displacementmap]),vertexShader:O.depth_vert,fragmentShader:O.depth_frag},normal:{uniforms:qe([r.common,r.bumpmap,r.normalmap,r.displacementmap,{opacity:{value:1}}]),vertexShader:O.meshnormal_vert,fragmentShader:O.meshnormal_frag},sprite:{uniforms:qe([r.sprite,r.fog]),vertexShader:O.sprite_vert,fragmentShader:O.sprite_frag},background:{uniforms:{uvTransform:{value:new b},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:O.background_vert,fragmentShader:O.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new b}},vertexShader:O.backgroundCube_vert,fragmentShader:O.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:O.cube_vert,fragmentShader:O.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:O.equirect_vert,fragmentShader:O.equirect_frag},distanceRGBA:{uniforms:qe([r.common,r.displacementmap,{referencePosition:{value:new t},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:O.distanceRGBA_vert,fragmentShader:O.distanceRGBA_frag},shadow:{uniforms:qe([r.lights,r.fog,{color:{value:new T(0)},opacity:{value:1}}]),vertexShader:O.shadow_vert,fragmentShader:O.shadow_frag}},Yt.physical={uniforms:qe([Yt.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new b},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new b},clearcoatNormalScale:{value:new w(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new b},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new b},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new b},sheen:{value:0},sheenColor:{value:new T(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new b},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new b},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new b},transmissionSamplerSize:{value:new w},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new b},attenuationDistance:{value:0},attenuationColor:{value:new T(0)},specularColor:{value:new T(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new b},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new b},anisotropyVector:{value:new w},anisotropyMap:{value:null},anisotropyMapTransform:{value:new b}}]),vertexShader:O.meshphysical_vert,fragmentShader:O.meshphysical_frag},Jc={r:0,b:0,g:0},co=new Hn,rC=new W;function gM(e,t,n,s,o,i,a){const u=new T(0);let d=i===!0?0:1,l,r,h=null,m=0,f=null;function g(e){let s=e.isScene===!0?e.background:null;if(s&&s.isTexture){const o=e.backgroundBlurriness>0;s=(o?n:t).get(s)}return s}function b(t){let o=!1;const n=g(t);n===null?p(u,d):n&&n.isColor&&(p(n,1),o=!0);const i=e.xr.getEnvironmentBlendMode();i==="additive"?s.buffers.color.setClear(0,0,0,1,a):i==="alpha-blend"&&s.buffers.color.setClear(0,0,0,0,a),(e.autoClear||o)&&(s.buffers.depth.setTest(!0),s.buffers.depth.setMask(!0),s.buffers.color.setMask(!0),e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil))}function j(t,n){const s=g(n);s&&(s.isCubeTexture||s.mapping===Cs)?(r===0[0]&&(r=new be(new kr(1,1,1),new us({name:"BackgroundCubeMaterial",uniforms:Er(Yt.backgroundCube.uniforms),vertexShader:Yt.backgroundCube.vertexShader,fragmentShader:Yt.backgroundCube.fragmentShader,side:B,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),r.geometry.deleteAttribute("normal"),r.geometry.deleteAttribute("uv"),r.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(r.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),o.update(r)),co.copy(n.backgroundRotation),co.x*=-1,co.y*=-1,co.z*=-1,s.isCubeTexture&&s.isRenderTargetTexture===!1&&(co.y*=-1,co.z*=-1),r.material.uniforms.envMap.value=s,r.material.uniforms.flipEnvMap.value=s.isCubeTexture&&s.isRenderTargetTexture===!1?-1:1,r.material.uniforms.backgroundBlurriness.value=n.backgroundBlurriness,r.material.uniforms.backgroundIntensity.value=n.backgroundIntensity,r.material.uniforms.backgroundRotation.value.setFromMatrix4(rC.makeRotationFromEuler(co)),r.material.toneMapped=v.getTransfer(s.colorSpace)!==c,(h!==s||m!==s.version||f!==e.toneMapping)&&(r.material.needsUpdate=!0,h=s,m=s.version,f=e.toneMapping),r.layers.enableAll(),t.unshift(r,r.geometry,r.material,0,0,null)):s&&s.isTexture&&(l===0[0]&&(l=new be(new U1(2,2),new us({name:"BackgroundMaterial",uniforms:Er(Yt.background.uniforms),vertexShader:Yt.background.vertexShader,fragmentShader:Yt.background.fragmentShader,side:ot,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),l.geometry.deleteAttribute("normal"),Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}}),o.update(l)),l.material.uniforms.t2D.value=s,l.material.uniforms.backgroundIntensity.value=n.backgroundIntensity,l.material.toneMapped=v.getTransfer(s.colorSpace)!==c,s.matrixAutoUpdate===!0&&s.updateMatrix(),l.material.uniforms.uvTransform.value.copy(s.matrix),(h!==s||m!==s.version||f!==e.toneMapping)&&(l.material.needsUpdate=!0,h=s,m=s.version,f=e.toneMapping),l.layers.enableAll(),t.unshift(l,l.geometry,l.material,0,0,null))}function p(t,n){t.getRGB(Jc,f_(e)),s.buffers.color.setClear(Jc.r,Jc.g,Jc.b,n,a)}function y(){r!==0[0]&&(r.geometry.dispose(),r.material.dispose(),r=0[0]),l!==0[0]&&(l.geometry.dispose(),l.material.dispose(),l=0[0])}return{getClearColor:function(){return u},setClearColor:function(e,t=1){u.set(e),d=t,p(u,d)},getClearAlpha:function(){return d},setClearAlpha:function(e){d=e,p(u,d)},render:b,addToRenderList:j,dispose:y}}function vM(e,t){const v=e.getParameter(e.MAX_VERTEX_ATTRIBS),s={},o=h(null);let n=o,a=!1;function C(s,o,i,r,c){let l=!1;const u=j(r,i,o);n!==u&&(n=u,d(n.object)),l=b(s,r,i,c),l&&g(s,r,i,c),c!==null&&t.update(c,e.ELEMENT_ARRAY_BUFFER),(l||a)&&(a=!1,y(s,o,i,r),c!==null&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t.get(c).buffer))}function x(){return e.createVertexArray()}function d(t){return e.bindVertexArray(t)}function i(t){return e.deleteVertexArray(t)}function j(e,t,n){const r=n.wireframe===!0;let o=s[e.id];o===0[0]&&(o={},s[e.id]=o);let i=o[t.id];i===0[0]&&(i={},o[t.id]=i);let a=i[r];return a===0[0]&&(a=h(x()),i[r]=a),a}function h(e){const t=[],n=[],s=[];for(let e=0;e<v;e++)t[e]=0,n[e]=0,s[e]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:t,enabledAttributes:n,attributeDivisors:s,object:e,attributes:{},index:null}}function b(e,t,s,o){const r=n.attributes,c=t.attributes;let i=0;const a=s.getAttributes();for(const t in a){const n=a[t];if(n.location>=0){const s=r[t];let n=c[t];if(n===0[0]&&(t==="instanceMatrix"&&e.instanceMatrix&&(n=e.instanceMatrix),t==="instanceColor"&&e.instanceColor&&(n=e.instanceColor)),s===0[0])return!0;if(s.attribute!==n)return!0;if(n&&s.data!==n.data)return!0;i++}}return n.attributesNum!==i||n.index!==o}function g(e,t,s,o){const i={},c=t.attributes;let a=0;const r=s.getAttributes();for(const t in r){const n=r[t];if(n.location>=0){let n=c[t];n===0[0]&&(t==="instanceMatrix"&&e.instanceMatrix&&(n=e.instanceMatrix),t==="instanceColor"&&e.instanceColor&&(n=e.instanceColor));const s={};s.attribute=n,n&&n.data&&(s.data=n.data),i[t]=s,a++}}n.attributes=i,n.attributesNum=a,n.index=o}function p(){const e=n.newAttributes;for(let t=0,n=e.length;t<n;t++)e[t]=0}function c(e){r(e,0)}function r(t,s){const a=n.newAttributes,o=n.enabledAttributes,i=n.attributeDivisors;a[t]=1,o[t]===0&&(e.enableVertexAttribArray(t),o[t]=1),i[t]!==s&&(e.vertexAttribDivisor(t,s),i[t]=s)}function m(){const s=n.newAttributes,t=n.enabledAttributes;for(let n=0,o=t.length;n<o;n++)t[n]!==s[n]&&(e.disableVertexAttribArray(n),t[n]=0)}function u(t,n,s,o,i,a,r){r===!0?e.vertexAttribIPointer(t,n,s,i,a):e.vertexAttribPointer(t,n,s,o,i,a)}function y(n,s,o,i){p();const d=i.attributes,a=o.getAttributes(),l=s.defaultAttributeValues;for(const o in a){const s=a[o];if(s.location>=0){let a=d[o];if(a===0[0]&&(o==="instanceMatrix"&&n.instanceMatrix&&(a=n.instanceMatrix),o==="instanceColor"&&n.instanceColor&&(a=n.instanceColor)),a!==0[0]){const m=a.normalized,o=a.itemSize,l=t.get(a);if(l===0[0])continue;const f=l.buffer,d=l.type,h=l.bytesPerElement,p=d===e.INT||d===e.UNSIGNED_INT||a.gpuType===ue;if(a.isInterleavedBufferAttribute){const t=a.data,l=t.stride,g=a.offset;if(t.isInstancedInterleavedBuffer){for(let e=0;e<s.locationSize;e++)r(s.location+e,t.meshPerAttribute);n.isInstancedMesh!==!0&&i._maxInstanceCount===0[0]&&(i._maxInstanceCount=t.meshPerAttribute*t.count)}else for(let e=0;e<s.locationSize;e++)c(s.location+e);e.bindBuffer(e.ARRAY_BUFFER,f);for(let e=0;e<s.locationSize;e++)u(s.location+e,o/s.locationSize,d,m,l*h,(g+o/s.locationSize*e)*h,p)}else{if(a.isInstancedBufferAttribute){for(let e=0;e<s.locationSize;e++)r(s.location+e,a.meshPerAttribute);n.isInstancedMesh!==!0&&i._maxInstanceCount===0[0]&&(i._maxInstanceCount=a.meshPerAttribute*a.count)}else for(let e=0;e<s.locationSize;e++)c(s.location+e);e.bindBuffer(e.ARRAY_BUFFER,f);for(let e=0;e<s.locationSize;e++)u(s.location+e,o/s.locationSize,d,m,o*h,o/s.locationSize*e*h,p)}}else if(l!==0[0]){const t=l[o];if(t!==0[0])switch(t.length){case 2:e.vertexAttrib2fv(s.location,t);break;case 3:e.vertexAttrib3fv(s.location,t);break;case 4:e.vertexAttrib4fv(s.location,t);break;default:e.vertexAttrib1fv(s.location,t)}}}}m()}function _(){l();for(const t in s){const e=s[t];for(const n in e){const t=e[n];for(const e in t)i(t[e].object),delete t[e];delete e[n]}delete s[t]}}function w(e){if(s[e.id]===0[0])return;const t=s[e.id];for(const n in t){const e=t[n];for(const t in e)i(e[t].object),delete e[t];delete t[n]}delete s[e.id]}function O(e){for(const o in s){const t=s[o];if(t[e.id]===0[0])continue;const n=t[e.id];for(const e in n)i(n[e].object),delete n[e];delete t[e.id]}}function l(){if(f(),a=!0,n===o)return;n=o,d(n.object)}function f(){o.geometry=null,o.program=null,o.wireframe=!1}return{setup:C,reset:l,resetDefaultState:f,dispose:_,releaseStatesOfGeometry:w,releaseStatesOfProgram:O,initAttributes:p,enableAttribute:c,disableUnusedAttributes:m}}function bM(e,t,n){let s;function i(e){s=e}function a(t,o){e.drawArrays(s,t,o),n.update(o,s,1)}function o(t,o,i){if(i===0)return;e.drawArraysInstanced(s,t,o,i),n.update(o,s,i)}function r(e,o,i){if(i===0)return;const r=t.get("WEBGL_multi_draw");r.multiDrawArraysWEBGL(s,e,0,o,0,i);let a=0;for(let e=0;e<i;e++)a+=o[e];n.update(a,s,1)}function c(e,i,a,r){if(a===0)return;const c=t.get("WEBGL_multi_draw");if(c===null)for(let t=0;t<e.length;t++)o(e[t],i[t],r[t]);else{c.multiDrawArraysInstancedWEBGL(s,e,0,i,0,r,0,a);let t=0;for(let e=0;e<a;e++)t+=i[e]*r[e];n.update(t,s,1)}}this.setMode=i,this.render=a,this.renderInstances=o,this.renderMultiDraw=r,this.renderMultiDrawInstances=c}function jM(e,t,n,s){let i;function f(){if(i!==0[0])return i;if(t.has("EXT_texture_filter_anisotropic")===!0){const n=t.get("EXT_texture_filter_anisotropic");i=e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i}function h(t){return t===G||s.convert(t)===e.getParameter(e.IMPLEMENTATION_COLOR_READ_FORMAT)}function g(n){const o=n===ht&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return!(n!==Y&&s.convert(n)!==e.getParameter(e.IMPLEMENTATION_COLOR_READ_TYPE)&&n!==X&&!o)}function c(t){if(t==="highp"){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return t==="mediump"&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let o=n.precision!==0[0]?n.precision:"highp";const a=c(o);a!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",a,"instead."),o=a);const u=n.logarithmicDepthBuffer===!0,l=n.reversedDepthBuffer===!0&&t.has("EXT_clip_control"),m=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),r=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),p=e.getParameter(e.MAX_TEXTURE_SIZE),d=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),v=e.getParameter(e.MAX_VERTEX_ATTRIBS),b=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),j=e.getParameter(e.MAX_VARYING_VECTORS),y=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),_=r>0,w=e.getParameter(e.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:f,getMaxPrecision:c,textureFormatReadable:h,textureTypeReadable:g,precision:o,logarithmicDepthBuffer:u,reversedDepthBuffer:l,maxTextures:m,maxVertexTextures:r,maxTextureSize:p,maxCubemapSize:d,maxAttributes:v,maxVertexUniforms:b,maxVaryings:j,maxFragmentUniforms:y,vertexTextures:_,maxSamples:w}}function yM(e){const o=this;let i=null,n=0,r=!1,s=!1;const c=new Mn,l=new b,t={value:null,needsUpdate:!1};this.uniform=t,this.numPlanes=0,this.numIntersection=0,this.init=function(e,t){const s=e.length!==0||t||n!==0||r;return r=t,n=e.length,s},this.beginShadows=function(){s=!0,a(null)},this.endShadows=function(){s=!1},this.setGlobalState=function(e,t){i=a(e,t,0)},this.setState=function(o,c,l){const u=o.clippingPlanes,m=o.clipIntersection,f=o.clipShadows,h=e.get(o);if(!r||u===null||u.length===0||s&&!f)s?a(null):d();else{const o=s?0:n,r=o*4;let e=h.clippingState||null;t.value=e,e=a(u,c,r,l);for(let t=0;t!==r;++t)e[t]=i[t];h.clippingState=e,this.numIntersection=m?this.numPlanes:0,this.numPlanes+=o}};function d(){t.value!==i&&(t.value=i,t.needsUpdate=n>0),o.numPlanes=n,o.numIntersection=0}function a(e,n,s,i){const r=e!==null?e.length:0;let a=null;if(r!==0){if(a=t.value,i!==!0||a===null){const t=s+r*4,o=n.matrixWorldInverse;l.getNormalMatrix(o),(a===null||a.length<t)&&(a=new Float32Array(t));for(let t=0,n=s;t!==r;++t,n+=4)c.copy(e[t]).applyMatrix4(o,l),c.normal.toArray(a,n),a[n+3]=c.constant}t.value=a,t.needsUpdate=!0}return o.numPlanes=r,o.numIntersection=0,a}}function _M(e){let t=new WeakMap;function n(e,t){return t===Po?e.mapping=Zt:t===Ho&&(e.mapping=Qt),e}function o(o){if(o&&o.isTexture){const i=o.mapping;if(i===Po||i===Ho){if(t.has(o)){const e=t.get(o).texture;return n(e,o.mapping)}const i=o.image;if(i&&i.height>0){const a=new i2(i.height);return a.fromEquirectangularTexture(e,o),t.set(o,a),o.addEventListener("dispose",s),n(a.texture,o.mapping)}return null}}return o}function s(e){const n=e.target;n.removeEventListener("dispose",s);const o=t.get(n);o!==0[0]&&(t.delete(n),o.dispose())}function i(){t=new WeakMap}return{get:o,dispose:i}}To=4,cm=[.125,.215,.35,.446,.526,.582],Hs=20,Zd=new q1,dm=new T,Vd=null,Td=0,Fd=0,kd=!1,ws=(1+5**.5)/2,So=1/ws,Jm=[new t(-ws,So,0),new t(ws,So,0),new t(-So,0,ws),new t(So,0,ws),new t(0,ws,-So),new t(0,ws,So),new t(-1,1,-1),new t(1,1,-1),new t(-1,1,1),new t(1,1,1)],Zx=new t,u8=class{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,s=100,o={}){const{size:a=256,position:r=Zx}=o;Vd=this._renderer.getRenderTarget(),Td=this._renderer.getActiveCubeFace(),Fd=this._renderer.getActiveMipmapLevel(),kd=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(a);const i=this._allocateTargets();return i.depthBuffer=!0,this._sceneToCubeUV(e,n,s,i,r),t>0&&this._blur(i,0,0,t),this._applyPMREM(i),this._cleanup(i),i}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=Kx(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=qx(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=2**this._lodMax}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(Vd,Td,Fd),this._renderer.xr.enabled=kd,e.scissorTest=!1,Rl(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===Zt||e.mapping===Qt?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),Vd=this._renderer.getRenderTarget(),Td=this._renderer.getActiveCubeFace(),Fd=this._renderer.getActiveMipmapLevel(),kd=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,16*7),t=4*this._cubeSize,n={magFilter:ie,minFilter:ie,generateMipmaps:!1,type:ht,format:G,colorSpace:Rs,depthBuffer:!1},s=Xx(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=Xx(e,t,n);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=wM(s),this._blurMaterial=OM(s,e,t))}return s}_compileMaterial(e){const t=new be(this._lodPlanes[0],e);this._renderer.compile(t,Zd)}_sceneToCubeUV(e,t,n,s,o){const g=90,v=1,a=new Ee(g,v,t,n),d=[1,-1,1,1,1,1],l=[1,1,1,-1,-1,-1],i=this._renderer,m=i.autoClear,f=i.toneMapping;i.getClearColor(dm),i.toneMapping=Ke,i.autoClear=!1;const p=i.state.buffers.depth.getReversed();p&&(i.setRenderTarget(s),i.clearDepth(),i.setRenderTarget(null));const c=new sn({name:"PMREM.Background",side:B,depthWrite:!1,depthTest:!1}),u=new be(new kr,c);let h=!1;const r=e.background;r?r.isColor&&(c.color.copy(r),e.background=null,h=!0):(c.color.copy(dm),h=!0);for(let t=0;t<6;t++){const r=t%3;r===0?(a.up.set(0,d[t],0),a.position.set(o.x,o.y,o.z),a.lookAt(o.x+l[t],o.y,o.z)):r===1?(a.up.set(0,0,d[t]),a.position.set(o.x,o.y,o.z),a.lookAt(o.x,o.y+l[t],o.z)):(a.up.set(0,d[t],0),a.position.set(o.x,o.y,o.z),a.lookAt(o.x,o.y,o.z+l[t]));const n=this._cubeSize;Rl(s,r*n,t>2?n:0,n,n),i.setRenderTarget(s),h&&i.render(u,a),i.render(e,a)}u.geometry.dispose(),u.material.dispose(),i.toneMapping=f,i.autoClear=m,e.background=r}_textureToCubeUV(e,t){const n=this._renderer,s=e.mapping===Zt||e.mapping===Qt;s?(this._cubemapMaterial===null&&(this._cubemapMaterial=Kx()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=qx());const o=s?this._cubemapMaterial:this._equirectMaterial,a=new be(this._lodPlanes[0],o),r=o.uniforms;r.envMap.value=e;const i=this._cubeSize;Rl(t,0,0,3*i,2*i),n.setRenderTarget(t),n.render(a,Zd)}_applyPMREM(e){const t=this._renderer,s=t.autoClear;t.autoClear=!1;const n=this._lodPlanes.length;for(let t=1;t<n;t++){const s=(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1])**.5,o=Jm[(n-t-1)%Jm.length];this._blur(e,t-1,t,s,o)}t.autoClear=s}_blur(e,t,n,s,o){const i=this._pingPongRenderTarget;this._halfBlur(e,i,t,n,s,"latitudinal",o),this._halfBlur(i,e,n,n,s,"longitudinal",o)}_halfBlur(e,t,n,s,o,i,a){const p=this._renderer,g=this._blurMaterial;i!=="latitudinal"&&i!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const j=3,b=new be(this._lodPlanes[s],g),r=g.uniforms,v=this._sizeLods[n]-1,m=isFinite(o)?Math.PI/(2*v):2*Math.PI/(2*Hs-1),f=o/m,l=isFinite(o)?1+Math.floor(j*f):Hs;l>Hs&&console.warn(`sigmaRadians, ${o}, is too large and will clip, as it requested ${l} samples when the maximum is set to ${Hs}`);const c=[];let h=0;for(let e=0;e<Hs;++e){const n=e/f,t=Math.exp(-n*n/2);c.push(t),e===0?h+=t:e<l&&(h+=2*t)}for(let e=0;e<c.length;e++)c[e]=c[e]/h;r.envMap.value=e.texture,r.samples.value=l,r.weights.value=c,r.latitudinal.value=i==="latitudinal",a&&(r.poleAxis.value=a);const{_lodMax:u}=this;r.dTheta.value=m,r.mipInt.value=u-n;const d=this._sizeLods[s],y=3*d*(s>u-To?s-u+To:0),_=4*(this._cubeSize-d);Rl(t,y,_,3*d,2*d),p.setRenderTarget(t),p.render(b,Zd)}};function wM(e){const n=[],s=[],o=[];let t=e;const i=e-To+1+cm.length;for(let l=0;l<i;l++){const m=2**t;s.push(m);let g=1/m;l>e-To?g=cm[l-e+To-1]:l===0&&(g=0),o.push(g);const v=1/(m-2),r=-v,c=1+v,_=[r,r,c,r,c,c,r,r,c,c,r,c],u=6,a=6,h=3,f=2,p=1,b=new Float32Array(h*a*u),j=new Float32Array(f*a*u),y=new Float32Array(p*a*u);for(let e=0;e<u;e++){const t=e%3*2/3-1,n=e>2?0:-1,s=[t,n,0,t+2/3,n,0,t+2/3,n+1,0,t,n,0,t+2/3,n+1,0,t,n+1,0];b.set(s,h*a*e),j.set(_,f*a*e);const o=[e,e,e,e,e,e];y.set(o,p*a*e)}const d=new Cn;d.setAttribute("position",new Me(b,h)),d.setAttribute("uv",new Me(j,f)),d.setAttribute("faceIndex",new Me(y,p)),n.push(d),t>To&&t--}return{lodPlanes:n,sizeLods:s,sigmas:o}}function Xx(e,t,n){const s=new Ss(e,t,n);return s.texture.mapping=Cs,s.texture.name="PMREM.cubeUv",s.scissorTest=!0,s}function Rl(e,t,n,s,o){e.viewport.set(t,n,s,o),e.scissor.set(t,n,s,o)}function OM(e,n,s){const o=new Float32Array(Hs),i=new t(0,1,0),a=new us({name:"SphericalGaussianBlur",defines:{n:Hs,CUBEUV_TEXEL_WIDTH:1/n,CUBEUV_TEXEL_HEIGHT:1/s,CUBEUV_MAX_MIP:`${e}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:o},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:j8(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:Qe,depthTest:!1,depthWrite:!1});return a}function qx(){return new us({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:j8(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:Qe,depthTest:!1,depthWrite:!1})}function Kx(){return new us({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:j8(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:Qe,depthTest:!1,depthWrite:!1})}function j8(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function xM(e){let n=new WeakMap,t=null;function o(o){if(o&&o.isTexture){const a=o.mapping,r=a===Po||a===Ho,c=a===Zt||a===Qt;if(r||c){let a=n.get(o);const l=a!==0[0]?a.texture.pmremVersion:0;if(o.isRenderTargetTexture&&o.pmremVersion!==l)return t===null&&(t=new u8(e)),a=r?t.fromEquirectangular(o,a):t.fromCubemap(o,a),a.texture.pmremVersion=o.pmremVersion,n.set(o,a),a.texture;if(a!==0[0])return a.texture;const image=o.image;return r&&image&&image.height>0||c&&image&&i(image)?(t===null&&(t=new u8(e)),a=r?t.fromEquirectangular(o):t.fromCubemap(o),a.texture.pmremVersion=o.pmremVersion,n.set(o,a),o.addEventListener("dispose",s),a.texture):null}}return o}function i(e){let t=0;const n=6;for(let s=0;s<n;s++)e[s]!==0[0]&&t++;return t===n}function s(e){const t=e.target;t.removeEventListener("dispose",s);const o=n.get(t);o!==0[0]&&(n.delete(t),o.dispose())}function a(){n=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:o,dispose:a}}function CM(e){const n={};function t(t){if(n[t]!==0[0])return n[t];let s;switch(t){case"WEBGL_depth_texture":s=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":s=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":s=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":s=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:s=e.getExtension(t)}return n[t]=s,s}return{has:function(e){return t(e)!==null},init:function(){t("EXT_color_buffer_float"),t("WEBGL_clip_cull_distance"),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture"),t("WEBGL_render_shared_exponent")},get:function(e){const n=t(e);return n===null&&gt("THREE.WebGLRenderer: "+e+" extension not supported."),n}}}function EM(e,t,n,s){const i={},o=new WeakMap;function a(e){const r=e.target;r.index!==null&&t.remove(r.index);for(const e in r.attributes)t.remove(r.attributes[e]);r.removeEventListener("dispose",a),delete i[r.id];const c=o.get(r);c&&(t.remove(c),o.delete(r)),s.releaseStatesOfGeometry(r),r.isInstancedBufferGeometry===!0&&delete r._maxInstanceCount,n.memory.geometries--}function c(e,t){return i[t.id]===!0?t:(t.addEventListener("dispose",a),i[t.id]=!0,n.memory.geometries++,t)}function l(n){const s=n.attributes;for(const n in s)t.update(s[n],e.ARRAY_BUFFER)}function r(e){const n=[],s=e.index,i=e.attributes.position;let a=0;if(s!==null){const e=s.array;a=s.version;for(let t=0,a=e.length;t<a;t+=3){const s=e[t+0],o=e[t+1],i=e[t+2];n.push(s,o,o,i,i,s)}}else if(i!==0[0]){const e=i.array;a=i.version;for(let t=0,a=e.length/3-1;t<a;t+=3){const s=t+0,o=t+1,i=t+2;n.push(s,o,o,i,i,s)}}else return;const r=new(yh(n)?g1:p1)(n,1);r.version=a;const c=o.get(e);c&&t.remove(c),o.set(e,r)}function d(e){const t=o.get(e);if(t){const n=e.index;n!==null&&t.version<n.version&&r(e)}else r(e);return o.get(e)}return{get:c,update:l,getWireframeAttribute:d}}function kM(e,t,n){let s;function r(e){s=e}let o,i;function c(e){o=e.type,i=e.bytesPerElement}function l(t,a){e.drawElements(s,a,o,t*i),n.update(a,s,1)}function a(t,a,r){if(r===0)return;e.drawElementsInstanced(s,a,o,t*i,r),n.update(a,s,r)}function d(e,i,a){if(a===0)return;const c=t.get("WEBGL_multi_draw");c.multiDrawElementsWEBGL(s,i,0,o,e,0,a);let r=0;for(let e=0;e<a;e++)r+=i[e];n.update(r,s,1)}function u(e,r,c,l){if(c===0)return;const d=t.get("WEBGL_multi_draw");if(d===null)for(let t=0;t<e.length;t++)a(e[t]/i,r[t],l[t]);else{d.multiDrawElementsInstancedWEBGL(s,r,0,o,e,0,l,0,c);let t=0;for(let e=0;e<c;e++)t+=r[e]*l[e];n.update(t,s,1)}}this.setMode=r,this.setIndex=c,this.render=l,this.renderInstances=a,this.renderMultiDraw=d,this.renderMultiDrawInstances=u}function AM(e){const n={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function s(n,s,o){switch(t.calls++,s){case e.TRIANGLES:t.triangles+=o*(n/3);break;case e.LINES:t.lines+=o*(n/2);break;case e.LINE_STRIP:t.lines+=o*(n-1);break;case e.LINE_LOOP:t.lines+=o*n;break;case e.POINTS:t.points+=o*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",s);break}}function o(){t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:n,render:t,programs:null,autoReset:!0,reset:o,update:s}}function SM(e,t,n){const o=new WeakMap,s=new j;function i(i,a,r){const d=i.morphTargetInfluences,u=a.morphAttributes.position||a.morphAttributes.normal||a.morphAttributes.color,l=u!==0[0]?u.length:0;let c=o.get(a);if(c===0[0]||c.count!==l){let h=function(){d.dispose(),o.delete(a),a.removeEventListener("dispose",h)};c!==0[0]&&c.texture.dispose();const f=a.morphAttributes.position!==0[0],m=a.morphAttributes.normal!==0[0],u=a.morphAttributes.color!==0[0],v=a.morphAttributes.position||[],g=a.morphAttributes.normal||[],p=a.morphAttributes.color||[];let i=0;f===!0&&(i=1),m===!0&&(i=2),u===!0&&(i=3);let n=a.attributes.position.count*i,r=1;n>t.maxTextureSize&&(r=Math.ceil(n/t.maxTextureSize),n=t.maxTextureSize);const e=new Float32Array(n*r*4*l),d=new Lu(e,n,r,l);d.type=X,d.needsUpdate=!0;const b=i*4;for(let o=0;o<l;o++){const i=v[o],c=g[o],a=p[o],t=n*r*4*o;for(let o=0;o<i.count;o++){const n=o*b;f===!0&&(s.fromBufferAttribute(i,o),e[t+n+0]=s.x,e[t+n+1]=s.y,e[t+n+2]=s.z,e[t+n+3]=0),m===!0&&(s.fromBufferAttribute(c,o),e[t+n+4]=s.x,e[t+n+5]=s.y,e[t+n+6]=s.z,e[t+n+7]=0),u===!0&&(s.fromBufferAttribute(a,o),e[t+n+8]=s.x,e[t+n+9]=s.y,e[t+n+10]=s.z,e[t+n+11]=a.itemSize===4?s.w:1)}}c={count:l,texture:d,size:new w(n,r)},o.set(a,c),a.addEventListener("dispose",h)}if(i.isInstancedMesh===!0&&i.morphTexture!==null)r.getUniforms().setValue(e,"morphTexture",i.morphTexture,n);else{let t=0;for(let e=0;e<d.length;e++)t+=d[e];const n=a.morphTargetsRelative?1:1-t;r.getUniforms().setValue(e,"morphTargetBaseInfluence",n),r.getUniforms().setValue(e,"morphTargetInfluences",d)}r.getUniforms().setValue(e,"morphTargetsTexture",c.texture,n),r.getUniforms().setValue(e,"morphTargetsTextureSize",c.size)}return{update:i}}function MM(e,t,n,s){let o=new WeakMap;function a(a){const r=s.render.frame,l=a.geometry,c=t.get(a,l);if(o.get(c)!==r&&(t.update(c),o.set(c,r)),a.isInstancedMesh&&(a.hasEventListener("dispose",i)===!1&&a.addEventListener("dispose",i),o.get(a)!==r&&(n.update(a.instanceMatrix,e.ARRAY_BUFFER),a.instanceColor!==null&&n.update(a.instanceColor,e.ARRAY_BUFFER),o.set(a,r))),a.isSkinnedMesh){const e=a.skeleton;o.get(e)!==r&&(e.update(),o.set(e,r))}return c}function r(){o=new WeakMap}function i(e){const t=e.target;t.removeEventListener("dispose",i),n.remove(t.instanceMatrix),t.instanceColor!==null&&n.remove(t.instanceColor)}return{update:a,dispose:r}}S8=new Te,F8=new At(1,1),V0=new Lu,U8=new Fy,$8=new oa,B8=[],P8=[],R8=new Float32Array(16),D8=new Float32Array(9),z8=new Float32Array(4);function la(e,t,n){const o=e[0];if(o<=0||o>0)return e;const i=t*n;let s=B8[i];if(s===0[0]&&(s=new Float32Array(i),B8[i]=s),t!==0){o.toArray(s,0);for(let o=1,i=0;o!==t;++o)i+=n,e[o].toArray(s,i)}return s}function ve(e,t){if(e.length!==t.length)return!1;for(let n=0,s=e.length;n<s;n++)if(e[n]!==t[n])return!1;return!0}function pe(e,t){for(let n=0,s=t.length;n<s;n++)e[n]=t[n]}function Gl(e,t){let n=P8[t];n===0[0]&&(n=new Int32Array(t),P8[t]=n);for(let s=0;s!==t;++s)n[s]=e.allocateTextureUnit();return n}function FM(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1f(this.addr,t),n[0]=t}function TM(e,t){const n=this.cache;if(t.x!==0[0])(n[0]!==t.x||n[1]!==t.y)&&(e.uniform2f(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(ve(n,t))return;e.uniform2fv(this.addr,t),pe(n,t)}}function zM(e,t){const n=this.cache;if(t.x!==0[0])(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z)&&(e.uniform3f(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else if(t.r!==0[0])(n[0]!==t.r||n[1]!==t.g||n[2]!==t.b)&&(e.uniform3f(this.addr,t.r,t.g,t.b),n[0]=t.r,n[1]=t.g,n[2]=t.b);else{if(ve(n,t))return;e.uniform3fv(this.addr,t),pe(n,t)}}function DM(e,t){const n=this.cache;if(t.x!==0[0])(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w)&&(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(ve(n,t))return;e.uniform4fv(this.addr,t),pe(n,t)}}function NM(e,t){const n=this.cache,s=t.elements;if(s===0[0]){if(ve(n,t))return;e.uniformMatrix2fv(this.addr,!1,t),pe(n,t)}else{if(ve(n,s))return;z8.set(s),e.uniformMatrix2fv(this.addr,!1,z8),pe(n,s)}}function LM(e,t){const n=this.cache,s=t.elements;if(s===0[0]){if(ve(n,t))return;e.uniformMatrix3fv(this.addr,!1,t),pe(n,t)}else{if(ve(n,s))return;D8.set(s),e.uniformMatrix3fv(this.addr,!1,D8),pe(n,s)}}function RM(e,t){const n=this.cache,s=t.elements;if(s===0[0]){if(ve(n,t))return;e.uniformMatrix4fv(this.addr,!1,t),pe(n,t)}else{if(ve(n,s))return;R8.set(s),e.uniformMatrix4fv(this.addr,!1,R8),pe(n,s)}}function PM(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1i(this.addr,t),n[0]=t}function HM(e,t){const n=this.cache;if(t.x!==0[0])(n[0]!==t.x||n[1]!==t.y)&&(e.uniform2i(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(ve(n,t))return;e.uniform2iv(this.addr,t),pe(n,t)}}function IM(e,t){const n=this.cache;if(t.x!==0[0])(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z)&&(e.uniform3i(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else{if(ve(n,t))return;e.uniform3iv(this.addr,t),pe(n,t)}}function VM(e,t){const n=this.cache;if(t.x!==0[0])(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w)&&(e.uniform4i(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(ve(n,t))return;e.uniform4iv(this.addr,t),pe(n,t)}}function UM(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1ui(this.addr,t),n[0]=t}function qM(e,t){const n=this.cache;if(t.x!==0[0])(n[0]!==t.x||n[1]!==t.y)&&(e.uniform2ui(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(ve(n,t))return;e.uniform2uiv(this.addr,t),pe(n,t)}}function XM(e,t){const n=this.cache;if(t.x!==0[0])(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z)&&(e.uniform3ui(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else{if(ve(n,t))return;e.uniform3uiv(this.addr,t),pe(n,t)}}function QM(e,t){const n=this.cache;if(t.x!==0[0])(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w)&&(e.uniform4ui(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(ve(n,t))return;e.uniform4uiv(this.addr,t),pe(n,t)}}function ZM(e,t,n){const i=this.cache,s=n.allocateTextureUnit();i[0]!==s&&(e.uniform1i(this.addr,s),i[0]=s);let o;this.type===e.SAMPLER_2D_SHADOW?(F8.compareFunction=Ic,o=F8):o=S8,n.setTexture2D(t||o,s)}function JM(e,t,n){const o=this.cache,s=n.allocateTextureUnit();o[0]!==s&&(e.uniform1i(this.addr,s),o[0]=s),n.setTexture3D(t||U8,s)}function eF(e,t,n){const o=this.cache,s=n.allocateTextureUnit();o[0]!==s&&(e.uniform1i(this.addr,s),o[0]=s),n.setTextureCube(t||$8,s)}function tF(e,t,n){const o=this.cache,s=n.allocateTextureUnit();o[0]!==s&&(e.uniform1i(this.addr,s),o[0]=s),n.setTexture2DArray(t||V0,s)}function nF(e){switch(e){case 5126:return FM;case 35664:return TM;case 35665:return zM;case 35666:return DM;case 35674:return NM;case 35675:return LM;case 35676:return RM;case 5124:case 35670:return PM;case 35667:case 35671:return HM;case 35668:case 35672:return IM;case 35669:case 35673:return VM;case 5125:return UM;case 36294:return qM;case 36295:return XM;case 36296:return QM;case 35678:case 36198:case 36298:case 36306:case 35682:return ZM;case 35679:case 36299:case 36307:return JM;case 35680:case 36300:case 36308:case 36293:return eF;case 36289:case 36303:case 36311:case 36292:return tF}}function sF(e,t){e.uniform1fv(this.addr,t)}function aF(e,t){const n=la(t,this.size,2);e.uniform2fv(this.addr,n)}function rF(e,t){const n=la(t,this.size,3);e.uniform3fv(this.addr,n)}function cF(e,t){const n=la(t,this.size,4);e.uniform4fv(this.addr,n)}function lF(e,t){const n=la(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,n)}function dF(e,t){const n=la(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,n)}function uF(e,t){const n=la(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,n)}function hF(e,t){e.uniform1iv(this.addr,t)}function mF(e,t){e.uniform2iv(this.addr,t)}function fF(e,t){e.uniform3iv(this.addr,t)}function gF(e,t){e.uniform4iv(this.addr,t)}function vF(e,t){e.uniform1uiv(this.addr,t)}function bF(e,t){e.uniform2uiv(this.addr,t)}function jF(e,t){e.uniform3uiv(this.addr,t)}function yF(e,t){e.uniform4uiv(this.addr,t)}function _F(e,t,n){const o=this.cache,i=t.length,s=Gl(n,i);ve(o,s)||(e.uniform1iv(this.addr,s),pe(o,s));for(let e=0;e!==i;++e)n.setTexture2D(t[e]||S8,s[e])}function sT(e,t,n){const o=this.cache,i=t.length,s=Gl(n,i);ve(o,s)||(e.uniform1iv(this.addr,s),pe(o,s));for(let e=0;e!==i;++e)n.setTexture3D(t[e]||U8,s[e])}function rT(e,t,n){const o=this.cache,i=t.length,s=Gl(n,i);ve(o,s)||(e.uniform1iv(this.addr,s),pe(o,s));for(let e=0;e!==i;++e)n.setTextureCube(t[e]||$8,s[e])}function cT(e,t,n){const o=this.cache,i=t.length,s=Gl(n,i);ve(o,s)||(e.uniform1iv(this.addr,s),pe(o,s));for(let e=0;e!==i;++e)n.setTexture2DArray(t[e]||V0,s[e])}function lT(e){switch(e){case 5126:return sF;case 35664:return aF;case 35665:return rF;case 35666:return cF;case 35674:return lF;case 35675:return dF;case 35676:return uF;case 5124:case 35670:return hF;case 35667:case 35671:return mF;case 35668:case 35672:return fF;case 35669:case 35673:return gF;case 5125:return vF;case 36294:return bF;case 36295:return jF;case 36296:return yF;case 35678:case 36198:case 36298:case 36306:case 35682:return _F;case 35679:case 36299:case 36307:return sT;case 35680:case 36300:case 36308:case 36293:return rT;case 36289:case 36303:case 36311:case 36292:return cT}}Q_=class{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.setValue=nF(t.type)}},X_=class{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=lT(t.type)}},q_=class{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const s=this.seq;for(let o=0,a=s.length;o!==a;++o){const i=s[o];i.setValue(e,t[i.id],n)}}},Hd=/(\w+)(\])?(\[|\.)?/g;function K_(e,t){e.seq.push(t),e.map[t.id]=t}function dT(e,t,n){const s=e.name,o=s.length;for(Hd.lastIndex=0;!0;){const r=Hd.exec(s),l=Hd.lastIndex;let i=r[1];const d=r[2]==="]",c=r[3];if(d&&(i=i|0),c===0[0]||c==="["&&l+2===o){K_(n,c===0[0]?new Q_(i,e,t):new X_(i,e,t));break}const u=n.map;let a=u[i];a===0[0]&&(a=new q_(i),K_(n,a)),n=a}}ml=class{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let s=0;s<n;++s){const o=e.getActiveUniform(t,s),i=e.getUniformLocation(t,o.name);dT(o,i,this)}}setValue(e,t,n,s){const o=this.map[t];o!==0[0]&&o.setValue(e,n,s)}setOptional(e,t,n){const s=t[n];s!==0[0]&&this.setValue(e,n,s)}static upload(e,t,n,s){for(let o=0,r=t.length;o!==r;++o){const i=t[o],a=n[i.id];a.needsUpdate!==!1&&i.setValue(e,a.value,s)}}static seqWithValue(e,t){const n=[];for(let s=0,i=e.length;s!==i;++s){const o=e[s];o.id in t&&n.push(o)}return n}};function W_(e,t,n){const s=e.createShader(t);return e.shaderSource(s,n),e.compileShader(s),s}$_=37297,V_=0;function uT(e,t){const n=e.split(`
`),s=[],o=Math.max(t-6,0),i=Math.min(t+6,n.length);for(let e=o;e<i;e++){const a=e+1;s.push(`${a===t?">":" "} ${a}: ${n[e]}`)}return s.join(`
`)}_m=new b;function hT(e){v._getMatrix(_m,v.workingColorSpace,e);const t=`mat3( ${_m.elements.map(e=>e.toFixed(4))} )`;switch(v.getTransfer(e)){case Ni:return[t,"LinearTransferOETF"];case c:return[t,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",e),[t,"LinearTransferOETF"]}}function H_(e,t,n){const i=e.getShaderParameter(t,e.COMPILE_STATUS),a=e.getShaderInfoLog(t)||"",s=a.trim();if(i&&s==="")return"";const o=/ERROR: 0:(\d+)/.exec(s);if(o){const i=parseInt(o[1]);return n.toUpperCase()+`

`+s+`

`+uT(e.getShaderSource(t),i)}return s}function mT(e,t){const n=hT(t);return[`vec4 ${e}( vec4 value ) {`,`	return ${n[1]}( vec4( value.rgb * ${n[0]}, value.a ) );`,"}"].join(`
`)}function fT(e,t){let n;switch(t){case sp:n="Linear";break;case lp:n="Reinhard";break;case wp:n="Cineon";break;case Op:n="ACESFilmic";break;case Ap:n="AgX";break;case Sp:n="Neutral";break;case xp:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),n="Linear"}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}ul=new t;function pT(){v.getLuminanceCoefficients(ul);const e=ul.x.toFixed(4),t=ul.y.toFixed(4),n=ul.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${e}, ${t}, ${n} );`,"	return dot( weights, rgb );","}"].join(`
`)}function gT(e){const t=[e.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",e.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""];return t.filter(ol).join(`
`)}function vT(e){const t=[];for(const n in e){const s=e[n];if(s===!1)continue;t.push("#define "+n+" "+s)}return t.join(`
`)}function bT(e,t){const n={},s=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES);for(let a=0;a<s;a++){const o=e.getActiveAttrib(t,a),r=o.name;let i=1;o.type===e.FLOAT_MAT2&&(i=2),o.type===e.FLOAT_MAT3&&(i=3),o.type===e.FLOAT_MAT4&&(i=4),n[r]={type:o.type,location:e.getAttribLocation(t,r),locationSize:i}}return n}function ol(e){return e!==""}function y_(e,t){const n=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,n).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function b_(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}v_=/^[ \t]*#include +<([\w\d./]+)>/gm;function om(e){return e.replace(v_,$T)}t_=new Map;function $T(e,t){let n=O[t];if(n===0[0]){const e=t_.get(t);if(e!==0[0])n=O[e],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,e);else throw new Error("Can not resolve #include <"+t+">")}return om(n)}Zy=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Xy(e){return e.replace(Zy,WT)}function WT(e,t,n,s){let o="";for(let e=parseInt(t);e<parseInt(n);e++)o+=s.replace(/\[\s*i\s*\]/g,"[ "+e+" ]").replace(/UNROLLED_LOOP_INDEX/g,e);return o}function Ky(e){let t=`precision ${e.precision} float;
	precision ${e.precision} int;
	precision ${e.precision} sampler2D;
	precision ${e.precision} samplerCube;
	precision ${e.precision} sampler3D;
	precision ${e.precision} sampler2DArray;
	precision ${e.precision} sampler2DShadow;
	precision ${e.precision} samplerCubeShadow;
	precision ${e.precision} sampler2DArrayShadow;
	precision ${e.precision} isampler2D;
	precision ${e.precision} isampler3D;
	precision ${e.precision} isamplerCube;
	precision ${e.precision} isampler2DArray;
	precision ${e.precision} usampler2D;
	precision ${e.precision} usampler3D;
	precision ${e.precision} usamplerCube;
	precision ${e.precision} usampler2DArray;
	`;return e.precision==="highp"?t+=`
#define HIGH_PRECISION`:e.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:e.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function KT(e){let t="SHADOWMAP_TYPE_BASIC";return e.shadowMapType===Il?t="SHADOWMAP_TYPE_PCF":e.shadowMapType===r6?t="SHADOWMAP_TYPE_PCF_SOFT":e.shadowMapType===fn&&(t="SHADOWMAP_TYPE_VSM"),t}function qT(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case Zt:case Qt:t="ENVMAP_TYPE_CUBE";break;case Cs:t="ENVMAP_TYPE_CUBE_UV";break}return t}function YT(e){let t="ENVMAP_MODE_REFLECTION";if(e.envMap)switch(e.envMapMode){case Qt:t="ENVMAP_MODE_REFRACTION";break}return t}function GT(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case r8:t="ENVMAP_BLENDING_MULTIPLY";break;case tp:t="ENVMAP_BLENDING_MIX";break;case np:t="ENVMAP_BLENDING_ADD";break}return t}function XT(e){const t=e.envMapCubeUVHeight;if(t===null)return null;const n=Math.log2(t)-2,s=1/t,o=1/(3*Math.max(2**n,7*16));return{texelWidth:o,texelHeight:s,maxMip:n}}function QT(e,t,n,s){const o=e.getContext(),k=n.defines;let a=n.vertexShader,r=n.fragmentShader;const j=KT(n),_=qT(n),b=YT(n),E=GT(n),d=XT(n),C=gT(n),m=vT(k),i=o.createProgram();let l,c,v=n.glslVersion?"#version "+n.glslVersion+`
`:"";n.isRawShaderMaterial?(l=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m].filter(ol).join(`
`),l.length>0&&(l+=`
`),c=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m].filter(ol).join(`
`),c.length>0&&(c+=`
`)):(l=[Ky(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m,n.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",n.batching?"#define USE_BATCHING":"",n.batchingColor?"#define USE_BATCHING_COLOR":"",n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.instancingMorph?"#define USE_INSTANCING_MORPH":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+b:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.displacementMap?"#define USE_DISPLACEMENTMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.mapUv?"#define MAP_UV "+n.mapUv:"",n.alphaMapUv?"#define ALPHAMAP_UV "+n.alphaMapUv:"",n.lightMapUv?"#define LIGHTMAP_UV "+n.lightMapUv:"",n.aoMapUv?"#define AOMAP_UV "+n.aoMapUv:"",n.emissiveMapUv?"#define EMISSIVEMAP_UV "+n.emissiveMapUv:"",n.bumpMapUv?"#define BUMPMAP_UV "+n.bumpMapUv:"",n.normalMapUv?"#define NORMALMAP_UV "+n.normalMapUv:"",n.displacementMapUv?"#define DISPLACEMENTMAP_UV "+n.displacementMapUv:"",n.metalnessMapUv?"#define METALNESSMAP_UV "+n.metalnessMapUv:"",n.roughnessMapUv?"#define ROUGHNESSMAP_UV "+n.roughnessMapUv:"",n.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+n.anisotropyMapUv:"",n.clearcoatMapUv?"#define CLEARCOATMAP_UV "+n.clearcoatMapUv:"",n.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+n.clearcoatNormalMapUv:"",n.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+n.clearcoatRoughnessMapUv:"",n.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+n.iridescenceMapUv:"",n.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+n.iridescenceThicknessMapUv:"",n.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+n.sheenColorMapUv:"",n.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+n.sheenRoughnessMapUv:"",n.specularMapUv?"#define SPECULARMAP_UV "+n.specularMapUv:"",n.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+n.specularColorMapUv:"",n.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+n.specularIntensityMapUv:"",n.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+n.transmissionMapUv:"",n.thicknessMapUv?"#define THICKNESSMAP_UV "+n.thicknessMapUv:"",n.vertexTangents&&n.flatShading===!1?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&n.flatShading===!1?"#define USE_MORPHNORMALS":"",n.morphColors?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+j:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.logarithmicDepthBuffer?"#define USE_LOGARITHMIC_DEPTH_BUFFER":"",n.reversedDepthBuffer?"#define USE_REVERSED_DEPTH_BUFFER":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(ol).join(`
`),c=[Ky(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+_:"",n.envMap?"#define "+b:"",n.envMap?"#define "+E:"",d?"#define CUBEUV_TEXEL_WIDTH "+d.texelWidth:"",d?"#define CUBEUV_TEXEL_HEIGHT "+d.texelHeight:"",d?"#define CUBEUV_MAX_MIP "+d.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.dispersion?"#define USE_DISPERSION":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents&&n.flatShading===!1?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor||n.batchingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+j:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",n.logarithmicDepthBuffer?"#define USE_LOGARITHMIC_DEPTH_BUFFER":"",n.reversedDepthBuffer?"#define USE_REVERSED_DEPTH_BUFFER":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==Ke?"#define TONE_MAPPING":"",n.toneMapping!==Ke?O.tonemapping_pars_fragment:"",n.toneMapping!==Ke?fT("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",O.colorspace_pars_fragment,mT("linearToOutputTexel",n.outputColorSpace),pT(),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"",`
`].filter(ol).join(`
`)),a=om(a),a=y_(a,n),a=b_(a,n),r=om(r),r=y_(r,n),r=b_(r,n),a=Xy(a),r=Xy(r),n.isRawShaderMaterial!==!0&&(v=`#version 300 es
`,l=[C,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+l,c=["#define varying in",n.glslVersion===Qh?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===Qh?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+c);const x=v+l+a,w=v+c+r,u=W_(o,o.VERTEX_SHADER,x),h=W_(o,o.FRAGMENT_SHADER,w);o.attachShader(i,u),o.attachShader(i,h),n.index0AttributeName!==0[0]?o.bindAttribLocation(i,0,n.index0AttributeName):n.morphTargets===!0&&o.bindAttribLocation(i,0,"position"),o.linkProgram(i);function y(t){if(e.debug.checkShaderErrors){const m=o.getProgramInfoLog(i)||"",f=o.getShaderInfoLog(u)||"",p=o.getShaderInfoLog(h)||"",n=m.trim(),s=f.trim(),a=p.trim();let r=!0,d=!0;if(o.getProgramParameter(i,o.LINK_STATUS)===!1)if(r=!1,typeof e.debug.onShaderError=="function")e.debug.onShaderError(o,i,u,h);else{const e=H_(o,u,"vertex"),s=H_(o,h,"fragment");console.error("THREE.WebGLProgram: Shader Error "+o.getError()+" - VALIDATE_STATUS "+o.getProgramParameter(i,o.VALIDATE_STATUS)+`

Material Name: `+t.name+`
Material Type: `+t.type+`

Program Info Log: `+n+`
`+e+`
`+s)}else n!==""?console.warn("THREE.WebGLProgram: Program Info Log:",n):(s===""||a==="")&&(d=!1);d&&(t.diagnostics={runnable:r,programLog:n,vertexShader:{log:s,prefix:l},fragmentShader:{log:a,prefix:c}})}o.deleteShader(u),o.deleteShader(h),p=new ml(o,i),f=bT(o,i)}let p;this.getUniforms=function(){return p===0[0]&&y(this),p};let f;this.getAttributes=function(){return f===0[0]&&y(this),f};let g=n.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return g===!1&&(g=o.getProgramParameter(i,$_)),g},this.destroy=function(){s.releaseStatesOfProgram(this),o.deleteProgram(i),this.program=0[0]},this.type=n.shaderType,this.name=n.shaderName,this.id=V_++,this.cacheKey=t,this.usedTimes=1,this.program=i,this.vertexShader=u,this.fragmentShader=h,this}Ly=0,Dy=class{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const o=e.vertexShader,i=e.fragmentShader,n=this._getShaderStage(o),s=this._getShaderStage(i),t=this._getShaderCacheForMaterial(e);return t.has(n)===!1&&(t.add(n),n.usedTimes++),t.has(s)===!1&&(t.add(s),s.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const e of t)e.usedTimes--,e.usedTimes===0&&this.shaderCache.delete(e.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const n=this.materialCache;let t=n.get(e);return t===0[0]&&(t=new Set,n.set(e,t)),t}_getShaderStage(e){const n=this.shaderCache;let t=n.get(e);return t===0[0]&&(t=new Ay(e),n.set(e,t)),t}},Ay=class{constructor(e){this.id=Ly++,this.code=e,this.usedTimes=0}};function tz(e,t,n,s,o,i,a){const r=new R3,u=new Dy,h=new Set,d=[],g=o.logarithmicDepthBuffer,f=o.vertexTextures;let m=o.precision;const p={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function l(e){return h.add(e),e===0?"uv":`uv${e}`}function b(i,r,d,b,j){const P=b.fog,y=j.geometry,ye=i.isMeshStandardMaterial?b.environment:null,_=(i.isMeshStandardMaterial?n:t).get(i.envMap||ye),pe=!!_&&_.mapping===Cs?_.image.height:null,z=p[i.type];i.precision!==null&&(m=o.getMaxPrecision(i.precision),m!==i.precision&&console.warn("THREE.WebGLProgram.getParameters:",i.precision,"not supported, using",m,"instead."));const ee=y.morphAttributes.position||y.morphAttributes.normal||y.morphAttributes.color,he=ee!==0[0]?ee.length:0;let x=0;y.morphAttributes.position!==0[0]&&(x=1),y.morphAttributes.normal!==0[0]&&(x=2),y.morphAttributes.color!==0[0]&&(x=3);let S,A,Z,X;if(z){const e=Yt[z];S=e.vertexShader,A=e.fragmentShader}else S=i.vertexShader,A=i.fragmentShader,u.update(i),Z=u.getVertexShaderID(i),X=u.getFragmentShaderID(i);const w=e.getRenderTarget(),be=e.state.buffers.depth.getReversed(),N=j.isInstancedMesh===!0,L=j.isBatchedMesh===!0,E=!!i.map,je=!!i.matcap,K=!!_,W=!!i.aoMap,oe=!!i.lightMap,$=!!i.bumpMap,O=!!i.normalMap,U=!!i.displacementMap,H=!!i.emissiveMap,I=!!i.metalnessMap,Y=!!i.roughnessMap,D=i.anisotropy>0,k=i.clearcoat>0,me=i.dispersion>0,F=i.iridescence>0,M=i.sheen>0,T=i.transmission>0,te=D&&!!i.anisotropyMap,ne=k&&!!i.clearcoatMap,se=k&&!!i.clearcoatNormalMap,V=k&&!!i.clearcoatRoughnessMap,ie=F&&!!i.iridescenceMap,ae=F&&!!i.iridescenceThicknessMap,re=M&&!!i.sheenColorMap,ce=M&&!!i.sheenRoughnessMap,le=!!i.specularMap,de=!!i.specularColorMap,ue=!!i.specularIntensityMap,J=T&&!!i.transmissionMap,Q=T&&!!i.thicknessMap,fe=!!i.gradientMap,R=!!i.alphaMap,ge=i.alphaTest>0,ve=!!i.alphaHash,G=!!i.extensions;let q=Ke;i.toneMapped&&(w===null||w.isXRRenderTarget===!0)&&(q=e.toneMapping);const C={shaderID:z,shaderType:i.type,shaderName:i.name,vertexShader:S,fragmentShader:A,defines:i.defines,customVertexShaderID:Z,customFragmentShaderID:X,isRawShaderMaterial:i.isRawShaderMaterial===!0,glslVersion:i.glslVersion,precision:m,batching:L,batchingColor:L&&j._colorsTexture!==null,instancing:N,instancingColor:N&&j.instanceColor!==null,instancingMorph:N&&j.morphTexture!==null,supportsVertexTextures:f,outputColorSpace:w===null?e.outputColorSpace:w.isXRRenderTarget===!0?w.texture.colorSpace:Rs,alphaToCoverage:!!i.alphaToCoverage,map:E,matcap:je,envMap:K,envMapMode:K&&_.mapping,envMapCubeUVHeight:pe,aoMap:W,lightMap:oe,bumpMap:$,normalMap:O,displacementMap:f&&U,emissiveMap:H,normalMapObjectSpace:O&&i.normalMapType===Nm,normalMapTangentSpace:O&&i.normalMapType===Pd,metalnessMap:I,roughnessMap:Y,anisotropy:D,anisotropyMap:te,clearcoat:k,clearcoatMap:ne,clearcoatNormalMap:se,clearcoatRoughnessMap:V,dispersion:me,iridescence:F,iridescenceMap:ie,iridescenceThicknessMap:ae,sheen:M,sheenColorMap:re,sheenRoughnessMap:ce,specularMap:le,specularColorMap:de,specularIntensityMap:ue,transmission:T,transmissionMap:J,thicknessMap:Q,gradientMap:fe,opaque:i.transparent===!1&&i.blending===rt&&i.alphaToCoverage===!1,alphaMap:R,alphaTest:ge,alphaHash:ve,combine:i.combine,mapUv:E&&l(i.map.channel),aoMapUv:W&&l(i.aoMap.channel),lightMapUv:oe&&l(i.lightMap.channel),bumpMapUv:$&&l(i.bumpMap.channel),normalMapUv:O&&l(i.normalMap.channel),displacementMapUv:U&&l(i.displacementMap.channel),emissiveMapUv:H&&l(i.emissiveMap.channel),metalnessMapUv:I&&l(i.metalnessMap.channel),roughnessMapUv:Y&&l(i.roughnessMap.channel),anisotropyMapUv:te&&l(i.anisotropyMap.channel),clearcoatMapUv:ne&&l(i.clearcoatMap.channel),clearcoatNormalMapUv:se&&l(i.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:V&&l(i.clearcoatRoughnessMap.channel),iridescenceMapUv:ie&&l(i.iridescenceMap.channel),iridescenceThicknessMapUv:ae&&l(i.iridescenceThicknessMap.channel),sheenColorMapUv:re&&l(i.sheenColorMap.channel),sheenRoughnessMapUv:ce&&l(i.sheenRoughnessMap.channel),specularMapUv:le&&l(i.specularMap.channel),specularColorMapUv:de&&l(i.specularColorMap.channel),specularIntensityMapUv:ue&&l(i.specularIntensityMap.channel),transmissionMapUv:J&&l(i.transmissionMap.channel),thicknessMapUv:Q&&l(i.thicknessMap.channel),alphaMapUv:R&&l(i.alphaMap.channel),vertexTangents:!!y.attributes.tangent&&(O||D),vertexColors:i.vertexColors,vertexAlphas:i.vertexColors===!0&&!!y.attributes.color&&y.attributes.color.itemSize===4,pointsUvs:j.isPoints===!0&&!!y.attributes.uv&&(E||R),fog:!!P,useFog:i.fog===!0,fogExp2:!!P&&P.isFogExp2,flatShading:i.flatShading===!0&&i.wireframe===!1,sizeAttenuation:i.sizeAttenuation===!0,logarithmicDepthBuffer:g,reversedDepthBuffer:be,skinning:j.isSkinnedMesh===!0,morphTargets:y.morphAttributes.position!==0[0],morphNormals:y.morphAttributes.normal!==0[0],morphColors:y.morphAttributes.color!==0[0],morphTargetsCount:he,morphTextureStride:x,numDirLights:r.directional.length,numPointLights:r.point.length,numSpotLights:r.spot.length,numSpotLightMaps:r.spotLightMap.length,numRectAreaLights:r.rectArea.length,numHemiLights:r.hemi.length,numDirLightShadows:r.directionalShadowMap.length,numPointLightShadows:r.pointShadowMap.length,numSpotLightShadows:r.spotShadowMap.length,numSpotLightShadowsWithMaps:r.numSpotLightShadowsWithMaps,numLightProbes:r.numLightProbes,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:i.dithering,shadowMapEnabled:e.shadowMap.enabled&&d.length>0,shadowMapType:e.shadowMap.type,toneMapping:q,decodeVideoTexture:E&&i.map.isVideoTexture===!0&&v.getTransfer(i.map.colorSpace)===c,decodeVideoTextureEmissive:H&&i.emissiveMap.isVideoTexture===!0&&v.getTransfer(i.emissiveMap.colorSpace)===c,premultipliedAlpha:i.premultipliedAlpha,doubleSided:i.side===Fe,flipSided:i.side===B,useDepthPacking:i.depthPacking>=0,depthPacking:i.depthPacking||0,index0AttributeName:i.index0AttributeName,extensionClipCullDistance:G&&i.extensions.clipCullDistance===!0&&s.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(G&&i.extensions.multiDraw===!0||L)&&s.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:s.has("KHR_parallel_shader_compile"),customProgramCacheKey:i.customProgramCacheKey()};return C.vertexUv1s=h.has(1),C.vertexUv2s=h.has(2),C.vertexUv3s=h.has(3),h.clear(),C}function j(t){const n=[];if(t.shaderID?n.push(t.shaderID):(n.push(t.customVertexShaderID),n.push(t.customFragmentShaderID)),t.defines!==0[0])for(const e in t.defines)n.push(e),n.push(t.defines[e]);return t.isRawShaderMaterial===!1&&(y(n,t),_(n,t),n.push(e.outputColorSpace)),n.push(t.customProgramCacheKey),n.join()}function y(e,t){e.push(t.precision),e.push(t.outputColorSpace),e.push(t.envMapMode),e.push(t.envMapCubeUVHeight),e.push(t.mapUv),e.push(t.alphaMapUv),e.push(t.lightMapUv),e.push(t.aoMapUv),e.push(t.bumpMapUv),e.push(t.normalMapUv),e.push(t.displacementMapUv),e.push(t.emissiveMapUv),e.push(t.metalnessMapUv),e.push(t.roughnessMapUv),e.push(t.anisotropyMapUv),e.push(t.clearcoatMapUv),e.push(t.clearcoatNormalMapUv),e.push(t.clearcoatRoughnessMapUv),e.push(t.iridescenceMapUv),e.push(t.iridescenceThicknessMapUv),e.push(t.sheenColorMapUv),e.push(t.sheenRoughnessMapUv),e.push(t.specularMapUv),e.push(t.specularColorMapUv),e.push(t.specularIntensityMapUv),e.push(t.transmissionMapUv),e.push(t.thicknessMapUv),e.push(t.combine),e.push(t.fogExp2),e.push(t.sizeAttenuation),e.push(t.morphTargetsCount),e.push(t.morphAttributeCount),e.push(t.numDirLights),e.push(t.numPointLights),e.push(t.numSpotLights),e.push(t.numSpotLightMaps),e.push(t.numHemiLights),e.push(t.numRectAreaLights),e.push(t.numDirLightShadows),e.push(t.numPointLightShadows),e.push(t.numSpotLightShadows),e.push(t.numSpotLightShadowsWithMaps),e.push(t.numLightProbes),e.push(t.shadowMapType),e.push(t.toneMapping),e.push(t.numClippingPlanes),e.push(t.numClipIntersection),e.push(t.depthPacking)}function _(e,t){r.disableAll(),t.supportsVertexTextures&&r.enable(0),t.instancing&&r.enable(1),t.instancingColor&&r.enable(2),t.instancingMorph&&r.enable(3),t.matcap&&r.enable(4),t.envMap&&r.enable(5),t.normalMapObjectSpace&&r.enable(6),t.normalMapTangentSpace&&r.enable(7),t.clearcoat&&r.enable(8),t.iridescence&&r.enable(9),t.alphaTest&&r.enable(10),t.vertexColors&&r.enable(11),t.vertexAlphas&&r.enable(12),t.vertexUv1s&&r.enable(13),t.vertexUv2s&&r.enable(14),t.vertexUv3s&&r.enable(15),t.vertexTangents&&r.enable(16),t.anisotropy&&r.enable(17),t.alphaHash&&r.enable(18),t.batching&&r.enable(19),t.dispersion&&r.enable(20),t.batchingColor&&r.enable(21),t.gradientMap&&r.enable(22),e.push(r.mask),r.disableAll(),t.fog&&r.enable(0),t.useFog&&r.enable(1),t.flatShading&&r.enable(2),t.logarithmicDepthBuffer&&r.enable(3),t.reversedDepthBuffer&&r.enable(4),t.skinning&&r.enable(5),t.morphTargets&&r.enable(6),t.morphNormals&&r.enable(7),t.morphColors&&r.enable(8),t.premultipliedAlpha&&r.enable(9),t.shadowMapEnabled&&r.enable(10),t.doubleSided&&r.enable(11),t.flipSided&&r.enable(12),t.useDepthPacking&&r.enable(13),t.dithering&&r.enable(14),t.transmission&&r.enable(15),t.sheen&&r.enable(16),t.opaque&&r.enable(17),t.pointsUvs&&r.enable(18),t.decodeVideoTexture&&r.enable(19),t.decodeVideoTextureEmissive&&r.enable(20),t.alphaToCoverage&&r.enable(21),e.push(r.mask)}function w(e){const n=p[e.type];let t;if(n){const e=Yt[n];t=M_.clone(e.uniforms)}else t=e.uniforms;return t}function O(t,n){let s;for(let e=0,o=d.length;e<o;e++){const t=d[e];if(t.cacheKey===n){s=t,++s.usedTimes;break}}return s===0[0]&&(s=new QT(e,n,t,i),d.push(s)),s}function x(e){if(--e.usedTimes===0){const t=d.indexOf(e);d[t]=d[d.length-1],d.pop(),e.destroy()}}function C(e){u.remove(e)}function E(){u.dispose()}return{getParameters:b,getProgramCacheKey:j,getUniforms:w,acquireProgram:O,releaseProgram:x,releaseShaderCache:C,programs:d,dispose:E}}function nz(){let e=new WeakMap;function t(t){return e.has(t)}function n(t){let n=e.get(t);return n===0[0]&&(n={},e.set(t,n)),n}function s(t){e.delete(t)}function o(t,n,s){e.get(t)[n]=s}function i(){e=new WeakMap}return{has:t,get:n,remove:s,update:o,dispose:i}}function sz(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function by(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function vy(){const o=[];let s=0;const e=[],t=[],n=[];function a(){s=0,e.length=0,t.length=0,n.length=0}function i(e,t,n,i,a,r){let c=o[s];return c===0[0]?(c={id:e.id,object:e,geometry:t,material:n,groupOrder:i,renderOrder:e.renderOrder,z:a,group:r},o[s]=c):(c.id=e.id,c.object=e,c.geometry=t,c.material=n,c.groupOrder=i,c.renderOrder=e.renderOrder,c.z=a,c.group=r),s++,c}function r(s,o,a,r,c,l){const d=i(s,o,a,r,c,l);a.transmission>0?t.push(d):a.transparent===!0?n.push(d):e.push(d)}function c(s,o,a,r,c,l){const d=i(s,o,a,r,c,l);a.transmission>0?t.unshift(d):a.transparent===!0?n.unshift(d):e.unshift(d)}function l(s,o){e.length>1&&e.sort(s||sz),t.length>1&&t.sort(o||by),n.length>1&&n.sort(o||by)}function d(){for(let t=s,n=o.length;t<n;t++){const e=o[t];if(e.id===null)break;e.id=null,e.object=null,e.geometry=null,e.material=null,e.group=null}}return{opaque:e,transmissive:t,transparent:n,init:a,push:r,unshift:c,finish:d,sort:l}}function oz(){let e=new WeakMap;function t(t,n){const o=e.get(t);let s;return o===0[0]?(s=new vy,e.set(t,[s])):n>=o.length?(s=new vy,o.push(s)):s=o[n],s}function n(){e=new WeakMap}return{get:t,dispose:n}}function rz(){const e={};return{get:function(n){if(e[n.id]!==0[0])return e[n.id];let s;switch(n.type){case"DirectionalLight":s={direction:new t,color:new T};break;case"SpotLight":s={position:new t,direction:new t,color:new T,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":s={position:new t,color:new T,distance:0,decay:0};break;case"HemisphereLight":s={direction:new t,skyColor:new T,groundColor:new T};break;case"RectAreaLight":s={color:new T,position:new t,halfWidth:new t,halfHeight:new t};break}return e[n.id]=s,s}}}function cz(){const e={};return{get:function(t){if(e[t.id]!==0[0])return e[t.id];let n;switch(t.type){case"DirectionalLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new w};break;case"SpotLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new w};break;case"PointLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new w,shadowCameraNear:1,shadowCameraFar:1e3};break}return e[t.id]=n,n}}}uy=0;function pz(e,t){return(t.castShadow?2:0)-(e.castShadow?2:0)+(t.map?1:0)-(e.map?1:0)}function vz(e){const s=new rz,a=cz(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let e=0;e<9;e++)n.probe.push(new t);const o=new t,c=new W,i=new W;function l(t){let j=0,y=0,b=0;for(let e=0;e<9;e++)n.probe[e].set(0,0,0);let l=0,i=0,c=0,d=0,p=0,u=0,h=0,m=0,f=0,v=0,g=0;t.sort(pz);for(let _=0,O=t.length;_<O;_++){const e=t[_],r=e.color,o=e.intensity,x=e.distance,w=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)j+=r.r*o,y+=r.g*o,b+=r.b*o;else if(e.isLightProbe){for(let t=0;t<9;t++)n.probe[t].addScaledVector(e.sh.coefficients[t],o);g++}else if(e.isDirectionalLight){const t=s.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity),e.castShadow){const s=e.shadow,t=a.get(e);t.shadowIntensity=s.intensity,t.shadowBias=s.bias,t.shadowNormalBias=s.normalBias,t.shadowRadius=s.radius,t.shadowMapSize=s.mapSize,n.directionalShadow[l]=t,n.directionalShadowMap[l]=w,n.directionalShadowMatrix[l]=e.shadow.matrix,u++}n.directional[l]=t,l++}else if(e.isSpotLight){const t=s.get(e);t.position.setFromMatrixPosition(e.matrixWorld),t.color.copy(r).multiplyScalar(o),t.distance=x,t.coneCos=Math.cos(e.angle),t.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),t.decay=e.decay,n.spot[c]=t;const i=e.shadow;if(e.map&&(n.spotLightMap[f]=e.map,f++,i.updateMatrices(e),e.castShadow&&v++),n.spotLightMatrix[c]=i.matrix,e.castShadow){const t=a.get(e);t.shadowIntensity=i.intensity,t.shadowBias=i.bias,t.shadowNormalBias=i.normalBias,t.shadowRadius=i.radius,t.shadowMapSize=i.mapSize,n.spotShadow[c]=t,n.spotShadowMap[c]=w,m++}c++}else if(e.isRectAreaLight){const t=s.get(e);t.color.copy(r).multiplyScalar(o),t.halfWidth.set(e.width*.5,0,0),t.halfHeight.set(0,e.height*.5,0),n.rectArea[d]=t,d++}else if(e.isPointLight){const t=s.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity),t.distance=e.distance,t.decay=e.decay,e.castShadow){const s=e.shadow,t=a.get(e);t.shadowIntensity=s.intensity,t.shadowBias=s.bias,t.shadowNormalBias=s.normalBias,t.shadowRadius=s.radius,t.shadowMapSize=s.mapSize,t.shadowCameraNear=s.camera.near,t.shadowCameraFar=s.camera.far,n.pointShadow[i]=t,n.pointShadowMap[i]=w,n.pointShadowMatrix[i]=e.shadow.matrix,h++}n.point[i]=t,i++}else if(e.isHemisphereLight){const t=s.get(e);t.skyColor.copy(e.color).multiplyScalar(o),t.groundColor.copy(e.groundColor).multiplyScalar(o),n.hemi[p]=t,p++}}d>0&&(e.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=r.LTC_FLOAT_1,n.rectAreaLTC2=r.LTC_FLOAT_2):(n.rectAreaLTC1=r.LTC_HALF_1,n.rectAreaLTC2=r.LTC_HALF_2)),n.ambient[0]=j,n.ambient[1]=y,n.ambient[2]=b;const o=n.hash;(o.directionalLength!==l||o.pointLength!==i||o.spotLength!==c||o.rectAreaLength!==d||o.hemiLength!==p||o.numDirectionalShadows!==u||o.numPointShadows!==h||o.numSpotShadows!==m||o.numSpotMaps!==f||o.numLightProbes!==g)&&(n.directional.length=l,n.spot.length=c,n.rectArea.length=d,n.point.length=i,n.hemi.length=p,n.directionalShadow.length=u,n.directionalShadowMap.length=u,n.pointShadow.length=h,n.pointShadowMap.length=h,n.spotShadow.length=m,n.spotShadowMap.length=m,n.directionalShadowMatrix.length=u,n.pointShadowMatrix.length=h,n.spotLightMatrix.length=m+f-v,n.spotLightMap.length=f,n.numSpotLightShadowsWithMaps=v,n.numLightProbes=g,o.directionalLength=l,o.pointLength=i,o.spotLength=c,o.rectAreaLength=d,o.hemiLength=p,o.numDirectionalShadows=u,o.numPointShadows=h,o.numSpotShadows=m,o.numSpotMaps=f,o.numLightProbes=g,n.version=uy++)}function d(e,t){let a=0,r=0,l=0,d=0,u=0;const s=t.matrixWorldInverse;for(let h=0,m=e.length;h<m;h++){const t=e[h];if(t.isDirectionalLight){const e=n.directional[a];e.direction.setFromMatrixPosition(t.matrixWorld),o.setFromMatrixPosition(t.target.matrixWorld),e.direction.sub(o),e.direction.transformDirection(s),a++}else if(t.isSpotLight){const e=n.spot[l];e.position.setFromMatrixPosition(t.matrixWorld),e.position.applyMatrix4(s),e.direction.setFromMatrixPosition(t.matrixWorld),o.setFromMatrixPosition(t.target.matrixWorld),e.direction.sub(o),e.direction.transformDirection(s),l++}else if(t.isRectAreaLight){const e=n.rectArea[d];e.position.setFromMatrixPosition(t.matrixWorld),e.position.applyMatrix4(s),i.identity(),c.copy(t.matrixWorld),c.premultiply(s),i.extractRotation(c),e.halfWidth.set(t.width*.5,0,0),e.halfHeight.set(0,t.height*.5,0),e.halfWidth.applyMatrix4(i),e.halfHeight.applyMatrix4(i),d++}else if(t.isPointLight){const e=n.point[r];e.position.setFromMatrixPosition(t.matrixWorld),e.position.applyMatrix4(s),r++}else if(t.isHemisphereLight){const e=n.hemi[u];e.direction.setFromMatrixPosition(t.matrixWorld),e.direction.transformDirection(s),u++}}}return{setup:l,setupView:d,state:n}}function cy(e){const n=new vz(e),t=[],s=[];function i(e){o.camera=e,t.length=0,s.length=0}function a(e){t.push(e)}function r(e){s.push(e)}function c(){n.setup(t)}function l(e){n.setupView(t,e)}const o={lightsArray:t,shadowsArray:s,camera:null,lights:n,transmissionRenderTarget:{}};return{init:i,state:o,setupLights:c,setupLightsView:l,pushLight:a,pushShadow:r}}function jz(e){let t=new WeakMap;function n(n,s=0){const i=t.get(n);let o;return i===0[0]?(o=new cy(e),t.set(n,[o])):s>=i.length?(o=new cy(e),i.push(o)):o=i[s],o}function s(){t=new WeakMap}return{get:n,dispose:s}}ay=`
void main() {

	gl_Position = vec4( position, 1.0 );

}
`,oy=`
uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;

#include <packing>

void main() {

	const float samples = float( VSM_SAMPLES );

	float mean = 0.0;
	float squared_mean = 0.0;

	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {

		float uvOffset = uvStart + i * uvStride;

		#ifdef HORIZONTAL_PASS

			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;

		#else

			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;

		#endif

	}

	mean = mean / samples;
	squared_mean = squared_mean / samples;

	float std_dev = sqrt( squared_mean - mean * mean );

	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );

}
`;function Cz(e,t,n){let p=new Ml;const s=new w,o=new w,g=new j,b=new Tw({depthPacking:zp}),O=new zw,c={},r=n.maxTextureSize,_={[ot]:B,[B]:ot,[Fe]:Fe},i=new us({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new w},radius:{value:4}},vertexShader:ay,fragmentShader:oy}),a=i.clone();a.defines.HORIZONTAL_PASS=1;const v=new Cn;v.setAttribute("position",new Me(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const d=new be(v,i),l=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=Il;let u=this.type;this.render=function(t,n,i){if(l.enabled===!1)return;if(l.autoUpdate===!1&&l.needsUpdate===!1)return;if(t.length===0)return;const c=e.getRenderTarget(),d=e.getActiveCubeFace(),h=e.getActiveMipmapLevel(),a=e.state;a.setBlending(Qe),a.buffers.depth.getReversed()===!0?a.buffers.color.setClear(0,0,0,0):a.buffers.color.setClear(1,1,1,1),a.buffers.depth.setTest(!0),a.setScissorTest(!1);const m=u!==fn&&this.type===fn,v=u===fn&&this.type!==fn;for(let u=0,h=t.length;u<h;u++){const l=t[u],c=l.shadow;if(c===0[0]){console.warn("THREE.WebGLShadowMap:",l,"has no shadow.");continue}if(c.autoUpdate===!1&&c.needsUpdate===!1)continue;s.copy(c.mapSize);const d=c.getFrameExtents();if(s.multiply(d),o.copy(c.mapSize),(s.x>r||s.y>r)&&(s.x>r&&(o.x=Math.floor(r/d.x),s.x=o.x*d.x,c.mapSize.x=o.x),s.y>r&&(o.y=Math.floor(r/d.y),s.y=o.y*d.y,c.mapSize.y=o.y)),c.map===null||m===!0||v===!0){const e=this.type!==fn?{minFilter:V,magFilter:V}:{};c.map!==null&&c.map.dispose(),c.map=new Ss(s.x,s.y,e),c.map.texture.name=l.name+".shadowMap",c.camera.updateProjectionMatrix()}e.setRenderTarget(c.map),e.clear();const b=c.getViewportCount();for(let e=0;e<b;e++){const t=c.getViewport(e);g.set(o.x*t.x,o.y*t.y,o.x*t.z,o.y*t.w),a.viewport(g),c.updateMatrices(l,e),p=c.getFrustum(),f(n,i,c.camera,l,this.type)}c.isPointLightShadow!==!0&&this.type===fn&&y(c,i),c.needsUpdate=!1}u=this.type,l.needsUpdate=!1,e.setRenderTarget(c,d,h)};function y(n,o){const r=t.update(d);i.defines.VSM_SAMPLES!==n.blurSamples&&(i.defines.VSM_SAMPLES=n.blurSamples,a.defines.VSM_SAMPLES=n.blurSamples,i.needsUpdate=!0,a.needsUpdate=!0),n.mapPass===null&&(n.mapPass=new Ss(s.x,s.y)),i.uniforms.shadow_pass.value=n.map.texture,i.uniforms.resolution.value=n.mapSize,i.uniforms.radius.value=n.radius,e.setRenderTarget(n.mapPass),e.clear(),e.renderBufferDirect(o,null,r,i,d,null),a.uniforms.shadow_pass.value=n.mapPass.texture,a.uniforms.resolution.value=n.mapSize,a.uniforms.radius.value=n.radius,e.setRenderTarget(n.map),e.clear(),e.renderBufferDirect(o,null,r,a,d,null)}function h(t,n,s,o){let i=null;const a=s.isPointLight===!0?t.customDistanceMaterial:t.customDepthMaterial;if(a!==0[0])i=a;else if(i=s.isPointLight===!0?O:b,e.localClippingEnabled&&n.clipShadows===!0&&Array.isArray(n.clippingPlanes)&&n.clippingPlanes.length!==0||n.displacementMap&&n.displacementScale!==0||n.alphaMap&&n.alphaTest>0||n.map&&n.alphaTest>0||n.alphaToCoverage===!0){const s=i.uuid,o=n.uuid;let e=c[s];e===0[0]&&(e={},c[s]=e);let t=e[o];t===0[0]&&(t=i.clone(),e[o]=t,n.addEventListener("dispose",m)),i=t}if(i.visible=n.visible,i.wireframe=n.wireframe,o===fn?i.side=n.shadowSide!==null?n.shadowSide:n.side:i.side=n.shadowSide!==null?n.shadowSide:_[n.side],i.alphaMap=n.alphaMap,i.alphaTest=n.alphaToCoverage===!0?.5:n.alphaTest,i.map=n.map,i.clipShadows=n.clipShadows,i.clippingPlanes=n.clippingPlanes,i.clipIntersection=n.clipIntersection,i.displacementMap=n.displacementMap,i.displacementScale=n.displacementScale,i.displacementBias=n.displacementBias,i.wireframeLinewidth=n.wireframeLinewidth,i.linewidth=n.linewidth,s.isPointLight===!0&&i.isMeshDistanceMaterial===!0){const t=e.properties.get(i);t.light=s}return i}function f(n,s,o,i,a){if(n.visible===!1)return;const c=n.layers.test(s.layers);if(c&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&a===fn)&&(!n.frustumCulled||p.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(o.matrixWorldInverse,n.matrixWorld);const r=t.update(n),c=n.material;if(Array.isArray(c)){{const t=r.groups;for(let d=0,m=t.length;d<m;d++){const l=t[d],u=c[l.materialIndex];if(u&&u.visible){const t=h(n,u,i,a);n.onBeforeShadow(e,n,s,o,r,t,l),e.renderBufferDirect(o,null,r,t,n,l),n.onAfterShadow(e,n,s,o,r,t,l)}}}}else if(c.visible){const t=h(n,c,i,a);n.onBeforeShadow(e,n,s,o,r,t,null),e.renderBufferDirect(o,null,r,t,n,null),n.onAfterShadow(e,n,s,o,r,t,null)}}const r=n.children;for(let e=0,t=r.length;e<t;e++)f(r[e],s,o,i,a)}function m(e){const t=e.target;t.removeEventListener("dispose",m);for(const s in c){const t=c[s],n=e.target.uuid;if(n in t){const e=t[n];e.dispose(),delete t[n]}}}}Xj={[Ma]:Ta,[za]:La,[Da]:Ba,[ps]:Na,[Ta]:Ma,[La]:za,[Ba]:Da,[Na]:ps};function kz(e,t){function te(){let t=!1;const n=new j;let s=null;const o=new j(0,0,0,0);return{setMask:function(n){s!==n&&!t&&(e.colorMask(n,n,n,n),s=n)},setLocked:function(e){t=e},setClear:function(t,s,i,a,r){r===!0&&(t*=a,s*=a,i*=a),n.set(t,s,i,a),o.equals(n)===!1&&(e.clearColor(t,s,i,a),o.copy(n))},reset:function(){t=!1,s=null,o.set(-1,0,0,0)}}}function oe(){let a=!1,o=!1,r=null,c=null,i=null;return{setReversed:function(e){if(o!==e){const n=t.get("EXT_clip_control");e?n.clipControlEXT(n.LOWER_LEFT_EXT,n.ZERO_TO_ONE_EXT):n.clipControlEXT(n.LOWER_LEFT_EXT,n.NEGATIVE_ONE_TO_ONE_EXT),o=e;const s=i;i=null,this.setClear(s)}},getReversed:function(){return o},setTest:function(t){t?n(e.DEPTH_TEST):s(e.DEPTH_TEST)},setMask:function(t){r!==t&&!a&&(e.depthMask(t),r=t)},setFunc:function(t){if(o&&(t=Xj[t]),c!==t){switch(t){case Ma:e.depthFunc(e.NEVER);break;case Ta:e.depthFunc(e.ALWAYS);break;case za:e.depthFunc(e.LESS);break;case ps:e.depthFunc(e.LEQUAL);break;case Da:e.depthFunc(e.EQUAL);break;case Na:e.depthFunc(e.GEQUAL);break;case La:e.depthFunc(e.GREATER);break;case Ba:e.depthFunc(e.NOTEQUAL);break;default:e.depthFunc(e.LEQUAL)}c=t}},setLocked:function(e){a=e},setClear:function(t){i!==t&&(o&&(t=1-t),e.clearDepth(t),i=t)},reset:function(){a=!1,r=null,c=null,i=null,o=!1}}}function ne(){let t=!1,o=null,i=null,a=null,r=null,c=null,l=null,d=null,u=null;return{setTest:function(o){t||(o?n(e.STENCIL_TEST):s(e.STENCIL_TEST))},setMask:function(n){o!==n&&!t&&(e.stencilMask(n),o=n)},setFunc:function(t,n,s){(i!==t||a!==n||r!==s)&&(e.stencilFunc(t,n,s),i=t,a=n,r=s)},setOp:function(t,n,s){(c!==t||l!==n||d!==s)&&(e.stencilOp(t,n,s),c=t,l=n,d=s)},setLocked:function(e){t=e},setClear:function(t){u!==t&&(e.clearStencil(t),u=t)},reset:function(){t=!1,o=null,i=null,a=null,r=null,c=null,l=null,d=null,u=null}}}const v=new te,o=new oe,a=new ne,W=new WeakMap,R=new WeakMap;let d={},u={},z=new WeakMap,Y=[],F=null,r=!1,g=null,h=null,b=null,y=null,l=null,w=null,O=null,x=new T(0,0,0),m=0,E=!1,P=null,L=null,N=null,V=null,H=null;const U=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let D=!1,S=0;const A=e.getParameter(e.VERSION);A.indexOf("WebGL")!==-1?(S=parseFloat(/^WebGL (\d)/.exec(A)[1]),D=S>=1):A.indexOf("OpenGL ES")!==-1&&(S=parseFloat(/^OpenGL ES (\d)/.exec(A)[1]),D=S>=2);let i=null,k={};const G=e.getParameter(e.SCISSOR_BOX),J=e.getParameter(e.VIEWPORT),I=(new j).fromArray(G),$=(new j).fromArray(J);function _(t,n,s,o){const i=new Uint8Array(4),a=e.createTexture();e.bindTexture(t,a),e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(let a=0;a<s;a++)t===e.TEXTURE_3D||t===e.TEXTURE_2D_ARRAY?e.texImage3D(n,0,e.RGBA,1,1,o,0,e.RGBA,e.UNSIGNED_BYTE,i):e.texImage2D(n+a,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,i);return a}const c={};c[e.TEXTURE_2D]=_(e.TEXTURE_2D,e.TEXTURE_2D,1),c[e.TEXTURE_CUBE_MAP]=_(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),c[e.TEXTURE_2D_ARRAY]=_(e.TEXTURE_2D_ARRAY,e.TEXTURE_2D_ARRAY,1,1),c[e.TEXTURE_3D]=_(e.TEXTURE_3D,e.TEXTURE_3D,1,1),v.setClear(0,0,0,1),o.setClear(1),a.setClear(0),n(e.DEPTH_TEST),o.setFunc(ps),M(!1),K(Hl),n(e.CULL_FACE),f(Qe);function n(t){d[t]!==!0&&(e.enable(t),d[t]=!0)}function s(t){d[t]!==!1&&(e.disable(t),d[t]=!1)}function Z(t,n){return u[t]!==n&&(e.bindFramebuffer(t,n),u[t]=n,t===e.DRAW_FRAMEBUFFER&&(u[e.FRAMEBUFFER]=n),t===e.FRAMEBUFFER&&(u[e.DRAW_FRAMEBUFFER]=n),!0)}function Q(t,n){let s=Y,o=!1;if(t){{s=z.get(n),s===0[0]&&(s=[],z.set(n,s));const i=t.textures;if(s.length!==i.length||s[0]!==e.COLOR_ATTACHMENT0){for(let t=0,n=i.length;t<n;t++)s[t]=e.COLOR_ATTACHMENT0+t;s.length=i.length,o=!0}}}else s[0]!==e.BACK&&(s[0]=e.BACK,o=!0);o&&e.drawBuffers(s)}function X(t){return F!==t&&(e.useProgram(t),F=t,!0)}const C={[Se]:e.FUNC_ADD,[Vl]:e.FUNC_SUBTRACT,[$l]:e.FUNC_REVERSE_SUBTRACT};C[T8]=e.MIN,C[M8]=e.MAX;const p={[Pn]:e.ZERO,[ql]:e.ONE,[Jl]:e.SRC_COLOR,[_a]:e.SRC_ALPHA,[dd]:e.SRC_ALPHA_SATURATE,[cd]:e.DST_COLOR,[nd]:e.DST_ALPHA,[td]:e.ONE_MINUS_SRC_COLOR,[wa]:e.ONE_MINUS_SRC_ALPHA,[ld]:e.ONE_MINUS_DST_COLOR,[ad]:e.ONE_MINUS_DST_ALPHA,[c6]:e.CONSTANT_COLOR,[l6]:e.ONE_MINUS_CONSTANT_COLOR,[d6]:e.CONSTANT_ALPHA,[m6]:e.ONE_MINUS_CONSTANT_ALPHA};function f(t,o,i,a,c,d,u,f,v,j){if(t===Qe){r===!0&&(s(e.BLEND),r=!1);return}if(r===!1&&(n(e.BLEND),r=!0),t!==xo){if(t!==g||j!==E){if((h!==Se||l!==Se)&&(e.blendEquation(e.FUNC_ADD),h=Se,l=Se),j)switch(t){case rt:e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case bo:e.blendFunc(e.ONE,e.ONE);break;case wo:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case Oo:e.blendFuncSeparate(e.DST_COLOR,e.ONE_MINUS_SRC_ALPHA,e.ZERO,e.ONE);break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}else switch(t){case rt:e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case bo:e.blendFuncSeparate(e.SRC_ALPHA,e.ONE,e.ONE,e.ONE);break;case wo:console.error("THREE.WebGLState: SubtractiveBlending requires material.premultipliedAlpha = true");break;case Oo:console.error("THREE.WebGLState: MultiplyBlending requires material.premultipliedAlpha = true");break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}b=null,y=null,w=null,O=null,x.set(0,0,0),m=0,g=t,E=j}return}c=c||o,d=d||i,u=u||a,(o!==h||c!==l)&&(e.blendEquationSeparate(C[o],C[c]),h=o,l=c),(i!==b||a!==y||d!==w||u!==O)&&(e.blendFuncSeparate(p[i],p[a],p[d],p[u]),b=i,y=a,w=d,O=u),(f.equals(x)===!1||v!==m)&&(e.blendColor(f.r,f.g,f.b,v),x.copy(f),m=v),g=t,E=!1}function ee(t,i){t.side===Fe?s(e.CULL_FACE):n(e.CULL_FACE);let r=t.side===B;i&&(r=!r),M(r),t.blending===rt&&t.transparent===!1?f(Qe):f(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.blendColor,t.blendAlpha,t.premultipliedAlpha),o.setFunc(t.depthFunc),o.setTest(t.depthTest),o.setMask(t.depthWrite),v.setMask(t.colorWrite);const c=t.stencilWrite;a.setTest(c),c&&(a.setMask(t.stencilWriteMask),a.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),a.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),q(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),t.alphaToCoverage===!0?n(e.SAMPLE_ALPHA_TO_COVERAGE):s(e.SAMPLE_ALPHA_TO_COVERAGE)}function M(t){P!==t&&(t?e.frontFace(e.CW):e.frontFace(e.CCW),P=t)}function K(t){t!==q8?(n(e.CULL_FACE),t!==L&&(t===Hl?e.cullFace(e.BACK):t===W8?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):s(e.CULL_FACE),L=t}function se(t){t!==N&&(D&&e.lineWidth(t),N=t)}function q(t,o,i){t?(n(e.POLYGON_OFFSET_FILL),(V!==o||H!==i)&&(e.polygonOffset(o,i),V=o,H=i)):s(e.POLYGON_OFFSET_FILL)}function ie(t){t?n(e.SCISSOR_TEST):s(e.SCISSOR_TEST)}function ae(t){t===0[0]&&(t=e.TEXTURE0+U-1),i!==t&&(e.activeTexture(t),i=t)}function re(t,n,s){s===0[0]&&(i===null?s=e.TEXTURE0+U-1:s=i);let o=k[s];o===0[0]&&(o={type:0[0],texture:0[0]},k[s]=o),(o.type!==t||o.texture!==n)&&(i!==s&&(e.activeTexture(s),i=s),e.bindTexture(t,n||c[t]),o.type=t,o.texture=n)}function ce(){const t=k[i];t!==0[0]&&t.type!==0[0]&&(e.bindTexture(t.type,null),t.type=0[0],t.texture=0[0])}function le(){try{e.compressedTexImage2D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function de(){try{e.compressedTexImage3D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function ue(){try{e.texSubImage2D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function he(){try{e.texSubImage3D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function me(){try{e.compressedTexSubImage2D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function fe(){try{e.compressedTexSubImage3D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function pe(){try{e.texStorage2D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function ge(){try{e.texStorage3D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function ve(){try{e.texImage2D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function be(){try{e.texImage3D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function je(t){I.equals(t)===!1&&(e.scissor(t.x,t.y,t.z,t.w),I.copy(t))}function ye(t){$.equals(t)===!1&&(e.viewport(t.x,t.y,t.z,t.w),$.copy(t))}function _e(t,n){let s=R.get(n);s===0[0]&&(s=new WeakMap,R.set(n,s));let o=s.get(t);o===0[0]&&(o=e.getUniformBlockIndex(n,t.name),s.set(t,o))}function we(t,n){const o=R.get(n),s=o.get(t);W.get(n)!==s&&(e.uniformBlockBinding(n,s,t.__bindingPointIndex),W.set(n,s))}function Oe(){e.disable(e.BLEND),e.disable(e.CULL_FACE),e.disable(e.DEPTH_TEST),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SCISSOR_TEST),e.disable(e.STENCIL_TEST),e.disable(e.SAMPLE_ALPHA_TO_COVERAGE),e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ONE,e.ZERO),e.blendFuncSeparate(e.ONE,e.ZERO,e.ONE,e.ZERO),e.blendColor(0,0,0,0),e.colorMask(!0,!0,!0,!0),e.clearColor(0,0,0,0),e.depthMask(!0),e.depthFunc(e.LESS),o.setReversed(!1),e.clearDepth(1),e.stencilMask(4294967295),e.stencilFunc(e.ALWAYS,0,4294967295),e.stencilOp(e.KEEP,e.KEEP,e.KEEP),e.clearStencil(0),e.cullFace(e.BACK),e.frontFace(e.CCW),e.polygonOffset(0,0),e.activeTexture(e.TEXTURE0),e.bindFramebuffer(e.FRAMEBUFFER,null),e.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),e.bindFramebuffer(e.READ_FRAMEBUFFER,null),e.useProgram(null),e.lineWidth(1),e.scissor(0,0,e.canvas.width,e.canvas.height),e.viewport(0,0,e.canvas.width,e.canvas.height),d={},i=null,k={},u={},z=new WeakMap,Y=[],F=null,r=!1,g=null,h=null,b=null,y=null,l=null,w=null,O=null,x=new T(0,0,0),m=0,E=!1,P=null,L=null,N=null,V=null,H=null,I.set(0,0,e.canvas.width,e.canvas.height),$.set(0,0,e.canvas.width,e.canvas.height),v.reset(),o.reset(),a.reset()}return{buffers:{color:v,depth:o,stencil:a},enable:n,disable:s,bindFramebuffer:Z,drawBuffers:Q,useProgram:X,setBlending:f,setMaterial:ee,setFlipSided:M,setCullFace:K,setLineWidth:se,setPolygonOffset:q,setScissorTest:ie,activeTexture:ae,bindTexture:re,unbindTexture:ce,compressedTexImage2D:le,compressedTexImage3D:de,texImage2D:ve,texImage3D:be,updateUBOMapping:_e,uniformBlockBinding:we,texStorage2D:pe,texStorage3D:ge,texSubImage2D:ue,texSubImage3D:he,compressedTexSubImage2D:me,compressedTexSubImage3D:fe,scissor:je,viewport:ye,reset:Oe}}function Sz(e,t,n,s,o,i,a){const b=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,z=typeof navigator!="undefined"&&/OculusBrowser/g.test(navigator.userAgent),d=new w,O=new WeakMap;let _;const m=new WeakMap;let L=!1;try{L=typeof OffscreenCanvas!="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function R(e,t){return L?new OffscreenCanvas(e,t):Mu("canvas")}function P(e,t,n){let o=1;const s=j(e);if((s.width>n||s.height>n)&&(o=n/Math.max(s.width,s.height)),o<1){if(typeof HTMLImageElement!="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&e instanceof ImageBitmap||typeof VideoFrame!="undefined"&&e instanceof VideoFrame){const n=Math.floor(o*s.width),i=Math.floor(o*s.height);_===0[0]&&(_=R(n,i));const a=t?R(n,i):_;a.width=n,a.height=i;const r=a.getContext("2d");return r.drawImage(e,0,0,n,i),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+s.width+"x"+s.height+") to ("+n+"x"+i+")."),a}return"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+s.width+"x"+s.height+")."),e}return e}function u(e){return e.generateMipmaps}function h(t){e.generateMipmap(t)}function Q(t){return t.isWebGLCubeRenderTarget?e.TEXTURE_CUBE_MAP:t.isWebGL3DRenderTarget?e.TEXTURE_3D:t.isWebGLArrayRenderTarget||t.isCompressedArrayTexture?e.TEXTURE_2D_ARRAY:e.TEXTURE_2D}function f(n,s,o,i,a=!1){if(n!==null){if(e[n]!==0[0])return e[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let r=s;if(s===e.RED&&(o===e.FLOAT&&(r=e.R32F),o===e.HALF_FLOAT&&(r=e.R16F),o===e.UNSIGNED_BYTE&&(r=e.R8)),s===e.RED_INTEGER&&(o===e.UNSIGNED_BYTE&&(r=e.R8UI),o===e.UNSIGNED_SHORT&&(r=e.R16UI),o===e.UNSIGNED_INT&&(r=e.R32UI),o===e.BYTE&&(r=e.R8I),o===e.SHORT&&(r=e.R16I),o===e.INT&&(r=e.R32I)),s===e.RG&&(o===e.FLOAT&&(r=e.RG32F),o===e.HALF_FLOAT&&(r=e.RG16F),o===e.UNSIGNED_BYTE&&(r=e.RG8)),s===e.RG_INTEGER&&(o===e.UNSIGNED_BYTE&&(r=e.RG8UI),o===e.UNSIGNED_SHORT&&(r=e.RG16UI),o===e.UNSIGNED_INT&&(r=e.RG32UI),o===e.BYTE&&(r=e.RG8I),o===e.SHORT&&(r=e.RG16I),o===e.INT&&(r=e.RG32I)),s===e.RGB_INTEGER&&(o===e.UNSIGNED_BYTE&&(r=e.RGB8UI),o===e.UNSIGNED_SHORT&&(r=e.RGB16UI),o===e.UNSIGNED_INT&&(r=e.RGB32UI),o===e.BYTE&&(r=e.RGB8I),o===e.SHORT&&(r=e.RGB16I),o===e.INT&&(r=e.RGB32I)),s===e.RGBA_INTEGER&&(o===e.UNSIGNED_BYTE&&(r=e.RGBA8UI),o===e.UNSIGNED_SHORT&&(r=e.RGBA16UI),o===e.UNSIGNED_INT&&(r=e.RGBA32UI),o===e.BYTE&&(r=e.RGBA8I),o===e.SHORT&&(r=e.RGBA16I),o===e.INT&&(r=e.RGBA32I)),s===e.RGB&&(o===e.UNSIGNED_INT_5_9_9_9_REV&&(r=e.RGB9_E5),o===e.UNSIGNED_INT_10F_11F_11F_REV&&(r=e.R11F_G11F_B10F)),s===e.RGBA){const t=a?Ni:v.getTransfer(i);o===e.FLOAT&&(r=e.RGBA32F),o===e.HALF_FLOAT&&(r=e.RGBA16F),o===e.UNSIGNED_BYTE&&(r=t===c?e.SRGB8_ALPHA8:e.RGBA8),o===e.UNSIGNED_SHORT_4_4_4_4&&(r=e.RGBA4),o===e.UNSIGNED_SHORT_5_5_5_1&&(r=e.RGB5_A1)}return(r===e.R16F||r===e.R32F||r===e.RG16F||r===e.RG32F||r===e.RGBA16F||r===e.RGBA32F)&&t.get("EXT_color_buffer_float"),r}function F(t,n){let s;return t?n===null||n===I||n===dt?s=e.DEPTH24_STENCIL8:n===X?s=e.DEPTH32F_STENCIL8:n===St&&(s=e.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):n===null||n===I||n===dt?s=e.DEPTH_COMPONENT24:n===X?s=e.DEPTH_COMPONENT32F:n===St&&(s=e.DEPTH_COMPONENT16),s}function B(e,t){return u(e)===!0||e.isFramebufferTexture&&e.minFilter!==V&&e.minFilter!==ie?Math.log2(Math.max(t.width,t.height))+1:e.mipmaps!==0[0]&&e.mipmaps.length>0?e.mipmaps.length:e.isCompressedTexture&&Array.isArray(e.image)?t.mipmaps.length:1}function K(e){const t=e.target;t.removeEventListener("dispose",K),Z(t),t.isVideoTexture&&O.delete(t)}function T(e){const t=e.target;t.removeEventListener("dispose",T),ee(t)}function Z(e){const n=s.get(e);if(n.__webglInit===0[0])return;const o=e.source,t=m.get(o);if(t){const s=t[n.__cacheKey];s.usedTimes--,s.usedTimes===0&&U(e),Object.keys(t).length===0&&m.delete(o)}s.remove(e)}function U(t){const n=s.get(t);e.deleteTexture(n.__webglTexture);const o=t.source,i=m.get(o);delete i[n.__cacheKey],a.memory.textures--}function ee(t){const n=s.get(t);if(t.depthTexture&&(t.depthTexture.dispose(),s.remove(t.depthTexture)),t.isWebGLCubeRenderTarget)for(let t=0;t<6;t++){if(Array.isArray(n.__webglFramebuffer[t]))for(let s=0;s<n.__webglFramebuffer[t].length;s++)e.deleteFramebuffer(n.__webglFramebuffer[t][s]);else e.deleteFramebuffer(n.__webglFramebuffer[t]);n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer[t])}else{if(Array.isArray(n.__webglFramebuffer))for(let t=0;t<n.__webglFramebuffer.length;t++)e.deleteFramebuffer(n.__webglFramebuffer[t]);else e.deleteFramebuffer(n.__webglFramebuffer);if(n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer),n.__webglMultisampledFramebuffer&&e.deleteFramebuffer(n.__webglMultisampledFramebuffer),n.__webglColorRenderbuffer)for(let t=0;t<n.__webglColorRenderbuffer.length;t++)n.__webglColorRenderbuffer[t]&&e.deleteRenderbuffer(n.__webglColorRenderbuffer[t]);n.__webglDepthRenderbuffer&&e.deleteRenderbuffer(n.__webglDepthRenderbuffer)}const o=t.textures;for(let t=0,i=o.length;t<i;t++){const n=s.get(o[t]);n.__webglTexture&&(e.deleteTexture(n.__webglTexture),a.memory.textures--),s.remove(o[t])}s.remove(t)}let M=0;function re(){M=0}function ae(){const e=M;return e>=o.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+o.maxTextures),M+=1,e}function me(e){const t=[];return t.push(e.wrapS),t.push(e.wrapT),t.push(e.wrapR||0),t.push(e.magFilter),t.push(e.minFilter),t.push(e.anisotropy),t.push(e.internalFormat),t.push(e.format),t.push(e.type),t.push(e.generateMipmaps),t.push(e.premultiplyAlpha),t.push(e.flipY),t.push(e.unpackAlignment),t.push(e.colorSpace),t.join()}function D(t,o){const i=s.get(t);if(t.isVideoTexture&&ue(t),t.isRenderTargetTexture===!1&&t.isExternalTexture!==!0&&t.version>0&&i.__version!==t.version){const e=t.image;if(e===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(e.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{k(i,t,o);return}}else t.isExternalTexture&&(i.__webglTexture=t.sourceTexture?t.sourceTexture:null);n.bindTexture(e.TEXTURE_2D,i.__webglTexture,e.TEXTURE0+o)}function he(t,o){const i=s.get(t);if(t.isRenderTargetTexture===!1&&t.version>0&&i.__version!==t.version){k(i,t,o);return}n.bindTexture(e.TEXTURE_2D_ARRAY,i.__webglTexture,e.TEXTURE0+o)}function de(t,o){const i=s.get(t);if(t.isRenderTargetTexture===!1&&t.version>0&&i.__version!==t.version){k(i,t,o);return}n.bindTexture(e.TEXTURE_3D,i.__webglTexture,e.TEXTURE0+o)}function le(t,o){const i=s.get(t);if(t.version>0&&i.__version!==t.version){q(i,t,o);return}n.bindTexture(e.TEXTURE_CUBE_MAP,i.__webglTexture,e.TEXTURE0+o)}const E={[Es]:e.REPEAT,[$t]:e.CLAMP_TO_EDGE,[js]:e.MIRRORED_REPEAT},H={[V]:e.NEAREST,[Ed]:e.NEAREST_MIPMAP_NEAREST,[An]:e.NEAREST_MIPMAP_LINEAR,[ie]:e.LINEAR,[Bo]:e.LINEAR_MIPMAP_NEAREST,[Be]:e.LINEAR_MIPMAP_LINEAR},te={[Qd]:e.NEVER,[uu]:e.ALWAYS,[Jd]:e.LESS,[Ic]:e.LEQUAL,[eu]:e.EQUAL,[du]:e.GEQUAL,[ru]:e.GREATER,[lu]:e.NOTEQUAL};function g(n,i){if(i.type===X&&t.has("OES_texture_float_linear")===!1&&(i.magFilter===ie||i.magFilter===Bo||i.magFilter===An||i.magFilter===Be||i.minFilter===ie||i.minFilter===Bo||i.minFilter===An||i.minFilter===Be)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),e.texParameteri(n,e.TEXTURE_WRAP_S,E[i.wrapS]),e.texParameteri(n,e.TEXTURE_WRAP_T,E[i.wrapT]),(n===e.TEXTURE_3D||n===e.TEXTURE_2D_ARRAY)&&e.texParameteri(n,e.TEXTURE_WRAP_R,E[i.wrapR]),e.texParameteri(n,e.TEXTURE_MAG_FILTER,H[i.magFilter]),e.texParameteri(n,e.TEXTURE_MIN_FILTER,H[i.minFilter]),i.compareFunction&&(e.texParameteri(n,e.TEXTURE_COMPARE_MODE,e.COMPARE_REF_TO_TEXTURE),e.texParameteri(n,e.TEXTURE_COMPARE_FUNC,te[i.compareFunction])),t.has("EXT_texture_filter_anisotropic")===!0){if(i.magFilter===V)return;if(i.minFilter!==An&&i.minFilter!==Be)return;if(i.type===X&&t.has("OES_texture_float_linear")===!1)return;if(i.anisotropy>1||s.get(i).__currentAnisotropy){const a=t.get("EXT_texture_filter_anisotropic");e.texParameterf(n,a.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(i.anisotropy,o.getMaxAnisotropy())),s.get(i).__currentAnisotropy=i.anisotropy}}}function W(t,n){let i=!1;t.__webglInit===0[0]&&(t.__webglInit=!0,n.addEventListener("dispose",K));const r=n.source;let s=m.get(r);s===0[0]&&(s={},m.set(r,s));const o=me(n);if(o!==t.__cacheKey){s[o]===0[0]&&(s[o]={texture:e.createTexture(),usedTimes:0},a.memory.textures++,i=!0),s[o].usedTimes++;const r=s[t.__cacheKey];r!==0[0]&&(s[t.__cacheKey].usedTimes--,r.usedTimes===0&&U(n)),t.__cacheKey=o,t.__webglTexture=s[o].texture}return i}function A(e,t,n){return Math.floor(Math.floor(e/n)/t)}function J(t,s,o,i){const r=4,a=t.updateRanges;if(a.length===0)n.texSubImage2D(e.TEXTURE_2D,0,0,0,s.width,s.height,o,i,s.data);else{a.sort((e,t)=>e.start-t.start);let c=0;for(let n=1;n<a.length;n++){const t=a[c],e=a[n],i=t.start+t.count,o=A(e.start,s.width,r),l=A(t.start,s.width,r);e.start<=i+1&&o===l&&A(e.start+e.count-1,s.width,r)===o?t.count=Math.max(t.count,e.start+e.count-t.start):(++c,a[c]=e)}a.length=c+1;const l=e.getParameter(e.UNPACK_ROW_LENGTH),d=e.getParameter(e.UNPACK_SKIP_PIXELS),u=e.getParameter(e.UNPACK_SKIP_ROWS);e.pixelStorei(e.UNPACK_ROW_LENGTH,s.width);for(let t=0,h=a.length;t<h;t++){const c=a[t],l=Math.floor(c.start/r),m=Math.ceil(c.count/r),d=l%s.width,u=Math.floor(l/s.width),f=m,p=1;e.pixelStorei(e.UNPACK_SKIP_PIXELS,d),e.pixelStorei(e.UNPACK_SKIP_ROWS,u),n.texSubImage2D(e.TEXTURE_2D,0,d,u,f,p,o,i,s.data)}t.clearUpdateRanges(),e.pixelStorei(e.UNPACK_ROW_LENGTH,l),e.pixelStorei(e.UNPACK_SKIP_PIXELS,d),e.pixelStorei(e.UNPACK_SKIP_ROWS,u)}}function k(t,a,r){let c=e.TEXTURE_2D;(a.isDataArrayTexture||a.isCompressedArrayTexture)&&(c=e.TEXTURE_2D_ARRAY),a.isData3DTexture&&(c=e.TEXTURE_3D);const m=W(t,a),l=a.source;n.bindTexture(c,t.__webglTexture,e.TEXTURE0+r);const d=s.get(l);if(l.version!==d.__version||m===!0){n.activeTexture(e.TEXTURE0+r);const k=v.getPrimaries(v.workingColorSpace),A=a.colorSpace===$e?null:v.getPrimaries(a.colorSpace),E=a.colorSpace===$e||k===A?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,a.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,a.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,E);let t=P(a.image,!1,o.maxTextureSize);t=N(a,t);const p=i.convert(a.format,a.colorSpace),y=i.convert(a.type);let b=f(a.internalFormat,p,y,a.colorSpace,a.isVideoTexture);g(c,a);let s;const _=a.mipmaps,w=a.isVideoTexture!==!0,O=d.__version===0[0]||m===!0,x=l.dataReady,C=B(a,t);if(a.isDepthTexture)b=F(a.format===tt,a.type),O&&(w?n.texStorage2D(e.TEXTURE_2D,1,b,t.width,t.height):n.texImage2D(e.TEXTURE_2D,0,b,t.width,t.height,0,p,y,null));else if(a.isDataTexture)if(_.length>0){w&&O&&n.texStorage2D(e.TEXTURE_2D,C,b,_[0].width,_[0].height);for(let t=0,o=_.length;t<o;t++)s=_[t],w?x&&n.texSubImage2D(e.TEXTURE_2D,t,0,0,s.width,s.height,p,y,s.data):n.texImage2D(e.TEXTURE_2D,t,b,s.width,s.height,0,p,y,s.data);a.generateMipmaps=!1}else w?(O&&n.texStorage2D(e.TEXTURE_2D,C,b,t.width,t.height),x&&J(a,t,p,y)):n.texImage2D(e.TEXTURE_2D,0,b,t.width,t.height,0,p,y,t.data);else if(a.isCompressedTexture)if(a.isCompressedArrayTexture){w&&O&&n.texStorage3D(e.TEXTURE_2D_ARRAY,C,b,_[0].width,_[0].height,t.depth);for(let o=0,i=_.length;o<i;o++)if(s=_[o],a.format!==G)if(p!==null)if(w){if(x)if(a.layerUpdates.size>0){const t=_0(s.width,s.height,a.format,a.type);for(const i of a.layerUpdates){const r=s.data.subarray(i*t/s.data.BYTES_PER_ELEMENT,(i+1)*t/s.data.BYTES_PER_ELEMENT);n.compressedTexSubImage3D(e.TEXTURE_2D_ARRAY,o,0,0,i,s.width,s.height,1,p,r)}a.clearLayerUpdates()}else n.compressedTexSubImage3D(e.TEXTURE_2D_ARRAY,o,0,0,0,s.width,s.height,t.depth,p,s.data)}else n.compressedTexImage3D(e.TEXTURE_2D_ARRAY,o,b,s.width,s.height,t.depth,0,s.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else w?x&&n.texSubImage3D(e.TEXTURE_2D_ARRAY,o,0,0,0,s.width,s.height,t.depth,p,y,s.data):n.texImage3D(e.TEXTURE_2D_ARRAY,o,b,s.width,s.height,t.depth,0,p,y,s.data)}else{w&&O&&n.texStorage2D(e.TEXTURE_2D,C,b,_[0].width,_[0].height);for(let t=0,o=_.length;t<o;t++)s=_[t],a.format!==G?p!==null?w?x&&n.compressedTexSubImage2D(e.TEXTURE_2D,t,0,0,s.width,s.height,p,s.data):n.compressedTexImage2D(e.TEXTURE_2D,t,b,s.width,s.height,0,s.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):w?x&&n.texSubImage2D(e.TEXTURE_2D,t,0,0,s.width,s.height,p,y,s.data):n.texImage2D(e.TEXTURE_2D,t,b,s.width,s.height,0,p,y,s.data)}else if(a.isDataArrayTexture)if(w){if(O&&n.texStorage3D(e.TEXTURE_2D_ARRAY,C,b,t.width,t.height,t.depth),x)if(a.layerUpdates.size>0){const s=_0(t.width,t.height,a.format,a.type);for(const o of a.layerUpdates){const i=t.data.subarray(o*s/t.data.BYTES_PER_ELEMENT,(o+1)*s/t.data.BYTES_PER_ELEMENT);n.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,o,t.width,t.height,1,p,y,i)}a.clearLayerUpdates()}else n.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,0,t.width,t.height,t.depth,p,y,t.data)}else n.texImage3D(e.TEXTURE_2D_ARRAY,0,b,t.width,t.height,t.depth,0,p,y,t.data);else if(a.isData3DTexture)w?(O&&n.texStorage3D(e.TEXTURE_3D,C,b,t.width,t.height,t.depth),x&&n.texSubImage3D(e.TEXTURE_3D,0,0,0,0,t.width,t.height,t.depth,p,y,t.data)):n.texImage3D(e.TEXTURE_3D,0,b,t.width,t.height,t.depth,0,p,y,t.data);else if(a.isFramebufferTexture){if(O)if(w)n.texStorage2D(e.TEXTURE_2D,C,b,t.width,t.height);else{let s=t.width,o=t.height;for(let t=0;t<C;t++)n.texImage2D(e.TEXTURE_2D,t,b,s,o,0,p,y,null),s>>=1,o>>=1}}else if(_.length>0){if(w&&O){const t=j(_[0]);n.texStorage2D(e.TEXTURE_2D,C,b,t.width,t.height)}for(let t=0,o=_.length;t<o;t++)s=_[t],w?x&&n.texSubImage2D(e.TEXTURE_2D,t,0,0,p,y,s):n.texImage2D(e.TEXTURE_2D,t,b,p,y,s);a.generateMipmaps=!1}else if(w){if(O){const s=j(t);n.texStorage2D(e.TEXTURE_2D,C,b,s.width,s.height)}x&&n.texSubImage2D(e.TEXTURE_2D,0,0,0,p,y,t)}else n.texImage2D(e.TEXTURE_2D,0,b,p,y,t);u(a)&&h(c),d.__version=l.version,a.onUpdate&&a.onUpdate(a)}t.__version=a.version}function q(t,a,r){if(a.image.length!==6)return;const d=W(t,a),c=a.source;n.bindTexture(e.TEXTURE_CUBE_MAP,t.__webglTexture,e.TEXTURE0+r);const l=s.get(c);if(c.version!==l.__version||d===!0){n.activeTexture(e.TEXTURE0+r);const k=v.getPrimaries(v.workingColorSpace),S=a.colorSpace===$e?null:v.getPrimaries(a.colorSpace),A=a.colorSpace===$e||k===S?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,a.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,a.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,A);const C=a.isCompressedTexture||a.image[0].isCompressedTexture,O=a.image[0]&&a.image[0].isDataTexture,t=[];for(let e=0;e<6;e++)!C&&!O?t[e]=P(a.image[e],!0,o.maxCubemapSize):t[e]=O?a.image[e].image:a.image[e],t[e]=N(a,t[e]);const w=t[0],s=i.convert(a.format,a.colorSpace),m=i.convert(a.type),y=f(a.internalFormat,s,m,a.colorSpace),b=a.isVideoTexture!==!0,E=l.__version===0[0]||d===!0,_=c.dataReady;let x=B(a,w);g(e.TEXTURE_CUBE_MAP,a);let p;if(C){b&&E&&n.texStorage2D(e.TEXTURE_CUBE_MAP,x,y,w.width,w.height);for(let o=0;o<6;o++){p=t[o].mipmaps;for(let i=0;i<p.length;i++){const t=p[i];a.format!==G?s!==null?b?_&&n.compressedTexSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+o,i,0,0,t.width,t.height,s,t.data):n.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+o,i,y,t.width,t.height,0,t.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):b?_&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+o,i,0,0,t.width,t.height,s,m,t.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+o,i,y,t.width,t.height,0,s,m,t.data)}}}else{if(p=a.mipmaps,b&&E){p.length>0&&x++;const s=j(t[0]);n.texStorage2D(e.TEXTURE_CUBE_MAP,x,y,s.width,s.height)}for(let o=0;o<6;o++)if(O){b?_&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+o,0,0,0,t[o].width,t[o].height,s,m,t[o].data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+o,0,y,t[o].width,t[o].height,0,s,m,t[o].data);for(let i=0;i<p.length;i++){const a=p[i],t=a.image[o].image;b?_&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+o,i+1,0,0,t.width,t.height,s,m,t.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+o,i+1,y,t.width,t.height,0,s,m,t.data)}}else{b?_&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+o,0,0,0,s,m,t[o]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+o,0,y,s,m,t[o]);for(let t=0;t<p.length;t++){const i=p[t];b?_&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+o,t+1,0,0,s,m,i.image[o]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+o,t+1,y,s,m,i.image[o])}}}u(a)&&h(e.TEXTURE_CUBE_MAP),l.__version=c.version,a.onUpdate&&a.onUpdate(a)}t.__version=a.version}function l(t,o,a,c,l,d){const u=i.convert(a.format,a.colorSpace),h=i.convert(a.type),g=f(a.internalFormat,u,h,a.colorSpace),v=s.get(o),m=s.get(a);if(m.__renderTarget=o,!v.__hasExternalTextures){const t=Math.max(1,o.width>>d),s=Math.max(1,o.height>>d);l===e.TEXTURE_3D||l===e.TEXTURE_2D_ARRAY?n.texImage3D(l,d,g,t,s,o.depth,0,u,h,null):n.texImage2D(l,d,g,t,s,0,u,h,null)}n.bindFramebuffer(e.FRAMEBUFFER,t),r(o)?b.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,c,l,m.__webglTexture,0,p(o)):(l===e.TEXTURE_2D||l>=e.TEXTURE_CUBE_MAP_POSITIVE_X&&l<=e.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&e.framebufferTexture2D(e.FRAMEBUFFER,c,l,m.__webglTexture,d),n.bindFramebuffer(e.FRAMEBUFFER,null)}function C(t,n,s){if(e.bindRenderbuffer(e.RENDERBUFFER,t),n.depthBuffer){const o=n.depthTexture,c=o&&o.isDepthTexture?o.type:null,i=F(n.stencilBuffer,c),l=n.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,a=p(n),d=r(n);d?b.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,a,i,n.width,n.height):s?e.renderbufferStorageMultisample(e.RENDERBUFFER,a,i,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,i,n.width,n.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,l,e.RENDERBUFFER,t)}else{const t=n.textures;for(let a=0;a<t.length;a++){const o=t[a],d=i.convert(o.format,o.colorSpace),u=i.convert(o.type),c=f(o.internalFormat,d,u,o.colorSpace),l=p(n);s&&r(n)===!1?e.renderbufferStorageMultisample(e.RENDERBUFFER,l,c,n.width,n.height):r(n)?b.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,l,c,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,c,n.width,n.height)}}e.bindRenderbuffer(e.RENDERBUFFER,null)}function $(t,o){const l=o&&o.isWebGLCubeRenderTarget;if(l)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(e.FRAMEBUFFER,t),!o.depthTexture||!o.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const a=s.get(o.depthTexture);a.__renderTarget=o,(!a.__webglTexture||o.depthTexture.image.width!==o.width||o.depthTexture.image.height!==o.height)&&(o.depthTexture.image.width=o.width,o.depthTexture.image.height=o.height,o.depthTexture.needsUpdate=!0),D(o.depthTexture,0);const i=a.__webglTexture,c=p(o);if(o.depthTexture.format===nt)r(o)?b.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,i,0,c):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,i,0);else if(o.depthTexture.format===tt)r(o)?b.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,i,0,c):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,i,0);else throw new Error("Unknown depthTexture format")}function x(t){const o=s.get(t),i=t.isWebGLCubeRenderTarget===!0;if(o.__boundDepthTexture!==t.depthTexture){const e=t.depthTexture;if(o.__depthDisposeCallback&&o.__depthDisposeCallback(),e){const t=()=>{delete o.__boundDepthTexture,delete o.__depthDisposeCallback,e.removeEventListener("dispose",t)};e.addEventListener("dispose",t),o.__depthDisposeCallback=t}o.__boundDepthTexture=e}if(t.depthTexture&&!o.__autoAllocateDepthBuffer){if(i)throw new Error("target.depthTexture not supported in Cube render targets");const e=t.texture.mipmaps;e&&e.length>0?$(o.__webglFramebuffer[0],t):$(o.__webglFramebuffer,t)}else if(i){o.__webglDepthbuffer=[];for(let s=0;s<6;s++)if(n.bindFramebuffer(e.FRAMEBUFFER,o.__webglFramebuffer[s]),o.__webglDepthbuffer[s]===0[0])o.__webglDepthbuffer[s]=e.createRenderbuffer(),C(o.__webglDepthbuffer[s],t,!1);else{const i=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,n=o.__webglDepthbuffer[s];e.bindRenderbuffer(e.RENDERBUFFER,n),e.framebufferRenderbuffer(e.FRAMEBUFFER,i,e.RENDERBUFFER,n)}}else{const s=t.texture.mipmaps;if(s&&s.length>0?n.bindFramebuffer(e.FRAMEBUFFER,o.__webglFramebuffer[0]):n.bindFramebuffer(e.FRAMEBUFFER,o.__webglFramebuffer),o.__webglDepthbuffer===0[0])o.__webglDepthbuffer=e.createRenderbuffer(),C(o.__webglDepthbuffer,t,!1);else{const s=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,n=o.__webglDepthbuffer;e.bindRenderbuffer(e.RENDERBUFFER,n),e.framebufferRenderbuffer(e.FRAMEBUFFER,s,e.RENDERBUFFER,n)}}n.bindFramebuffer(e.FRAMEBUFFER,null)}function ne(t,n,o){const i=s.get(t);n!==0[0]&&l(i.__webglFramebuffer,t,t.texture,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,0),o!==0[0]&&x(t)}function se(t){const o=t.texture,c=s.get(t),m=s.get(o);t.addEventListener("dispose",T);const d=t.textures,b=t.isWebGLCubeRenderTarget===!0,v=d.length>1;if(v||(m.__webglTexture===0[0]&&(m.__webglTexture=e.createTexture()),m.__version=o.version,a.memory.textures++),b){c.__webglFramebuffer=[];for(let t=0;t<6;t++)if(o.mipmaps&&o.mipmaps.length>0){c.__webglFramebuffer[t]=[];for(let n=0;n<o.mipmaps.length;n++)c.__webglFramebuffer[t][n]=e.createFramebuffer()}else c.__webglFramebuffer[t]=e.createFramebuffer()}else{if(o.mipmaps&&o.mipmaps.length>0){c.__webglFramebuffer=[];for(let t=0;t<o.mipmaps.length;t++)c.__webglFramebuffer[t]=e.createFramebuffer()}else c.__webglFramebuffer=e.createFramebuffer();if(v)for(let t=0,o=d.length;t<o;t++){const n=s.get(d[t]);n.__webglTexture===0[0]&&(n.__webglTexture=e.createTexture(),a.memory.textures++)}if(t.samples>0&&r(t)===!1){c.__webglMultisampledFramebuffer=e.createFramebuffer(),c.__webglColorRenderbuffer=[],n.bindFramebuffer(e.FRAMEBUFFER,c.__webglMultisampledFramebuffer);for(let n=0;n<d.length;n++){const s=d[n];c.__webglColorRenderbuffer[n]=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,c.__webglColorRenderbuffer[n]);const o=i.convert(s.format,s.colorSpace),a=i.convert(s.type),r=f(s.internalFormat,o,a,s.colorSpace,t.isXRRenderTarget===!0),l=p(t);e.renderbufferStorageMultisample(e.RENDERBUFFER,l,r,t.width,t.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+n,e.RENDERBUFFER,c.__webglColorRenderbuffer[n])}e.bindRenderbuffer(e.RENDERBUFFER,null),t.depthBuffer&&(c.__webglDepthRenderbuffer=e.createRenderbuffer(),C(c.__webglDepthRenderbuffer,t,!0)),n.bindFramebuffer(e.FRAMEBUFFER,null)}}if(b){n.bindTexture(e.TEXTURE_CUBE_MAP,m.__webglTexture),g(e.TEXTURE_CUBE_MAP,o);for(let n=0;n<6;n++)if(o.mipmaps&&o.mipmaps.length>0)for(let s=0;s<o.mipmaps.length;s++)l(c.__webglFramebuffer[n][s],t,o,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+n,s);else l(c.__webglFramebuffer[n],t,o,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+n,0);u(o)&&h(e.TEXTURE_CUBE_MAP),n.unbindTexture()}else if(v){for(let i=0,r=d.length;i<r;i++){const a=d[i],m=s.get(a);let o=e.TEXTURE_2D;(t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&(o=t.isWebGL3DRenderTarget?e.TEXTURE_3D:e.TEXTURE_2D_ARRAY),n.bindTexture(o,m.__webglTexture),g(o,a),l(c.__webglFramebuffer,t,a,e.COLOR_ATTACHMENT0+i,o,0),u(a)&&h(o)}n.unbindTexture()}else{let s=e.TEXTURE_2D;if((t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&(s=t.isWebGL3DRenderTarget?e.TEXTURE_3D:e.TEXTURE_2D_ARRAY),n.bindTexture(s,m.__webglTexture),g(s,o),o.mipmaps&&o.mipmaps.length>0)for(let n=0;n<o.mipmaps.length;n++)l(c.__webglFramebuffer[n],t,o,e.COLOR_ATTACHMENT0,s,n);else l(c.__webglFramebuffer,t,o,e.COLOR_ATTACHMENT0,s,0);u(o)&&h(s),n.unbindTexture()}t.depthBuffer&&x(t)}function oe(e){const t=e.textures;for(let o=0,a=t.length;o<a;o++){const i=t[o];if(u(i)){const t=Q(e),o=s.get(i).__webglTexture;n.bindTexture(t,o),h(t),n.unbindTexture()}}}const y=[],S=[];function ce(t){if(t.samples>0)if(r(t)===!1){const i=t.textures,c=t.width,l=t.height;let a=e.COLOR_BUFFER_BIT;const d=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,o=s.get(t),r=i.length>1;if(r)for(let t=0;t<i.length;t++)n.bindFramebuffer(e.FRAMEBUFFER,o.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,null),n.bindFramebuffer(e.FRAMEBUFFER,o.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,null,0);n.bindFramebuffer(e.READ_FRAMEBUFFER,o.__webglMultisampledFramebuffer);const u=t.texture.mipmaps;u&&u.length>0?n.bindFramebuffer(e.DRAW_FRAMEBUFFER,o.__webglFramebuffer[0]):n.bindFramebuffer(e.DRAW_FRAMEBUFFER,o.__webglFramebuffer);for(let n=0;n<i.length;n++){if(t.resolveDepthBuffer&&(t.depthBuffer&&(a|=e.DEPTH_BUFFER_BIT),t.stencilBuffer&&t.resolveStencilBuffer&&(a|=e.STENCIL_BUFFER_BIT)),r){e.framebufferRenderbuffer(e.READ_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.RENDERBUFFER,o.__webglColorRenderbuffer[n]);const t=s.get(i[n]).__webglTexture;e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)}e.blitFramebuffer(0,0,c,l,0,0,c,l,a,e.NEAREST),z===!0&&(y.length=0,S.length=0,y.push(e.COLOR_ATTACHMENT0+n),t.depthBuffer&&t.resolveDepthBuffer===!1&&(y.push(d),S.push(d),e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,S)),e.invalidateFramebuffer(e.READ_FRAMEBUFFER,y))}if(n.bindFramebuffer(e.READ_FRAMEBUFFER,null),n.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),r)for(let t=0;t<i.length;t++){n.bindFramebuffer(e.FRAMEBUFFER,o.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,o.__webglColorRenderbuffer[t]);const a=s.get(i[t]).__webglTexture;n.bindFramebuffer(e.FRAMEBUFFER,o.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,a,0)}n.bindFramebuffer(e.DRAW_FRAMEBUFFER,o.__webglMultisampledFramebuffer)}else if(t.depthBuffer&&t.resolveDepthBuffer===!1&&z){const n=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,[n])}}function p(e){return Math.min(o.maxSamples,e.samples)}function r(e){const n=s.get(e);return e.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===!0&&n.__useRenderToTexture!==!1}function ue(e){const t=a.render.frame;O.get(e)!==t&&(O.set(e,t),e.update())}function N(e,t){const n=e.colorSpace,s=e.format,o=e.type;return e.isCompressedTexture===!0||e.isVideoTexture===!0?t:(n!==Rs&&n!==$e&&(v.getTransfer(n)===c?(s!==G||o!==Y)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",n)),t)}function j(e){return typeof HTMLImageElement!="undefined"&&e instanceof HTMLImageElement?(d.width=e.naturalWidth||e.width,d.height=e.naturalHeight||e.height):typeof VideoFrame!="undefined"&&e instanceof VideoFrame?(d.width=e.displayWidth,d.height=e.displayHeight):(d.width=e.width,d.height=e.height),d}this.allocateTextureUnit=ae,this.resetTextureUnits=re,this.setTexture2D=D,this.setTexture2DArray=he,this.setTexture3D=de,this.setTextureCube=le,this.rebindTextures=ne,this.setupRenderTarget=se,this.updateRenderTargetMipmap=oe,this.updateMultisampleRenderTarget=ce,this.setupDepthRenderbuffer=x,this.setupFrameBufferTexture=l,this.useMultisampledRTT=r}function Mz(e,t){function n(n,s=$e){let o;const i=v.getTransfer(s);if(n===Y)return e.UNSIGNED_BYTE;if(n===Fc)return e.UNSIGNED_SHORT_4_4_4_4;if(n===Mc)return e.UNSIGNED_SHORT_5_5_5_1;if(n===Ac)return e.UNSIGNED_INT_5_9_9_9_REV;if(n===kc)return e.UNSIGNED_INT_10F_11F_11F_REV;if(n===Fs)return e.BYTE;if(n===Ns)return e.SHORT;if(n===St)return e.UNSIGNED_SHORT;if(n===ue)return e.INT;if(n===I)return e.UNSIGNED_INT;if(n===X)return e.FLOAT;if(n===ht)return e.HALF_FLOAT;if(n===Sd)return e.ALPHA;if(n===sr)return e.RGB;if(n===G)return e.RGBA;if(n===nt)return e.DEPTH_COMPONENT;if(n===tt)return e.DEPTH_STENCIL;if(n===or)return e.RED;if(n===Yo)return e.RED_INTEGER;if(n===ur)return e.RG;if(n===Go)return e.RG_INTEGER;if(n===Xo)return e.RGBA_INTEGER;if(n===Xn||n===Un||n===qn||n===Wn)if(i===c)if(o=t.get("WEBGL_compressed_texture_s3tc_srgb"),o!==null){{if(n===Xn)return o.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===Un)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===qn)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===Wn)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}}else return null;else if(o=t.get("WEBGL_compressed_texture_s3tc"),o!==null){{if(n===Xn)return o.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===Un)return o.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===qn)return o.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===Wn)return o.COMPRESSED_RGBA_S3TC_DXT5_EXT}}else return null;if(n===br||n===jr||n===_r||n===ia)if(o=t.get("WEBGL_compressed_texture_pvrtc"),o!==null){{if(n===br)return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===jr)return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===_r)return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===ia)return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}}else return null;if(n===ei||n===ti||n===oi)if(o=t.get("WEBGL_compressed_texture_etc"),o!==null){{if(n===ei||n===ti)return i===c?o.COMPRESSED_SRGB8_ETC2:o.COMPRESSED_RGB8_ETC2;if(n===oi)return i===c?o.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:o.COMPRESSED_RGBA8_ETC2_EAC}}else return null;if(n===ai||n===ri||n===ci||n===li||n===ui||n===hi||n===mi||n===fi||n===pi||n===gi||n===vi||n===bi||n===Oi||n===xi)if(o=t.get("WEBGL_compressed_texture_astc"),o!==null){{if(n===ai)return i===c?o.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:o.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===ri)return i===c?o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:o.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===ci)return i===c?o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:o.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===li)return i===c?o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:o.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===ui)return i===c?o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:o.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===hi)return i===c?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:o.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===mi)return i===c?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:o.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===fi)return i===c?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:o.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===pi)return i===c?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:o.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===gi)return i===c?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:o.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===vi)return i===c?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:o.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===bi)return i===c?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:o.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===Oi)return i===c?o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:o.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===xi)return i===c?o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:o.COMPRESSED_RGBA_ASTC_12x12_KHR}}else return null;if(n===Ci||n===zd||n===Dd)if(o=t.get("EXT_texture_compression_bptc"),o!==null){{if(n===Ci)return i===c?o.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:o.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===zd)return o.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===Dd)return o.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}}else return null;if(n===Ei||n===ki||n===Si||n===zi)if(o=t.get("EXT_texture_compression_rgtc"),o!==null){{if(n===Ei)return o.COMPRESSED_RED_RGTC1_EXT;if(n===ki)return o.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===Si)return o.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===zi)return o.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}}else return null;return n===dt?e.UNSIGNED_INT_24_8:e[n]!==0[0]?e[n]:null}return{convert:n}}Uj=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,Vj=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`,Bj=class{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(e,t){if(this.texture===null){const n=new D0(e.texture);(e.depthNear!==t.depthNear||e.depthFar!==t.depthFar)&&(this.depthNear=e.depthNear,this.depthFar=e.depthFar),this.texture=n}}getMesh(e){if(this.texture!==null&&this.mesh===null){const t=e.cameras[0].viewport,n=new us({vertexShader:Uj,fragmentShader:Vj,uniforms:{depthColor:{value:this.texture},depthWidth:{value:t.z},depthHeight:{value:t.w}}});this.mesh=new be(new U1(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}},Ij=class extends fs{constructor(e,n){super();const m=this;let s=null,M=1,b=null,B="local-floor",k=1,g=null,S=null,d=null,a=null,i=null,C=null;const _=typeof XRWebGLBinding!="undefined",h=new Bj,y={},l=n.getContextAttributes();let H=null,f=null;const r=[],u=[],E=new w;let T=null;const p=new Ee;p.viewport=new j;const v=new Ee;v.viewport=new j;const z=[p,v],o=new E0;let F=null,A=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(e){let t=r[e];return t===0[0]&&(t=new Wc,r[e]=t),t.getTargetRaySpace()},this.getControllerGrip=function(e){let t=r[e];return t===0[0]&&(t=new Wc,r[e]=t),t.getGripSpace()},this.getHand=function(e){let t=r[e];return t===0[0]&&(t=new Wc,r[e]=t),t.getHandSpace()};function c(e){const n=u.indexOf(e.inputSource);if(n===-1)return;const t=r[n];t!==0[0]&&(t.update(e.inputSource,e.frame,g||b),t.dispatchEvent({type:e.type,data:e.inputSource}))}function D(){s.removeEventListener("select",c),s.removeEventListener("selectstart",c),s.removeEventListener("selectend",c),s.removeEventListener("squeeze",c),s.removeEventListener("squeezestart",c),s.removeEventListener("squeezeend",c),s.removeEventListener("end",D),s.removeEventListener("inputsourceschange",N);for(let e=0;e<r.length;e++){const t=u[e];if(t===null)continue;u[e]=null,r[e].disconnect(t)}F=null,A=null,h.reset();for(const e in y)delete y[e];e.setRenderTarget(H),i=null,a=null,d=null,s=null,f=null,O.stop(),m.isPresenting=!1,e.setPixelRatio(T),e.setSize(E.width,E.height,!1),m.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(e){M=e,m.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(e){B=e,m.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return g||b},this.setReferenceSpace=function(e){g=e},this.getBaseLayer=function(){return a!==null?a:i},this.getBinding=function(){return d===null&&_&&(d=new XRWebGLBinding(s,n)),d},this.getFrame=function(){return C},this.getSession=function(){return s},this.setSession=async function(t){if(s=t,s!==null){H=e.getRenderTarget(),s.addEventListener("select",c),s.addEventListener("selectstart",c),s.addEventListener("selectend",c),s.addEventListener("squeeze",c),s.addEventListener("squeezestart",c),s.addEventListener("squeezeend",c),s.addEventListener("end",D),s.addEventListener("inputsourceschange",N),l.xrCompatible!==!0&&await n.makeXRCompatible(),T=e.getPixelRatio(),e.getSize(E);const t=_&&"createProjectionLayer"in XRWebGLBinding.prototype;if(t){let t=null,o=null,i=null;l.depth&&(i=l.stencil?n.DEPTH24_STENCIL8:n.DEPTH_COMPONENT24,t=l.stencil?tt:nt,o=l.stencil?dt:I);const r={colorFormat:n.RGBA8,depthFormat:i,scaleFactor:M};d=this.getBinding(),a=d.createProjectionLayer(r),s.updateRenderState({layers:[a]}),e.setPixelRatio(1),e.setSize(a.textureWidth,a.textureHeight,!1),f=new Ss(a.textureWidth,a.textureHeight,{format:G,type:Y,depthTexture:new At(a.textureWidth,a.textureHeight,o,0[0],0[0],0[0],0[0],0[0],0[0],t),stencilBuffer:l.stencil,colorSpace:e.outputColorSpace,samples:l.antialias?4:0,resolveDepthBuffer:a.ignoreDepthValues===!1,resolveStencilBuffer:a.ignoreDepthValues===!1})}else{const t={antialias:l.antialias,alpha:!0,depth:l.depth,stencil:l.stencil,framebufferScaleFactor:M};i=new XRWebGLLayer(s,n,t),s.updateRenderState({baseLayer:i}),e.setPixelRatio(1),e.setSize(i.framebufferWidth,i.framebufferHeight,!1),f=new Ss(i.framebufferWidth,i.framebufferHeight,{format:G,type:Y,colorSpace:e.outputColorSpace,stencilBuffer:l.stencil,resolveDepthBuffer:i.ignoreDepthValues===!1,resolveStencilBuffer:i.ignoreDepthValues===!1})}f.isXRRenderTarget=!0,this.setFoveation(k),g=null,b=await s.requestReferenceSpace(B),O.setContext(s),O.start(),m.isPresenting=!0,m.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(s!==null)return s.environmentBlendMode},this.getDepthTexture=function(){return h.getDepthTexture()};function N(e){for(let t=0;t<e.removed.length;t++){const s=e.removed[t],n=u.indexOf(s);n>=0&&(u[n]=null,r[n].disconnect(s))}for(let s=0;s<e.added.length;s++){const n=e.added[s];let t=u.indexOf(n);if(t===-1){for(let e=0;e<r.length;e++){if(e>=u.length){u.push(n),t=e;break}if(u[e]===null){u[e]=n,t=e;break}}if(t===-1)break}const o=r[t];o&&o.connect(n)}}const L=new t,R=new t;function V(e,t,n){L.setFromMatrixPosition(t.matrixWorld),R.setFromMatrixPosition(n.matrixWorld);const d=L.distanceTo(R),s=t.projectionMatrix.elements,l=n.projectionMatrix.elements,i=s[14]/(s[10]-1),a=s[14]/(s[10]+1),p=(s[9]+1)/s[5],h=(s[9]-1)/s[5],c=(s[8]-1)/s[0],u=(l[8]+1)/l[0],f=i*c,m=i*u,o=d/(-c+u),r=o*-c;if(t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(r),e.translateZ(o),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert(),s[10]===-1)e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse);else{const t=i+o,n=a+o,s=f-r,c=m+(d-r),l=p*a/n*t,u=h*a/n*t;e.projectionMatrix.makePerspective(s,c,l,u,t,n),e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}}function P(e,t){t===null?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}this.updateCamera=function(e){if(s===null)return;let i=e.near,a=e.far;h.texture!==null&&(h.depthNear>0&&(i=h.depthNear),h.depthFar>0&&(a=h.depthFar)),o.near=v.near=p.near=i,o.far=v.far=p.far=a,(F!==o.near||A!==o.far)&&(s.updateRenderState({depthNear:o.near,depthFar:o.far}),F=o.near,A=o.far),o.layers.mask=e.layers.mask|6,p.layers.mask=o.layers.mask&3,v.layers.mask=o.layers.mask&5;const t=e.parent,n=o.cameras;P(o,t);for(let e=0;e<n.length;e++)P(n[e],t);n.length===2?V(o,p,v):o.projectionMatrix.copy(p.projectionMatrix),$(e,o,t)};function $(e,t,n){n===null?e.matrix.copy(t.matrixWorld):(e.matrix.copy(n.matrixWorld),e.matrix.invert(),e.matrix.multiply(t.matrixWorld)),e.matrix.decompose(e.position,e.quaternion,e.scale),e.updateMatrixWorld(!0),e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse),e.isPerspectiveCamera&&(e.fov=Ii*2*Math.atan(1/e.projectionMatrix.elements[5]),e.zoom=1)}this.getCamera=function(){return o},this.getFoveation=function(){return a===null&&i===null?0[0]:k},this.setFoveation=function(e){k=e,a!==null&&(a.fixedFoveation=e),i!==null&&i.fixedFoveation!==0[0]&&(i.fixedFoveation=e)},this.hasDepthSensing=function(){return h.texture!==null},this.getDepthSensingMesh=function(){return h.getMesh(o)},this.getCameraTexture=function(e){return y[e]};let x=null;function W(t,n){if(S=n.getViewerPose(g||b),C=n,S!==null){const t=S.views;i!==null&&(e.setRenderTargetFramebuffer(f,i.framebuffer),e.setRenderTarget(f));let r=!1;t.length!==o.cameras.length&&(o.cameras.length=0,r=!0);for(let s=0;s<t.length;s++){const l=t[s];let c=null;if(i!==null)c=i.getViewport(l);else{const t=d.getViewSubImage(a,l);c=t.viewport,s===0&&(e.setRenderTargetTextures(f,t.colorTexture,t.depthStencilTexture),e.setRenderTarget(f))}let n=z[s];n===0[0]&&(n=new Ee,n.layers.enable(s),n.viewport=new j,z[s]=n),n.matrix.fromArray(l.transform.matrix),n.matrix.decompose(n.position,n.quaternion,n.scale),n.projectionMatrix.fromArray(l.projectionMatrix),n.projectionMatrixInverse.copy(n.projectionMatrix).invert(),n.viewport.set(c.x,c.y,c.width,c.height),s===0&&(o.matrix.copy(n.matrix),o.matrix.decompose(o.position,o.quaternion,o.scale)),r===!0&&o.cameras.push(n)}const n=s.enabledFeatures,c=n&&n.includes("depth-sensing")&&s.depthUsage=="gpu-optimized";if(c&&_){d=m.getBinding();const e=d.getDepthInformation(t[0]);e&&e.isValid&&e.texture&&h.init(e,s.renderState)}const l=n&&n.includes("camera-access");if(l&&_){e.state.unbindTexture(),d=m.getBinding();for(let n=0;n<t.length;n++){const e=t[n].camera;if(e){let t=y[e];t||(t=new D0,y[e]=t);const n=d.getCameraImage(e);t.sourceTexture=n}}}}for(let e=0;e<r.length;e++){const t=u[e],s=r[e];t!==null&&s!==0[0]&&s.update(t,n,g||b)}x&&x(t,n),n.detectedPlanes&&m.dispatchEvent({type:"planesdetected",data:n}),C=null}const O=new Lw;O.setAnimationLoop(W),this.setAnimationLoop=function(e){x=e},this.dispose=function(){}}},Ks=new Hn,Hj=new W;function Gz(e,t){function n(e,t){e.matrixAutoUpdate===!0&&e.updateMatrix(),t.value.copy(e.matrix)}function c(t,n){n.color.getRGB(t.fogColor.value,f_(e)),n.isFog?(t.fogNear.value=n.near,t.fogFar.value=n.far):n.isFogExp2&&(t.fogDensity.value=n.density)}function i(e,t,n,i,c){t.isMeshBasicMaterial?s(e,t):t.isMeshLambertMaterial?s(e,t):t.isMeshToonMaterial?(s(e,t),u(e,t)):t.isMeshPhongMaterial?(s(e,t),d(e,t)):t.isMeshStandardMaterial?(s(e,t),h(e,t),t.isMeshPhysicalMaterial&&m(e,t,c)):t.isMeshMatcapMaterial?(s(e,t),f(e,t)):t.isMeshDepthMaterial?s(e,t):t.isMeshDistanceMaterial?(s(e,t),p(e,t)):t.isMeshNormalMaterial?s(e,t):t.isLineBasicMaterial?(a(e,t),t.isLineDashedMaterial&&r(e,t)):t.isPointsMaterial?o(e,t,n,i):t.isSpriteMaterial?l(e,t):t.isShadowMaterial?(e.color.value.copy(t.color),e.opacity.value=t.opacity):t.isShaderMaterial&&(t.uniformsNeedUpdate=!1)}function s(e,s){e.opacity.value=s.opacity,s.color&&e.diffuse.value.copy(s.color),s.emissive&&e.emissive.value.copy(s.emissive).multiplyScalar(s.emissiveIntensity),s.map&&(e.map.value=s.map,n(s.map,e.mapTransform)),s.alphaMap&&(e.alphaMap.value=s.alphaMap,n(s.alphaMap,e.alphaMapTransform)),s.bumpMap&&(e.bumpMap.value=s.bumpMap,n(s.bumpMap,e.bumpMapTransform),e.bumpScale.value=s.bumpScale,s.side===B&&(e.bumpScale.value*=-1)),s.normalMap&&(e.normalMap.value=s.normalMap,n(s.normalMap,e.normalMapTransform),e.normalScale.value.copy(s.normalScale),s.side===B&&e.normalScale.value.negate()),s.displacementMap&&(e.displacementMap.value=s.displacementMap,n(s.displacementMap,e.displacementMapTransform),e.displacementScale.value=s.displacementScale,e.displacementBias.value=s.displacementBias),s.emissiveMap&&(e.emissiveMap.value=s.emissiveMap,n(s.emissiveMap,e.emissiveMapTransform)),s.specularMap&&(e.specularMap.value=s.specularMap,n(s.specularMap,e.specularMapTransform)),s.alphaTest>0&&(e.alphaTest.value=s.alphaTest);const i=t.get(s),o=i.envMap,a=i.envMapRotation;o&&(e.envMap.value=o,Ks.copy(a),Ks.x*=-1,Ks.y*=-1,Ks.z*=-1,o.isCubeTexture&&o.isRenderTargetTexture===!1&&(Ks.y*=-1,Ks.z*=-1),e.envMapRotation.value.setFromMatrix4(Hj.makeRotationFromEuler(Ks)),e.flipEnvMap.value=o.isCubeTexture&&o.isRenderTargetTexture===!1?-1:1,e.reflectivity.value=s.reflectivity,e.ior.value=s.ior,e.refractionRatio.value=s.refractionRatio),s.lightMap&&(e.lightMap.value=s.lightMap,e.lightMapIntensity.value=s.lightMapIntensity,n(s.lightMap,e.lightMapTransform)),s.aoMap&&(e.aoMap.value=s.aoMap,e.aoMapIntensity.value=s.aoMapIntensity,n(s.aoMap,e.aoMapTransform))}function a(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,t.map&&(e.map.value=t.map,n(t.map,e.mapTransform))}function r(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}function o(e,t,s,o){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.size.value=t.size*s,e.scale.value=o*.5,t.map&&(e.map.value=t.map,n(t.map,e.uvTransform)),t.alphaMap&&(e.alphaMap.value=t.alphaMap,n(t.alphaMap,e.alphaMapTransform)),t.alphaTest>0&&(e.alphaTest.value=t.alphaTest)}function l(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.rotation.value=t.rotation,t.map&&(e.map.value=t.map,n(t.map,e.mapTransform)),t.alphaMap&&(e.alphaMap.value=t.alphaMap,n(t.alphaMap,e.alphaMapTransform)),t.alphaTest>0&&(e.alphaTest.value=t.alphaTest)}function d(e,t){e.specular.value.copy(t.specular),e.shininess.value=Math.max(t.shininess,1e-4)}function u(e,t){t.gradientMap&&(e.gradientMap.value=t.gradientMap)}function h(e,t){e.metalness.value=t.metalness,t.metalnessMap&&(e.metalnessMap.value=t.metalnessMap,n(t.metalnessMap,e.metalnessMapTransform)),e.roughness.value=t.roughness,t.roughnessMap&&(e.roughnessMap.value=t.roughnessMap,n(t.roughnessMap,e.roughnessMapTransform)),t.envMap&&(e.envMapIntensity.value=t.envMapIntensity)}function m(e,t,s){e.ior.value=t.ior,t.sheen>0&&(e.sheenColor.value.copy(t.sheenColor).multiplyScalar(t.sheen),e.sheenRoughness.value=t.sheenRoughness,t.sheenColorMap&&(e.sheenColorMap.value=t.sheenColorMap,n(t.sheenColorMap,e.sheenColorMapTransform)),t.sheenRoughnessMap&&(e.sheenRoughnessMap.value=t.sheenRoughnessMap,n(t.sheenRoughnessMap,e.sheenRoughnessMapTransform))),t.clearcoat>0&&(e.clearcoat.value=t.clearcoat,e.clearcoatRoughness.value=t.clearcoatRoughness,t.clearcoatMap&&(e.clearcoatMap.value=t.clearcoatMap,n(t.clearcoatMap,e.clearcoatMapTransform)),t.clearcoatRoughnessMap&&(e.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap,n(t.clearcoatRoughnessMap,e.clearcoatRoughnessMapTransform)),t.clearcoatNormalMap&&(e.clearcoatNormalMap.value=t.clearcoatNormalMap,n(t.clearcoatNormalMap,e.clearcoatNormalMapTransform),e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale),t.side===B&&e.clearcoatNormalScale.value.negate())),t.dispersion>0&&(e.dispersion.value=t.dispersion),t.iridescence>0&&(e.iridescence.value=t.iridescence,e.iridescenceIOR.value=t.iridescenceIOR,e.iridescenceThicknessMinimum.value=t.iridescenceThicknessRange[0],e.iridescenceThicknessMaximum.value=t.iridescenceThicknessRange[1],t.iridescenceMap&&(e.iridescenceMap.value=t.iridescenceMap,n(t.iridescenceMap,e.iridescenceMapTransform)),t.iridescenceThicknessMap&&(e.iridescenceThicknessMap.value=t.iridescenceThicknessMap,n(t.iridescenceThicknessMap,e.iridescenceThicknessMapTransform))),t.transmission>0&&(e.transmission.value=t.transmission,e.transmissionSamplerMap.value=s.texture,e.transmissionSamplerSize.value.set(s.width,s.height),t.transmissionMap&&(e.transmissionMap.value=t.transmissionMap,n(t.transmissionMap,e.transmissionMapTransform)),e.thickness.value=t.thickness,t.thicknessMap&&(e.thicknessMap.value=t.thicknessMap,n(t.thicknessMap,e.thicknessMapTransform)),e.attenuationDistance.value=t.attenuationDistance,e.attenuationColor.value.copy(t.attenuationColor)),t.anisotropy>0&&(e.anisotropyVector.value.set(t.anisotropy*Math.cos(t.anisotropyRotation),t.anisotropy*Math.sin(t.anisotropyRotation)),t.anisotropyMap&&(e.anisotropyMap.value=t.anisotropyMap,n(t.anisotropyMap,e.anisotropyMapTransform))),e.specularIntensity.value=t.specularIntensity,e.specularColor.value.copy(t.specularColor),t.specularColorMap&&(e.specularColorMap.value=t.specularColorMap,n(t.specularColorMap,e.specularColorMapTransform)),t.specularIntensityMap&&(e.specularIntensityMap.value=t.specularIntensityMap,n(t.specularIntensityMap,e.specularIntensityMapTransform))}function f(e,t){t.matcap&&(e.matcap.value=t.matcap)}function p(e,n){const s=t.get(n).light;e.referencePosition.value.setFromMatrixPosition(s.matrixWorld),e.nearDistance.value=s.shadow.camera.near,e.farDistance.value=s.shadow.camera.far}return{refreshFogUniforms:c,refreshMaterialUniforms:i}}function Jz(e,t,n,s){let o={},a={},i=[];const g=e.getParameter(e.MAX_UNIFORM_BUFFER_BINDINGS);function p(e,t){const n=t.program;s.uniformBlockBinding(e,n)}function d(e,n){let i=o[e.id];i===0[0]&&(f(e),i=l(e),o[e.id]=i,e.addEventListener("dispose",r));const d=n.program;s.updateUBOMapping(e,d);const c=t.render.frame;a[e.id]!==c&&(h(e),a[e.id]=c)}function l(t){const s=u();t.__bindingPointIndex=s;const n=e.createBuffer(),o=t.__size,i=t.usage;return e.bindBuffer(e.UNIFORM_BUFFER,n),e.bufferData(e.UNIFORM_BUFFER,o,i),e.bindBuffer(e.UNIFORM_BUFFER,null),e.bindBufferBase(e.UNIFORM_BUFFER,s,n),n}function u(){for(let e=0;e<g;e++)if(i.indexOf(e)===-1)return i.push(e),e;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function h(t){const s=o[t.id],n=t.uniforms,i=t.__cache;e.bindBuffer(e.UNIFORM_BUFFER,s);for(let t=0,o=n.length;t<o;t++){const s=Array.isArray(n[t])?n[t]:[n[t]];for(let o=0,a=s.length;o<a;o++){const n=s[o];if(m(n,t,o,i)===!0){const s=n.__offset,o=Array.isArray(n.value)?n.value:[n.value];let t=0;for(let a=0;a<o.length;a++){const i=o[a],r=c(i);typeof i=="number"||typeof i=="boolean"?(n.__data[0]=i,e.bufferSubData(e.UNIFORM_BUFFER,s+t,n.__data)):i.isMatrix3?(n.__data[0]=i.elements[0],n.__data[1]=i.elements[1],n.__data[2]=i.elements[2],n.__data[3]=0,n.__data[4]=i.elements[3],n.__data[5]=i.elements[4],n.__data[6]=i.elements[5],n.__data[7]=0,n.__data[8]=i.elements[6],n.__data[9]=i.elements[7],n.__data[10]=i.elements[8],n.__data[11]=0):(i.toArray(n.__data,t),t+=r.storage/Float32Array.BYTES_PER_ELEMENT)}e.bufferSubData(e.UNIFORM_BUFFER,s,n.__data)}}}e.bindBuffer(e.UNIFORM_BUFFER,null)}function m(e,t,n,s){const o=e.value,i=t+"_"+n;if(s[i]===0[0])return typeof o=="number"||typeof o=="boolean"?s[i]=o:s[i]=o.clone(),!0;const a=s[i];if(typeof o=="number"||typeof o=="boolean"){if(a!==o)return s[i]=o,!0}else if(a.equals(o)===!1)return a.copy(o),!0;return!1}function f(e){const s=e.uniforms;let t=0;const n=16;for(let e=0,i=s.length;e<i;e++){const o=Array.isArray(s[e])?s[e]:[s[e]];for(let s=0,a=o.length;s<a;s++){const e=o[s],i=Array.isArray(e.value)?e.value:[e.value];for(let o=0,d=i.length;o<d;o++){const u=i[o],s=c(u),r=t%n,l=r%s.boundary,a=r+l;t+=l,a!==0&&n-a<s.storage&&(t+=n-a),e.__data=new Float32Array(s.storage/Float32Array.BYTES_PER_ELEMENT),e.__offset=t,t+=s.storage}}}const o=t%n;return o>0&&(t+=n-o),e.__size=t,e.__cache={},this}function c(e){const t={boundary:0,storage:0};return typeof e=="number"||typeof e=="boolean"?(t.boundary=4,t.storage=4):e.isVector2?(t.boundary=8,t.storage=8):e.isVector3||e.isColor?(t.boundary=16,t.storage=12):e.isVector4?(t.boundary=16,t.storage=16):e.isMatrix3?(t.boundary=48,t.storage=48):e.isMatrix4?(t.boundary=64,t.storage=64):e.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",e),t}function r(t){const n=t.target;n.removeEventListener("dispose",r);const s=i.indexOf(n.__bindingPointIndex);i.splice(s,1),e.deleteBuffer(o[n.id]),delete o[n.id],delete a[n.id]}function v(){for(const t in o)e.deleteBuffer(o[t]);i=[],o={},a={}}return{bind:p,update:d,dispose:v}}Nj=class{constructor(e={}){const{canvas:d=my(),context:te=null,depth:qe=!0,stencil:Ee=!1,alpha:Xe=!1,antialias:Ve=!1,premultipliedAlpha:ge=!0,preserveDrawingBuffer:$e=!1,powerPreference:Ye="default",failIfMajorPerformanceCaveat:Ze=!1,reversedDepthBuffer:Ge=!1}=e;this.isWebGLRenderer=!0;let re;if(te!==null){if(typeof WebGLRenderingContext!="undefined"&&te instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");re=te.getContextAttributes().alpha}else re=Xe;const $=new Uint32Array(4),P=new Int32Array(4);let h=null,a=null;const N=[],O=[];this.domElement=d,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.toneMapping=Ke,this.toneMappingExposure=1,this.transmissionResolutionScale=1;const s=this;let ie=!1;this._outputColorSpace=lt;let ce=0,G=0,c=null,V=-1,F=null;const M=new j,ee=new j;let fe=null;const ye=new T(0);let pe=0,C=d.width,x=d.height,m=1,_e=null,ke=null;const U=new j(0,0,C,x),K=new j(0,0,C,x);let he=!1;const ue=new Ml;let A=!1,de=!1;const X=new W,Ue=new t,k=new j,se={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let H=!1;function Ne(){return c===null?m:1}let n=te;function He(e,t){return d.getContext(e,t)}try{const e={alpha:!0,depth:qe,stencil:Ee,antialias:Ve,premultipliedAlpha:ge,preserveDrawingBuffer:$e,powerPreference:Ye,failIfMajorPerformanceCaveat:Ze};if("setAttribute"in d&&d.setAttribute("data-engine",`three.js r${ba}`),d.addEventListener("webglcontextlost",Me,!1),d.addEventListener("webglcontextrestored",Te,!1),d.addEventListener("webglcontextcreationerror",ze,!1),n===null){const t="webgl2";if(n=He(t,e),n===null)throw He(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(e){throw console.error("THREE.WebGLRenderer: "+e.message),e}let l,f,o,b,i,r,z,R,L,me,D,_,ae,ne,Q,p,y,g,we,Oe,xe,w,S,Z;function Ae(){l=new CM(n),l.init(),w=new Mz(n,l),f=new jM(n,l,e,w),o=new kz(n,l),f.reversedDepthBuffer&&Ge&&o.buffers.depth.setReversed(!0),b=new AM(n),i=new nz,r=new Sz(n,l,o,i,f,w,b),z=new _M(s),R=new xM(s),L=new TF(n),S=new vM(n,L),me=new EM(n,L,b,S),D=new MM(n,me,L,b),we=new SM(n,f,r),p=new yM(i),_=new tz(s,z,R,l,f,S,p),ae=new Gz(s,i),ne=new oz,Q=new jz(l),g=new gM(s,z,R,o,D,re,ge),y=new Cz(s,D,f),Z=new Jz(n,b,f,o),Oe=new bM(n,l,b),xe=new kM(n,l,b),b.programs=_.programs,s.capabilities=f,s.extensions=l,s.properties=i,s.renderLists=ne,s.shadowMap=y,s.state=o,s.info=b}Ae();const u=new Ij(s,n);this.xr=u,this.getContext=function(){return n},this.getContextAttributes=function(){return n.getContextAttributes()},this.forceContextLoss=function(){const e=l.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){const e=l.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return m},this.setPixelRatio=function(e){if(e===0[0])return;m=e,this.setSize(C,x,!1)},this.getSize=function(e){return e.set(C,x)},this.setSize=function(e,t,n=!0){if(u.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}C=e,x=t,d.width=Math.floor(e*m),d.height=Math.floor(t*m),n===!0&&(d.style.width=e+"px",d.style.height=t+"px"),this.setViewport(0,0,e,t)},this.getDrawingBufferSize=function(e){return e.set(C*m,x*m).floor()},this.setDrawingBufferSize=function(e,t,n){C=e,x=t,m=n,d.width=Math.floor(e*n),d.height=Math.floor(t*n),this.setViewport(0,0,e,t)},this.getCurrentViewport=function(e){return e.copy(M)},this.getViewport=function(e){return e.copy(U)},this.setViewport=function(e,t,n,s){e.isVector4?U.set(e.x,e.y,e.z,e.w):U.set(e,t,n,s),o.viewport(M.copy(U).multiplyScalar(m).round())},this.getScissor=function(e){return e.copy(K)},this.setScissor=function(e,t,n,s){e.isVector4?K.set(e.x,e.y,e.z,e.w):K.set(e,t,n,s),o.scissor(ee.copy(K).multiplyScalar(m).round())},this.getScissorTest=function(){return he},this.setScissorTest=function(e){o.setScissorTest(he=e)},this.setOpaqueSort=function(e){_e=e},this.setTransparentSort=function(e){ke=e},this.getClearColor=function(e){return e.copy(g.getClearColor())},this.setClearColor=function(){g.setClearColor(...arguments)},this.getClearAlpha=function(){return g.getClearAlpha()},this.setClearAlpha=function(){g.setClearAlpha(...arguments)},this.clear=function(e=!0,t=!0,s=!0){let o=0;if(e){let e=!1;if(c!==null){const t=c.texture.format;e=t===Xo||t===Go||t===Yo}if(e){const e=c.texture.type,r=e===Y||e===I||e===St||e===dt||e===Fc||e===Mc,t=g.getClearColor(),s=g.getClearAlpha(),o=t.r,i=t.g,a=t.b;r?($[0]=o,$[1]=i,$[2]=a,$[3]=s,n.clearBufferuiv(n.COLOR,0,$)):(P[0]=o,P[1]=i,P[2]=a,P[3]=s,n.clearBufferiv(n.COLOR,0,P))}else o|=n.COLOR_BUFFER_BIT}t&&(o|=n.DEPTH_BUFFER_BIT),s&&(o|=n.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),n.clear(o)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){d.removeEventListener("webglcontextlost",Me,!1),d.removeEventListener("webglcontextrestored",Te,!1),d.removeEventListener("webglcontextcreationerror",ze,!1),g.dispose(),ne.dispose(),Q.dispose(),i.dispose(),z.dispose(),R.dispose(),D.dispose(),S.dispose(),Z.dispose(),_.dispose(),u.dispose(),u.removeEventListener("sessionstart",Ie),u.removeEventListener("sessionend",Le),E.stop()};function Me(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),ie=!0}function Te(){console.log("THREE.WebGLRenderer: Context Restored."),ie=!1;const e=b.autoReset,t=y.enabled,n=y.autoUpdate,s=y.needsUpdate,o=y.type;Ae(),b.autoReset=e,y.enabled=t,y.autoUpdate=n,y.needsUpdate=s,y.type=o}function ze(e){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",e.statusMessage)}function De(e){const t=e.target;t.removeEventListener("dispose",De),We(t)}function We(e){Qe(e),i.remove(e)}function Qe(e){const t=i.get(e).programs;t!==0[0]&&(t.forEach(function(e){_.releaseProgram(e)}),e.isShaderMaterial&&_.releaseShaderCache(e))}this.renderBufferDirect=function(e,t,s,a,r,c){t===null&&(t=se);const j=r.isMesh&&r.matrixWorld.determinant()<0,y=et(e,t,s,a,r);o.setMaterial(a,j);let h=s.index,f=1;if(a.wireframe===!0){if(h=me.getWireframeAttribute(s),h===0[0])return;f=2}const g=s.drawRange,v=s.attributes.position;let u=g.start*f,m=(g.start+g.count)*f;c!==null&&(u=Math.max(u,c.start*f),m=Math.min(m,(c.start+c.count)*f)),h!==null?(u=Math.max(u,0),m=Math.min(m,h.count)):v!=null&&(u=Math.max(u,0),m=Math.min(m,v.count));const p=m-u;if(p<0||p===1/0)return;S.setup(r,a,y,s,h);let b,d=Oe;if(h!==null&&(b=L.get(h),d=xe,d.setIndex(b)),r.isMesh)a.wireframe===!0?(o.setLineWidth(a.wireframeLinewidth*Ne()),d.setMode(n.LINES)):d.setMode(n.TRIANGLES);else if(r.isLine){let e=a.linewidth;e===0[0]&&(e=1),o.setLineWidth(e*Ne()),r.isLineSegments?d.setMode(n.LINES):r.isLineLoop?d.setMode(n.LINE_LOOP):d.setMode(n.LINE_STRIP)}else r.isPoints?d.setMode(n.POINTS):r.isSprite&&d.setMode(n.TRIANGLES);if(r.isBatchedMesh)if(r._multiDrawInstances!==null)gt("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),d.renderMultiDrawInstances(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount,r._multiDrawInstances);else if(l.get("WEBGL_multi_draw"))d.renderMultiDraw(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount);else{const e=r._multiDrawStarts,t=r._multiDrawCounts,s=r._multiDrawCount,o=h?L.get(h).bytesPerElement:1,c=i.get(a).currentProgram.getUniforms();for(let i=0;i<s;i++)c.setValue(n,"_gl_DrawID",i),d.render(e[i]/o,t[i])}else if(r.isInstancedMesh)d.renderInstances(u,p,r.count);else if(s.isInstancedBufferGeometry){const e=s._maxInstanceCount!==0[0]?s._maxInstanceCount:1/0,t=Math.min(s.instanceCount,e);d.renderInstances(u,p,t)}else d.render(u,p)};function Pe(e,t,n){e.transparent===!0&&e.side===Fe&&e.forceSinglePass===!1?(e.side=B,e.needsUpdate=!0,q(e,t,n),e.side=ot,e.needsUpdate=!0,q(e,t,n),e.side=Fe):q(e,t,n)}this.compile=function(e,t,n=null){n===null&&(n=e),a=Q.get(n),a.init(t),O.push(a),n.traverseVisible(function(e){e.isLight&&e.layers.test(t.layers)&&(a.pushLight(e),e.castShadow&&a.pushShadow(e))}),e!==n&&e.traverseVisible(function(e){e.isLight&&e.layers.test(t.layers)&&(a.pushLight(e),e.castShadow&&a.pushShadow(e))}),a.setupLights();const s=new Set;return e.traverse(function(e){if(!(e.isMesh||e.isPoints||e.isLine||e.isSprite))return;const t=e.material;if(t)if(Array.isArray(t))for(let o=0;o<t.length;o++){const i=t[o];Pe(i,n,e),s.add(i)}else Pe(t,n,e),s.add(t)}),a=O.pop(),s},this.compileAsync=function(e,t,n=null){const s=this.compile(e,t,n);return new Promise(t=>{function n(){if(s.forEach(function(e){const t=i.get(e),n=t.currentProgram;n.isReady()&&s.delete(e)}),s.size===0){t(e);return}setTimeout(n,10)}l.get("KHR_parallel_shader_compile")!==null?n():setTimeout(n,10)})};let oe=null;function Je(e){oe&&oe(e)}function Ie(){E.stop()}function Le(){E.start()}const E=new Lw;E.setAnimationLoop(Je),typeof self!="undefined"&&E.setContext(self),this.setAnimationLoop=function(e){oe=e,u.setAnimationLoop(e),e===null?E.stop():E.start()},u.addEventListener("sessionstart",Ie),u.addEventListener("sessionend",Le),this.render=function(e,t){if(t!==0[0]&&t.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(ie===!0)return;if(e.matrixWorldAutoUpdate===!0&&e.updateMatrixWorld(),t.parent===null&&t.matrixWorldAutoUpdate===!0&&t.updateMatrixWorld(),u.enabled===!0&&u.isPresenting===!0&&(u.cameraAutoUpdate===!0&&u.updateCamera(t),t=u.getCamera()),e.isScene===!0&&e.onBeforeRender(s,e,t,c),a=Q.get(e,O.length),a.init(t),O.push(a),X.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),ue.setFromProjectionMatrix(X,Re,t.reversedDepth),de=this.localClippingEnabled,A=p.init(this.clippingPlanes,de),h=ne.get(e,N.length),h.init(),N.push(h),u.enabled===!0&&u.isPresenting===!0){const e=s.xr.getDepthSensingMesh();e!==null&&le(e,t,-(1/0),s.sortObjects)}le(e,t,0,s.sortObjects),h.finish(),s.sortObjects===!0&&h.sort(_e,ke),H=u.enabled===!1||u.isPresenting===!1||u.hasDepthSensing()===!1,H&&g.addToRenderList(h,e),this.info.render.frame++,A===!0&&p.beginShadows();const i=a.state.shadowsArray;y.render(i,e,t),A===!0&&p.endShadows(),this.info.autoReset===!0&&this.info.reset();const o=h.opaque,n=h.transmissive;if(a.setupLights(),t.isArrayCamera){const s=t.cameras;if(n.length>0)for(let t=0,i=s.length;t<i;t++){const a=s[t];ve(o,n,e,a)}H&&g.render(e);for(let t=0,o=s.length;t<o;t++){const n=s[t];Se(h,e,n,n.viewport)}}else n.length>0&&ve(o,n,e,t),H&&g.render(e),Se(h,e,t);c!==null&&G===0&&(r.updateMultisampleRenderTarget(c),r.updateRenderTargetMipmap(c)),e.isScene===!0&&e.onAfterRender(s,e,t),S.resetDefaultState(),V=-1,F=null,O.pop(),O.length>0?(a=O[O.length-1],A===!0&&p.setGlobalState(s.clippingPlanes,a.state.camera)):a=null,N.pop(),N.length>0?h=N[N.length-1]:h=null};function le(e,t,n,s){if(e.visible===!1)return;const i=e.layers.test(t.layers);if(i)if(e.isGroup)n=e.renderOrder;else if(e.isLOD)e.autoUpdate===!0&&e.update(t);else if(e.isLight)a.pushLight(e),e.castShadow&&a.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||ue.intersectsSprite(e)){s&&k.setFromMatrixPosition(e.matrixWorld).applyMatrix4(X);const o=D.update(e),t=e.material;t.visible&&h.push(e,o,t,n,k.z,null)}}else if((e.isMesh||e.isLine||e.isPoints)&&(!e.frustumCulled||ue.intersectsObject(e))){const t=D.update(e),o=e.material;if(s&&(e.boundingSphere!==0[0]?(e.boundingSphere===null&&e.computeBoundingSphere(),k.copy(e.boundingSphere.center)):(t.boundingSphere===null&&t.computeBoundingSphere(),k.copy(t.boundingSphere.center)),k.applyMatrix4(e.matrixWorld).applyMatrix4(X)),Array.isArray(o)){const s=t.groups;for(let i=0,c=s.length;i<c;i++){const r=s[i],a=o[r.materialIndex];a&&a.visible&&h.push(e,t,a,n,k.z,r)}}else o.visible&&h.push(e,t,o,n,k.z,null)}const o=e.children;for(let e=0,i=o.length;e<i;e++)le(o[e],t,n,s)}function Se(e,t,n,i){const r=e.opaque,c=e.transmissive,l=e.transparent;a.setupLightsView(n),A===!0&&p.setGlobalState(s.clippingPlanes,n),i&&o.viewport(M.copy(i)),r.length>0&&J(r,t,n),c.length>0&&J(c,t,n),l.length>0&&J(l,t,n),o.buffers.depth.setTest(!0),o.buffers.depth.setMask(!0),o.buffers.color.setMask(!0),o.setPolygonOffset(!1)}function ve(e,t,n,o){const u=n.isScene===!0?n.overrideMaterial:null;if(u!==null)return;a.state.transmissionRenderTarget[o.id]===0[0]&&(a.state.transmissionRenderTarget[o.id]=new Ss(1,1,{generateMipmaps:!0,type:l.has("EXT_color_buffer_half_float")||l.has("EXT_color_buffer_float")?ht:Y,minFilter:Be,samples:4,stencilBuffer:Ee,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:v.workingColorSpace}));const i=a.state.transmissionRenderTarget[o.id],c=o.viewport||M;i.setSize(c.z*s.transmissionResolutionScale,c.w*s.transmissionResolutionScale);const h=s.getRenderTarget(),m=s.getActiveCubeFace(),f=s.getActiveMipmapLevel();s.setRenderTarget(i),s.getClearColor(ye),pe=s.getClearAlpha(),pe<1&&s.setClearColor(16777215,.5),s.clear(),H&&g.render(n);const b=s.toneMapping;s.toneMapping=Ke;const d=o.viewport;if(o.viewport!==0[0]&&(o.viewport=0[0]),a.setupLightsView(o),A===!0&&p.setGlobalState(s.clippingPlanes,o),J(e,n,o),r.updateMultisampleRenderTarget(i),r.updateRenderTargetMipmap(i),l.has("WEBGL_multisampled_render_to_texture")===!1){let e=!1;for(let a=0,c=t.length;a<c;a++){const i=t[a],r=i.object,l=i.geometry,s=i.material,d=i.group;if(s.side===Fe&&r.layers.test(o.layers)){const t=s.side;s.side=B,s.needsUpdate=!0,Ce(r,n,o,l,s,d),s.side=t,s.needsUpdate=!0,e=!0}}e===!0&&(r.updateMultisampleRenderTarget(i),r.updateRenderTargetMipmap(i))}s.setRenderTarget(h,m,f),s.setClearColor(ye,pe),d!==0[0]&&(o.viewport=d),s.toneMapping=b}function J(e,t,n){const s=t.isScene===!0?t.overrideMaterial:null;for(let i=0,c=e.length;i<c;i++){const o=e[i],r=o.object,l=o.geometry,d=o.group;let a=o.material;a.allowOverride===!0&&s!==null&&(a=s),r.layers.test(n.layers)&&Ce(r,t,n,l,a,d)}}function Ce(e,t,n,o,i,a){e.onBeforeRender(s,t,n,o,i,a),e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),i.onBeforeRender(s,t,n,o,e,a),i.transparent===!0&&i.side===Fe&&i.forceSinglePass===!1?(i.side=B,i.needsUpdate=!0,s.renderBufferDirect(n,t,o,i,e,a),i.side=ot,i.needsUpdate=!0,s.renderBufferDirect(n,t,o,i,e,a),i.side=Fe):s.renderBufferDirect(n,t,o,i,e,a),e.onAfterRender(s,t,n,o,i,a)}function q(e,t,n){t.isScene!==!0&&(t=se);const c=i.get(e),o=a.state.lights,f=a.state.shadowsArray,m=o.state.version,l=_.getParameters(e,o.state,f,t,n),h=_.getProgramCacheKey(l);let u=c.programs;c.environment=e.isMeshStandardMaterial?t.environment:null,c.fog=t.fog,c.envMap=(e.isMeshStandardMaterial?R:z).get(e.envMap||c.environment),c.envMapRotation=c.environment!==null&&e.envMap===null?t.environmentRotation:e.envMapRotation,u===0[0]&&(e.addEventListener("dispose",De),u=new Map,c.programs=u);let d=u.get(h);if(d!==0[0]){if(c.currentProgram===d&&c.lightsStateVersion===m)return be(e,l),d}else l.uniforms=_.getUniforms(e),e.onBeforeCompile(l,s),d=_.acquireProgram(l,h),u.set(h,d),c.uniforms=l.uniforms;const r=c.uniforms;return(!e.isShaderMaterial&&!e.isRawShaderMaterial||e.clipping===!0)&&(r.clippingPlanes=p.uniform),be(e,l),c.needsLights=nt(e),c.lightsStateVersion=m,c.needsLights&&(r.ambientLightColor.value=o.state.ambient,r.lightProbe.value=o.state.probe,r.directionalLights.value=o.state.directional,r.directionalLightShadows.value=o.state.directionalShadow,r.spotLights.value=o.state.spot,r.spotLightShadows.value=o.state.spotShadow,r.rectAreaLights.value=o.state.rectArea,r.ltc_1.value=o.state.rectAreaLTC1,r.ltc_2.value=o.state.rectAreaLTC2,r.pointLights.value=o.state.point,r.pointLightShadows.value=o.state.pointShadow,r.hemisphereLights.value=o.state.hemi,r.directionalShadowMap.value=o.state.directionalShadowMap,r.directionalShadowMatrix.value=o.state.directionalShadowMatrix,r.spotShadowMap.value=o.state.spotShadowMap,r.spotLightMatrix.value=o.state.spotLightMatrix,r.spotLightMap.value=o.state.spotLightMap,r.pointShadowMap.value=o.state.pointShadowMap,r.pointShadowMatrix.value=o.state.pointShadowMatrix),c.currentProgram=d,c.uniformsList=null,d}function je(e){if(e.uniformsList===null){const t=e.currentProgram.getUniforms();e.uniformsList=ml.seqWithValue(t.seq,e.uniforms)}return e.uniformsList}function be(e,t){const n=i.get(e);n.outputColorSpace=t.outputColorSpace,n.batching=t.batching,n.batchingColor=t.batchingColor,n.instancing=t.instancing,n.instancingColor=t.instancingColor,n.instancingMorph=t.instancingMorph,n.skinning=t.skinning,n.morphTargets=t.morphTargets,n.morphNormals=t.morphNormals,n.morphColors=t.morphColors,n.morphTargetsCount=t.morphTargetsCount,n.numClippingPlanes=t.numClippingPlanes,n.numIntersection=t.numClipIntersection,n.vertexAlphas=t.vertexAlphas,n.vertexTangents=t.vertexTangents,n.toneMapping=t.toneMapping}function et(e,t,l,d,u){t.isScene!==!0&&(t=se),r.resetTextureUnits();const w=t.fog,B=d.isMeshStandardMaterial?t.environment:null,I=c===null?s.outputColorSpace:c.isXRRenderTarget===!0?c.texture.colorSpace:Rs,_=(d.isMeshStandardMaterial?R:z).get(d.envMap||B),H=d.vertexColors===!0&&!!l.attributes.color&&l.attributes.color.itemSize===4,P=!!l.attributes.tangent&&(!!d.normalMap||d.anisotropy>0),L=!!l.morphAttributes.position,N=!!l.morphAttributes.normal,D=!!l.morphAttributes.color;let k=Ke;d.toneMapped&&(c===null||c.isXRRenderTarget===!0)&&(k=s.toneMapping);const E=l.morphAttributes.position||l.morphAttributes.normal||l.morphAttributes.color,M=E!==0[0]?E.length:0,h=i.get(d),T=a.state.lights;if(A===!0&&(de===!0||e!==F)){const t=e===F&&d.id===V;p.setState(d,e,t)}let g=!1;d.version===h.__version?h.needsLights&&h.lightsStateVersion!==T.state.version?g=!0:h.outputColorSpace!==I?g=!0:u.isBatchedMesh&&h.batching===!1?g=!0:!u.isBatchedMesh&&h.batching===!0?g=!0:u.isBatchedMesh&&h.batchingColor===!0&&u.colorTexture===null?g=!0:u.isBatchedMesh&&h.batchingColor===!1&&u.colorTexture!==null?g=!0:u.isInstancedMesh&&h.instancing===!1?g=!0:!u.isInstancedMesh&&h.instancing===!0?g=!0:u.isSkinnedMesh&&h.skinning===!1?g=!0:!u.isSkinnedMesh&&h.skinning===!0?g=!0:u.isInstancedMesh&&h.instancingColor===!0&&u.instanceColor===null?g=!0:u.isInstancedMesh&&h.instancingColor===!1&&u.instanceColor!==null?g=!0:u.isInstancedMesh&&h.instancingMorph===!0&&u.morphTexture===null?g=!0:u.isInstancedMesh&&h.instancingMorph===!1&&u.morphTexture!==null?g=!0:h.envMap!==_?g=!0:d.fog===!0&&h.fog!==w?g=!0:h.numClippingPlanes!==0[0]&&(h.numClippingPlanes!==p.numPlanes||h.numIntersection!==p.numIntersection)?g=!0:h.vertexAlphas!==H?g=!0:h.vertexTangents!==P?g=!0:h.morphTargets!==L?g=!0:h.morphNormals!==N?g=!0:h.morphColors!==D?g=!0:h.toneMapping!==k?g=!0:h.morphTargetsCount!==M&&(g=!0):(g=!0,h.__version=d.version);let j=h.currentProgram;g===!0&&(j=q(d,t,u));let S=!1,y=!1,C=!1;const v=j.getUniforms(),b=h.uniforms;if(o.useProgram(j.program)&&(S=!0,y=!0,C=!0),d.id!==V&&(V=d.id,y=!0),S||F!==e){const s=o.buffers.depth.getReversed();s&&e.reversedDepth!==!0&&(e._reversedDepth=!0,e.updateProjectionMatrix()),v.setValue(n,"projectionMatrix",e.projectionMatrix),v.setValue(n,"viewMatrix",e.matrixWorldInverse);const t=v.map.cameraPosition;t!==0[0]&&t.setValue(n,Ue.setFromMatrixPosition(e.matrixWorld)),f.logarithmicDepthBuffer&&v.setValue(n,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),(d.isMeshPhongMaterial||d.isMeshToonMaterial||d.isMeshLambertMaterial||d.isMeshBasicMaterial||d.isMeshStandardMaterial||d.isShaderMaterial)&&v.setValue(n,"isOrthographic",e.isOrthographicCamera===!0),F!==e&&(F=e,y=!0,C=!0)}if(u.isSkinnedMesh){v.setOptional(n,u,"bindMatrix"),v.setOptional(n,u,"bindMatrixInverse");const e=u.skeleton;e&&(e.boneTexture===null&&e.computeBoneTexture(),v.setValue(n,"boneTexture",e.boneTexture,r))}u.isBatchedMesh&&(v.setOptional(n,u,"batchingTexture"),v.setValue(n,"batchingTexture",u._matricesTexture,r),v.setOptional(n,u,"batchingIdTexture"),v.setValue(n,"batchingIdTexture",u._indirectTexture,r),v.setOptional(n,u,"batchingColorTexture"),u._colorsTexture!==null&&v.setValue(n,"batchingColorTexture",u._colorsTexture,r));const O=l.morphAttributes;if((O.position!==0[0]||O.normal!==0[0]||O.color!==0[0])&&we.update(u,l,j),(y||h.receiveShadow!==u.receiveShadow)&&(h.receiveShadow=u.receiveShadow,v.setValue(n,"receiveShadow",u.receiveShadow)),d.isMeshGouraudMaterial&&d.envMap!==null&&(b.envMap.value=_,b.flipEnvMap.value=_.isCubeTexture&&_.isRenderTargetTexture===!1?-1:1),d.isMeshStandardMaterial&&d.envMap===null&&t.environment!==null&&(b.envMapIntensity.value=t.environmentIntensity),y&&(v.setValue(n,"toneMappingExposure",s.toneMappingExposure),h.needsLights&&tt(b,C),w&&d.fog===!0&&ae.refreshFogUniforms(b,w),ae.refreshMaterialUniforms(b,d,m,x,a.state.transmissionRenderTarget[e.id]),ml.upload(n,je(h),b,r)),d.isShaderMaterial&&d.uniformsNeedUpdate===!0&&(ml.upload(n,je(h),b,r),d.uniformsNeedUpdate=!1),d.isSpriteMaterial&&v.setValue(n,"center",u.center),v.setValue(n,"modelViewMatrix",u.modelViewMatrix),v.setValue(n,"normalMatrix",u.normalMatrix),v.setValue(n,"modelMatrix",u.matrixWorld),d.isShaderMaterial||d.isRawShaderMaterial){const e=d.uniformsGroups;for(let t=0,s=e.length;t<s;t++){const n=e[t];Z.update(n,j),Z.bind(n,j)}}return j}function tt(e,t){e.ambientLightColor.needsUpdate=t,e.lightProbe.needsUpdate=t,e.directionalLights.needsUpdate=t,e.directionalLightShadows.needsUpdate=t,e.pointLights.needsUpdate=t,e.pointLightShadows.needsUpdate=t,e.spotLights.needsUpdate=t,e.spotLightShadows.needsUpdate=t,e.rectAreaLights.needsUpdate=t,e.hemisphereLights.needsUpdate=t}function nt(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&e.lights===!0}this.getActiveCubeFace=function(){return ce},this.getActiveMipmapLevel=function(){return G},this.getRenderTarget=function(){return c},this.setRenderTargetTextures=function(e,t,n){const s=i.get(e);s.__autoAllocateDepthBuffer=e.resolveDepthBuffer===!1,s.__autoAllocateDepthBuffer===!1&&(s.__useRenderToTexture=!1),i.get(e.texture).__webglTexture=t,i.get(e.depthTexture).__webglTexture=s.__autoAllocateDepthBuffer?0[0]:n,s.__hasExternalTextures=!0},this.setRenderTargetFramebuffer=function(e,t){const n=i.get(e);n.__webglFramebuffer=t,n.__useDefaultFramebuffer=t===0[0]};const st=n.createFramebuffer();this.setRenderTarget=function(e,t=0,s=0){c=e,ce=t,G=s;let l=!0,a=null,d=!1,u=!1;if(e){const h=i.get(e);if(h.__useDefaultFramebuffer!==0[0])o.bindFramebuffer(n.FRAMEBUFFER,null),l=!1;else if(h.__webglFramebuffer===0[0])r.setupRenderTarget(e);else if(h.__hasExternalTextures)r.rebindTextures(e,i.get(e.texture).__webglTexture,i.get(e.depthTexture).__webglTexture);else if(e.depthBuffer){const t=e.depthTexture;if(h.__boundDepthTexture!==t){if(t!==null&&i.has(t)&&(e.width!==t.image.width||e.height!==t.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");r.setupDepthRenderbuffer(e)}}const m=e.texture;(m.isData3DTexture||m.isDataArrayTexture||m.isCompressedArrayTexture)&&(u=!0);const c=i.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget?(Array.isArray(c[t])?a=c[t][s]:a=c[t],d=!0):e.samples>0&&r.useMultisampledRTT(e)===!1?a=i.get(e).__webglMultisampledFramebuffer:Array.isArray(c)?a=c[s]:a=c,M.copy(e.viewport),ee.copy(e.scissor),fe=e.scissorTest}else M.copy(U).multiplyScalar(m).floor(),ee.copy(K).multiplyScalar(m).floor(),fe=he;s!==0&&(a=st);const h=o.bindFramebuffer(n.FRAMEBUFFER,a);if(h&&l&&o.drawBuffers(e,a),o.viewport(M),o.scissor(ee),o.setScissorTest(fe),d){const o=i.get(e.texture);n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_CUBE_MAP_POSITIVE_X+t,o.__webglTexture,s)}else if(u){const o=t;for(let t=0;t<e.textures.length;t++){const a=i.get(e.textures[t]);n.framebufferTextureLayer(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0+t,a.__webglTexture,s,o)}}else if(e!==null&&s!==0){const t=i.get(e.texture);n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t.__webglTexture,s)}V=-1},this.readRenderTargetPixels=function(e,t,s,a,r,l,d,u=0){if(!e||!e.isWebGLRenderTarget){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let h=i.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&d!==0[0]&&(h=h[d]),h){o.bindFramebuffer(n.FRAMEBUFFER,h);try{const o=e.textures[u],i=o.format,c=o.type;if(!f.textureFormatReadable(i)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!f.textureTypeReadable(c)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}t>=0&&t<=e.width-a&&s>=0&&s<=e.height-r&&(e.textures.length>1&&n.readBuffer(n.COLOR_ATTACHMENT0+u),n.readPixels(t,s,a,r,w.convert(i),w.convert(c),l))}finally{const e=c!==null?i.get(c).__webglFramebuffer:null;o.bindFramebuffer(n.FRAMEBUFFER,e)}}},this.readRenderTargetPixelsAsync=async function(e,t,s,a,r,l,d,u=0){if(!e||!e.isWebGLRenderTarget)throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let h=i.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&d!==0[0]&&(h=h[d]),h){if(t>=0&&t<=e.width-a&&s>=0&&s<=e.height-r){o.bindFramebuffer(n.FRAMEBUFFER,h);const m=e.textures[u],p=m.format,g=m.type;if(!f.textureFormatReadable(p))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!f.textureTypeReadable(g))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");const d=n.createBuffer();n.bindBuffer(n.PIXEL_PACK_BUFFER,d),n.bufferData(n.PIXEL_PACK_BUFFER,l.byteLength,n.STREAM_READ),e.textures.length>1&&n.readBuffer(n.COLOR_ATTACHMENT0+u),n.readPixels(t,s,a,r,w.convert(p),w.convert(g),0);const b=c!==null?i.get(c).__webglFramebuffer:null;o.bindFramebuffer(n.FRAMEBUFFER,b);const v=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);return n.flush(),await az(n,v,4),n.bindBuffer(n.PIXEL_PACK_BUFFER,d),n.getBufferSubData(n.PIXEL_PACK_BUFFER,0,l),n.deleteBuffer(d),n.deleteSync(v),l}throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(e,t=null,s=0){const i=2**-s,a=Math.floor(e.image.width*i),c=Math.floor(e.image.height*i),l=t!==null?t.x:0,d=t!==null?t.y:0;r.setTexture2D(e,0),n.copyTexSubImage2D(n.TEXTURE_2D,s,0,0,l,d,a,c),o.unbindTexture()};const it=n.createFramebuffer(),at=n.createFramebuffer();this.copyTextureToTexture=function(e,t,s=null,a=null,c=0,l=null){l===null&&(c!==0?(gt("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),l=c,c=0):l=0);let h,u,g,b,j,_,m,f,v;const d=e.isCompressedTexture?e.mipmaps[l]:e.image;if(s!==null)h=s.max.x-s.min.x,u=s.max.y-s.min.y,g=s.isBox3?s.max.z-s.min.z:1,b=s.min.x,j=s.min.y,_=s.isBox3?s.min.z:0;else{const t=2**-c;h=Math.floor(d.width*t),u=Math.floor(d.height*t),e.isDataArrayTexture?g=d.depth:e.isData3DTexture?g=Math.floor(d.depth*t):g=1,b=0,j=0,_=0}a!==null?(m=a.x,f=a.y,v=a.z):(m=0,f=0,v=0);const y=w.convert(t.format),O=w.convert(t.type);let p;t.isData3DTexture?(r.setTexture3D(t,0),p=n.TEXTURE_3D):t.isDataArrayTexture||t.isCompressedArrayTexture?(r.setTexture2DArray(t,0),p=n.TEXTURE_2D_ARRAY):(r.setTexture2D(t,0),p=n.TEXTURE_2D),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,t.flipY),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),n.pixelStorei(n.UNPACK_ALIGNMENT,t.unpackAlignment);const E=n.getParameter(n.UNPACK_ROW_LENGTH),k=n.getParameter(n.UNPACK_IMAGE_HEIGHT),A=n.getParameter(n.UNPACK_SKIP_PIXELS),S=n.getParameter(n.UNPACK_SKIP_ROWS),M=n.getParameter(n.UNPACK_SKIP_IMAGES);n.pixelStorei(n.UNPACK_ROW_LENGTH,d.width),n.pixelStorei(n.UNPACK_IMAGE_HEIGHT,d.height),n.pixelStorei(n.UNPACK_SKIP_PIXELS,b),n.pixelStorei(n.UNPACK_SKIP_ROWS,j),n.pixelStorei(n.UNPACK_SKIP_IMAGES,_);const C=e.isDataArrayTexture||e.isData3DTexture,x=t.isDataArrayTexture||t.isData3DTexture;if(e.isDepthTexture){const s=i.get(e),a=i.get(t),r=i.get(s.__renderTarget),d=i.get(a.__renderTarget);o.bindFramebuffer(n.READ_FRAMEBUFFER,r.__webglFramebuffer),o.bindFramebuffer(n.DRAW_FRAMEBUFFER,d.__webglFramebuffer);for(let s=0;s<g;s++)C&&(n.framebufferTextureLayer(n.READ_FRAMEBUFFER,n.COLOR_ATTACHMENT0,i.get(e).__webglTexture,c,_+s),n.framebufferTextureLayer(n.DRAW_FRAMEBUFFER,n.COLOR_ATTACHMENT0,i.get(t).__webglTexture,l,v+s)),n.blitFramebuffer(b,j,h,u,m,f,h,u,n.DEPTH_BUFFER_BIT,n.NEAREST);o.bindFramebuffer(n.READ_FRAMEBUFFER,null),o.bindFramebuffer(n.DRAW_FRAMEBUFFER,null)}else if(c!==0||e.isRenderTargetTexture||i.has(e)){const s=i.get(e),a=i.get(t);o.bindFramebuffer(n.READ_FRAMEBUFFER,it),o.bindFramebuffer(n.DRAW_FRAMEBUFFER,at);for(let e=0;e<g;e++)C?n.framebufferTextureLayer(n.READ_FRAMEBUFFER,n.COLOR_ATTACHMENT0,s.__webglTexture,c,_+e):n.framebufferTexture2D(n.READ_FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,s.__webglTexture,c),x?n.framebufferTextureLayer(n.DRAW_FRAMEBUFFER,n.COLOR_ATTACHMENT0,a.__webglTexture,l,v+e):n.framebufferTexture2D(n.DRAW_FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,a.__webglTexture,l),c!==0?n.blitFramebuffer(b,j,h,u,m,f,h,u,n.COLOR_BUFFER_BIT,n.NEAREST):x?n.copyTexSubImage3D(p,l,m,f,v+e,b,j,h,u):n.copyTexSubImage2D(p,l,m,f,b,j,h,u);o.bindFramebuffer(n.READ_FRAMEBUFFER,null),o.bindFramebuffer(n.DRAW_FRAMEBUFFER,null)}else x?e.isDataTexture||e.isData3DTexture?n.texSubImage3D(p,l,m,f,v,h,u,g,y,O,d.data):t.isCompressedArrayTexture?n.compressedTexSubImage3D(p,l,m,f,v,h,u,g,y,d.data):n.texSubImage3D(p,l,m,f,v,h,u,g,y,O,d):e.isDataTexture?n.texSubImage2D(n.TEXTURE_2D,l,m,f,h,u,y,O,d.data):e.isCompressedTexture?n.compressedTexSubImage2D(n.TEXTURE_2D,l,m,f,d.width,d.height,y,d.data):n.texSubImage2D(n.TEXTURE_2D,l,m,f,h,u,y,O,d);n.pixelStorei(n.UNPACK_ROW_LENGTH,E),n.pixelStorei(n.UNPACK_IMAGE_HEIGHT,k),n.pixelStorei(n.UNPACK_SKIP_PIXELS,A),n.pixelStorei(n.UNPACK_SKIP_ROWS,S),n.pixelStorei(n.UNPACK_SKIP_IMAGES,M),l===0&&t.generateMipmaps&&n.generateMipmap(p),o.unbindTexture()},this.initRenderTarget=function(e){i.get(e).__webglFramebuffer===0[0]&&r.setupRenderTarget(e)},this.initTexture=function(e){e.isCubeTexture?r.setTextureCube(e,0):e.isData3DTexture?r.setTexture3D(e,0):e.isDataArrayTexture||e.isCompressedArrayTexture?r.setTexture2DArray(e,0):r.setTexture2D(e,0),o.unbindTexture()},this.resetState=function(){ce=0,G=0,c=null,o.reset(),S.reset()},typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Re}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=v._getDrawingBufferColorSpace(e),t.unpackColorSpace=v._getUnpackColorSpace()}},p3="180",Wo={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},Uo={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},bc=0,Dj=1,Tj=2,i3=1,n3=100,e3=204,J2=205,Z2=0,X2=1,G2=2,fc=3,K2=4,$2=5,B2=6,I2=7,Sj=0,N2="attached",kj="detached",M2=300,ar=1e3,rr=1001,w1=1002,lc=1003,Cj=1004,xj=1005,rc=1006,wj=1007,A1=1008,d2=1009,M1=1015,l2=1023,yj=1028,mr=2300,vr=2301,N1=2302,o2=2400,s2=2401,J0=2402,hj=2500,dj=0,U0=1,V1=2,lj=0,z0="",Oe="srgb",It="srgb-linear",k0="linear",Y1="srgb",Zo=7680,O0=519,Q1=35044,uo=2e3,J1=2001,xr=class{addEventListener(e,t){this._listeners===0[0]&&(this._listeners={});const n=this._listeners;n[e]===0[0]&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){const n=this._listeners;return n!==0[0]&&n[e]!==0[0]&&n[e].indexOf(t)!==-1}removeEventListener(e,t){const s=this._listeners;if(s===0[0])return;const n=s[e];if(n!==0[0]){const e=n.indexOf(t);e!==-1&&n.splice(e,1)}}dispatchEvent(e){const t=this._listeners;if(t===0[0])return;const n=t[e.type];if(n!==0[0]){e.target=this;const t=n.slice(0);for(let n=0,s=t.length;n<s;n++)t[n].call(this,e);e.target=null}}},Ce=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],m0=1234567,Ar=Math.PI/180,Sr=180/Math.PI;function an(){const e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0,s=Math.random()*4294967295|0,o=Ce[e&255]+Ce[e>>8&255]+Ce[e>>16&255]+Ce[e>>24&255]+"-"+Ce[t&255]+Ce[t>>8&255]+"-"+Ce[t>>16&15|64]+Ce[t>>24&255]+"-"+Ce[n&63|128]+Ce[n>>8&255]+"-"+Ce[n>>16&255]+Ce[n>>24&255]+Ce[s&255]+Ce[s>>8&255]+Ce[s>>16&255]+Ce[s>>24&255];return o.toLowerCase()}function C(e,t,n){return Math.max(t,Math.min(n,e))}function s0(e,t){return(e%t+t)%t}function rD(e,t,n,s,o){return s+(e-t)*(o-s)/(n-t)}function uD(e,t,n){return e!==t?(n-e)/(t-e):0}function Br(e,t,n){return(1-n)*e+n*t}function pD(e,t,n,s){return Br(e,t,1-Math.exp(-n*s))}function yD(e,t=1){return t-Math.abs(s0(e,t*2)-t)}function wD(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t),e*e*(3-2*e))}function OD(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t),e*e*e*(e*(e*6-15)+10))}function xD(e,t){return e+Math.floor(Math.random()*(t-e+1))}function CD(e,t){return e+Math.random()*(t-e)}function ED(e){return e*(.5-Math.random())}function SD(e){e!==0[0]&&(m0=e);let t=m0+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function MD(e){return e*Ar}function FD(e){return e*Sr}function TD(e){return(e&e-1)===0&&e!==0}function zD(e){return 2**Math.ceil(Math.log(e)/Math.LN2)}function DD(e){return 2**Math.floor(Math.log(e)/Math.LN2)}function ND(e,t,n,s,o){const l=Math.cos,d=Math.sin,i=l(n/2),a=d(n/2),r=l((t+s)/2),c=d((t+s)/2),u=l((t-s)/2),h=d((t-s)/2),m=l((s-t)/2),f=d((s-t)/2);switch(o){case"XYX":e.set(i*c,a*u,a*h,i*r);break;case"YZY":e.set(a*h,i*c,a*u,i*r);break;case"ZXZ":e.set(a*u,a*h,i*c,i*r);break;case"XZX":e.set(i*c,a*f,a*m,i*r);break;case"YXY":e.set(a*m,i*c,a*f,i*r);break;case"ZYZ":e.set(a*f,a*m,i*c,i*r);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+o)}}function Jt(e,t){switch(t.constructor){case Float32Array:return e;case Uint32Array:return e/4294967295;case Uint16Array:return e/65535;case Uint8Array:return e/255;case Int32Array:return Math.max(e/2147483647,-1);case Int16Array:return Math.max(e/32767,-1);case Int8Array:return Math.max(e/127,-1);default:throw new Error("Invalid component type.")}}function H(e,t){switch(t.constructor){case Float32Array:return e;case Uint32Array:return Math.round(e*4294967295);case Uint16Array:return Math.round(e*65535);case Uint8Array:return Math.round(e*255);case Int32Array:return Math.round(e*2147483647);case Int16Array:return Math.round(e*32767);case Int8Array:return Math.round(e*127);default:throw new Error("Invalid component type.")}}k4={DEG2RAD:Ar,RAD2DEG:Sr,generateUUID:an,clamp:C,euclideanModulo:s0,mapLinear:rD,inverseLerp:uD,lerp:Br,damp:pD,pingpong:yD,smoothstep:wD,smootherstep:OD,randInt:xD,randFloat:CD,randFloatSpread:ED,seededRandom:SD,degToRad:MD,radToDeg:FD,isPowerOfTwo:TD,ceilPowerOfTwo:zD,floorPowerOfTwo:DD,setQuaternionFromProperEuler:ND,normalize:H,denormalize:Jt},F=class _Vector2{constructor(e=0,t=0){_Vector2.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const n=this.x,s=this.y,t=e.elements;return this.x=t[0]*n+t[3]*s+t[6],this.y=t[1]*n+t[4]*s+t[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=C(this.x,e.x,t.x),this.y=C(this.y,e.y,t.y),this}clampScalar(e,t){return this.x=C(this.x,e,t),this.y=C(this.y,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(C(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x|0,this.y=this.y|0,this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return(this.x*this.x+this.y*this.y)**.5}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){const e=Math.atan2(-this.y,-this.x)+Math.PI;return e}angleTo(e){const t=(this.lengthSq()*e.lengthSq())**.5;if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(C(n,-1,1))}distanceTo(e){return this.distanceToSquared(e)**.5}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),s=Math.sin(t),o=this.x-e.x,i=this.y-e.y;return this.x=o*n-i*s+e.x,this.y=o*s+i*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}},Gt=class{constructor(e=0,t=0,n=0,s=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=s}static slerpFlat(e,t,n,s,o,i,a){let r=n[s+0],c=n[s+1],l=n[s+2],d=n[s+3];const u=o[i+0],h=o[i+1],m=o[i+2],f=o[i+3];if(a===0){e[t+0]=r,e[t+1]=c,e[t+2]=l,e[t+3]=d;return}if(a===1){e[t+0]=u,e[t+1]=h,e[t+2]=m,e[t+3]=f;return}if(d!==f||r!==u||c!==h||l!==m){let e=1-a;const t=r*u+c*h+l*m+d*f,s=t>=0?1:-1,o=1-t*t;if(o>Number.EPSILON){const n=o**.5,i=Math.atan2(n,t*s);e=Math.sin(e*i)/n,a=Math.sin(a*i)/n}const n=a*s;if(r=r*e+u*n,c=c*e+h*n,l=l*e+m*n,d=d*e+f*n,e===1-a){const e=1/(r*r+c*c+l*l+d*d)**.5;r*=e,c*=e,l*=e,d*=e}}e[t]=r,e[t+1]=c,e[t+2]=l,e[t+3]=d}static multiplyQuaternionsFlat(e,t,n,s,o,i){const a=n[s],r=n[s+1],c=n[s+2],l=n[s+3],d=o[i],u=o[i+1],h=o[i+2],m=o[i+3];return e[t]=a*m+l*d+r*h-c*u,e[t+1]=r*m+l*u+c*d-a*h,e[t+2]=c*m+l*h+a*u-r*d,e[t+3]=l*m-a*d-r*u-c*h,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,s){return this._x=e,this._y=t,this._z=n,this._w=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){const d=e._x,u=e._y,h=e._z,m=e._order,c=Math.cos,l=Math.sin,n=c(d/2),s=c(u/2),o=c(h/2),i=l(d/2),a=l(u/2),r=l(h/2);switch(m){case"XYZ":this._x=i*s*o+n*a*r,this._y=n*a*o-i*s*r,this._z=n*s*r+i*a*o,this._w=n*s*o-i*a*r;break;case"YXZ":this._x=i*s*o+n*a*r,this._y=n*a*o-i*s*r,this._z=n*s*r-i*a*o,this._w=n*s*o+i*a*r;break;case"ZXY":this._x=i*s*o-n*a*r,this._y=n*a*o+i*s*r,this._z=n*s*r+i*a*o,this._w=n*s*o-i*a*r;break;case"ZYX":this._x=i*s*o-n*a*r,this._y=n*a*o+i*s*r,this._z=n*s*r-i*a*o,this._w=n*s*o+i*a*r;break;case"YZX":this._x=i*s*o+n*a*r,this._y=n*a*o+i*s*r,this._z=n*s*r-i*a*o,this._w=n*s*o-i*a*r;break;case"XZY":this._x=i*s*o-n*a*r,this._y=n*a*o-i*s*r,this._z=n*s*r+i*a*o,this._w=n*s*o+i*a*r;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+m)}return t===!0&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const s=t/2,n=Math.sin(s);return this._x=e.x*n,this._y=e.y*n,this._z=e.z*n,this._w=Math.cos(s),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],a=t[8],r=t[1],s=t[5],c=t[9],l=t[2],d=t[6],o=t[10],u=n+s+o;if(u>0){const e=.5/(u+1)**.5;this._w=.25/e,this._x=(d-c)*e,this._y=(a-l)*e,this._z=(r-i)*e}else if(n>s&&n>o){const e=2*(1+n-s-o)**.5;this._w=(d-c)/e,this._x=.25*e,this._y=(i+r)/e,this._z=(a+l)/e}else if(s>o){const e=2*(1+s-n-o)**.5;this._w=(a-l)/e,this._x=(i+r)/e,this._y=.25*e,this._z=(c+d)/e}else{const e=2*(1+o-n-s)**.5;this._w=(r-i)/e,this._x=(a+l)/e,this._y=(c+d)/e,this._z=.25*e}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<1e-8?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(C(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const s=Math.min(1,t/n);return this.slerp(e,s),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)**.5}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,s=e._y,o=e._z,i=e._w,a=t._x,r=t._y,c=t._z,l=t._w;return this._x=n*l+i*a+s*c-o*r,this._y=s*l+i*r+o*a-n*c,this._z=o*l+i*c+n*r-s*a,this._w=i*l-n*a-s*r-o*c,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const s=this._x,o=this._y,i=this._z,a=this._w;let n=a*e._w+s*e._x+o*e._y+i*e._z;if(n<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,n=-n):this.copy(e),n>=1)return this._w=a,this._x=s,this._y=o,this._z=i,this;const d=1-n*n;if(d<=Number.EPSILON){const e=1-t;return this._w=e*a+t*this._w,this._x=e*s+t*this._x,this._y=e*o+t*this._y,this._z=e*i+t*this._z,this.normalize(),this}const l=d**.5,u=Math.atan2(l,n),r=Math.sin((1-t)*u)/l,c=Math.sin(t*u)/l;return this._w=a*r+this._w*c,this._x=s*r+this._x*c,this._y=o*r+this._y*c,this._z=i*r+this._z*c,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),n=Math.random(),s=(1-n)**.5,o=n**.5;return this.set(s*Math.sin(e),s*Math.cos(e),o*Math.sin(t),o*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}},n=class _Vector3{constructor(e=0,t=0,n=0){_Vector3.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return n===0[0]&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(T4.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(T4.setFromAxisAngle(e,t))}applyMatrix3(e){const n=this.x,s=this.y,o=this.z,t=e.elements;return this.x=t[0]*n+t[3]*s+t[6]*o,this.y=t[1]*n+t[4]*s+t[7]*o,this.z=t[2]*n+t[5]*s+t[8]*o,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const n=this.x,s=this.y,o=this.z,t=e.elements,i=1/(t[3]*n+t[7]*s+t[11]*o+t[15]);return this.x=(t[0]*n+t[4]*s+t[8]*o+t[12])*i,this.y=(t[1]*n+t[5]*s+t[9]*o+t[13])*i,this.z=(t[2]*n+t[6]*s+t[10]*o+t[14])*i,this}applyQuaternion(e){const o=this.x,i=this.y,a=this.z,t=e.x,n=e.y,s=e.z,r=e.w,c=2*(n*a-s*i),l=2*(s*o-t*a),d=2*(t*i-n*o);return this.x=o+r*c+n*d-s*l,this.y=i+r*l+s*c-t*d,this.z=a+r*d+t*l-n*c,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const n=this.x,s=this.y,o=this.z,t=e.elements;return this.x=t[0]*n+t[4]*s+t[8]*o,this.y=t[1]*n+t[5]*s+t[9]*o,this.z=t[2]*n+t[6]*s+t[10]*o,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=C(this.x,e.x,t.x),this.y=C(this.y,e.y,t.y),this.z=C(this.z,e.z,t.z),this}clampScalar(e,t){return this.x=C(this.x,e,t),this.y=C(this.y,e,t),this.z=C(this.z,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(C(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x|0,this.y=this.y|0,this.z=this.z|0,this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return(this.x*this.x+this.y*this.y+this.z*this.z)**.5}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,s=e.y,o=e.z,i=t.x,a=t.y,r=t.z;return this.x=s*r-o*a,this.y=o*i-n*r,this.z=n*a-s*i,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return m4.copy(this).projectOnVector(e),this.sub(m4)}reflect(e){return this.sub(m4.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=(this.lengthSq()*e.lengthSq())**.5;if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(C(n,-1,1))}distanceTo(e){return this.distanceToSquared(e)**.5}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,s=this.z-e.z;return t*t+n*n+s*s}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const s=Math.sin(t)*e;return this.x=s*Math.sin(n),this.y=Math.cos(t)*e,this.z=s*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),s=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=s,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,n=(1-e*e)**.5;return this.x=n*Math.cos(t),this.y=e,this.z=n*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}},m4=new n,T4=new Gt,E=class _Matrix3{constructor(e,t,n,s,o,i,a,r,c){_Matrix3.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],e!==0[0]&&this.set(e,t,n,s,o,i,a,r,c)}set(e,t,n,s,o,i,a,r,c){const l=this.elements;return l[0]=e,l[1]=s,l[2]=a,l[3]=t,l[4]=o,l[5]=r,l[6]=n,l[7]=i,l[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,s=t.elements,o=this.elements,i=n[0],a=n[3],r=n[6],c=n[1],l=n[4],d=n[7],u=n[2],h=n[5],m=n[8],f=s[0],p=s[3],g=s[6],v=s[1],b=s[4],j=s[7],y=s[2],_=s[5],w=s[8];return o[0]=i*f+a*v+r*y,o[3]=i*p+a*b+r*_,o[6]=i*g+a*j+r*w,o[1]=c*f+l*v+d*y,o[4]=c*p+l*b+d*_,o[7]=c*g+l*j+d*w,o[2]=u*f+h*v+m*y,o[5]=u*p+h*b+m*_,o[8]=u*g+h*j+m*w,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],s=e[2],o=e[3],i=e[4],a=e[5],r=e[6],c=e[7],l=e[8];return t*i*l-t*a*c-n*o*l+n*a*r+s*o*c-s*i*r}invert(){const e=this.elements,n=e[0],s=e[1],o=e[2],d=e[3],a=e[4],i=e[5],r=e[6],c=e[7],l=e[8],u=l*a-i*c,h=i*r-l*d,m=c*d-a*r,f=n*u+s*h+o*m;if(f===0)return this.set(0,0,0,0,0,0,0,0,0);const t=1/f;return e[0]=u*t,e[1]=(o*c-l*s)*t,e[2]=(i*s-o*a)*t,e[3]=h*t,e[4]=(l*n-o*r)*t,e[5]=(o*d-i*n)*t,e[6]=m*t,e[7]=(s*r-c*n)*t,e[8]=(a*n-s*d)*t,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,s,o,i,a){const r=Math.cos(o),c=Math.sin(o);return this.set(n*r,n*c,-n*(r*i+c*a)+i+e,-s*c,s*r,-s*(-c*i+r*a)+a+t,0,0,1),this}scale(e,t){return this.premultiply(h4.makeScale(e,t)),this}rotate(e){return this.premultiply(h4.makeRotation(-e)),this}translate(e,t){return this.premultiply(h4.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,n,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,n=e.elements;for(let e=0;e<9;e++)if(t[e]!==n[e])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return(new this.constructor).fromArray(this.elements)}},h4=new E;function LD(e){for(let t=e.length-1;t>=0;--t)if(e[t]>=65535)return!0;return!1}function L4(e){return document.createElementNS("http://www.w3.org/1999/xhtml",e)}R4={};function db(e){if(e in R4)return;R4[e]=!0,console.warn(e)}H4=(new E).set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),I4=(new E).set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function PD(){const e={enabled:!0,workingColorSpace:It,spaces:{},convert:function(e,t,n){return this.enabled===!1||t===n||!t||!n?e:(this.spaces[t].transfer===Y1&&(e.r=es(e.r),e.g=es(e.g),e.b=es(e.b)),this.spaces[t].primaries!==this.spaces[n].primaries&&(e.applyMatrix3(this.spaces[t].toXYZ),e.applyMatrix3(this.spaces[n].fromXYZ)),this.spaces[n].transfer===Y1&&(e.r=fr(e.r),e.g=fr(e.g),e.b=fr(e.b)),e)},workingToColorSpace:function(e,t){return this.convert(e,this.workingColorSpace,t)},colorSpaceToWorking:function(e,t){return this.convert(e,t,this.workingColorSpace)},getPrimaries:function(e){return this.spaces[e].primaries},getTransfer:function(e){return e===z0?k0:this.spaces[e].transfer},getToneMappingMode:function(e){return this.spaces[e].outputColorSpaceConfig.toneMappingMode||"standard"},getLuminanceCoefficients:function(e,t=this.workingColorSpace){return e.fromArray(this.spaces[t].luminanceCoefficients)},define:function(e){Object.assign(this.spaces,e)},_getMatrix:function(e,t,n){return e.copy(this.spaces[t].toXYZ).multiply(this.spaces[n].fromXYZ)},_getDrawingBufferColorSpace:function(e){return this.spaces[e].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(e=this.workingColorSpace){return this.spaces[e].workingColorSpaceConfig.unpackColorSpace},fromWorkingColorSpace:function(t,n){return db("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace()."),e.workingToColorSpace(t,n)},toWorkingColorSpace:function(t,n){return db("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking()."),e.colorSpaceToWorking(t,n)}},t=[.64,.33,.3,.6,.15,.06],n=[.2126,.7152,.0722],s=[.3127,.329];return e.define({[It]:{primaries:t,whitePoint:s,transfer:k0,toXYZ:H4,fromXYZ:I4,luminanceCoefficients:n,workingColorSpaceConfig:{unpackColorSpace:Oe},outputColorSpaceConfig:{drawingBufferColorSpace:Oe}},[Oe]:{primaries:t,whitePoint:s,transfer:Y1,toXYZ:H4,fromXYZ:I4,luminanceCoefficients:n,outputColorSpaceConfig:{drawingBufferColorSpace:Oe}}}),e}Ze=PD();function es(e){return e<.04045?e*.0773993808:(e*.9478672986+.0521327014)**2.4}function fr(e){return e<.0031308?e*12.92:1.055*e**.41666-.055}ab=class{static getDataURL(e,t="image/png"){if(/^data:/i.test(e.src))return e.src;if(typeof HTMLCanvasElement=="undefined")return e.src;let n;if(e instanceof HTMLCanvasElement)n=e;else{hr===0[0]&&(hr=L4("canvas")),hr.width=e.width,hr.height=e.height;const t=hr.getContext("2d");e instanceof ImageData?t.putImageData(e,0,0):t.drawImage(e,0,0,e.width,e.height),n=hr}return n.toDataURL(t)}static sRGBToLinear(e){if(typeof HTMLImageElement!="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&e instanceof ImageBitmap){const t=L4("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const o=n.getImageData(0,0,e.width,e.height),s=o.data;for(let e=0;e<s.length;e++)s[e]=es(s[e]/255)*255;return n.putImageData(o,0,0),t}if(e.data){const t=e.data.slice(0);for(let e=0;e<t.length;e++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[e]=Math.floor(es(t[e]/255)*255):t[e]=es(t[e]);return{data:t,width:e.width,height:e.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}},ib=0,Q9=class{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:ib++}),this.uuid=an(),this.data=e,this.dataReady=!0,this.version=0}getSize(e){const t=this.data;return typeof HTMLVideoElement!="undefined"&&t instanceof HTMLVideoElement?e.set(t.videoWidth,t.videoHeight,0):t instanceof VideoFrame?e.set(t.displayHeight,t.displayWidth,0):t!==null?e.set(t.width,t.height,t.depth||0):e.set(0,0,0),e}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const s=e===0[0]||typeof e=="string";if(!s&&e.images[this.uuid]!==0[0])return e.images[this.uuid];const n={uuid:this.uuid,url:""},t=this.data;if(t!==null){let e;if(Array.isArray(t)){e=[];for(let n=0,s=t.length;n<s;n++)t[n].isDataTexture?e.push(G4(t[n].image)):e.push(G4(t[n]))}else e=G4(t);n.url=e}return s||(e.images[this.uuid]=n),n}};function G4(e){return typeof HTMLImageElement!="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&e instanceof ImageBitmap?ab.getDataURL(e):e.data?{data:Array.from(e.data),width:e.width,height:e.height,type:e.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}Y9=0,d4=new n,Ls=class _Texture extends xr{constructor(e=_Texture.DEFAULT_IMAGE,t=_Texture.DEFAULT_MAPPING,n=rr,s=rr,o=rc,i=A1,a=l2,r=d2,c=_Texture.DEFAULT_ANISOTROPY,l=z0){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:Y9++}),this.uuid=an(),this.name="",this.source=new Q9(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=n,this.wrapT=s,this.magFilter=o,this.minFilter=i,this.anisotropy=c,this.format=a,this.internalFormat=null,this.type=r,this.offset=new F(0,0),this.repeat=new F(1,1),this.center=new F(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new E,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=l,this.userData={},this.updateRanges=[],this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.isArrayTexture=!!(e&&e.depth&&e.depth>1),this.pmremVersion=0}get width(){return this.source.getSize(d4).x}get height(){return this.source.getSize(d4).y}get depth(){return this.source.getSize(d4).z}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}clone(){return(new this.constructor).copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.renderTarget=e.renderTarget,this.isRenderTargetTexture=e.isRenderTargetTexture,this.isArrayTexture=e.isArrayTexture,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}setValues(e){for(const s in e){const t=e[s];if(t===0[0]){console.warn(`THREE.Texture.setValues(): parameter '${s}' has value of undefined.`);continue}const n=this[s];if(n===0[0]){console.warn(`THREE.Texture.setValues(): property '${s}' does not exist.`);continue}n&&t&&n.isVector2&&t.isVector2?n.copy(t):n&&t&&n.isVector3&&t.isVector3?n.copy(t):n&&t&&n.isMatrix3&&t.isMatrix3?n.copy(t):this[s]=t}}toJSON(e){const n=e===0[0]||typeof e=="string";if(!n&&e.textures[this.uuid]!==0[0])return e.textures[this.uuid];const t={metadata:{version:4.7,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(t.userData=this.userData),n||(e.textures[this.uuid]=t),t}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==M2)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case ar:e.x=e.x-Math.floor(e.x);break;case rr:e.x=e.x<0?0:1;break;case w1:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case ar:e.y=e.y-Math.floor(e.y);break;case rr:e.y=e.y<0?0:1;break;case w1:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(e){e===!0&&this.pmremVersion++}},Ls.DEFAULT_IMAGE=null,Ls.DEFAULT_MAPPING=M2,Ls.DEFAULT_ANISOTROPY=1,it=class _Vector4{constructor(e=0,t=0,n=0,s=1){_Vector4.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=s}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,s){return this.x=e,this.y=t,this.z=n,this.w=s,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==0[0]?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const n=this.x,s=this.y,o=this.z,i=this.w,t=e.elements;return this.x=t[0]*n+t[4]*s+t[8]*o+t[12]*i,this.y=t[1]*n+t[5]*s+t[9]*o+t[13]*i,this.z=t[2]*n+t[6]*s+t[10]*o+t[14]*i,this.w=t[3]*n+t[7]*s+t[11]*o+t[15]*i,this}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this.w/=e.w,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=(1-e.w*e.w)**.5;return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let v,n,s,o;const a=.01,m=.1,t=e.elements,f=t[0],i=t[4],r=t[8],c=t[1],p=t[5],l=t[9],d=t[2],u=t[6],g=t[10];if(Math.abs(i-c)<a&&Math.abs(r-d)<a&&Math.abs(l-u)<a){if(Math.abs(i+c)<m&&Math.abs(r+d)<m&&Math.abs(l+u)<m&&Math.abs(f+p+g-3)<m)return this.set(1,0,0,0),this;v=Math.PI;const e=(f+1)/2,t=(p+1)/2,h=(g+1)/2,b=(i+c)/4,j=(r+d)/4,y=(l+u)/4;return e>t&&e>h?e<a?(n=0,s=.707106781,o=.707106781):(n=e**.5,s=b/n,o=j/n):t>h?t<a?(n=.707106781,s=0,o=.707106781):(s=t**.5,n=b/s,o=y/s):h<a?(n=.707106781,s=.707106781,o=0):(o=h**.5,n=j/o,s=y/o),this.set(n,s,o,v),this}let h=((u-l)*(u-l)+(r-d)*(r-d)+(c-i)*(c-i))**.5;return(h<0?-h:h)<.001&&(h=1),this.x=(u-l)/h,this.y=(r-d)/h,this.z=(c-i)/h,this.w=Math.acos((f+p+g-1)/2),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this.w=t[15],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=C(this.x,e.x,t.x),this.y=C(this.y,e.y,t.y),this.z=C(this.z,e.z,t.z),this.w=C(this.w,e.w,t.w),this}clampScalar(e,t){return this.x=C(this.x,e,t),this.y=C(this.y,e,t),this.z=C(this.z,e,t),this.w=C(this.w,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(C(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x|0,this.y=this.y|0,this.z=this.z|0,this.w=this.w|0,this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)**.5}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}},zn=class{constructor(e=new n(1/0,1/0,1/0),t=new n(-(1/0),-(1/0),-(1/0))){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3)this.expandByPoint(Ct.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++)this.expandByPoint(Ct.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=Ct.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return(new this.constructor).copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-(1/0),this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(n!==0[0]){const s=n.getAttribute("position");if(t===!0&&s!==0[0]&&e.isInstancedMesh!==!0)for(let t=0,n=s.count;t<n;t++)e.isMesh===!0?e.getVertexPosition(t,Ct):Ct.fromBufferAttribute(s,t),Ct.applyMatrix4(e.matrixWorld),this.expandByPoint(Ct);else e.boundingBox!==0[0]?(e.boundingBox===null&&e.computeBoundingBox(),Vc.copy(e.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),Vc.copy(n.boundingBox)),Vc.applyMatrix4(e.matrixWorld),this.union(Vc)}const s=e.children;for(let e=0,n=s.length;e<n;e++)this.expandByObject(s[e],t);return this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y&&e.z>=this.min.z&&e.z<=this.max.z}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y&&e.max.z>=this.min.z&&e.min.z<=this.max.z}intersectsSphere(e){return this.clampPoint(e.center,Ct),Ct.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(Ca),gl.subVectors(this.max,Ca),Hi.subVectors(e.a,Ca),Bi.subVectors(e.b,Ca),Vi.subVectors(e.c,Ca),ns.subVectors(Bi,Hi),ts.subVectors(Vi,Bi),ys.subVectors(Hi,Vi);let t=[0,-ns.z,ns.y,0,-ts.z,ts.y,0,-ys.z,ys.y,ns.z,0,-ns.x,ts.z,0,-ts.x,ys.z,0,-ys.x,-ns.y,ns.x,0,-ts.y,ts.x,0,-ys.y,ys.x,0];return!!f0(t,Hi,Bi,Vi,gl)&&(t=[1,0,0,0,1,0,0,0,1],!!f0(t,Hi,Bi,Vi,gl)&&(vl.crossVectors(ns,ts),t=[vl.x,vl.y,vl.z],f0(t,Hi,Bi,Vi,gl)))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,Ct).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(Ct).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(En[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),En[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),En[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),En[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),En[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),En[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),En[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),En[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(En),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}toJSON(){return{min:this.min.toArray(),max:this.max.toArray()}}fromJSON(e){return this.min.fromArray(e.min),this.max.fromArray(e.max),this}},En=[new n,new n,new n,new n,new n,new n,new n,new n],Ct=new n,Vc=new zn,Hi=new n,Bi=new n,Vi=new n,ns=new n,ts=new n,ys=new n,Ca=new n,gl=new n,vl=new n,Xs=new n;function f0(e,t,n,s,o){for(let i=0,l=e.length-3;i<=l;i+=3){Xs.fromArray(e,i);const d=o.x*Math.abs(Xs.x)+o.y*Math.abs(Xs.y)+o.z*Math.abs(Xs.z),a=t.dot(Xs),r=n.dot(Xs),c=s.dot(Xs);if(Math.max(-Math.max(a,r,c),Math.min(a,r,c))>d)return!1}return!0}q9=new zn,ga=new n,t4=new n,Ut=class{constructor(e=new n,t=-1){this.isSphere=!0,this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==0[0]?n.copy(t):q9.setFromPoints(e).getCenter(n);let s=0;for(let t=0,o=e.length;t<o;t++)s=Math.max(s,n.distanceToSquared(e[t]));return this.radius=s**.5,this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;ga.subVectors(e,this.center);const t=ga.lengthSq();if(t>this.radius*this.radius){const e=t**.5,n=(e-this.radius)*.5;this.center.addScaledVector(ga,n/e),this.radius+=n}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(t4.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(ga.copy(e.center).add(t4)),this.expandByPoint(ga.copy(e.center).sub(t4))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return(new this.constructor).copy(this)}toJSON(){return{radius:this.radius,center:this.center.toArray()}}fromJSON(e){return this.radius=e.radius,this.center.fromArray(e.center),this}},On=new n,e4=new n,kl=new n,Yn=new n,X1=new n,Sl=new n,G1=new n,da=class{constructor(e=new n,t=new n(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,On)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return this.distanceSqToPoint(e)**.5}distanceSqToPoint(e){const t=On.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(On.copy(this.origin).addScaledVector(this.direction,t),On.distanceToSquared(e))}distanceSqToSegment(e,t,n,s){e4.copy(e).add(t).multiplyScalar(.5),kl.copy(t).sub(e).normalize(),Yn.copy(this.origin).sub(e4);const a=e.distanceTo(t)*.5,r=-this.direction.dot(kl),l=Yn.dot(this.direction),c=-Yn.dot(kl),u=Yn.lengthSq(),m=Math.abs(1-r*r);let i,o,d,h;if(m>0)if(i=r*c-l,o=r*l-c,h=a*m,i>=0)if(o>=-h)if(o<=h){const e=1/m;i*=e,o*=e,d=i*(i+r*o+2*l)+o*(r*i+o+2*c)+u}else o=a,i=Math.max(0,-(r*o+l)),d=-i*i+o*(o+2*c)+u;else o=-a,i=Math.max(0,-(r*o+l)),d=-i*i+o*(o+2*c)+u;else o<=-h?(i=Math.max(0,-(-r*a+l)),o=i>0?-a:Math.min(Math.max(-a,-c),a),d=-i*i+o*(o+2*c)+u):o<=h?(i=0,o=Math.min(Math.max(-a,-c),a),d=o*(o+2*c)+u):(i=Math.max(0,-(r*a+l)),o=i>0?a:Math.min(Math.max(-a,-c),a),d=-i*i+o*(o+2*c)+u);else o=r>0?-a:a,i=Math.max(0,-(r*o+l)),d=-i*i+o*(o+2*c)+u;return n&&n.copy(this.origin).addScaledVector(this.direction,i),s&&s.copy(e4).addScaledVector(kl,o),d}intersectSphere(e,t){On.subVectors(e.center,this.origin);const n=On.dot(this.direction),s=On.dot(On)-n*n,o=e.radius*e.radius;if(s>o)return null;const i=(o-s)**.5,a=n-i,r=n+i;return r<0?null:a<0?this.at(r,t):this.at(a,t)}intersectsSphere(e){return!(e.radius<0)&&this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);if(t===0)return!0;const n=e.normal.dot(this.direction);return n*t<0}intersectBox(e,t){let n,s,i,a,r,c;const l=1/this.direction.x,d=1/this.direction.y,u=1/this.direction.z,o=this.origin;return l>=0?(n=(e.min.x-o.x)*l,s=(e.max.x-o.x)*l):(n=(e.max.x-o.x)*l,s=(e.min.x-o.x)*l),d>=0?(i=(e.min.y-o.y)*d,a=(e.max.y-o.y)*d):(i=(e.max.y-o.y)*d,a=(e.min.y-o.y)*d),n>a||i>s?null:((i>n||isNaN(n))&&(n=i),(a<s||isNaN(s))&&(s=a),u>=0?(r=(e.min.z-o.z)*u,c=(e.max.z-o.z)*u):(r=(e.max.z-o.z)*u,c=(e.min.z-o.z)*u),n>c||r>s?null:((r>n||n!==n)&&(n=r),(c<s||s!==s)&&(s=c),s<0?null:this.at(n>=0?n:s,t)))}intersectsBox(e){return this.intersectBox(e,On)!==null}intersectTriangle(e,t,n,s,o){X1.subVectors(t,e),Sl.subVectors(n,e),G1.crossVectors(X1,Sl);let i=this.direction.dot(G1),a;if(i>0){if(s)return null;a=1}else if(i<0)a=-1,i=-i;else return null;Yn.subVectors(this.origin,e);const r=a*this.direction.dot(Sl.crossVectors(Yn,Sl));if(r<0)return null;const c=a*this.direction.dot(X1.cross(Yn));if(c<0)return null;if(r+c>i)return null;const l=-a*Yn.dot(G1);return l<0?null:this.at(l/i,o)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}},D=class _Matrix4{constructor(e,t,n,s,o,i,a,r,c,l,d,u,h,m,f,p){_Matrix4.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e!==0[0]&&this.set(e,t,n,s,o,i,a,r,c,l,d,u,h,m,f,p)}set(e,t,n,s,o,i,a,r,c,l,d,u,h,m,f,p){const g=this.elements;return g[0]=e,g[4]=t,g[8]=n,g[12]=s,g[1]=o,g[5]=i,g[9]=a,g[13]=r,g[2]=c,g[6]=l,g[10]=d,g[14]=u,g[3]=h,g[7]=m,g[11]=f,g[15]=p,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new _Matrix4).fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,s=1/Zi.setFromMatrixColumn(e,0).length(),o=1/Zi.setFromMatrixColumn(e,1).length(),i=1/Zi.setFromMatrixColumn(e,2).length();return t[0]=n[0]*s,t[1]=n[1]*s,t[2]=n[2]*s,t[3]=0,t[4]=n[4]*o,t[5]=n[5]*o,t[6]=n[6]*o,t[7]=0,t[8]=n[8]*i,t[9]=n[9]*i,t[10]=n[10]*i,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,c=e.x,l=e.y,d=e.z,i=Math.cos(c),n=Math.sin(c),a=Math.cos(l),s=Math.sin(l),r=Math.cos(d),o=Math.sin(d);if(e.order==="XYZ"){const e=i*r,c=i*o,l=n*r,d=n*o;t[0]=a*r,t[4]=-a*o,t[8]=s,t[1]=c+l*s,t[5]=e-d*s,t[9]=-n*a,t[2]=d-e*s,t[6]=l+c*s,t[10]=i*a}else if(e.order==="YXZ"){const e=a*r,c=a*o,l=s*r,d=s*o;t[0]=e+d*n,t[4]=l*n-c,t[8]=i*s,t[1]=i*o,t[5]=i*r,t[9]=-n,t[2]=c*n-l,t[6]=d+e*n,t[10]=i*a}else if(e.order==="ZXY"){const e=a*r,c=a*o,l=s*r,d=s*o;t[0]=e-d*n,t[4]=-i*o,t[8]=l+c*n,t[1]=c+l*n,t[5]=i*r,t[9]=d-e*n,t[2]=-i*s,t[6]=n,t[10]=i*a}else if(e.order==="ZYX"){const e=i*r,c=i*o,l=n*r,d=n*o;t[0]=a*r,t[4]=l*s-c,t[8]=e*s+d,t[1]=a*o,t[5]=d*s+e,t[9]=c*s-l,t[2]=-s,t[6]=n*a,t[10]=i*a}else if(e.order==="YZX"){const e=i*a,c=i*s,l=n*a,d=n*s;t[0]=a*r,t[4]=d-e*o,t[8]=l*o+c,t[1]=o,t[5]=i*r,t[9]=-n*r,t[2]=-s*r,t[6]=c*o+l,t[10]=e-d*o}else if(e.order==="XZY"){const e=i*a,c=i*s,l=n*a,d=n*s;t[0]=a*r,t[4]=-o,t[8]=s*r,t[1]=e*o+d,t[5]=i*r,t[9]=c*o-l,t[2]=l*o-c,t[6]=n*r,t[10]=d*o+e}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(K9,e,I9)}lookAt(e,t,n){const s=this.elements;return ut.subVectors(e,t),ut.lengthSq()===0&&(ut.z=1),ut.normalize(),$n.crossVectors(n,ut),$n.lengthSq()===0&&(Math.abs(n.z)===1?ut.x+=1e-4:ut.z+=1e-4,ut.normalize(),$n.crossVectors(n,ut)),$n.normalize(),Yr.crossVectors(ut,$n),s[0]=$n.x,s[4]=Yr.x,s[8]=ut.x,s[1]=$n.y,s[5]=Yr.y,s[9]=ut.y,s[2]=$n.z,s[6]=Yr.z,s[10]=ut.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,s=t.elements,o=this.elements,i=n[0],a=n[4],r=n[8],c=n[12],l=n[1],d=n[5],u=n[9],h=n[13],m=n[2],f=n[6],p=n[10],g=n[14],v=n[3],b=n[7],j=n[11],y=n[15],_=s[0],w=s[4],O=s[8],x=s[12],C=s[1],E=s[5],k=s[9],A=s[13],S=s[2],M=s[6],F=s[10],T=s[14],z=s[3],D=s[7],N=s[11],L=s[15];return o[0]=i*_+a*C+r*S+c*z,o[4]=i*w+a*E+r*M+c*D,o[8]=i*O+a*k+r*F+c*N,o[12]=i*x+a*A+r*T+c*L,o[1]=l*_+d*C+u*S+h*z,o[5]=l*w+d*E+u*M+h*D,o[9]=l*O+d*k+u*F+h*N,o[13]=l*x+d*A+u*T+h*L,o[2]=m*_+f*C+p*S+g*z,o[6]=m*w+f*E+p*M+g*D,o[10]=m*O+f*k+p*F+g*N,o[14]=m*x+f*A+p*T+g*L,o[3]=v*_+b*C+j*S+y*z,o[7]=v*w+b*E+j*M+y*D,o[11]=v*O+b*k+j*F+y*N,o[15]=v*x+b*A+j*T+y*L,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],s=e[8],o=e[12],i=e[1],a=e[5],r=e[9],c=e[13],l=e[2],d=e[6],u=e[10],h=e[14],m=e[3],f=e[7],p=e[11],g=e[15];return m*(+o*r*d-s*c*d-o*a*u+n*c*u+s*a*h-n*r*h)+f*(+t*r*h-t*c*u+o*i*u-s*i*h+s*c*l-o*r*l)+p*(+t*c*d-t*a*h-o*i*d+n*i*h+o*a*l-n*c*l)+g*(-s*a*l-t*r*d+t*a*u+s*i*d-n*i*u+n*r*l)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const s=this.elements;return e.isVector3?(s[12]=e.x,s[13]=e.y,s[14]=e.z):(s[12]=e,s[13]=t,s[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],s=e[2],o=e[3],d=e[4],f=e[5],r=e[6],c=e[7],l=e[8],i=e[9],u=e[10],h=e[11],m=e[12],a=e[13],p=e[14],g=e[15],b=i*p*c-a*u*c+a*r*h-f*p*h-i*r*g+f*u*g,j=m*u*c-l*p*c-m*r*h+d*p*h+l*r*g-d*u*g,y=l*a*c-m*i*c+m*f*h-d*a*h-l*f*g+d*i*g,_=m*i*r-l*a*r-m*f*u+d*a*u+l*f*p-d*i*p,w=t*b+n*j+s*y+o*_;if(w===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const v=1/w;return e[0]=b*v,e[1]=(a*u*o-i*p*o-a*s*h+n*p*h+i*s*g-n*u*g)*v,e[2]=(f*p*o-a*r*o+a*s*c-n*p*c-f*s*g+n*r*g)*v,e[3]=(i*r*o-f*u*o-i*s*c+n*u*c+f*s*h-n*r*h)*v,e[4]=j*v,e[5]=(l*p*o-m*u*o+m*s*h-t*p*h-l*s*g+t*u*g)*v,e[6]=(m*r*o-d*p*o-m*s*c+t*p*c+d*s*g-t*r*g)*v,e[7]=(d*u*o-l*r*o+l*s*c-t*u*c-d*s*h+t*r*h)*v,e[8]=y*v,e[9]=(m*i*o-l*a*o-m*n*h+t*a*h+l*n*g-t*i*g)*v,e[10]=(d*a*o-m*f*o+m*n*c-t*a*c-d*n*g+t*f*g)*v,e[11]=(l*f*o-d*i*o-l*n*c+t*i*c+d*n*h-t*f*h)*v,e[12]=_*v,e[13]=(l*a*s-m*i*s+m*n*u-t*a*u-l*n*p+t*i*p)*v,e[14]=(m*f*s-d*a*s-m*n*r+t*a*r+d*n*p-t*f*p)*v,e[15]=(d*i*s-l*f*s+l*n*r-t*i*r-d*n*u+t*f*u)*v,this}scale(e){const t=this.elements,n=e.x,s=e.y,o=e.z;return t[0]*=n,t[4]*=s,t[8]*=o,t[1]*=n,t[5]*=s,t[9]*=o,t[2]*=n,t[6]*=s,t[10]*=o,t[3]*=n,t[7]*=s,t[11]*=o,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],s=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.max(t,n,s)**.5}makeTranslation(e,t,n){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const a=Math.cos(t),s=Math.sin(t),c=1-a,r=e.x,o=e.y,n=e.z,i=c*r,l=c*o;return this.set(i*r+a,i*o-s*n,i*n+s*o,0,i*o+s*n,l*o+a,l*n-s*r,0,i*n-s*o,l*n+s*r,c*n*n+a,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,s,o,i){return this.set(1,n,o,0,e,1,i,0,t,s,1,0,0,0,0,1),this}compose(e,t,n){const s=this.elements,o=t._x,i=t._y,r=t._z,c=t._w,w=o+o,d=i+i,a=r+r,_=o*w,y=o*d,m=o*a,f=i*d,p=i*a,g=r*a,v=c*w,b=c*d,j=c*a,h=n.x,u=n.y,l=n.z;return s[0]=(1-(f+g))*h,s[1]=(y+j)*h,s[2]=(m-b)*h,s[3]=0,s[4]=(y-j)*u,s[5]=(1-(_+g))*u,s[6]=(p+v)*u,s[7]=0,s[8]=(m+b)*l,s[9]=(p-v)*l,s[10]=(1-(_+f))*l,s[11]=0,s[12]=e.x,s[13]=e.y,s[14]=e.z,s[15]=1,this}decompose(e,t,n){const s=this.elements;let o=Zi.set(s[0],s[1],s[2]).length();const c=Zi.set(s[4],s[5],s[6]).length(),l=Zi.set(s[8],s[9],s[10]).length(),d=this.determinant();d<0&&(o=-o),e.x=s[12],e.y=s[13],e.z=s[14],Rt.copy(this);const i=1/o,a=1/c,r=1/l;return Rt.elements[0]*=i,Rt.elements[1]*=i,Rt.elements[2]*=i,Rt.elements[4]*=a,Rt.elements[5]*=a,Rt.elements[6]*=a,Rt.elements[8]*=r,Rt.elements[9]*=r,Rt.elements[10]*=r,t.setFromRotationMatrix(Rt),n.x=o,n.y=c,n.z=l,this}makePerspective(e,t,n,s,o,i,a=uo,r=!1){const c=this.elements,u=2*o/(t-e),h=2*o/(n-s),m=(t+e)/(t-e),f=(n+s)/(n-s);let l,d;if(r)l=o/(i-o),d=i*o/(i-o);else if(a===uo)l=-(i+o)/(i-o),d=-2*i*o/(i-o);else if(a===J1)l=-i/(i-o),d=-i*o/(i-o);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return c[0]=u,c[4]=0,c[8]=m,c[12]=0,c[1]=0,c[5]=h,c[9]=f,c[13]=0,c[2]=0,c[6]=0,c[10]=l,c[14]=d,c[3]=0,c[7]=0,c[11]=-1,c[15]=0,this}makeOrthographic(e,t,n,s,o,i,a=uo,r=!1){const c=this.elements,u=2/(t-e),h=2/(n-s),m=-(t+e)/(t-e),f=-(n+s)/(n-s);let l,d;if(r)l=1/(i-o),d=i/(i-o);else if(a===uo)l=-2/(i-o),d=-(i+o)/(i-o);else if(a===J1)l=-1/(i-o),d=-o/(i-o);else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return c[0]=u,c[4]=0,c[8]=0,c[12]=m,c[1]=0,c[5]=h,c[9]=0,c[13]=f,c[2]=0,c[6]=0,c[10]=l,c[14]=d,c[3]=0,c[7]=0,c[11]=0,c[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let e=0;e<16;e++)if(t[e]!==n[e])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}},Zi=new n,Rt=new D,K9=new n(0,0,0),I9=new n(1,1,1),$n=new n,Yr=new n,ut=new n,N0=new D,L0=new Gt,Ll=class _Euler{constructor(e=0,t=0,n=0,s=_Euler.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=s}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,s=this._order){return this._x=e,this._y=t,this._z=n,this._order=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const s=e.elements,o=s[0],r=s[4],c=s[8],l=s[1],i=s[5],d=s[9],u=s[2],h=s[6],a=s[10];switch(t){case"XYZ":this._y=Math.asin(C(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-d,a),this._z=Math.atan2(-r,o)):(this._x=Math.atan2(h,i),this._z=0);break;case"YXZ":this._x=Math.asin(-C(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(c,a),this._z=Math.atan2(l,i)):(this._y=Math.atan2(-u,o),this._z=0);break;case"ZXY":this._x=Math.asin(C(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(-u,a),this._z=Math.atan2(-r,i)):(this._y=0,this._z=Math.atan2(l,o));break;case"ZYX":this._y=Math.asin(-C(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(h,a),this._z=Math.atan2(l,o)):(this._x=0,this._z=Math.atan2(-r,i));break;case"YZX":this._z=Math.asin(C(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-d,i),this._y=Math.atan2(-u,o)):(this._x=0,this._y=Math.atan2(c,a));break;case"XZY":this._z=Math.asin(-C(r,-1,1)),Math.abs(r)<.9999999?(this._x=Math.atan2(h,i),this._y=Math.atan2(c,o)):(this._x=Math.atan2(-d,a),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return N0.makeRotationFromQuaternion(e),this.setFromRotationMatrix(N0,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return L0.setFromEuler(this),this.setFromQuaternion(L0,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==0[0]&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}},Ll.DEFAULT_ORDER="XYZ",H9=class{constructor(){this.mask=1|0}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=4294967295|0}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}},P9=0,I0=new n,ea=new Gt,Rn=new D,cl=new n,ka=new n,z9=new n,T9=new Gt,q0=new n(1,0,0),Y0=new n(0,1,0),G0=new n(0,0,1),X0={type:"added"},O9={type:"removed"},$i={type:"childadded",child:null},P1={type:"childremoved",child:null},je=class _Object3D extends xr{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:P9++}),this.uuid=an(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=_Object3D.DEFAULT_UP.clone();const s=new n,e=new Ll,t=new Gt,o=new n(1,1,1);function i(){t.setFromEuler(e,!1)}function a(){e.setFromQuaternion(t,0[0],!1)}e._onChange(i),t._onChange(a),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:s},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:t},scale:{configurable:!0,enumerable:!0,value:o},modelViewMatrix:{value:new D},normalMatrix:{value:new E}}),this.matrix=new D,this.matrixWorld=new D,this.matrixAutoUpdate=_Object3D.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=_Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new H9,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.customDepthMaterial=0[0],this.customDistanceMaterial=0[0],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return ea.setFromAxisAngle(e,t),this.quaternion.multiply(ea),this}rotateOnWorldAxis(e,t){return ea.setFromAxisAngle(e,t),this.quaternion.premultiply(ea),this}rotateX(e){return this.rotateOnAxis(q0,e)}rotateY(e){return this.rotateOnAxis(Y0,e)}rotateZ(e){return this.rotateOnAxis(G0,e)}translateOnAxis(e,t){return I0.copy(e).applyQuaternion(this.quaternion),this.position.add(I0.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(q0,e)}translateY(e){return this.translateOnAxis(Y0,e)}translateZ(e){return this.translateOnAxis(G0,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(Rn.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?cl.copy(e):cl.set(e,t,n);const s=this.parent;this.updateWorldMatrix(!0,!1),ka.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Rn.lookAt(ka,cl,this.up):Rn.lookAt(cl,ka,this.up),this.quaternion.setFromRotationMatrix(Rn),s&&(Rn.extractRotation(s.matrixWorld),ea.setFromRotationMatrix(Rn),this.quaternion.premultiply(ea.invert()))}add(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.removeFromParent(),e.parent=this,this.children.push(e),e.dispatchEvent(X0),$i.child=e,this.dispatchEvent($i),$i.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(O9),P1.child=e,this.dispatchEvent(P1),P1.child=null),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),Rn.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),Rn.multiply(e.parent.matrixWorld)),e.applyMatrix4(Rn),e.removeFromParent(),e.parent=this,this.children.push(e),e.updateWorldMatrix(!1,!0),e.dispatchEvent(X0),$i.child=e,this.dispatchEvent($i),$i.child=null,this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,o=this.children.length;n<o;n++){const i=this.children[n],s=i.getObjectByProperty(e,t);if(s!==0[0])return s}}getObjectsByProperty(e,t,n=[]){this[e]===t&&n.push(this);const s=this.children;for(let o=0,i=s.length;o<i;o++)s[o].getObjectsByProperty(e,t,n);return n}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(ka,e,z9),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(ka,T9,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,s=t.length;n<s;n++){const o=t[n];o.updateMatrixWorld(e)}}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),t===!0){const e=this.children;for(let t=0,n=e.length;t<n;t++){const s=e[t];s.updateWorldMatrix(!1,!0)}}}toJSON(e){const i=e===0[0]||typeof e=="string",n={};i&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.7,type:"Object",generator:"Object3D.toJSON"});const t={};t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),this.castShadow===!0&&(t.castShadow=!0),this.receiveShadow===!0&&(t.receiveShadow=!0),this.visible===!1&&(t.visible=!1),this.frustumCulled===!1&&(t.frustumCulled=!1),this.renderOrder!==0&&(t.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(t.userData=this.userData),t.layers=this.layers.mask,t.matrix=this.matrix.toArray(),t.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(t.matrixAutoUpdate=!1),this.isInstancedMesh&&(t.type="InstancedMesh",t.count=this.count,t.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(t.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(t.type="BatchedMesh",t.perObjectFrustumCulled=this.perObjectFrustumCulled,t.sortObjects=this.sortObjects,t.drawRanges=this._drawRanges,t.reservedRanges=this._reservedRanges,t.geometryInfo=this._geometryInfo.map(e=>({...e,boundingBox:e.boundingBox?e.boundingBox.toJSON():0[0],boundingSphere:e.boundingSphere?e.boundingSphere.toJSON():0[0]})),t.instanceInfo=this._instanceInfo.map(e=>({...e})),t.availableInstanceIds=this._availableInstanceIds.slice(),t.availableGeometryIds=this._availableGeometryIds.slice(),t.nextIndexStart=this._nextIndexStart,t.nextVertexStart=this._nextVertexStart,t.geometryCount=this._geometryCount,t.maxInstanceCount=this._maxInstanceCount,t.maxVertexCount=this._maxVertexCount,t.maxIndexCount=this._maxIndexCount,t.geometryInitialized=this._geometryInitialized,t.matricesTexture=this._matricesTexture.toJSON(e),t.indirectTexture=this._indirectTexture.toJSON(e),this._colorsTexture!==null&&(t.colorsTexture=this._colorsTexture.toJSON(e)),this.boundingSphere!==null&&(t.boundingSphere=this.boundingSphere.toJSON()),this.boundingBox!==null&&(t.boundingBox=this.boundingBox.toJSON()));function o(t,n){return t[n.uuid]===0[0]&&(t[n.uuid]=n.toJSON(e)),n.uuid}if(this.isScene)this.background&&(this.background.isColor?t.background=this.background.toJSON():this.background.isTexture&&(t.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(t.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){t.geometry=o(e.geometries,this.geometry);const n=this.geometry.parameters;if(n!==0[0]&&n.shapes!==0[0]){const t=n.shapes;if(Array.isArray(t))for(let n=0,s=t.length;n<s;n++){const i=t[n];o(e.shapes,i)}else o(e.shapes,t)}}if(this.isSkinnedMesh&&(t.bindMode=this.bindMode,t.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==0[0]&&(o(e.skeletons,this.skeleton),t.skeleton=this.skeleton.uuid)),this.material!==0[0])if(Array.isArray(this.material)){const n=[];for(let t=0,s=this.material.length;t<s;t++)n.push(o(e.materials,this.material[t]));t.material=n}else t.material=o(e.materials,this.material);if(this.children.length>0){t.children=[];for(let n=0;n<this.children.length;n++)t.children.push(this.children[n].toJSON(e).object)}if(this.animations.length>0){t.animations=[];for(let n=0;n<this.animations.length;n++){const s=this.animations[n];t.animations.push(o(e.animations,s))}}if(i){const t=s(e.geometries),o=s(e.materials),i=s(e.textures),a=s(e.images),r=s(e.shapes),c=s(e.skeletons),l=s(e.animations),d=s(e.nodes);t.length>0&&(n.geometries=t),o.length>0&&(n.materials=o),i.length>0&&(n.textures=i),a.length>0&&(n.images=a),r.length>0&&(n.shapes=r),c.length>0&&(n.skeletons=c),l.length>0&&(n.animations=l),d.length>0&&(n.nodes=d)}return n.object=t,n;function s(e){const t=[];for(const s in e){const n=e[s];delete n.metadata,t.push(n)}return t}}clone(e){return(new this.constructor).copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let t=0;t<e.children.length;t++){const n=e.children[t];this.add(n.clone())}return this}},je.DEFAULT_UP=new n(0,1,0),je.DEFAULT_MATRIX_AUTO_UPDATE=!0,je.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0,Ht=new n,bn=new n,R1=new n,vn=new n,Di=new n,Ti=new n,r2=new n,z1=new n,F1=new n,S1=new n,k1=new it,E1=new it,C1=new it,pr=class _Triangle{constructor(e=new n,t=new n,s=new n){this.a=e,this.b=t,this.c=s}static getNormal(e,t,n,s){s.subVectors(n,t),Ht.subVectors(e,t),s.cross(Ht);const o=s.lengthSq();return o>0?s.multiplyScalar(1/o**.5):s.set(0,0,0)}static getBarycoord(e,t,n,s,o){Ht.subVectors(s,t),bn.subVectors(n,t),R1.subVectors(e,t);const a=Ht.dot(Ht),i=Ht.dot(bn),r=Ht.dot(R1),c=bn.dot(bn),l=bn.dot(R1),d=a*c-i*i;if(d===0)return o.set(0,0,0),null;const u=1/d,h=(c*r-i*l)*u,m=(a*l-i*r)*u;return o.set(1-h-m,m,h)}static containsPoint(e,t,n,s){return this.getBarycoord(e,t,n,s,vn)!==null&&vn.x>=0&&vn.y>=0&&vn.x+vn.y<=1}static getInterpolation(e,t,n,s,o,i,a,r){return this.getBarycoord(e,t,n,s,vn)===null?(r.x=0,r.y=0,"z"in r&&(r.z=0),"w"in r&&(r.w=0),null):(r.setScalar(0),r.addScaledVector(o,vn.x),r.addScaledVector(i,vn.y),r.addScaledVector(a,vn.z),r)}static getInterpolatedAttribute(e,t,n,s,o,i){return k1.setScalar(0),E1.setScalar(0),C1.setScalar(0),k1.fromBufferAttribute(e,t),E1.fromBufferAttribute(e,n),C1.fromBufferAttribute(e,s),i.setScalar(0),i.addScaledVector(k1,o.x),i.addScaledVector(E1,o.y),i.addScaledVector(C1,o.z),i}static isFrontFacing(e,t,n,s){return Ht.subVectors(n,t),bn.subVectors(e,t),Ht.cross(bn).dot(s)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,s){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[s]),this}setFromAttributeAndIndices(e,t,n,s){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,s),this}clone(){return(new this.constructor).copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return Ht.subVectors(this.c,this.b),bn.subVectors(this.a,this.b),Ht.cross(bn).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return _Triangle.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return _Triangle.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,n,s,o){return _Triangle.getInterpolation(e,this.a,this.b,this.c,t,n,s,o)}containsPoint(e){return _Triangle.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return _Triangle.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const o=this.a,d=this.b,h=this.c;let u,i;Di.subVectors(d,o),Ti.subVectors(h,o),z1.subVectors(e,o);const a=Di.dot(z1),r=Ti.dot(z1);if(a<=0&&r<=0)return t.copy(o);F1.subVectors(e,d);const n=Di.dot(F1),c=Ti.dot(F1);if(n>=0&&c<=n)return t.copy(d);const m=a*c-n*r;if(m<=0&&a>=0&&n<=0)return u=a/(a-n),t.copy(o).addScaledVector(Di,u);S1.subVectors(e,h);const l=Di.dot(S1),s=Ti.dot(S1);if(s>=0&&l<=s)return t.copy(h);const f=l*r-a*s;if(f<=0&&r>=0&&s<=0)return i=r/(r-s),t.copy(o).addScaledVector(Ti,i);const p=n*s-l*c;if(p<=0&&c-n>=0&&l-s>=0)return r2.subVectors(h,d),i=(c-n)/(c-n+(l-s)),t.copy(d).addScaledVector(r2,i);const g=1/(p+f+m);return u=f*g,i=m*g,t.copy(o).addScaledVector(Di,u).addScaledVector(Ti,i)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}},p2={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},ls={h:0,s:0,l:0},Xr={h:0,s:0,l:0};function b2(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+(t-e)*6*n:n<1/2?t:n<2/3?e+(t-e)*6*(2/3-n):e}z=class{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,n)}set(e,t,n){if(t===0[0]&&n===0[0]){const t=e;t&&t.isColor?this.copy(t):typeof t=="number"?this.setHex(t):typeof t=="string"&&this.setStyle(t)}else this.setRGB(e,t,n);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=Oe){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,Ze.colorSpaceToWorking(this,t),this}setRGB(e,t,n,s=Ze.workingColorSpace){return this.r=e,this.g=t,this.b=n,Ze.colorSpaceToWorking(this,s),this}setHSL(e,t,n,s=Ze.workingColorSpace){if(e=s0(e,1),t=C(t,0,1),n=C(n,0,1),t===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+t):n+t-n*t,o=2*n-s;this.r=b2(o,s,e+1/3),this.g=b2(o,s,e),this.b=b2(o,s,e-1/3)}return Ze.colorSpaceToWorking(this,s),this}setStyle(e,t=Oe){function s(t){if(t===0[0])return;parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let n;if(n=/^(\w+)\(([^)]*)\)/.exec(e)){let o;const a=n[1],i=n[2];switch(a){case"rgb":case"rgba":if(o=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i))return s(o[4]),this.setRGB(Math.min(255,parseInt(o[1],10))/255,Math.min(255,parseInt(o[2],10))/255,Math.min(255,parseInt(o[3],10))/255,t);if(o=/^\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i))return s(o[4]),this.setRGB(Math.min(100,parseInt(o[1],10))/100,Math.min(100,parseInt(o[2],10))/100,Math.min(100,parseInt(o[3],10))/100,t);break;case"hsl":case"hsla":if(o=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)%\s*,\s*(\d*\.?\d+)%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i))return s(o[4]),this.setHSL(parseFloat(o[1])/360,parseFloat(o[2])/100,parseFloat(o[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(n=/^#([A-Fa-f\d]+)$/.exec(e)){const s=n[1],o=s.length;if(o===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,t);if(o===6)return this.setHex(parseInt(s,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=Oe){const n=p2[e.toLowerCase()];return n!==0[0]?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=es(e.r),this.g=es(e.g),this.b=es(e.b),this}copyLinearToSRGB(e){return this.r=fr(e.r),this.g=fr(e.g),this.b=fr(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=Oe){return Ze.workingToColorSpace(ke.copy(this),e),Math.round(C(ke.r*255,0,255))*65536+Math.round(C(ke.g*255,0,255))*256+Math.round(C(ke.b*255,0,255))}getHexString(e=Oe){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=Ze.workingColorSpace){Ze.workingToColorSpace(ke.copy(this),t);const a=ke.r,n=ke.g,s=ke.b,o=Math.max(a,n,s),r=Math.min(a,n,s);let i,c;const l=(r+o)/2;if(r===o)i=0,c=0;else{const e=o-r;switch(c=l<=.5?e/(o+r):e/(2-o-r),o){case a:i=(n-s)/e+(n<s?6:0);break;case n:i=(s-a)/e+2;break;case s:i=(a-n)/e+4;break}i/=6}return e.h=i,e.s=c,e.l=l,e}getRGB(e,t=Ze.workingColorSpace){return Ze.workingToColorSpace(ke.copy(this),t),e.r=ke.r,e.g=ke.g,e.b=ke.b,e}getStyle(e=Oe){Ze.workingToColorSpace(ke.copy(this),e);const t=ke.r,n=ke.g,s=ke.b;return e!==Oe?`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${s.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(s*255)})`}offsetHSL(e,t,n){return this.getHSL(ls),this.setHSL(ls.h+e,ls.s+t,ls.l+n)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(ls),e.getHSL(Xr);const n=Br(ls.h,Xr.h,t),s=Br(ls.s,Xr.s,t),o=Br(ls.l,Xr.l,t);return this.setHSL(n,s,o),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const n=this.r,s=this.g,o=this.b,t=e.elements;return this.r=t[0]*n+t[3]*s+t[6]*o,this.g=t[1]*n+t[4]*s+t[7]*o,this.b=t[2]*n+t[5]*s+t[8]*o,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}},ke=new z,z.NAMES=p2,w9=0,_s=class extends xr{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:w9++}),this.uuid=an(),this.name="",this.type="Material",this.blending=i3,this.side=bc,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=e3,this.blendDst=J2,this.blendEquation=n3,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new z(0,0,0),this.blendAlpha=0,this.depthFunc=fc,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=O0,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Zo,this.stencilZFail=Zo,this.stencilZPass=Zo,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.allowOverride=!0,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!==e>0&&this.version++,this._alphaTest=e}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e===0[0])return;for(const s in e){const n=e[s];if(n===0[0]){console.warn(`THREE.Material: parameter '${s}' has value of undefined.`);continue}const t=this[s];if(t===0[0]){console.warn(`THREE.Material: '${s}' is not a property of THREE.${this.type}.`);continue}t&&t.isColor?t.set(n):t&&t.isVector3&&n&&n.isVector3?t.copy(n):this[s]=n}}toJSON(e){const n=e===0[0]||typeof e=="string";n&&(e={textures:{},images:{}});const t={metadata:{version:4.7,type:"Material",generator:"Material.toJSON"}};t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),this.color&&this.color.isColor&&(t.color=this.color.getHex()),this.roughness!==0[0]&&(t.roughness=this.roughness),this.metalness!==0[0]&&(t.metalness=this.metalness),this.sheen!==0[0]&&(t.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(t.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==0[0]&&(t.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(t.emissive=this.emissive.getHex()),this.emissiveIntensity!==0[0]&&this.emissiveIntensity!==1&&(t.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(t.specular=this.specular.getHex()),this.specularIntensity!==0[0]&&(t.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(t.specularColor=this.specularColor.getHex()),this.shininess!==0[0]&&(t.shininess=this.shininess),this.clearcoat!==0[0]&&(t.clearcoat=this.clearcoat),this.clearcoatRoughness!==0[0]&&(t.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(t.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(t.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(t.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,t.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.sheenColorMap&&this.sheenColorMap.isTexture&&(t.sheenColorMap=this.sheenColorMap.toJSON(e).uuid),this.sheenRoughnessMap&&this.sheenRoughnessMap.isTexture&&(t.sheenRoughnessMap=this.sheenRoughnessMap.toJSON(e).uuid),this.dispersion!==0[0]&&(t.dispersion=this.dispersion),this.iridescence!==0[0]&&(t.iridescence=this.iridescence),this.iridescenceIOR!==0[0]&&(t.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==0[0]&&(t.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(t.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(t.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==0[0]&&(t.anisotropy=this.anisotropy),this.anisotropyRotation!==0[0]&&(t.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(t.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(t.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(t.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(t.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(t.lightMap=this.lightMap.toJSON(e).uuid,t.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(t.aoMap=this.aoMap.toJSON(e).uuid,t.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(t.bumpMap=this.bumpMap.toJSON(e).uuid,t.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(t.normalMap=this.normalMap.toJSON(e).uuid,t.normalMapType=this.normalMapType,t.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(t.displacementMap=this.displacementMap.toJSON(e).uuid,t.displacementScale=this.displacementScale,t.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(t.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(t.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(t.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(t.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(t.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(t.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(t.envMap=this.envMap.toJSON(e).uuid,this.combine!==0[0]&&(t.combine=this.combine)),this.envMapRotation!==0[0]&&(t.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==0[0]&&(t.envMapIntensity=this.envMapIntensity),this.reflectivity!==0[0]&&(t.reflectivity=this.reflectivity),this.refractionRatio!==0[0]&&(t.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(t.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==0[0]&&(t.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(t.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==0[0]&&(t.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(t.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==0[0]&&this.attenuationDistance!==1/0&&(t.attenuationDistance=this.attenuationDistance),this.attenuationColor!==0[0]&&(t.attenuationColor=this.attenuationColor.getHex()),this.size!==0[0]&&(t.size=this.size),this.shadowSide!==null&&(t.shadowSide=this.shadowSide),this.sizeAttenuation!==0[0]&&(t.sizeAttenuation=this.sizeAttenuation),this.blending!==i3&&(t.blending=this.blending),this.side!==bc&&(t.side=this.side),this.vertexColors===!0&&(t.vertexColors=!0),this.opacity<1&&(t.opacity=this.opacity),this.transparent===!0&&(t.transparent=!0),this.blendSrc!==e3&&(t.blendSrc=this.blendSrc),this.blendDst!==J2&&(t.blendDst=this.blendDst),this.blendEquation!==n3&&(t.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(t.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(t.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(t.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(t.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(t.blendAlpha=this.blendAlpha),this.depthFunc!==fc&&(t.depthFunc=this.depthFunc),this.depthTest===!1&&(t.depthTest=this.depthTest),this.depthWrite===!1&&(t.depthWrite=this.depthWrite),this.colorWrite===!1&&(t.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(t.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==O0&&(t.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(t.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(t.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==Zo&&(t.stencilFail=this.stencilFail),this.stencilZFail!==Zo&&(t.stencilZFail=this.stencilZFail),this.stencilZPass!==Zo&&(t.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(t.stencilWrite=this.stencilWrite),this.rotation!==0[0]&&this.rotation!==0&&(t.rotation=this.rotation),this.polygonOffset===!0&&(t.polygonOffset=!0),this.polygonOffsetFactor!==0&&(t.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(t.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==0[0]&&this.linewidth!==1&&(t.linewidth=this.linewidth),this.dashSize!==0[0]&&(t.dashSize=this.dashSize),this.gapSize!==0[0]&&(t.gapSize=this.gapSize),this.scale!==0[0]&&(t.scale=this.scale),this.dithering===!0&&(t.dithering=!0),this.alphaTest>0&&(t.alphaTest=this.alphaTest),this.alphaHash===!0&&(t.alphaHash=!0),this.alphaToCoverage===!0&&(t.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(t.premultipliedAlpha=!0),this.forceSinglePass===!0&&(t.forceSinglePass=!0),this.wireframe===!0&&(t.wireframe=!0),this.wireframeLinewidth>1&&(t.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(t.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(t.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(t.flatShading=!0),this.visible===!1&&(t.visible=!1),this.toneMapped===!1&&(t.toneMapped=!1),this.fog===!1&&(t.fog=!1),Object.keys(this.userData).length>0&&(t.userData=this.userData);function s(e){const t=[];for(const s in e){const n=e[s];delete n.metadata,t.push(n)}return t}if(n){const n=s(e.textures),o=s(e.images);n.length>0&&(t.textures=n),o.length>0&&(t.images=o)}return t}clone(){return(new this.constructor).copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const e=t.length;n=new Array(e);for(let s=0;s!==e;++s)n[s]=t[s].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}},ji=class extends _s{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new z(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Ll,this.combine=Sj,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}},ee=new n,Ur=new F,j9=0,Mt=class{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:j9++}),this.name="",this.array=e,this.itemSize=t,this.count=e!==0[0]?e.length/t:0,this.normalized=n,this.usage=Q1,this.updateRanges=[],this.gpuType=M1,this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let s=0,o=this.itemSize;s<o;s++)this.array[e+s]=t.array[n+s];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)Ur.fromBufferAttribute(this,t),Ur.applyMatrix3(e),this.setXY(t,Ur.x,Ur.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)ee.fromBufferAttribute(this,t),ee.applyMatrix3(e),this.setXYZ(t,ee.x,ee.y,ee.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)ee.fromBufferAttribute(this,t),ee.applyMatrix4(e),this.setXYZ(t,ee.x,ee.y,ee.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)ee.fromBufferAttribute(this,t),ee.applyNormalMatrix(e),this.setXYZ(t,ee.x,ee.y,ee.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)ee.fromBufferAttribute(this,t),ee.transformDirection(e),this.setXYZ(t,ee.x,ee.y,ee.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let n=this.array[e*this.itemSize+t];return this.normalized&&(n=Jt(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=H(n,this.array)),this.array[e*this.itemSize+t]=n,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=Jt(t,this.array)),t}setX(e,t){return this.normalized&&(t=H(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=Jt(t,this.array)),t}setY(e,t){return this.normalized&&(t=H(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=Jt(t,this.array)),t}setZ(e,t){return this.normalized&&(t=H(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=Jt(t,this.array)),t}setW(e,t){return this.normalized&&(t=H(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=H(t,this.array),n=H(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,s){return e*=this.itemSize,this.normalized&&(t=H(t,this.array),n=H(n,this.array),s=H(s,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=s,this}setXYZW(e,t,n,s,o){return e*=this.itemSize,this.normalized&&(t=H(t,this.array),n=H(n,this.array),s=H(s,this.array),o=H(o,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=s,this.array[e+3]=o,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==Q1&&(e.usage=this.usage),e}},b9=class extends Mt{constructor(e,t,n){super(new Uint16Array(e),t,n)}},v9=class extends Mt{constructor(e,t,n){super(new Uint32Array(e),t,n)}},j1=class extends Mt{constructor(e,t,n){super(new Float32Array(e),t,n)}},g9=0,wt=new D,b1=new je,ni=new n,ct=new zn,cr=new zn,me=new n,jc=class _BufferGeometry extends xr{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:g9++}),this.uuid=an(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(LD(e)?v9:b9)(e,1):this.index=e,this}setIndirect(e){return this.indirect=e,this}getIndirect(){return this.indirect}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==0[0]}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==0[0]&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==0[0]){const t=(new E).getNormalMatrix(e);n.applyNormalMatrix(t),n.needsUpdate=!0}const s=this.attributes.tangent;return s!==0[0]&&(s.transformDirection(e),s.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return wt.makeRotationFromQuaternion(e),this.applyMatrix4(wt),this}rotateX(e){return wt.makeRotationX(e),this.applyMatrix4(wt),this}rotateY(e){return wt.makeRotationY(e),this.applyMatrix4(wt),this}rotateZ(e){return wt.makeRotationZ(e),this.applyMatrix4(wt),this}translate(e,t,n){return wt.makeTranslation(e,t,n),this.applyMatrix4(wt),this}scale(e,t,n){return wt.makeScale(e,t,n),this.applyMatrix4(wt),this}lookAt(e){return b1.lookAt(e),b1.updateMatrix(),this.applyMatrix4(b1.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(ni).negate(),this.translate(ni.x,ni.y,ni.z),this}setFromPoints(e){const t=this.getAttribute("position");if(t===0[0]){const t=[];for(let n=0,o=e.length;n<o;n++){const s=e[n];t.push(s.x,s.y,s.z||0)}this.setAttribute("position",new j1(t,3))}else{const n=Math.min(e.length,t.count);for(let s=0;s<n;s++){const o=e[s];t.setXYZ(s,o.x,o.y,o.z||0)}e.length>t.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),t.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new zn);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new n(-(1/0),-(1/0),-(1/0)),new n(1/0,1/0,1/0));return}if(e!==0[0]){if(this.boundingBox.setFromBufferAttribute(e),t)for(let e=0,n=t.length;e<n;e++){const s=t[e];ct.setFromBufferAttribute(s),this.morphTargetsRelative?(me.addVectors(this.boundingBox.min,ct.min),this.boundingBox.expandByPoint(me),me.addVectors(this.boundingBox.max,ct.max),this.boundingBox.expandByPoint(me)):(this.boundingBox.expandByPoint(ct.min),this.boundingBox.expandByPoint(ct.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Ut);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new n,1/0);return}if(e){const s=this.boundingSphere.center;if(ct.setFromBufferAttribute(e),t)for(let e=0,n=t.length;e<n;e++){const s=t[e];cr.setFromBufferAttribute(s),this.morphTargetsRelative?(me.addVectors(ct.min,cr.min),ct.expandByPoint(me),me.addVectors(ct.max,cr.max),ct.expandByPoint(me)):(ct.expandByPoint(cr.min),ct.expandByPoint(cr.max))}ct.getCenter(s);let n=0;for(let t=0,o=e.count;t<o;t++)me.fromBufferAttribute(e,t),n=Math.max(n,s.distanceToSquared(me));if(t)for(let o=0,a=t.length;o<a;o++){const i=t[o],r=this.morphTargetsRelative;for(let t=0,o=i.count;t<o;t++)me.fromBufferAttribute(i,t),r&&(ni.fromBufferAttribute(e,t),me.add(ni)),n=Math.max(n,s.distanceToSquared(me))}this.boundingSphere.radius=n**.5,isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,s=this.attributes;if(e===null||s.position===0[0]||s.normal===0[0]||s.uv===0[0]){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const a=s.position,_=s.normal,b=s.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new Mt(new Float32Array(4*a.count),4));const O=this.getAttribute("tangent"),c=[],l=[];for(let e=0;e<a.count;e++)c[e]=new n,l[e]=new n;const g=new n,h=new n,u=new n,p=new F,t=new F,i=new F,m=new n,d=new n;function w(e,n,s){g.fromBufferAttribute(a,e),h.fromBufferAttribute(a,n),u.fromBufferAttribute(a,s),p.fromBufferAttribute(b,e),t.fromBufferAttribute(b,n),i.fromBufferAttribute(b,s),h.sub(g),u.sub(g),t.sub(p),i.sub(p);const o=1/(t.x*i.y-i.x*t.y);if(!isFinite(o))return;m.copy(h).multiplyScalar(i.y).addScaledVector(u,-t.y).multiplyScalar(o),d.copy(u).multiplyScalar(t.x).addScaledVector(h,-i.x).multiplyScalar(o),c[e].add(m),c[n].add(m),c[s].add(m),l[e].add(d),l[n].add(d),l[s].add(d)}let o=this.groups;o.length===0&&(o=[{start:0,count:e.count}]);for(let t=0,i=o.length;t<i;++t){const n=o[t],s=n.start,a=n.count;for(let t=s,n=s+a;t<n;t+=3)w(e.getX(t+0),e.getX(t+1),e.getX(t+2))}const r=new n,j=new n,f=new n,y=new n;function v(e){f.fromBufferAttribute(_,e),y.copy(f);const t=c[e];r.copy(t),r.sub(f.multiplyScalar(f.dot(t))).normalize(),j.crossVectors(y,t);const n=j.dot(l[e]),s=n<0?-1:1;O.setXYZW(e,r.x,r.y,r.z,s)}for(let t=0,i=o.length;t<i;++t){const n=o[t],s=n.start,a=n.count;for(let t=s,n=s+a;t<n;t+=3)v(e.getX(t+0)),v(e.getX(t+1)),v(e.getX(t+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==0[0]){let o=this.getAttribute("normal");if(o===0[0])o=new Mt(new Float32Array(e.count*3),3),this.setAttribute("normal",o);else for(let e=0,t=o.count;e<t;e++)o.setXYZ(e,0,0,0);const l=new n,i=new n,d=new n,a=new n,r=new n,c=new n,s=new n,u=new n;if(t)for(let n=0,p=t.count;n<p;n+=3){const h=t.getX(n+0),m=t.getX(n+1),f=t.getX(n+2);l.fromBufferAttribute(e,h),i.fromBufferAttribute(e,m),d.fromBufferAttribute(e,f),s.subVectors(d,i),u.subVectors(l,i),s.cross(u),a.fromBufferAttribute(o,h),r.fromBufferAttribute(o,m),c.fromBufferAttribute(o,f),a.add(s),r.add(s),c.add(s),o.setXYZ(h,a.x,a.y,a.z),o.setXYZ(m,r.x,r.y,r.z),o.setXYZ(f,c.x,c.y,c.z)}else for(let t=0,n=e.count;t<n;t+=3)l.fromBufferAttribute(e,t+0),i.fromBufferAttribute(e,t+1),d.fromBufferAttribute(e,t+2),s.subVectors(d,i),u.subVectors(l,i),s.cross(u),o.setXYZ(t+0,s.x,s.y,s.z),o.setXYZ(t+1,s.x,s.y,s.z),o.setXYZ(t+2,s.x,s.y,s.z);this.normalizeNormals(),o.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)me.fromBufferAttribute(e,t),me.normalize(),e.setXYZ(t,me.x,me.y,me.z)}toNonIndexed(){function t(e,t){const o=e.array,n=e.itemSize,a=e.normalized,i=new o.constructor(t.length*n);let s=0,r=0;for(let a=0,c=t.length;a<c;a++){e.isInterleavedBufferAttribute?s=t[a]*e.data.stride+e.offset:s=t[a]*n;for(let e=0;e<n;e++)i[r++]=o[s++]}return new Mt(i,n,a)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new _BufferGeometry,n=this.index.array,s=this.attributes;for(const o in s){const i=s[o],a=t(i,n);e.setAttribute(o,a)}const o=this.morphAttributes;for(const s in o){const i=[],a=o[s];for(let e=0,s=a.length;e<s;e++){const o=a[e],r=t(o,n);i.push(r)}e.morphAttributes[s]=i}e.morphTargetsRelative=this.morphTargetsRelative;const i=this.groups;for(let t=0,s=i.length;t<s;t++){const n=i[t];e.addGroup(n.start,n.count,n.materialIndex)}return e}toJSON(){const e={metadata:{version:4.7,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==0[0]){const t=this.parameters;for(const n in t)t[n]!==0[0]&&(e[n]=t[n]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const t in n){const s=n[t];e.data.attributes[t]=s.toJSON(e.data)}const s={};let o=!1;for(const n in this.morphAttributes){const i=this.morphAttributes[n],t=[];for(let n=0,s=i.length;n<s;n++){const o=i[n];t.push(o.toJSON(e.data))}t.length>0&&(s[n]=t,o=!0)}o&&(e.data.morphAttributes=s,e.data.morphTargetsRelative=this.morphTargetsRelative);const i=this.groups;i.length>0&&(e.data.groups=JSON.parse(JSON.stringify(i)));const a=this.boundingSphere;return a!==null&&(e.data.boundingSphere=a.toJSON()),e}clone(){return(new this.constructor).copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone());const s=e.attributes;for(const e in s){const n=s[e];this.setAttribute(e,n.clone(t))}const o=e.morphAttributes;for(const e in o){const n=[],s=o[e];for(let e=0,o=s.length;e<o;e++)n.push(s[e].clone(t));this.morphAttributes[e]=n}this.morphTargetsRelative=e.morphTargetsRelative;const i=e.groups;for(let e=0,n=i.length;e<n;e++){const t=i[e];this.addGroup(t.start,t.count,t.materialIndex)}const a=e.boundingBox;a!==null&&(this.boundingBox=a.clone());const r=e.boundingSphere;return r!==null&&(this.boundingSphere=r.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}},H2=new D,Bs=new da,Sc=new Ut,V2=new n,Tr=new n,il=new n,hl=new n,h1=new n,yl=new n,Y2=new n,xl=new n,El=class extends je{constructor(e=new jc,t=new ji){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.morphTargetDictionary=0[0],this.morphTargetInfluences=0[0],this.count=1,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==0[0]&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==0[0]&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const n=this.geometry,e=n.morphAttributes,t=Object.keys(e);if(t.length>0){const n=e[t[0]];if(n!==0[0]){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,t=n.length;e<t;e++){const s=n[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[s]=e}}}}getVertexPosition(e,t){const n=this.geometry,i=n.attributes.position,s=n.morphAttributes.position,a=n.morphTargetsRelative;t.fromBufferAttribute(i,e);const o=this.morphTargetInfluences;if(s&&o){yl.set(0,0,0);for(let n=0,r=s.length;n<r;n++){const i=o[n],c=s[n];if(i===0)continue;h1.fromBufferAttribute(c,e),a?yl.addScaledVector(h1,i):yl.addScaledVector(h1.sub(t),i)}t.add(yl)}return t}raycast(e,t){const n=this.geometry,o=this.material,s=this.matrixWorld;if(o===0[0])return;if(n.boundingSphere===null&&n.computeBoundingSphere(),Sc.copy(n.boundingSphere),Sc.applyMatrix4(s),Bs.copy(e.ray).recast(e.near),Sc.containsPoint(Bs.origin)===!1){if(Bs.intersectSphere(Sc,V2)===null)return;if(Bs.origin.distanceToSquared(V2)>(e.far-e.near)**2)return}if(H2.copy(s).invert(),Bs.copy(e.ray).applyMatrix4(H2),n.boundingBox!==null&&Bs.intersectsBox(n.boundingBox)===!1)return;this._computeIntersections(e,t,Bs)}_computeIntersections(e,t,n){let s;const a=this.geometry,r=this.material,i=a.index,h=a.attributes.position,c=a.attributes.uv,l=a.attributes.uv1,d=a.attributes.normal,u=a.groups,o=a.drawRange;if(i!==null)if(Array.isArray(r))for(let h=0,m=u.length;h<m;h++){const a=u[h],f=r[a.materialIndex],p=Math.max(a.start,o.start),g=Math.min(i.count,Math.min(a.start+a.count,o.start+o.count));for(let o=p,r=g;o<r;o+=3){const u=i.getX(o),h=i.getX(o+1),m=i.getX(o+2);s=c1(this,f,e,n,c,l,d,u,h,m),s&&(s.faceIndex=Math.floor(o/3),s.face.materialIndex=a.materialIndex,t.push(s))}}else{const a=Math.max(0,o.start),u=Math.min(i.count,o.start+o.count);for(let o=a,h=u;o<h;o+=3){const m=i.getX(o),f=i.getX(o+1),p=i.getX(o+2);s=c1(this,r,e,n,c,l,d,m,f,p),s&&(s.faceIndex=Math.floor(o/3),t.push(s))}}else if(h!==0[0])if(Array.isArray(r))for(let a=0,m=u.length;a<m;a++){const i=u[a],f=r[i.materialIndex],p=Math.max(i.start,o.start),g=Math.min(h.count,Math.min(i.start+i.count,o.start+o.count));for(let o=p,a=g;o<a;o+=3){const r=o,u=o+1,h=o+2;s=c1(this,f,e,n,c,l,d,r,u,h),s&&(s.faceIndex=Math.floor(o/3),s.face.materialIndex=i.materialIndex,t.push(s))}}else{const i=Math.max(0,o.start),a=Math.min(h.count,o.start+o.count);for(let o=i,u=a;o<u;o+=3){const h=o,m=o+1,f=o+2;s=c1(this,r,e,n,c,l,d,h,m,f),s&&(s.faceIndex=Math.floor(o/3),t.push(s))}}}};function HD(e,t,n,s,o,i,a,r){let c;if(t.side===Dj?c=s.intersectTriangle(a,i,o,!0,r):c=s.intersectTriangle(o,i,a,t.side===bc,r),c===null)return null;xl.copy(r),xl.applyMatrix4(e.matrixWorld);const l=n.ray.origin.distanceTo(xl);return l<n.near||l>n.far?null:{distance:l,point:xl.clone(),object:e}}function c1(e,t,s,o,i,a,r,c,l,d){e.getVertexPosition(c,Tr),e.getVertexPosition(l,il),e.getVertexPosition(d,hl);const u=HD(e,t,s,o,Tr,il,hl,Y2);if(u){const e=new n;pr.getBarycoord(Y2,Tr,il,hl,e),i&&(u.uv=pr.getInterpolatedAttribute(i,c,l,d,e,new F)),a&&(u.uv1=pr.getInterpolatedAttribute(a,c,l,d,e,new F)),r&&(u.normal=pr.getInterpolatedAttribute(r,c,l,d,e,new n),u.normal.dot(o.direction)>0&&u.normal.multiplyScalar(-1));const t={a:c,b:l,c:d,normal:new n,materialIndex:0};pr.getNormal(Tr,il,hl,t.normal),u.face=t,u.barycoord=e}return u}function ID(e){const t={};for(const n in e){t[n]={};for(const o in e[n]){const s=e[n][o];s&&(s.isColor||s.isMatrix3||s.isMatrix4||s.isVector2||s.isVector3||s.isVector4||s.isTexture||s.isQuaternion)?s.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[n][o]=null):t[n][o]=s.clone():Array.isArray(s)?t[n][o]=s.slice():t[n][o]=s}}return t}function et(e){const t={};for(let n=0;n<e.length;n++){const s=ID(e[n]);for(const e in s)t[e]=s[e]}return t}t3=class extends je{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new D,this.projectionMatrix=new D,this.projectionMatrixInverse=new D,this.coordinateSystem=uo,this._reversedDepth=!1}get reversedDepth(){return this._reversedDepth}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}},Kn=new n,s3=new F,o3=new F,o1=class extends t3{constructor(e=50,t=1,n=.1,s=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=s,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=Sr*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(Ar*.5*this.fov);return.5*this.getFilmHeight()/e}getEffectiveFOV(){return Sr*2*Math.atan(Math.tan(Ar*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,n){Kn.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),t.set(Kn.x,Kn.y).multiplyScalar(-e/Kn.z),Kn.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(Kn.x,Kn.y).multiplyScalar(-e/Kn.z)}getViewSize(e,t){return this.getViewBounds(e,s3,o3),t.subVectors(o3,s3)}setViewOffset(e,t,n,s,o,i){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=s,this.view.width=o,this.view.height=i,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const i=this.near;let t=i*Math.tan(Ar*.5*this.fov)/this.zoom,n=2*t,s=this.aspect*n,o=-.5*s;const e=this.view;if(this.view!==null&&this.view.enabled){const i=e.fullWidth,a=e.fullHeight;o+=e.offsetX*s/i,t-=e.offsetY*n/a,s*=e.width/i,n*=e.height/a}const a=this.filmOffset;a!==0&&(o+=i*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(o,o+s,t,t-n,i,this.far,this.coordinateSystem,this.reversedDepth),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}},t1=class extends je{constructor(){super(),this.isGroup=!0,this.type="Group"}},d9=class{constructor(e,t){this.isInterleavedBuffer=!0,this.array=e,this.stride=t,this.count=e!==0[0]?e.length/t:0,this.usage=Q1,this.updateRanges=[],this.version=0,this.uuid=an()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,n){e*=this.stride,n*=t.stride;for(let s=0,o=this.stride;s<o;s++)this.array[e+s]=t.array[n+s];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===0[0]&&(e.arrayBuffers={}),this.array.buffer._uuid===0[0]&&(this.array.buffer._uuid=an()),e.arrayBuffers[this.array.buffer._uuid]===0[0]&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const n=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),t=new this.constructor(n,this.stride);return t.setUsage(this.usage),t}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===0[0]&&(e.arrayBuffers={}),this.array.buffer._uuid===0[0]&&(this.array.buffer._uuid=an()),e.arrayBuffers[this.array.buffer._uuid]===0[0]&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}},He=new n,l9=class _InterleavedBufferAttribute{constructor(e,t,n,s=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=s}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++)He.fromBufferAttribute(this,t),He.applyMatrix4(e),this.setXYZ(t,He.x,He.y,He.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)He.fromBufferAttribute(this,t),He.applyNormalMatrix(e),this.setXYZ(t,He.x,He.y,He.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)He.fromBufferAttribute(this,t),He.transformDirection(e),this.setXYZ(t,He.x,He.y,He.z);return this}getComponent(e,t){let n=this.array[e*this.data.stride+this.offset+t];return this.normalized&&(n=Jt(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=H(n,this.array)),this.data.array[e*this.data.stride+this.offset+t]=n,this}setX(e,t){return this.normalized&&(t=H(t,this.array)),this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.normalized&&(t=H(t,this.array)),this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.normalized&&(t=H(t,this.array)),this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.normalized&&(t=H(t,this.array)),this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(t=Jt(t,this.array)),t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(t=Jt(t,this.array)),t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(t=Jt(t,this.array)),t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(t=Jt(t,this.array)),t}setXY(e,t,n){return e=e*this.data.stride+this.offset,this.normalized&&(t=H(t,this.array),n=H(n,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this}setXYZ(e,t,n,s){return e=e*this.data.stride+this.offset,this.normalized&&(t=H(t,this.array),n=H(n,this.array),s=H(s,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=s,this}setXYZW(e,t,n,s,o){return e=e*this.data.stride+this.offset,this.normalized&&(t=H(t,this.array),n=H(n,this.array),s=H(s,this.array),o=H(o,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=s,this.data.array[e+3]=o,this}clone(e){if(e===0[0]){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let t=0;t<this.count;t++){const n=t*this.data.stride+this.offset;for(let t=0;t<this.itemSize;t++)e.push(this.data.array[n+t])}return new Mt(new this.array.constructor(e),this.itemSize,this.normalized)}return e.interleavedBuffers===0[0]&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===0[0]&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new _InterleavedBufferAttribute(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===0[0]){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let t=0;t<this.count;t++){const n=t*this.data.stride+this.offset;for(let t=0;t<this.itemSize;t++)e.push(this.data.array[n+t])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:e,normalized:this.normalized}}return e.interleavedBuffers===0[0]&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===0[0]&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}},d3=new n,u3=new it,h3=new it,c9=new n,f3=new D,dc=new n,Qu=new Ut,v3=new D,Gu=new da,r9=class extends El{constructor(e,t){super(e,t),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode=N2,this.bindMatrix=new D,this.bindMatrixInverse=new D,this.boundingBox=null,this.boundingSphere=null}computeBoundingBox(){const e=this.geometry;this.boundingBox===null&&(this.boundingBox=new zn),this.boundingBox.makeEmpty();const t=e.getAttribute("position");for(let e=0;e<t.count;e++)this.getVertexPosition(e,dc),this.boundingBox.expandByPoint(dc)}computeBoundingSphere(){const e=this.geometry;this.boundingSphere===null&&(this.boundingSphere=new Ut),this.boundingSphere.makeEmpty();const t=e.getAttribute("position");for(let e=0;e<t.count;e++)this.getVertexPosition(e,dc),this.boundingSphere.expandByPoint(dc)}copy(e,t){return super.copy(e,t),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}raycast(e,t){const s=this.material,n=this.matrixWorld;if(s===0[0])return;if(this.boundingSphere===null&&this.computeBoundingSphere(),Qu.copy(this.boundingSphere),Qu.applyMatrix4(n),e.ray.intersectsSphere(Qu)===!1)return;if(v3.copy(n).invert(),Gu.copy(e.ray).applyMatrix4(v3),this.boundingBox!==null&&Gu.intersectsBox(this.boundingBox)===!1)return;this._computeIntersections(e,t,Gu)}getVertexPosition(e,t){return super.getVertexPosition(e,t),this.applyBoneTransform(e,t),t}bind(e,t){this.skeleton=e,t===0[0]&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new it,t=this.geometry.attributes.skinWeight;for(let n=0,o=t.count;n<o;n++){e.fromBufferAttribute(t,n);const s=1/e.manhattanLength();s!==1/0?e.multiplyScalar(s):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode===N2?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode===kj?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}applyBoneTransform(e,t){const n=this.skeleton,s=this.geometry;u3.fromBufferAttribute(s.attributes.skinIndex,e),h3.fromBufferAttribute(s.attributes.skinWeight,e),d3.copy(t).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let e=0;e<4;e++){const s=h3.getComponent(e);if(s!==0){const o=u3.getComponent(e);f3.multiplyMatrices(n.bones[o].matrixWorld,n.boneInverses[o]),t.addScaledVector(c9.copy(d3).applyMatrix4(f3),s)}}return t.applyMatrix4(this.bindMatrixInverse)}},y3=class extends je{constructor(){super(),this.isBone=!0,this.type="Bone"}},_3=class extends Ls{constructor(e=null,t=1,n=1,s,o,i,a,r,c=lc,l=lc,d,u){super(null,i,a,r,c,l,s,o,d,u),this.isDataTexture=!0,this.image={data:e,width:t,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}},w3=new D,o9=new D,n9=class _Skeleton{constructor(e=[],t=[]){this.uuid=an(),this.bones=e.slice(0),this.boneInverses=t,this.boneMatrices=null,this.boneTexture=null,this.init()}init(){const e=this.bones,t=this.boneInverses;if(this.boneMatrices=new Float32Array(e.length*16),t.length===0)this.calculateInverses();else if(e.length!==t.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let e=0,t=this.bones.length;e<t;e++)this.boneInverses.push(new D)}}calculateInverses(){this.boneInverses.length=0;for(let e=0,n=this.bones.length;e<n;e++){const t=new D;this.bones[e]&&t.copy(this.bones[e].matrixWorld).invert(),this.boneInverses.push(t)}}pose(){for(let e=0,n=this.bones.length;e<n;e++){const t=this.bones[e];t&&t.matrixWorld.copy(this.boneInverses[e]).invert()}for(let t=0,n=this.bones.length;t<n;t++){const e=this.bones[t];e&&(e.parent&&e.parent.isBone?(e.matrix.copy(e.parent.matrixWorld).invert(),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))}}update(){const e=this.bones,n=this.boneInverses,s=this.boneMatrices,t=this.boneTexture;for(let t=0,o=e.length;t<o;t++){const i=e[t]?e[t].matrixWorld:o9;w3.multiplyMatrices(i,n[t]),w3.toArray(s,t*16)}t!==null&&(t.needsUpdate=!0)}clone(){return new _Skeleton(this.bones,this.boneInverses)}computeBoneTexture(){let e=(this.bones.length*4)**.5;e=Math.ceil(e/4)*4,e=Math.max(e,4);const t=new Float32Array(e*e*4);t.set(this.boneMatrices);const n=new _3(t,e,e,l2,M1);return n.needsUpdate=!0,this.boneMatrices=t,this.boneTexture=n,this}getBoneByName(e){for(let t=0,s=this.bones.length;t<s;t++){const n=this.bones[t];if(n.name===e)return n}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(e,t){this.uuid=e.uuid;for(let n=0,i=e.bones.length;n<i;n++){const o=e.bones[n];let s=t[o];s===0[0]&&(console.warn("THREE.Skeleton: No bone found with UUID:",o),s=new y3),this.bones.push(s),this.boneInverses.push((new D).fromArray(e.boneInverses[n]))}return this.init(),this}toJSON(){const e={metadata:{version:4.7,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};e.uuid=this.uuid;const t=this.bones,n=this.boneInverses;for(let s=0,o=t.length;s<o;s++){const i=t[s];e.bones.push(i.uuid);const a=n[s];e.boneInverses.push(a.toArray())}return e}},qu=class extends Mt{constructor(e,t,n,s=1){super(e,t,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=s}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}},Ao=new D,k3=new D,ll=[],S3=new zn,Yv=new D,Xa=new El,Qa=new Ut,kv=class extends El{constructor(e,t,n){super(e,t),this.isInstancedMesh=!0,this.instanceMatrix=new qu(new Float32Array(n*16),16),this.instanceColor=null,this.morphTexture=null,this.count=n,this.boundingBox=null,this.boundingSphere=null;for(let e=0;e<n;e++)this.setMatrixAt(e,Yv)}computeBoundingBox(){const e=this.geometry,t=this.count;this.boundingBox===null&&(this.boundingBox=new zn),e.boundingBox===null&&e.computeBoundingBox(),this.boundingBox.makeEmpty();for(let n=0;n<t;n++)this.getMatrixAt(n,Ao),S3.copy(e.boundingBox).applyMatrix4(Ao),this.boundingBox.union(S3)}computeBoundingSphere(){const e=this.geometry,t=this.count;this.boundingSphere===null&&(this.boundingSphere=new Ut),e.boundingSphere===null&&e.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let n=0;n<t;n++)this.getMatrixAt(n,Ao),Qa.copy(e.boundingSphere).applyMatrix4(Ao),this.boundingSphere.union(Qa)}copy(e,t){return super.copy(e,t),this.instanceMatrix.copy(e.instanceMatrix),e.morphTexture!==null&&(this.morphTexture=e.morphTexture.clone()),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}getMorphAt(e,t){const n=t.morphTargetInfluences,s=this.morphTexture.source.data.data,o=n.length+1,i=e*o+1;for(let e=0;e<n.length;e++)n[e]=s[i+e]}raycast(e,t){const n=this.matrixWorld,s=this.count;if(Xa.geometry=this.geometry,Xa.material=this.material,Xa.material===0[0])return;if(this.boundingSphere===null&&this.computeBoundingSphere(),Qa.copy(this.boundingSphere),Qa.applyMatrix4(n),e.ray.intersectsSphere(Qa)===!1)return;for(let o=0;o<s;o++){this.getMatrixAt(o,Ao),k3.multiplyMatrices(n,Ao),Xa.matrixWorld=k3,Xa.raycast(e,ll);for(let e=0,s=ll.length;e<s;e++){const n=ll[e];n.instanceId=o,n.object=this,t.push(n)}ll.length=0}}setColorAt(e,t){this.instanceColor===null&&(this.instanceColor=new qu(new Float32Array(this.instanceMatrix.count*3).fill(1),3)),t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}setMorphAt(e,t){const n=t.morphTargetInfluences,s=n.length+1;this.morphTexture===null&&(this.morphTexture=new _3(new Float32Array(s*this.count),s,this.count,yj,M1));const o=this.morphTexture.source.data.data;let i=0;for(let e=0;e<n.length;e++)i+=n[e];const r=this.geometry.morphTargetsRelative?1:1-i,a=s*e;o[a]=r,o.set(n,a+1)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"}),this.morphTexture!==null&&(this.morphTexture.dispose(),this.morphTexture=null)}},Ku=new n,Ev=new n,Cv=new E,Gs=class{constructor(e=new n(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,s){return this.normal.set(e,t,n),this.constant=s,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const s=Ku.subVectors(n,t).cross(Ev.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(s,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const s=e.delta(Ku),o=this.normal.dot(s);if(o===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const n=-(e.start.dot(this.normal)+this.constant)/o;return n<0||n>1?null:t.copy(e.start).addScaledVector(s,n)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||Cv.getNormalMatrix(e),s=this.coplanarPoint(Ku).applyMatrix4(e),o=this.normal.applyMatrix3(n).normalize();return this.constant=-s.dot(o),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return(new this.constructor).copy(this)}},qs=new Ut,xv=new F(.5,.5),nc=new n,Ov=class{constructor(e=new Gs,t=new Gs,n=new Gs,s=new Gs,o=new Gs,i=new Gs){this.planes=[e,t,n,s,o,i]}set(e,t,n,s,o,i){const a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(n),a[3].copy(s),a[4].copy(o),a[5].copy(i),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e,t=uo,n=!1){const o=this.planes,s=e.elements,y=s[0],v=s[1],d=s[2],c=s[3],f=s[4],m=s[5],l=s[6],r=s[7],p=s[8],g=s[9],u=s[10],a=s[11],b=s[12],j=s[13],h=s[14],i=s[15];if(o[0].setComponents(c-y,r-f,a-p,i-b).normalize(),o[1].setComponents(c+y,r+f,a+p,i+b).normalize(),o[2].setComponents(c+v,r+m,a+g,i+j).normalize(),o[3].setComponents(c-v,r-m,a-g,i-j).normalize(),n)o[4].setComponents(d,l,u,h).normalize(),o[5].setComponents(c-d,r-l,a-u,i-h).normalize();else if(o[4].setComponents(c-d,r-l,a-u,i-h).normalize(),t===uo)o[5].setComponents(c+d,r+l,a+u,i+h).normalize();else if(t===J1)o[5].setComponents(d,l,u,h).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);return this}intersectsObject(e){if(e.boundingSphere!==0[0])e.boundingSphere===null&&e.computeBoundingSphere(),qs.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),qs.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(qs)}intersectsSprite(e){qs.center.set(0,0,0);const t=xv.distanceTo(e.center);return qs.radius=.7071067811865476+t,qs.applyMatrix4(e.matrixWorld),this.intersectsSphere(qs)}intersectsSphere(e){const t=this.planes,n=e.center,s=-e.radius;for(let e=0;e<6;e++){const o=t[e].distanceToPoint(n);if(o<s)return!1}return!0}intersectsBox(e){const t=this.planes;for(let s=0;s<6;s++){const n=t[s];if(nc.x=n.normal.x>0?e.max.x:e.min.x,nc.y=n.normal.y>0?e.max.y:e.min.y,nc.z=n.normal.z>0?e.max.z:e.min.z,n.distanceToPoint(nc)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}},V3=class extends _s{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new z(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}},Wr=new n,Vr=new n,U3=new D,Fr=new da,sc=new Ut,Iu=new n,G3=new n,Hu=class extends je{constructor(e=new jc,t=new V3){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.morphTargetDictionary=0[0],this.morphTargetInfluences=0[0],this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.index===null){const n=e.attributes.position,t=[0];for(let e=1,s=n.count;e<s;e++)Wr.fromBufferAttribute(n,e-1),Vr.fromBufferAttribute(n,e),t[e]=t[e-1],t[e]+=Wr.distanceTo(Vr);e.setAttribute("lineDistance",new j1(t,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){const n=this.geometry,a=this.matrixWorld,r=e.params.Line.threshold,s=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),sc.copy(n.boundingSphere),sc.applyMatrix4(a),sc.radius+=r,e.ray.intersectsSphere(sc)===!1)return;U3.copy(a).invert(),Fr.copy(e.ray).applyMatrix4(U3);const c=r/((this.scale.x+this.scale.y+this.scale.z)/3),i=c*c,l=this.isLineSegments?2:1,o=n.index,d=n.attributes,u=d.position;if(o!==null){{const a=Math.max(0,s.start),n=Math.min(o.count,s.start+s.count);for(let s=a,c=n-1;s<c;s+=l){const d=o.getX(s),u=o.getX(s+1),r=Ru(this,e,Fr,i,d,u,s);r&&t.push(r)}if(this.isLineLoop){const r=o.getX(n-1),c=o.getX(a),s=Ru(this,e,Fr,i,r,c,n-1);s&&t.push(s)}}}else{const o=Math.max(0,s.start),n=Math.min(u.count,s.start+s.count);for(let s=o,r=n-1;s<r;s+=l){const a=Ru(this,e,Fr,i,s,s+1,s);a&&t.push(a)}if(this.isLineLoop){const s=Ru(this,e,Fr,i,n-1,o,n-1);s&&t.push(s)}}}updateMorphTargets(){const n=this.geometry,e=n.morphAttributes,t=Object.keys(e);if(t.length>0){const n=e[t[0]];if(n!==0[0]){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,t=n.length;e<t;e++){const s=n[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[s]=e}}}}};function Ru(e,t,n,s,o,i,a){const c=e.geometry.attributes.position;Wr.fromBufferAttribute(c,o),Vr.fromBufferAttribute(c,i);const l=n.distanceSqToSegment(Wr,Vr,Iu,G3);if(l>s)return;Iu.applyMatrix4(e.matrixWorld);const r=t.ray.origin.distanceTo(Iu);if(r<t.near||r>t.far)return;return{distance:r,point:G3.clone().applyMatrix4(e.matrixWorld),index:a,face:null,faceIndex:null,barycoord:null,object:e}}Z3=new n,J3=new n,wv=class extends Hu{constructor(e,t){super(e,t),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const n=e.attributes.position,t=[];for(let e=0,s=n.count;e<s;e+=2)Z3.fromBufferAttribute(n,e),J3.fromBufferAttribute(n,e+1),t[e]=e===0?0:t[e-1],t[e+1]=t[e]+Z3.distanceTo(J3);e.setAttribute("lineDistance",new j1(t,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}},_v=class extends Hu{constructor(e,t){super(e,t),this.isLineLoop=!0,this.type="LineLoop"}},nh=class extends _s{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new z(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}},sh=new D,Du=new da,ac=new Ut,Qc=new n,vv=class extends je{constructor(e=new jc,t=new nh){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=t,this.morphTargetDictionary=0[0],this.morphTargetInfluences=0[0],this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}raycast(e,t){const n=this.geometry,o=this.matrixWorld,r=e.params.Points.threshold,s=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),ac.copy(n.boundingSphere),ac.applyMatrix4(o),ac.radius+=r,e.ray.intersectsSphere(ac)===!1)return;sh.copy(o).invert(),Du.copy(e.ray).applyMatrix4(sh);const c=r/((this.scale.x+this.scale.y+this.scale.z)/3),l=c*c,i=n.index,d=n.attributes,a=d.position;if(i!==null){const n=Math.max(0,s.start),r=Math.min(i.count,s.start+s.count);for(let s=n,d=r;s<d;s++){const c=i.getX(s);Qc.fromBufferAttribute(a,c),gv(Qc,c,l,o,e,t,this)}}else{const n=Math.max(0,s.start),i=Math.min(a.count,s.start+s.count);for(let s=n,r=i;s<r;s++)Qc.fromBufferAttribute(a,s),gv(Qc,s,l,o,e,t,this)}}updateMorphTargets(){const n=this.geometry,e=n.morphAttributes,t=Object.keys(e);if(t.length>0){const n=e[t[0]];if(n!==0[0]){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,t=n.length;e<t;e++){const s=n[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[s]=e}}}}};function gv(e,t,s,o,i,a,r){const c=Du.distanceSqToPoint(e);if(c<s){const s=new n;Du.closestPointToPoint(e,s),s.applyMatrix4(o);const l=i.ray.origin.distanceTo(s);if(l<i.near||l>i.far)return;a.push({distance:l,distanceToRay:c**.5,point:s,index:t,face:null,faceIndex:null,barycoord:null,object:r})}}Tu=class extends _s{constructor(e){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new z(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new z(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=lj,this.normalScale=new F(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Ll,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}},tn=class extends Tu{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new F(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return C(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(e){this.ior=(1+.4*e)/(1-.4*e)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new z(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new z(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new z(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(e)}get anisotropy(){return this._anisotropy}set anisotropy(e){this._anisotropy>0!==e>0&&this.version++,this._anisotropy=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!==e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!==e>0&&this.version++,this._iridescence=e}get dispersion(){return this._dispersion}set dispersion(e){this._dispersion>0!==e>0&&this.version++,this._dispersion=e}get sheen(){return this._sheen}set sheen(e){this._sheen>0!==e>0&&this.version++,this._sheen=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!==e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=e.anisotropy,this.anisotropyRotation=e.anisotropyRotation,this.anisotropyMap=e.anisotropyMap,this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.dispersion=e.dispersion,this.ior=e.ior,this.iridescence=e.iridescence,this.iridescenceMap=e.iridescenceMap,this.iridescenceIOR=e.iridescenceIOR,this.iridescenceThicknessRange=[...e.iridescenceThicknessRange],this.iridescenceThicknessMap=e.iridescenceThicknessMap,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}};function Fu(e,t){return!e||e.constructor===t?e:typeof t.BYTES_PER_ELEMENT=="number"?new t(e):Array.prototype.slice.call(e)}function VD(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}function $D(e){function s(t,n){return e[t]-e[n]}const n=e.length,t=new Array(n);for(let e=0;e!==n;++e)t[e]=e;return t.sort(s),t}function mv(e,t,n){const s=e.length,o=new e.constructor(s);for(let i=0,a=0;a!==s;++i){const r=n[i]*t;for(let n=0;n!==t;++n)o[a++]=e[r+n]}return o}function uv(e,t,n,s){let a=1,o=e[0];for(;o!==0[0]&&o[s]===0[0];)o=e[a++];if(o===0[0])return;let i=o[s];if(i===0[0])return;if(Array.isArray(i))do i=o[s],i!==0[0]&&(t.push(o.time),n.push(...i)),o=e[a++];while(o!==0[0])else if(i.toArray!==0[0])do i=o[s],i!==0[0]&&(t.push(o.time),i.toArray(n,n.length)),o=e[a++];while(o!==0[0])else do i=o[s],i!==0[0]&&(t.push(o.time),n.push(i)),o=e[a++];while(o!==0[0])}pa=class{constructor(e,t,n,s){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=s!==0[0]?s:new t.constructor(n),this.sampleValues=t,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(e){const s=this.parameterPositions;let t=this._cachedIndex,o=s[t],n=s[t-1];validate_interval:{seek:{let i;linear_scan:{forward_scan:if(!(e<o)){for(let i=t+2;;){if(o===0[0]){if(e<n)break forward_scan;return t=s.length,this._cachedIndex=t,this.copySampleValue_(t-1)}if(t===i)break;if(n=o,o=s[++t],e<o)break seek}i=s.length;break linear_scan}if(!(e>=n)){const a=s[1];e<a&&(t=2,n=a);for(let i=t-2;;){if(n===0[0])return this._cachedIndex=0,this.copySampleValue_(0);if(t===i)break;if(o=n,n=s[--t-1],e>=n)break seek}i=t,t=0;break linear_scan}break validate_interval}for(;t<i;){const n=t+i>>>1;e<s[n]?i=n:t=n+1}if(o=s[t],n=s[t-1],n===0[0])return this._cachedIndex=0,this.copySampleValue_(0);if(o===0[0])return t=s.length,this._cachedIndex=t,this.copySampleValue_(t-1)}this._cachedIndex=t,this.intervalChanged_(t,n,o)}return this.interpolate_(t,n,e,o)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,s=this.sampleValues,n=this.valueSize,o=e*n;for(let e=0;e!==n;++e)t[e]=s[o+e];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}},dv=class extends pa{constructor(e,t,n,s){super(e,t,n,s),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:o2,endingEnd:o2}}intervalChanged_(e,t,n){const s=this.parameterPositions;let o=e-2,i=e+1,a=s[o],r=s[i];if(a===0[0])switch(this.getSettings_().endingStart){case s2:o=e,a=2*t-n;break;case J0:o=s.length-2,a=t+s[o]-s[o+1];break;default:o=e,a=n}if(r===0[0])switch(this.getSettings_().endingEnd){case s2:i=e,r=2*n-t;break;case J0:i=1,r=n+s[1]-s[0];break;default:i=e-1,r=t}const c=(n-t)*.5,l=this.valueSize;this._weightPrev=c/(t-a),this._weightNext=c/(r-n),this._offsetPrev=o*l,this._offsetNext=i*l}interpolate_(e,t,n,s){const h=this.resultBuffer,r=this.sampleValues,d=this.valueSize,u=e*d,m=u-d,p=this._offsetPrev,f=this._offsetNext,i=this._weightPrev,l=this._weightNext,o=(n-t)/(s-t),a=o*o,c=a*o,g=-i*c+2*i*a-i*o,v=(1+i)*c+(-1.5-2*i)*a+(-.5+i)*o+1,b=(-1-l)*c+(1.5+l)*a+.5*o,j=l*c-l*a;for(let e=0;e!==d;++e)h[e]=g*r[p+e]+v*r[m+e]+b*r[u+e]+j*r[f+e];return h}},lv=class extends pa{constructor(e,t,n,s){super(e,t,n,s)}interpolate_(e,t,n,s){const i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,r=e*o,l=r-o,c=(n-t)/(s-t),d=1-c;for(let e=0;e!==o;++e)i[e]=a[l+e]*d+a[r+e]*c;return i}},cv=class extends pa{constructor(e,t,n,s){super(e,t,n,s)}interpolate_(e){return this.copySampleValue_(e-1)}},kt=class{constructor(e,t,n,s){if(e===0[0])throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===0[0]||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=Fu(t,this.TimeBufferType),this.values=Fu(n,this.ValueBufferType),this.setInterpolation(s||this.DefaultInterpolation)}static toJSON(e){const n=e.constructor;let t;if(n.toJSON!==this.toJSON)t=n.toJSON(e);else{t={name:e.name,times:Fu(e.times,Array),values:Fu(e.values,Array)};const n=e.getInterpolation();n!==e.DefaultInterpolation&&(t.interpolation=n)}return t.type=e.ValueTypeName,t}InterpolantFactoryMethodDiscrete(e){return new cv(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new lv(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new dv(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case mr:t=this.InterpolantFactoryMethodDiscrete;break;case vr:t=this.InterpolantFactoryMethodLinear;break;case N1:t=this.InterpolantFactoryMethodSmooth;break}if(t===0[0]){const t="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===0[0])if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(t);return console.warn("THREE.KeyframeTrack:",t),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return mr;case this.InterpolantFactoryMethodLinear:return vr;case this.InterpolantFactoryMethodSmooth:return N1}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const t=this.times;for(let n=0,s=t.length;n!==s;++n)t[n]+=e}return this}scale(e){if(e!==1){const t=this.times;for(let n=0,s=t.length;n!==s;++n)t[n]*=e}return this}trim(e,t){const o=this.times,i=o.length;let s=0,n=i-1;for(;s!==i&&o[s]<e;)++s;for(;n!==-1&&o[n]>t;)--n;if(++n,s!==0||n!==i){s>=n&&(n=Math.max(n,1),s=n-1);const e=this.getValueSize();this.times=o.slice(s,n),this.values=this.values.slice(s*e,n*e)}return this}validate(){let e=!0;const s=this.getValueSize();s-Math.floor(s)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const o=this.times,t=this.values,i=o.length;i===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let n=null;for(let s=0;s!==i;s++){const t=o[s];if(typeof t=="number"&&isNaN(t)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,s,t),e=!1;break}if(n!==null&&n>t){console.error("THREE.KeyframeTrack: Out of order keys.",this,s,t,n),e=!1;break}n=t}if(t!==0[0]&&VD(t))for(let n=0,o=t.length;n!==o;++n){const s=t[n];if(isNaN(s)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,n,s),e=!1;break}}return e}optimize(){const e=this.times.slice(),s=this.values.slice(),t=this.getValueSize(),i=this.getInterpolation()===N1,o=e.length-1;let n=1;for(let a=1;a<o;++a){let r=!1;const c=e[a],l=e[a+1];if(c!==l&&(a!==1||c!==e[0]))if(i)r=!0;else{const e=a*t,n=e-t,o=e+t;for(let i=0;i!==t;++i){const a=s[e+i];if(a!==s[n+i]||a!==s[o+i]){r=!0;break}}}if(r){if(a!==n){e[n]=e[a];const o=a*t,i=n*t;for(let e=0;e!==t;++e)s[i+e]=s[o+e]}++n}}if(o>0){e[n]=e[o];for(let i=o*t,a=n*t,e=0;e!==t;++e)s[a+e]=s[i+e];++n}return n!==e.length?(this.times=e.slice(0,n),this.values=s.slice(0,n*t)):(this.times=e,this.values=s),this}clone(){const t=this.times.slice(),n=this.values.slice(),s=this.constructor,e=new s(this.name,t,n);return e.createInterpolant=this.createInterpolant,e}},kt.prototype.ValueTypeName="",kt.prototype.TimeBufferType=Float32Array,kt.prototype.ValueBufferType=Float32Array,kt.prototype.DefaultInterpolation=vr,Ji=class extends kt{constructor(e,t,n){super(e,t,n)}},Ji.prototype.ValueTypeName="bool",Ji.prototype.ValueBufferType=Array,Ji.prototype.DefaultInterpolation=mr,Ji.prototype.InterpolantFactoryMethodLinear=0[0],Ji.prototype.InterpolantFactoryMethodSmooth=0[0],wh=class extends kt{constructor(e,t,n,s){super(e,t,n,s)}},wh.prototype.ValueTypeName="color",na=class extends kt{constructor(e,t,n,s){super(e,t,n,s)}},na.prototype.ValueTypeName="number",rv=class extends pa{constructor(e,t,n,s){super(e,t,n,s)}interpolate_(e,t,n,s){const a=this.resultBuffer,r=this.sampleValues,i=this.valueSize,c=(n-t)/(s-t);let o=e*i;for(let e=o+i;o!==e;o+=4)Gt.slerpFlat(a,0,r,o-i,r,o,c);return a}},sa=class extends kt{constructor(e,t,n,s){super(e,t,n,s)}InterpolantFactoryMethodLinear(e){return new rv(this.times,this.values,this.getValueSize(),e)}},sa.prototype.ValueTypeName="quaternion",sa.prototype.InterpolantFactoryMethodSmooth=0[0],ta=class extends kt{constructor(e,t,n){super(e,t,n)}},ta.prototype.ValueTypeName="string",ta.prototype.ValueBufferType=Array,ta.prototype.DefaultInterpolation=mr,ta.prototype.InterpolantFactoryMethodLinear=0[0],ta.prototype.InterpolantFactoryMethodSmooth=0[0],Xi=class extends kt{constructor(e,t,n,s){super(e,t,n,s)}},Xi.prototype.ValueTypeName="vector",av=class{constructor(e="",t=-1,n=[],s=hj){this.name=e,this.tracks=n,this.duration=t,this.blendMode=s,this.uuid=an(),this.userData={},this.duration<0&&this.resetDuration()}static parse(e){const n=[],s=e.tracks,o=1/(e.fps||1);for(let e=0,t=s.length;e!==t;++e)n.push(UD(s[e]).scale(o));const t=new this(e.name,e.duration,n,e.blendMode);return t.uuid=e.uuid,t.userData=JSON.parse(e.userData||"{}"),t}static toJSON(e){const t=[],n=e.tracks,s={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode,userData:JSON.stringify(e.userData)};for(let e=0,s=n.length;e!==s;++e)t.push(kt.toJSON(n[e]));return s}static CreateFromMorphTargetSequence(e,t,n,s){const o=t.length,i=[];for(let a=0;a<o;a++){let e=[],r=[];e.push((a+o-1)%o,a,(a+1)%o),r.push(0,1,0);const c=$D(e);e=mv(e,1,c),r=mv(r,1,c),!s&&e[0]===0&&(e.push(o),r.push(r[0])),i.push(new na(".morphTargetInfluences["+t[a].name+"]",e,r).scale(1/n))}return new this(e,-1,i)}static findByName(e,t){let n=e;if(!Array.isArray(e)){const t=e;n=t.geometry&&t.geometry.animations||t.animations}for(let e=0;e<n.length;e++)if(n[e].name===t)return n[e];return null}static CreateClipsFromMorphTargetSequences(e,t,n){const s={},i=/^([\w-]*?)([\d]+)$/;for(let t=0,a=e.length;t<a;t++){const o=e[t],n=o.name.match(i);if(n&&n.length>1){const t=n[1];let e=s[t];e||(s[t]=e=[]),e.push(o)}}const o=[];for(const e in s)o.push(this.CreateFromMorphTargetSequence(e,s[e],t,n));return o}static parseAnimation(e,t){if(console.warn("THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185"),!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const s=function(e,t,n,s,o){if(n.length!==0){const i=[],a=[];uv(n,i,a,s),i.length!==0&&o.push(new e(t,i,a))}},n=[],a=e.name||"default",r=e.fps||30,c=e.blendMode;let o=e.length||-1;const i=e.hierarchy||[];for(let a=0;a<i.length;a++){const e=i[a].keys;if(!e||e.length===0)continue;if(e[0].morphTargets){const s={};let t;for(t=0;t<e.length;t++)if(e[t].morphTargets)for(let n=0;n<e[t].morphTargets.length;n++)s[e[t].morphTargets[n]]=-1;for(const o in s){const i=[],a=[];for(let n=0;n!==e[t].morphTargets.length;++n){const s=e[t];i.push(s.time),a.push(s.morphTarget===o?1:0)}n.push(new na(".morphTargetInfluence["+o+"]",i,a))}o=s.length*r}else{const o=".bones["+t[a].name+"]";s(Xi,o+".position",e,"pos",n),s(sa,o+".quaternion",e,"rot",n),s(Xi,o+".scale",e,"scl",n)}}if(n.length===0)return null;const l=new this(a,o,n,c);return l}resetDuration(){const t=this.tracks;let e=0;for(let n=0,o=t.length;n!==o;++n){const s=this.tracks[n];e=Math.max(e,s.times[s.times.length-1])}return this.duration=e,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());const t=new this.constructor(this.name,this.duration,e,this.blendMode);return t.userData=JSON.parse(JSON.stringify(this.userData)),t}toJSON(){return this.constructor.toJSON(this)}};function WD(e){switch(e.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return na;case"vector":case"vector2":case"vector3":case"vector4":return Xi;case"color":return wh;case"quaternion":return sa;case"bool":case"boolean":return Ji;case"string":return ta}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+e)}function UD(e){if(e.type===0[0])throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const t=WD(e.type);if(e.times===0[0]){const t=[],n=[];uv(e.keys,t,n,"value"),e.times=t,e.values=n}return t.parse!==0[0]?t.parse(e):new t(e.name,e.times,e.values,e.interpolation)}xn={enabled:!1,files:{},add:function(e,t){if(this.enabled===!1)return;this.files[e]=t},get:function(e){if(this.enabled===!1)return;return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}},ev=class{constructor(e,t,n){const s=this;let r=!1,i=0,a=0,c=0[0];const o=[];this.onStart=0[0],this.onLoad=e,this.onProgress=t,this.onError=n,this.abortController=new AbortController,this.itemStart=function(e){a++,r===!1&&s.onStart!==0[0]&&s.onStart(e,i,a),r=!0},this.itemEnd=function(e){i++,s.onProgress!==0[0]&&s.onProgress(e,i,a),i===a&&(r=!1,s.onLoad!==0[0]&&s.onLoad())},this.itemError=function(e){s.onError!==0[0]&&s.onError(e)},this.resolveURL=function(e){return c?c(e):e},this.setURLModifier=function(e){return c=e,this},this.addHandler=function(e,t){return o.push(e,t),this},this.removeHandler=function(e){const t=o.indexOf(e);return t!==-1&&o.splice(t,2),this},this.getHandler=function(e){for(let t=0,s=o.length;t<s;t+=2){const n=o[t],i=o[t+1];if(n.global&&(n.lastIndex=0),n.test(e))return i}return null},this.abort=function(){return this.abortController.abort(),this.abortController=new AbortController,this}}},G7=new ev,Gi=class{constructor(e){this.manager=e!==0[0]?e:G7,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(s,o){n.load(e,s,t,o)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}abort(){return this}},Gi.DEFAULT_MATERIAL_NAME="__DEFAULT",yn={},Y7=class extends Error{constructor(e,t){super(e),this.response=t}},Rh=class extends Gi{constructor(e){super(e),this.mimeType="",this.responseType="",this._abortController=new AbortController}load(e,t,n,s){e===0[0]&&(e=""),this.path!==0[0]&&(e=this.path+e),e=this.manager.resolveURL(e);const o=xn.get(`file:${e}`);if(o!==0[0])return this.manager.itemStart(e),setTimeout(()=>{t&&t(o),this.manager.itemEnd(e)},0),o;if(yn[e]!==0[0]){yn[e].push({onLoad:t,onProgress:n,onError:s});return}yn[e]=[],yn[e].push({onLoad:t,onProgress:n,onError:s});const a=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin",signal:typeof AbortSignal.any=="function"?AbortSignal.any([this._abortController.signal,this.manager.abortController.signal]):this._abortController.signal}),i=this.mimeType,r=this.responseType;fetch(a).then(t=>{if(t.status===200||t.status===0){if(t.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream=="undefined"||t.body===0[0]||t.body.getReader===0[0])return t;const n=yn[e],a=t.body.getReader(),s=t.headers.get("X-File-Size")||t.headers.get("Content-Length"),o=s?parseInt(s):0,r=o!==0;let i=0;const c=new ReadableStream({start(e){t();function t(){a.read().then(({done:s,value:a})=>{if(s)e.close();else{i+=a.byteLength;const s=new ProgressEvent("progress",{lengthComputable:r,loaded:i,total:o});for(let e=0,o=n.length;e<o;e++){const t=n[e];t.onProgress&&t.onProgress(s)}e.enqueue(a),t()}},t=>{e.error(t)})}}});return new Response(c)}throw new Y7(`fetch for "${t.url}" responded with ${t.status}: ${t.statusText}`,t)}).then(e=>{switch(r){case"arraybuffer":return e.arrayBuffer();case"blob":return e.blob();case"document":return e.text().then(e=>{const t=new DOMParser;return t.parseFromString(e,i)});case"json":return e.json();default:if(i==="")return e.text();const n=/charset="?([^;"\s]*)"?/i,t=n.exec(i),s=t&&t[1]?t[1].toLowerCase():0[0],o=new TextDecoder(s);return e.arrayBuffer().then(e=>o.decode(e))}}).then(t=>{xn.add(`file:${e}`,t);const n=yn[e];delete yn[e];for(let e=0,o=n.length;e<o;e++){const s=n[e];s.onLoad&&s.onLoad(t)}}).catch(t=>{const n=yn[e];if(n===0[0])throw this.manager.itemError(e),t;delete yn[e];for(let e=0,o=n.length;e<o;e++){const s=n[e];s.onError&&s.onError(t)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}abort(){return this._abortController.abort(),this._abortController=new AbortController,this}},Wi=new WeakMap,q7=class extends Gi{constructor(e){super(e)}load(e,t,n,s){this.path!==0[0]&&(e=this.path+e),e=this.manager.resolveURL(e);const i=this,a=xn.get(`image:${e}`);if(a!==0[0]){if(a.complete===!0)i.manager.itemStart(e),setTimeout(function(){t&&t(a),i.manager.itemEnd(e)},0);else{let e=Wi.get(a);e===0[0]&&(e=[],Wi.set(a,e)),e.push({onLoad:t,onError:s})}return a}const o=L4("img");function r(){l(),t&&t(this);const n=Wi.get(this)||[];for(let e=0;e<n.length;e++){const t=n[e];t.onLoad&&t.onLoad(this)}Wi.delete(this),i.manager.itemEnd(e)}function c(t){l(),s&&s(t),xn.remove(`image:${e}`);const n=Wi.get(this)||[];for(let e=0;e<n.length;e++){const s=n[e];s.onError&&s.onError(t)}Wi.delete(this),i.manager.itemError(e),i.manager.itemEnd(e)}function l(){o.removeEventListener("load",r,!1),o.removeEventListener("error",c,!1)}return o.addEventListener("load",r,!1),o.addEventListener("error",c,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==0[0]&&(o.crossOrigin=this.crossOrigin),xn.add(`image:${e}`,o),i.manager.itemStart(e),o.src=e,o}},$7=class extends Gi{constructor(e){super(e)}load(e,t,n,s){const o=new Ls,i=new q7(this.manager);return i.setCrossOrigin(this.crossOrigin),i.setPath(this.path),i.load(e,function(e){o.image=e,o.needsUpdate=!0,t!==0[0]&&t(o)},n,s),o}},yu=class extends je{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new z(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==0[0]&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==0[0]&&(t.object.distance=this.distance),this.angle!==0[0]&&(t.object.angle=this.angle),this.decay!==0[0]&&(t.object.decay=this.decay),this.penumbra!==0[0]&&(t.object.penumbra=this.penumbra),this.shadow!==0[0]&&(t.object.shadow=this.shadow.toJSON()),this.target!==0[0]&&(t.object.target=this.target.uuid),t}},ju=new D,$h=new n,Wh=new n,bu=class{constructor(e){this.camera=e,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new F(512,512),this.mapType=d2,this.map=null,this.mapPass=null,this.matrix=new D,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Ov,this._frameExtents=new F(1,1),this._viewportCount=1,this._viewports=[new it(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,n=this.matrix;$h.setFromMatrixPosition(e.matrixWorld),t.position.copy($h),Wh.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(Wh),t.updateMatrixWorld(),ju.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(ju,t.coordinateSystem,t.reversedDepth),t.reversedDepth?n.set(.5,0,0,.5,0,.5,0,.5,0,0,1,0,0,0,0,1):n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(ju)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.intensity=e.intensity,this.bias=e.bias,this.radius=e.radius,this.autoUpdate=e.autoUpdate,this.needsUpdate=e.needsUpdate,this.normalBias=e.normalBias,this.blurSamples=e.blurSamples,this.mapSize.copy(e.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const e={};return this.intensity!==1&&(e.intensity=this.intensity),this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}},H7=class extends bu{constructor(){super(new o1(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1,this.aspect=1}updateMatrices(e){const t=this.camera,n=Sr*2*e.angle*this.focus,s=this.mapSize.width/this.mapSize.height*this.aspect,o=e.distance||t.far;(n!==t.fov||s!==t.aspect||o!==t.far)&&(t.fov=n,t.aspect=s,t.far=o,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}},L7=class extends yu{constructor(e,t,n=0,s=Math.PI/3,o=0,i=2){super(e,t),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(je.DEFAULT_UP),this.updateMatrix(),this.target=new je,this.distance=n,this.angle=s,this.penumbra=o,this.decay=i,this.map=null,this.shadow=new H7}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}},Yh=new D,Va=new n,gu=new n,N7=class extends bu{constructor(){super(new o1(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new F(4,2),this._viewportCount=6,this._viewports=[new it(2,1,1,1),new it(0,1,1,1),new it(3,1,1,1),new it(1,1,1,1),new it(3,0,1,1),new it(1,0,1,1)],this._cubeDirections=[new n(1,0,0),new n(-1,0,0),new n(0,0,1),new n(0,0,-1),new n(0,1,0),new n(0,-1,0)],this._cubeUps=[new n(0,1,0),new n(0,1,0),new n(0,1,0),new n(0,1,0),new n(0,0,1),new n(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera,o=this.matrix,s=e.distance||n.far;s!==n.far&&(n.far=s,n.updateProjectionMatrix()),Va.setFromMatrixPosition(e.matrixWorld),n.position.copy(Va),gu.copy(n.position),gu.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(gu),n.updateMatrixWorld(),o.makeTranslation(-Va.x,-Va.y,-Va.z),Yh.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Yh,n.coordinateSystem,n.reversedDepth)}},D7=class extends yu{constructor(e,t,n=0,s=2){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=s,this.shadow=new N7}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}},Jh=class extends t3{constructor(e=-1,t=1,n=1,s=-1,o=.1,i=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=s,this.near=o,this.far=i,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,s,o,i){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=s,this.view.width=o,this.view.height=i,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const n=(this.right-this.left)/(2*this.zoom),s=(this.top-this.bottom)/(2*this.zoom),o=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let e=o-n,a=o+n,t=i+s,r=i-s;if(this.view!==null&&this.view.enabled){const n=(this.right-this.left)/this.view.fullWidth/this.zoom,s=(this.top-this.bottom)/this.view.fullHeight/this.zoom;e+=n*this.view.offsetX,a=e+n*this.view.width,t-=s*this.view.offsetY,r=t-s*this.view.height}this.projectionMatrix.makeOrthographic(e,a,t,r,this.near,this.far,this.coordinateSystem,this.reversedDepth),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}},T7=class extends bu{constructor(){super(new Jh(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}},F7=class extends yu{constructor(e,t){super(e,t),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(je.DEFAULT_UP),this.updateMatrix(),this.target=new je,this.shadow=new T7}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}},qa=class{static extractUrlBase(e){const t=e.lastIndexOf("/");return t===-1?"./":e.slice(0,t+1)}static resolveURL(e,t){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)?e:/^data:.*,.*$/i.test(e)?e:/^blob:.*$/i.test(e)?e:t+e)}},cu=new WeakMap,A7=class extends Gi{constructor(e){super(e),this.isImageBitmapLoader=!0,typeof createImageBitmap=="undefined"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch=="undefined"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"},this._abortController=new AbortController}setOptions(e){return this.options=e,this}load(e,t,n,s){e===0[0]&&(e=""),this.path!==0[0]&&(e=this.path+e),e=this.manager.resolveURL(e);const o=this,i=xn.get(`image-bitmap:${e}`);if(i!==0[0]){if(o.manager.itemStart(e),i.then){i.then(n=>{if(cu.has(i)===!0)s&&s(cu.get(i)),o.manager.itemError(e),o.manager.itemEnd(e);else return t&&t(n),o.manager.itemEnd(e),n});return}return setTimeout(function(){t&&t(i),o.manager.itemEnd(e)},0),i}const a={};a.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",a.headers=this.requestHeader,a.signal=typeof AbortSignal.any=="function"?AbortSignal.any([this._abortController.signal,this.manager.abortController.signal]):this._abortController.signal;const r=fetch(e,a).then(function(e){return e.blob()}).then(function(e){return createImageBitmap(e,Object.assign(o.options,{colorSpaceConversion:"none"}))}).then(function(n){return xn.add(`image-bitmap:${e}`,n),t&&t(n),o.manager.itemEnd(e),n}).catch(function(t){s&&s(t),cu.set(r,t),xn.remove(`image-bitmap:${e}`),o.manager.itemError(e),o.manager.itemEnd(e)});xn.add(`image-bitmap:${e}`,r),o.manager.itemStart(e)}abort(){return this._abortController.abort(),this._abortController=new AbortController,this}},au="\\[\\]\\.:\\/",k7=new RegExp("["+au+"]","g"),su="[^"+au+"]",E7="[^"+au.replace("\\.","")+"]",C7=/((?:WC+[/:])*)/.source.replace("WC",su),w7=/(WCOD+)?/.source.replace("WCOD",E7),_7=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",su),y7=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",su),j7=new RegExp("^"+C7+w7+_7+y7+"$"),b7=["material","materials","bones","map"],v7=class{constructor(e,t,n){const s=n||U.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,s)}getValue(e,t){this.bind();const s=this._targetGroup.nCachedObjects_,n=this._bindings[s];n!==0[0]&&n.getValue(e,t)}setValue(e,t){const n=this._bindings;for(let s=this._targetGroup.nCachedObjects_,o=n.length;s!==o;++s)n[s].setValue(e,t)}bind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()}unbind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}},U=class _PropertyBinding{constructor(e,t,n){this.path=t,this.parsedPath=n||_PropertyBinding.parseTrackName(t),this.node=_PropertyBinding.findNode(e,this.parsedPath.nodeName),this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,n){return e&&e.isAnimationObjectGroup?new _PropertyBinding.Composite(e,t,n):new _PropertyBinding(e,t,n)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(k7,"")}static parseTrackName(e){const n=j7.exec(e);if(n===null)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const t={nodeName:n[2],objectName:n[3],objectIndex:n[4],propertyName:n[5],propertyIndex:n[6]},s=t.nodeName&&t.nodeName.lastIndexOf(".");if(s!==0[0]&&s!==-1){const e=t.nodeName.substring(s+1);b7.indexOf(e)!==-1&&(t.nodeName=t.nodeName.substring(0,s),t.objectName=e)}if(t.propertyName===null||t.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return t}static findNode(e,t){if(t===0[0]||t===""||t==="."||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){const n=e.skeleton.getBoneByName(t);if(n!==0[0])return n}if(e.children){const n=function(e){for(let o=0;o<e.length;o++){const s=e[o];if(s.name===t||s.uuid===t)return s;const i=n(s.children);if(i)return i}return null},s=n(e.children);if(s)return s}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){const n=this.resolvedProperty;for(let s=0,o=n.length;s!==o;++s)e[t++]=n[s]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const n=this.resolvedProperty;for(let s=0,o=n.length;s!==o;++s)n[s]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const n=this.resolvedProperty;for(let s=0,o=n.length;s!==o;++s)n[s]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const n=this.resolvedProperty;for(let s=0,o=n.length;s!==o;++s)n[s]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const n=this.parsedPath,i=n.objectName,a=n.propertyName;let s=n.propertyIndex;if(e||(e=_PropertyBinding.findNode(this.rootNode,n.nodeName),this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(i){let t=n.objectIndex;switch(i){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let n=0;n<e.length;n++)if(e[n].name===t){t=n;break}break;case"map":if("map"in e){e=e.map;break}if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}e=e.material.map;break;default:if(e[i]===0[0]){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[i]}if(t!==0[0]){if(e[t]===0[0]){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[t]}}const t=e[a];if(t===0[0]){const t=n.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+t+"."+a+" but it wasn't found.",e);return}let r=this.Versioning.None;this.targetObject=e,e.isMaterial===!0?r=this.Versioning.NeedsUpdate:e.isObject3D===!0&&(r=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(s!==0[0]){if(a==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[s]!==0[0]&&(s=e.morphTargetDictionary[s])}o=this.BindingType.ArrayElement,this.resolvedProperty=t,this.propertyIndex=s}else t.fromArray!==0[0]&&t.toArray!==0[0]?(o=this.BindingType.HasFromToArray,this.resolvedProperty=t):Array.isArray(t)?(o=this.BindingType.EntireArray,this.resolvedProperty=t):this.propertyName=a;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][r]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}},U.Composite=v7,U.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},U.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},U.prototype.GetterByBindingType=[U.prototype._getValue_direct,U.prototype._getValue_array,U.prototype._getValue_arrayElement,U.prototype._getValue_toArray],U.prototype.SetterByBindingTypeAndVersioning=[[U.prototype._setValue_direct,U.prototype._setValue_direct_setNeedsUpdate,U.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[U.prototype._setValue_array,U.prototype._setValue_array_setNeedsUpdate,U.prototype._setValue_array_setMatrixWorldNeedsUpdate],[U.prototype._setValue_arrayElement,U.prototype._setValue_arrayElement_setNeedsUpdate,U.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[U.prototype._setValue_fromArray,U.prototype._setValue_fromArray_setNeedsUpdate,U.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]],KD=new Float32Array(1),bm=class{constructor(e=1,t=0,n=0){this.radius=e,this.phi=t,this.theta=n}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){const e=1e-6;return this.phi=C(this.phi,e,Math.PI-e),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=(e*e+t*t+n*n)**.5,this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(C(t/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}},p7=class extends xr{constructor(e,t=null){super(),this.object=e,this.domElement=t,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(e){if(e===0[0]){console.warn("THREE.Controls: connect() now requires an element.");return}this.domElement!==null&&this.disconnect(),this.domElement=e}disconnect(){}dispose(){}update(){}},typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:p3}})),typeof window!="undefined"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=p3),m7=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,h7=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,u7=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,d7=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,l7=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,c7=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,r7=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,a7=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,i7=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,X5=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,K5=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,U5=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,W5=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,$5=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,V5=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,B5=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,I5=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,P5=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,R5=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,L5=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,z5=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,F5=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,M5=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,j5=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,v5=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,p5=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,m5=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,l5=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,c5=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,r5=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,i5="gl_FragColor = linearToOutputTexel( gl_FragColor );",o5=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,s5=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,n5=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,qg=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,Ig=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,Mg=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,Og=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,ug=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,dg=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,lg=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,ig=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,Qp=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,Xp=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,Yp=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,Kp=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,Wp=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,$p=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,Bp=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,Ip=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,Lp=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,Dp=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,yp=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,jp=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,bp=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,vp=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,pp=`#if defined( USE_LOGARITHMIC_DEPTH_BUFFER )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,fp=`#if defined( USE_LOGARITHMIC_DEPTH_BUFFER )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,mp=`#ifdef USE_LOGARITHMIC_DEPTH_BUFFER
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,hp=`#ifdef USE_LOGARITHMIC_DEPTH_BUFFER
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,up=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,ip=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,op=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,ep=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,J6=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,Q6=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,G6=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,Y6=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,q6=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,K6=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,U6=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,W6=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,$6=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,I6=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,N6=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,D6=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,z6=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,f6=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,i6=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,o6=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,s6=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,n6=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,t6=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,aS=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,X8=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,Q8=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,Z8=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,J8=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,ef=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,tf=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		float depth = unpackRGBAToDepth( texture2D( depths, uv ) );
		#ifdef USE_REVERSED_DEPTH_BUFFER
			return step( depth, compare );
		#else
			return step( compare, depth );
		#endif
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow( sampler2D shadow, vec2 uv, float compare ) {
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		#ifdef USE_REVERSED_DEPTH_BUFFER
			float hard_shadow = step( distribution.x, compare );
		#else
			float hard_shadow = step( compare, distribution.x );
		#endif
		if ( hard_shadow != 1.0 ) {
			float distance = compare - distribution.x;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,nf=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,sf=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,af=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,rf=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,cf=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,lf=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,df=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,uf=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,hf=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,mf=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,ff=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,pf=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,gf=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,vf=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,bf=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,jf=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,yf=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`,_f=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,wf=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,Of=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,xf=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,Cf=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,Ef=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,kf=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,Af=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	#ifdef USE_REVERSED_DEPTH_BUFFER
		float fragCoordZ = vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ];
	#else
		float fragCoordZ = 0.5 * vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ] + 0.5;
	#endif
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,Sf=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,Mf=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,Ff=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,Tf=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,zf=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,Df=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Nf=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,Lf=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Rf=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Pf=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Hf=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,If=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Bf=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,Vf=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,$f=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Wf=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Uf=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,Kf=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,qf=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Yf=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Gf=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,Xf=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Qf=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Zf=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,Jf=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,e6=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,S={alphahash_fragment:m7,alphahash_pars_fragment:h7,alphamap_fragment:u7,alphamap_pars_fragment:d7,alphatest_fragment:l7,alphatest_pars_fragment:c7,aomap_fragment:r7,aomap_pars_fragment:a7,batching_pars_vertex:i7,batching_vertex:X5,begin_vertex:K5,beginnormal_vertex:U5,bsdfs:W5,iridescence_fragment:$5,bumpmap_pars_fragment:V5,clipping_planes_fragment:B5,clipping_planes_pars_fragment:I5,clipping_planes_pars_vertex:P5,clipping_planes_vertex:R5,color_fragment:L5,color_pars_fragment:z5,color_pars_vertex:F5,color_vertex:M5,common:j5,cube_uv_reflection_fragment:v5,defaultnormal_vertex:p5,displacementmap_pars_vertex:m5,displacementmap_vertex:l5,emissivemap_fragment:c5,emissivemap_pars_fragment:r5,colorspace_fragment:i5,colorspace_pars_fragment:o5,envmap_fragment:s5,envmap_common_pars_fragment:n5,envmap_pars_fragment:qg,envmap_pars_vertex:Ig,envmap_physical_pars_fragment:Wp,envmap_vertex:Mg,fog_vertex:Og,fog_pars_vertex:ug,fog_fragment:dg,fog_pars_fragment:lg,gradientmap_pars_fragment:ig,lightmap_pars_fragment:Qp,lights_lambert_fragment:Xp,lights_lambert_pars_fragment:Yp,lights_pars_begin:Kp,lights_toon_fragment:$p,lights_toon_pars_fragment:Bp,lights_phong_fragment:Ip,lights_phong_pars_fragment:Lp,lights_physical_fragment:Dp,lights_physical_pars_fragment:yp,lights_fragment_begin:jp,lights_fragment_maps:bp,lights_fragment_end:vp,logdepthbuf_fragment:pp,logdepthbuf_pars_fragment:fp,logdepthbuf_pars_vertex:mp,logdepthbuf_vertex:hp,map_fragment:up,map_pars_fragment:ip,map_particle_fragment:op,map_particle_pars_fragment:ep,metalnessmap_fragment:J6,metalnessmap_pars_fragment:Q6,morphinstance_vertex:G6,morphcolor_vertex:Y6,morphnormal_vertex:q6,morphtarget_pars_vertex:K6,morphtarget_vertex:U6,normal_fragment_begin:W6,normal_fragment_maps:$6,normal_pars_fragment:I6,normal_pars_vertex:N6,normal_vertex:D6,normalmap_pars_fragment:z6,clearcoat_normal_fragment_begin:f6,clearcoat_normal_fragment_maps:i6,clearcoat_pars_fragment:o6,iridescence_pars_fragment:s6,opaque_fragment:n6,packing:t6,premultiplied_alpha_fragment:aS,project_vertex:X8,dithering_fragment:Q8,dithering_pars_fragment:Z8,roughnessmap_fragment:J8,roughnessmap_pars_fragment:ef,shadowmap_pars_fragment:tf,shadowmap_pars_vertex:nf,shadowmap_vertex:sf,shadowmask_pars_fragment:af,skinbase_vertex:rf,skinning_pars_vertex:cf,skinning_vertex:lf,skinnormal_vertex:df,specularmap_fragment:uf,specularmap_pars_fragment:hf,tonemapping_fragment:mf,tonemapping_pars_fragment:ff,transmission_fragment:pf,transmission_pars_fragment:gf,uv_pars_fragment:vf,uv_pars_vertex:bf,uv_vertex:jf,worldpos_vertex:yf,background_vert:_f,background_frag:wf,backgroundCube_vert:Of,backgroundCube_frag:xf,cube_vert:Cf,cube_frag:Ef,depth_vert:kf,depth_frag:Af,distanceRGBA_vert:Sf,distanceRGBA_frag:Mf,equirect_vert:Ff,equirect_frag:Tf,linedashed_vert:zf,linedashed_frag:Df,meshbasic_vert:Nf,meshbasic_frag:Lf,meshlambert_vert:Rf,meshlambert_frag:Pf,meshmatcap_vert:Hf,meshmatcap_frag:If,meshnormal_vert:Bf,meshnormal_frag:Vf,meshphong_vert:$f,meshphong_frag:Wf,meshphysical_vert:Uf,meshphysical_frag:Kf,meshtoon_vert:qf,meshtoon_frag:Yf,points_vert:Gf,points_frag:Xf,shadow_vert:Qf,shadow_frag:Zf,sprite_vert:Jf,sprite_frag:e6},l={common:{diffuse:{value:new z(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new E},alphaMap:{value:null},alphaMapTransform:{value:new E},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new E}},envmap:{envMap:{value:null},envMapRotation:{value:new E},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new E}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new E}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new E},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new E},normalScale:{value:new F(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new E},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new E}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new E}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new E}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new z(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new z(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new E},alphaTest:{value:0},uvTransform:{value:new E}},sprite:{diffuse:{value:new z(16777215)},opacity:{value:1},center:{value:new F(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new E},alphaMap:{value:null},alphaMapTransform:{value:new E},alphaTest:{value:0}}},K8={basic:{uniforms:et([l.common,l.specularmap,l.envmap,l.aomap,l.lightmap,l.fog]),vertexShader:S.meshbasic_vert,fragmentShader:S.meshbasic_frag},lambert:{uniforms:et([l.common,l.specularmap,l.envmap,l.aomap,l.lightmap,l.emissivemap,l.bumpmap,l.normalmap,l.displacementmap,l.fog,l.lights,{emissive:{value:new z(0)}}]),vertexShader:S.meshlambert_vert,fragmentShader:S.meshlambert_frag},phong:{uniforms:et([l.common,l.specularmap,l.envmap,l.aomap,l.lightmap,l.emissivemap,l.bumpmap,l.normalmap,l.displacementmap,l.fog,l.lights,{emissive:{value:new z(0)},specular:{value:new z(1118481)},shininess:{value:30}}]),vertexShader:S.meshphong_vert,fragmentShader:S.meshphong_frag},standard:{uniforms:et([l.common,l.envmap,l.aomap,l.lightmap,l.emissivemap,l.bumpmap,l.normalmap,l.displacementmap,l.roughnessmap,l.metalnessmap,l.fog,l.lights,{emissive:{value:new z(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:S.meshphysical_vert,fragmentShader:S.meshphysical_frag},toon:{uniforms:et([l.common,l.aomap,l.lightmap,l.emissivemap,l.bumpmap,l.normalmap,l.displacementmap,l.gradientmap,l.fog,l.lights,{emissive:{value:new z(0)}}]),vertexShader:S.meshtoon_vert,fragmentShader:S.meshtoon_frag},matcap:{uniforms:et([l.common,l.bumpmap,l.normalmap,l.displacementmap,l.fog,{matcap:{value:null}}]),vertexShader:S.meshmatcap_vert,fragmentShader:S.meshmatcap_frag},points:{uniforms:et([l.points,l.fog]),vertexShader:S.points_vert,fragmentShader:S.points_frag},dashed:{uniforms:et([l.common,l.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:S.linedashed_vert,fragmentShader:S.linedashed_frag},depth:{uniforms:et([l.common,l.displacementmap]),vertexShader:S.depth_vert,fragmentShader:S.depth_frag},normal:{uniforms:et([l.common,l.bumpmap,l.normalmap,l.displacementmap,{opacity:{value:1}}]),vertexShader:S.meshnormal_vert,fragmentShader:S.meshnormal_frag},sprite:{uniforms:et([l.sprite,l.fog]),vertexShader:S.sprite_vert,fragmentShader:S.sprite_frag},background:{uniforms:{uvTransform:{value:new E},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:S.background_vert,fragmentShader:S.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new E}},vertexShader:S.backgroundCube_vert,fragmentShader:S.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:S.cube_vert,fragmentShader:S.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:S.equirect_vert,fragmentShader:S.equirect_frag},distanceRGBA:{uniforms:et([l.common,l.displacementmap,{referencePosition:{value:new n},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:S.distanceRGBA_vert,fragmentShader:S.distanceRGBA_frag},shadow:{uniforms:et([l.lights,l.fog,{color:{value:new z(0)},opacity:{value:1}}]),vertexShader:S.shadow_vert,fragmentShader:S.shadow_frag}},K8.physical={uniforms:et([K8.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new E},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new E},clearcoatNormalScale:{value:new F(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new E},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new E},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new E},sheen:{value:0},sheenColor:{value:new z(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new E},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new E},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new E},transmissionSamplerSize:{value:new F},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new E},attenuationDistance:{value:0},attenuationColor:{value:new z(0)},specularColor:{value:new z(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new E},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new E},anisotropyVector:{value:new F},anisotropyMap:{value:null},anisotropyMapTransform:{value:new E}}]),vertexShader:S.meshphysical_vert,fragmentShader:S.meshphysical_frag},lo=(1+5**.5)/2,go=1/lo,kN=[new n(-lo,go,0),new n(lo,go,0),new n(-go,0,lo),new n(go,0,lo),new n(0,lo,-go),new n(0,lo,go),new n(-1,1,-1),new n(1,1,-1),new n(-1,1,1),new n(1,1,1)],CN=new Float32Array(16),xN=new Float32Array(9),ON=new Float32Array(4),wN={[Z2]:X2,[G2]:B2,[K2]:I2,[fc]:$2,[X2]:Z2,[B2]:G2,[I2]:K2,[$2]:fc};function u6(e,t){if(t===dj)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),e;if(t===V1||t===U0){let n=e.getIndex();if(n===null){const t=[],s=e.getAttribute("position");if(s!==0[0]){for(let e=0;e<s.count;e++)t.push(e);e.setIndex(t),n=e.getIndex()}else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e}const o=n.count-2,s=[];if(t===V1)for(let e=1;e<=o;e++)s.push(n.getX(0)),s.push(n.getX(e)),s.push(n.getX(e+1));else for(let e=0;e<o;e++)e%2===0?(s.push(n.getX(e)),s.push(n.getX(e+1)),s.push(n.getX(e+2))):(s.push(n.getX(e+2)),s.push(n.getX(e+1)),s.push(n.getX(e)));s.length/3!==o&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");const i=e.clone();return i.setIndex(s),i.clearGroups(),i}return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",t),e}h6=class extends Gi{constructor(e){super(e),this.dracoLoader=null,this.ktx2Loader=null,this.meshoptDecoder=null,this.pluginCallbacks=[],this.register(function(e){return new b6(e)}),this.register(function(e){return new j6(e)}),this.register(function(e){return new A6(e)}),this.register(function(e){return new S6(e)}),this.register(function(e){return new M6(e)}),this.register(function(e){return new _6(e)}),this.register(function(e){return new w6(e)}),this.register(function(e){return new O6(e)}),this.register(function(e){return new x6(e)}),this.register(function(e){return new v6(e)}),this.register(function(e){return new C6(e)}),this.register(function(e){return new y6(e)}),this.register(function(e){return new k6(e)}),this.register(function(e){return new E6(e)}),this.register(function(e){return new p6(e)}),this.register(function(e){return new F6(e)}),this.register(function(e){return new T6(e)})}load(e,t,n,s){const i=this;let a;if(this.resourcePath!=="")a=this.resourcePath;else if(this.path!==""){const t=qa.extractUrlBase(e);a=qa.resolveURL(t,this.path)}else a=qa.extractUrlBase(e);this.manager.itemStart(e);const r=function(t){s?s(t):console.error(t),i.manager.itemError(e),i.manager.itemEnd(e)},o=new Rh(this.manager);o.setPath(this.path),o.setResponseType("arraybuffer"),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(e,function(n){try{i.parse(n,a,function(n){t(n),i.manager.itemEnd(e)},r)}catch(e){r(e)}},n,r)}setDRACOLoader(e){return this.dracoLoader=e,this}setKTX2Loader(e){return this.ktx2Loader=e,this}setMeshoptDecoder(e){return this.meshoptDecoder=e,this}register(e){return this.pluginCallbacks.indexOf(e)===-1&&this.pluginCallbacks.push(e),this}unregister(e){return this.pluginCallbacks.indexOf(e)!==-1&&this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(e),1),this}parse(e,t,n,s){let o;const i={},r={},c=new TextDecoder;if(typeof e=="string")o=JSON.parse(e);else if(e instanceof ArrayBuffer){const t=c.decode(new Uint8Array(e,0,4));if(t===V8){try{i[A.KHR_BINARY_GLTF]=new L6(e)}catch(e){s&&s(e);return}o=JSON.parse(i[A.KHR_BINARY_GLTF].content)}else o=JSON.parse(c.decode(e))}else o=e;if(o.asset===0[0]||o.asset.version[0]<2){s&&s(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));return}const a=new cp(o,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,requestHeader:this.requestHeader,manager:this.manager,ktx2Loader:this.ktx2Loader,meshoptDecoder:this.meshoptDecoder});a.fileLoader.setRequestHeader(this.requestHeader);for(let t=0;t<this.pluginCallbacks.length;t++){const e=this.pluginCallbacks[t](a);e.name||console.error("THREE.GLTFLoader: Invalid plugin found: missing name"),r[e.name]=e,i[e.name]=!0}if(o.extensionsUsed)for(let t=0;t<o.extensionsUsed.length;++t){const e=o.extensionsUsed[t],n=o.extensionsRequired||[];switch(e){case A.KHR_MATERIALS_UNLIT:i[e]=new g6;break;case A.KHR_DRACO_MESH_COMPRESSION:i[e]=new R6(o,this.dracoLoader);break;case A.KHR_TEXTURE_TRANSFORM:i[e]=new P6;break;case A.KHR_MESH_QUANTIZATION:i[e]=new H6;break;default:n.indexOf(e)>=0&&r[e]===0[0]&&console.warn('THREE.GLTFLoader: Unknown extension "'+e+'".')}}a.setExtensions(i),a.setPlugins(r),a.parse(n,s)}parseAsync(e,t){const n=this;return new Promise(function(s,o){n.parse(e,t,s,o)})}};function _N(){let e={};return{get:function(t){return e[t]},add:function(t,n){e[t]=n},remove:function(t){delete e[t]},removeAll:function(){e={}}}}A={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_DISPERSION:"KHR_materials_dispersion",KHR_MATERIALS_IOR:"KHR_materials_ior",KHR_MATERIALS_SHEEN:"KHR_materials_sheen",KHR_MATERIALS_SPECULAR:"KHR_materials_specular",KHR_MATERIALS_TRANSMISSION:"KHR_materials_transmission",KHR_MATERIALS_IRIDESCENCE:"KHR_materials_iridescence",KHR_MATERIALS_ANISOTROPY:"KHR_materials_anisotropy",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_MATERIALS_VOLUME:"KHR_materials_volume",KHR_TEXTURE_BASISU:"KHR_texture_basisu",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",KHR_MATERIALS_EMISSIVE_STRENGTH:"KHR_materials_emissive_strength",EXT_MATERIALS_BUMP:"EXT_materials_bump",EXT_TEXTURE_WEBP:"EXT_texture_webp",EXT_TEXTURE_AVIF:"EXT_texture_avif",EXT_MESHOPT_COMPRESSION:"EXT_meshopt_compression",EXT_MESH_GPU_INSTANCING:"EXT_mesh_gpu_instancing"},p6=class{constructor(e){this.parser=e,this.name=A.KHR_LIGHTS_PUNCTUAL,this.cache={refs:{},uses:{}}}_markDefs(){const t=this.parser,e=this.parser.json.nodes||[];for(let s=0,o=e.length;s<o;s++){const n=e[s];n.extensions&&n.extensions[this.name]&&n.extensions[this.name].light!==0[0]&&t._addNodeRef(this.cache,n.extensions[this.name].light)}}_loadLight(e){const o=this.parser,a="light:"+e;let s=o.cache.get(a);if(s)return s;const r=o.json,l=r.extensions&&r.extensions[this.name]||{},d=l.lights||[],t=d[e];let n;const i=new z(16777215);t.color!==0[0]&&i.setRGB(t.color[0],t.color[1],t.color[2],It);const c=t.range!==0[0]?t.range:0;switch(t.type){case"directional":n=new F7(i),n.target.position.set(0,0,-1),n.add(n.target);break;case"point":n=new D7(i),n.distance=c;break;case"spot":n=new L7(i),n.distance=c,t.spot=t.spot||{},t.spot.innerConeAngle=t.spot.innerConeAngle!==0[0]?t.spot.innerConeAngle:0,t.spot.outerConeAngle=t.spot.outerConeAngle!==0[0]?t.spot.outerConeAngle:Math.PI/4,n.angle=t.spot.outerConeAngle,n.penumbra=1-t.spot.innerConeAngle/t.spot.outerConeAngle,n.target.position.set(0,0,-1),n.add(n.target);break;default:throw new Error("THREE.GLTFLoader: Unexpected light type: "+t.type)}return n.position.set(0,0,0),Nn(n,t),t.intensity!==0[0]&&(n.intensity=t.intensity),n.name=o.createUniqueName(t.name||"light_"+e),s=Promise.resolve(n),o.cache.add(a,s),s}getDependency(e,t){if(e!=="light")return;return this._loadLight(t)}createNodeAttachment(e){const o=this,n=this.parser,i=n.json,s=i.nodes[e],a=s.extensions&&s.extensions[this.name]||{},t=a.light;return t===0[0]?null:this._loadLight(t).then(function(e){return n._getNodeRef(o.cache,t,e)})}},g6=class{constructor(){this.name=A.KHR_MATERIALS_UNLIT}getMaterialType(){return ji}extendParams(e,t,n){const o=[];e.color=new z(1,1,1),e.opacity=1;const s=t.pbrMetallicRoughness;if(s){if(Array.isArray(s.baseColorFactor)){const t=s.baseColorFactor;e.color.setRGB(t[0],t[1],t[2],It),e.opacity=t[3]}s.baseColorTexture!==0[0]&&o.push(n.assignTexture(e,"map",s.baseColorTexture,Oe))}return Promise.all(o)}},v6=class{constructor(e){this.parser=e,this.name=A.KHR_MATERIALS_EMISSIVE_STRENGTH}extendMaterialParams(e,t){const o=this.parser,n=o.json.materials[e];if(!n.extensions||!n.extensions[this.name])return Promise.resolve();const s=n.extensions[this.name].emissiveStrength;return s!==0[0]&&(t.emissiveIntensity=s),Promise.resolve()}},b6=class{constructor(e){this.parser=e,this.name=A.KHR_MATERIALS_CLEARCOAT}getMaterialType(e){const n=this.parser,t=n.json.materials[e];return!t.extensions||!t.extensions[this.name]?null:tn}extendMaterialParams(e,t){const s=this.parser,i=s.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const o=[],n=i.extensions[this.name];if(n.clearcoatFactor!==0[0]&&(t.clearcoat=n.clearcoatFactor),n.clearcoatTexture!==0[0]&&o.push(s.assignTexture(t,"clearcoatMap",n.clearcoatTexture)),n.clearcoatRoughnessFactor!==0[0]&&(t.clearcoatRoughness=n.clearcoatRoughnessFactor),n.clearcoatRoughnessTexture!==0[0]&&o.push(s.assignTexture(t,"clearcoatRoughnessMap",n.clearcoatRoughnessTexture)),n.clearcoatNormalTexture!==0[0]&&(o.push(s.assignTexture(t,"clearcoatNormalMap",n.clearcoatNormalTexture)),n.clearcoatNormalTexture.scale!==0[0])){const e=n.clearcoatNormalTexture.scale;t.clearcoatNormalScale=new F(e,e)}return Promise.all(o)}},j6=class{constructor(e){this.parser=e,this.name=A.KHR_MATERIALS_DISPERSION}getMaterialType(e){const n=this.parser,t=n.json.materials[e];return!t.extensions||!t.extensions[this.name]?null:tn}extendMaterialParams(e,t){const o=this.parser,n=o.json.materials[e];if(!n.extensions||!n.extensions[this.name])return Promise.resolve();const s=n.extensions[this.name];return t.dispersion=s.dispersion!==0[0]?s.dispersion:0,Promise.resolve()}},y6=class{constructor(e){this.parser=e,this.name=A.KHR_MATERIALS_IRIDESCENCE}getMaterialType(e){const n=this.parser,t=n.json.materials[e];return!t.extensions||!t.extensions[this.name]?null:tn}extendMaterialParams(e,t){const s=this.parser,o=s.json.materials[e];if(!o.extensions||!o.extensions[this.name])return Promise.resolve();const i=[],n=o.extensions[this.name];return n.iridescenceFactor!==0[0]&&(t.iridescence=n.iridescenceFactor),n.iridescenceTexture!==0[0]&&i.push(s.assignTexture(t,"iridescenceMap",n.iridescenceTexture)),n.iridescenceIor!==0[0]&&(t.iridescenceIOR=n.iridescenceIor),t.iridescenceThicknessRange===0[0]&&(t.iridescenceThicknessRange=[100,400]),n.iridescenceThicknessMinimum!==0[0]&&(t.iridescenceThicknessRange[0]=n.iridescenceThicknessMinimum),n.iridescenceThicknessMaximum!==0[0]&&(t.iridescenceThicknessRange[1]=n.iridescenceThicknessMaximum),n.iridescenceThicknessTexture!==0[0]&&i.push(s.assignTexture(t,"iridescenceThicknessMap",n.iridescenceThicknessTexture)),Promise.all(i)}},_6=class{constructor(e){this.parser=e,this.name=A.KHR_MATERIALS_SHEEN}getMaterialType(e){const n=this.parser,t=n.json.materials[e];return!t.extensions||!t.extensions[this.name]?null:tn}extendMaterialParams(e,t){const s=this.parser,o=s.json.materials[e];if(!o.extensions||!o.extensions[this.name])return Promise.resolve();const i=[];t.sheenColor=new z(0,0,0),t.sheenRoughness=0,t.sheen=1;const n=o.extensions[this.name];if(n.sheenColorFactor!==0[0]){const e=n.sheenColorFactor;t.sheenColor.setRGB(e[0],e[1],e[2],It)}return n.sheenRoughnessFactor!==0[0]&&(t.sheenRoughness=n.sheenRoughnessFactor),n.sheenColorTexture!==0[0]&&i.push(s.assignTexture(t,"sheenColorMap",n.sheenColorTexture,Oe)),n.sheenRoughnessTexture!==0[0]&&i.push(s.assignTexture(t,"sheenRoughnessMap",n.sheenRoughnessTexture)),Promise.all(i)}},w6=class{constructor(e){this.parser=e,this.name=A.KHR_MATERIALS_TRANSMISSION}getMaterialType(e){const n=this.parser,t=n.json.materials[e];return!t.extensions||!t.extensions[this.name]?null:tn}extendMaterialParams(e,t){const o=this.parser,s=o.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const i=[],n=s.extensions[this.name];return n.transmissionFactor!==0[0]&&(t.transmission=n.transmissionFactor),n.transmissionTexture!==0[0]&&i.push(o.assignTexture(t,"transmissionMap",n.transmissionTexture)),Promise.all(i)}},O6=class{constructor(e){this.parser=e,this.name=A.KHR_MATERIALS_VOLUME}getMaterialType(e){const n=this.parser,t=n.json.materials[e];return!t.extensions||!t.extensions[this.name]?null:tn}extendMaterialParams(e,t){const i=this.parser,s=i.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const a=[],n=s.extensions[this.name];t.thickness=n.thicknessFactor!==0[0]?n.thicknessFactor:0,n.thicknessTexture!==0[0]&&a.push(i.assignTexture(t,"thicknessMap",n.thicknessTexture)),t.attenuationDistance=n.attenuationDistance||1/0;const o=n.attenuationColor||[1,1,1];return t.attenuationColor=(new z).setRGB(o[0],o[1],o[2],It),Promise.all(a)}},x6=class{constructor(e){this.parser=e,this.name=A.KHR_MATERIALS_IOR}getMaterialType(e){const n=this.parser,t=n.json.materials[e];return!t.extensions||!t.extensions[this.name]?null:tn}extendMaterialParams(e,t){const o=this.parser,n=o.json.materials[e];if(!n.extensions||!n.extensions[this.name])return Promise.resolve();const s=n.extensions[this.name];return t.ior=s.ior!==0[0]?s.ior:1.5,Promise.resolve()}},C6=class{constructor(e){this.parser=e,this.name=A.KHR_MATERIALS_SPECULAR}getMaterialType(e){const n=this.parser,t=n.json.materials[e];return!t.extensions||!t.extensions[this.name]?null:tn}extendMaterialParams(e,t){const s=this.parser,o=s.json.materials[e];if(!o.extensions||!o.extensions[this.name])return Promise.resolve();const i=[],n=o.extensions[this.name];t.specularIntensity=n.specularFactor!==0[0]?n.specularFactor:1,n.specularTexture!==0[0]&&i.push(s.assignTexture(t,"specularIntensityMap",n.specularTexture));const a=n.specularColorFactor||[1,1,1];return t.specularColor=(new z).setRGB(a[0],a[1],a[2],It),n.specularColorTexture!==0[0]&&i.push(s.assignTexture(t,"specularColorMap",n.specularColorTexture,Oe)),Promise.all(i)}},E6=class{constructor(e){this.parser=e,this.name=A.EXT_MATERIALS_BUMP}getMaterialType(e){const n=this.parser,t=n.json.materials[e];return!t.extensions||!t.extensions[this.name]?null:tn}extendMaterialParams(e,t){const o=this.parser,s=o.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const i=[],n=s.extensions[this.name];return t.bumpScale=n.bumpFactor!==0[0]?n.bumpFactor:1,n.bumpTexture!==0[0]&&i.push(o.assignTexture(t,"bumpMap",n.bumpTexture)),Promise.all(i)}},k6=class{constructor(e){this.parser=e,this.name=A.KHR_MATERIALS_ANISOTROPY}getMaterialType(e){const n=this.parser,t=n.json.materials[e];return!t.extensions||!t.extensions[this.name]?null:tn}extendMaterialParams(e,t){const o=this.parser,s=o.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const i=[],n=s.extensions[this.name];return n.anisotropyStrength!==0[0]&&(t.anisotropy=n.anisotropyStrength),n.anisotropyRotation!==0[0]&&(t.anisotropyRotation=n.anisotropyRotation),n.anisotropyTexture!==0[0]&&i.push(o.assignTexture(t,"anisotropyMap",n.anisotropyTexture)),Promise.all(i)}},A6=class{constructor(e){this.parser=e,this.name=A.KHR_TEXTURE_BASISU}loadTexture(e){const t=this.parser,n=t.json,s=n.textures[e];if(!s.extensions||!s.extensions[this.name])return null;const i=s.extensions[this.name],o=t.options.ktx2Loader;if(!o){if(n.extensionsRequired&&n.extensionsRequired.indexOf(this.name)>=0)throw new Error("THREE.GLTFLoader: setKTX2Loader must be called before loading KTX2 textures");return null}return t.loadTextureImage(e,i.source,o)}},S6=class{constructor(e){this.parser=e,this.name=A.EXT_TEXTURE_WEBP}loadTexture(e){const s=this.name,t=this.parser,o=t.json,n=o.textures[e];if(!n.extensions||!n.extensions[s])return null;const i=n.extensions[s],a=o.images[i.source];let r=t.textureLoader;if(a.uri){const e=t.options.manager.getHandler(a.uri);e!==null&&(r=e)}return t.loadTextureImage(e,i.source,r)}},M6=class{constructor(e){this.parser=e,this.name=A.EXT_TEXTURE_AVIF}loadTexture(e){const s=this.name,t=this.parser,o=t.json,n=o.textures[e];if(!n.extensions||!n.extensions[s])return null;const i=n.extensions[s],a=o.images[i.source];let r=t.textureLoader;if(a.uri){const e=t.options.manager.getHandler(a.uri);e!==null&&(r=e)}return t.loadTextureImage(e,i.source,r)}},F6=class{constructor(e){this.name=A.EXT_MESHOPT_COMPRESSION,this.parser=e}loadBufferView(e){const t=this.parser.json,n=t.bufferViews[e];if(n.extensions&&n.extensions[this.name]){const e=n.extensions[this.name],o=this.parser.getDependency("buffer",e.buffer),s=this.parser.options.meshoptDecoder;if(!s||!s.supported){if(t.extensionsRequired&&t.extensionsRequired.indexOf(this.name)>=0)throw new Error("THREE.GLTFLoader: setMeshoptDecoder must be called before loading compressed files");return null}return o.then(function(t){const a=e.byteOffset||0,r=e.byteLength||0,n=e.count,o=e.byteStride,i=new Uint8Array(t,a,r);return s.decodeGltfBufferAsync?s.decodeGltfBufferAsync(n,o,i,e.mode,e.filter).then(function(e){return e.buffer}):s.ready.then(function(){const t=new ArrayBuffer(n*o);return s.decodeGltfBuffer(new Uint8Array(t),n,o,i,e.mode,e.filter),t})})}return null}},T6=class{constructor(e){this.name=A.EXT_MESH_GPU_INSTANCING,this.parser=e}createNodeMesh(e){const i=this.parser.json,s=i.nodes[e];if(!s.extensions||!s.extensions[this.name]||s.mesh===0[0])return null;const r=i.meshes[s.mesh];for(const e of r.primitives)if(e.mode!==vt.TRIANGLES&&e.mode!==vt.TRIANGLE_STRIP&&e.mode!==vt.TRIANGLE_FAN&&e.mode!==0[0])return null;const c=s.extensions[this.name],a=c.attributes,o=[],t={};for(const e in a)o.push(this.parser.getDependency("accessor",a[e]).then(n=>(t[e]=n,t[e])));return o.length<1?null:(o.push(this.parser.createNodeMesh(e)),Promise.all(o).then(e=>{const s=e.pop(),a=s.isGroup?s.children:[s],i=e[0].count,o=[];for(const s of a){const d=new D,r=new n,c=new Gt,l=new n(1,1,1),e=new kv(s.geometry,s.material,i);for(let n=0;n<i;n++)t.TRANSLATION&&r.fromBufferAttribute(t.TRANSLATION,n),t.ROTATION&&c.fromBufferAttribute(t.ROTATION,n),t.SCALE&&l.fromBufferAttribute(t.SCALE,n),e.setMatrixAt(n,d.compose(r,c,l));for(const n in t)if(n==="_COLOR_0"){const s=t[n];e.instanceColor=new qu(s.array,s.itemSize,s.normalized)}else n!=="TRANSLATION"&&n!=="ROTATION"&&n!=="SCALE"&&s.geometry.setAttribute(n,t[n]);je.prototype.copy.call(e,s),this.parser.assignFinalMaterial(e),o.push(e)}return s.isGroup?(s.clear(),s.add(...o),s):o[0]}))}},V8="glTF",ra=12,I8={JSON:1313821514,BIN:5130562},L6=class{constructor(e){this.name=A.KHR_BINARY_GLTF,this.content=null,this.body=null;const n=new DataView(e,0,ra),s=new TextDecoder;if(this.header={magic:s.decode(new Uint8Array(e.slice(0,4))),version:n.getUint32(4,!0),length:n.getUint32(8,!0)},this.header.magic!==V8)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");const i=this.header.length-ra,o=new DataView(e,ra);let t=0;for(;t<i;){const n=o.getUint32(t,!0);t+=4;const i=o.getUint32(t,!0);if(t+=4,i===I8.JSON){const o=new Uint8Array(e,ra+t,n);this.content=s.decode(o)}else if(i===I8.BIN){const s=ra+t;this.body=e.slice(s,s+n)}t+=n}if(this.content===null)throw new Error("THREE.GLTFLoader: JSON content not found.")}},R6=class{constructor(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=A.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}decodePrimitive(e,t){const a=this.json,r=this.dracoLoader,c=e.extensions[this.name].bufferView,n=e.extensions[this.name].attributes,s={},o={},i={};for(const e in n){const t=Ul[e]||e.toLowerCase();s[t]=n[e]}for(const t in e.attributes){const s=Ul[t]||t.toLowerCase();if(n[t]!==0[0]){const n=a.accessors[e.attributes[t]],r=Co[n.componentType];i[s]=r.name,o[s]=n.normalized===!0}}return t.getDependency("bufferView",c).then(function(e){return new Promise(function(t,n){r.decodeDracoFile(e,function(e){for(const t in e.attributes){const s=e.attributes[t],n=o[t];n!==0[0]&&(s.normalized=n)}t(e)},s,i,It,n)})})}},P6=class{constructor(){this.name=A.KHR_TEXTURE_TRANSFORM}extendTexture(e,t){return(t.texCoord===0[0]||t.texCoord===e.channel)&&t.offset===0[0]&&t.rotation===0[0]&&t.scale===0[0]?e:(e=e.clone(),t.texCoord!==0[0]&&(e.channel=t.texCoord),t.offset!==0[0]&&e.offset.fromArray(t.offset),t.rotation!==0[0]&&(e.rotation=t.rotation),t.scale!==0[0]&&e.repeat.fromArray(t.scale),e.needsUpdate=!0,e)}},H6=class{constructor(){this.name=A.KHR_MESH_QUANTIZATION}},H8=class extends pa{constructor(e,t,n,s){super(e,t,n,s)}copySampleValue_(e){const n=this.resultBuffer,s=this.sampleValues,t=this.valueSize,o=e*t*3+t;for(let e=0;e!==t;e++)n[e]=s[o+e];return n}interpolate_(e,t,n,s){const h=this.resultBuffer,a=this.sampleValues,o=this.valueSize,g=o*2,d=o*3,l=s-t,i=(n-t)/l,r=i*i,u=r*i,c=e*d,m=c-d,f=-2*u+3*r,p=u-r,v=1-f,b=p-r+i;for(let e=0;e!==o;e++){const t=a[m+e+o],n=a[m+e+g]*l,s=a[c+e+o],i=a[c+e]*l;h[e]=v*t+b*n+f*s+p*i}return h}},B6=new Gt,V6=class extends H8{interpolate_(e,t,n,s){const o=super.interpolate_(e,t,n,s);return B6.fromArray(o).normalize().toArray(o),o}},vt={FLOAT:5126,FLOAT_MAT3:35675,FLOAT_MAT4:35676,FLOAT_VEC2:35664,FLOAT_VEC3:35665,FLOAT_VEC4:35666,LINEAR:9729,REPEAT:10497,SAMPLER_2D:35678,POINTS:0,LINES:1,LINE_LOOP:2,LINE_STRIP:3,TRIANGLES:4,TRIANGLE_STRIP:5,TRIANGLE_FAN:6,UNSIGNED_BYTE:5121,UNSIGNED_SHORT:5123},Co={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},L8={9728:lc,9729:rc,9984:Cj,9985:wj,9986:xj,9987:A1},N8={33071:rr,33648:w1,10497:ar},Wl={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},Ul={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv1",TEXCOORD_2:"uv2",TEXCOORD_3:"uv3",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},os={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},X6={CUBICSPLINE:0[0],LINEAR:vr,STEP:mr},Kl={OPAQUE:"OPAQUE",MASK:"MASK",BLEND:"BLEND"};function bN(e){return e.DefaultMaterial===0[0]&&(e.DefaultMaterial=new Tu({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:bc})),e.DefaultMaterial}function Eo(e,t,n){for(const s in n.extensions)e[s]===0[0]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[s]=n.extensions[s])}function Nn(e,t){t.extras!==0[0]&&(typeof t.extras=="object"?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function vN(e,t,n){let s=!1,o=!1,i=!1;for(let e=0,a=t.length;e<a;e++){const n=t[e];if(n.POSITION!==0[0]&&(s=!0),n.NORMAL!==0[0]&&(o=!0),n.COLOR_0!==0[0]&&(i=!0),s&&o&&i)break}if(!s&&!o&&!i)return Promise.resolve(e);const a=[],r=[],c=[];for(let d=0,u=t.length;d<u;d++){const l=t[d];if(s){const t=l.POSITION!==0[0]?n.getDependency("accessor",l.POSITION):e.attributes.position;a.push(t)}if(o){const t=l.NORMAL!==0[0]?n.getDependency("accessor",l.NORMAL):e.attributes.normal;r.push(t)}if(i){const t=l.COLOR_0!==0[0]?n.getDependency("accessor",l.COLOR_0):e.attributes.color;c.push(t)}}return Promise.all([Promise.all(a),Promise.all(r),Promise.all(c)]).then(function(t){const n=t[0],a=t[1],r=t[2];return s&&(e.morphAttributes.position=n),o&&(e.morphAttributes.normal=a),i&&(e.morphAttributes.color=r),e.morphTargetsRelative=!0,e})}function gN(e,t){if(e.updateMorphTargets(),t.weights!==0[0])for(let n=0,s=t.weights.length;n<s;n++)e.morphTargetInfluences[n]=t.weights[n];if(t.extras&&Array.isArray(t.extras.targetNames)){const n=t.extras.targetNames;if(e.morphTargetInfluences.length===n.length){e.morphTargetDictionary={};for(let t=0,s=n.length;t<s;t++)e.morphTargetDictionary[n[t]]=t}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function pN(e){let t;const n=e.extensions&&e.extensions[A.KHR_DRACO_MESH_COMPRESSION];if(n?t="draco:"+n.bufferView+":"+n.indices+":"+A8(n.attributes):t=e.indices+":"+A8(e.attributes)+":"+e.mode,e.targets!==0[0])for(let n=0,s=e.targets.length;n<s;n++)t+=":"+A8(e.targets[n]);return t}function A8(e){let n="";const t=Object.keys(e).sort();for(let s=0,o=t.length;s<o;s++)n+=t[s]+":"+e[t[s]]+";";return n}function k8(e){switch(e){case Int8Array:return 1/127;case Uint8Array:return 1/255;case Int16Array:return 1/32767;case Uint16Array:return 1/65535;default:throw new Error("THREE.GLTFLoader: Unsupported normalized accessor component type.")}}function fN(e){return e.search(/\.jpe?g($|\?)/i)>0||e.search(/^data:image\/jpeg/)===0?"image/jpeg":e.search(/\.webp($|\?)/i)>0||e.search(/^data:image\/webp/)===0?"image/webp":e.search(/\.ktx2($|\?)/i)>0||e.search(/^data:image\/ktx2/)===0?"image/ktx2":"image/png"}rp=new D,cp=class{constructor(e={},t={}){this.json=e,this.extensions={},this.plugins={},this.options=t,this.cache=new _N,this.associations=new Map,this.primitiveCache={},this.nodeCache={},this.meshCache={refs:{},uses:{}},this.cameraCache={refs:{},uses:{}},this.lightCache={refs:{},uses:{}},this.sourceCache={},this.textureCache={},this.nodeNamesUsed={};let n=!1,o=-1,s=!1,i=-1;if(typeof navigator!="undefined"){const e=navigator.userAgent;n=/^((?!chrome|android).)*safari/i.test(e)===!0;const t=e.match(/Version\/(\d+)/);o=n&&t?parseInt(t[1],10):-1,s=e.indexOf("Firefox")>-1,i=s?e.match(/Firefox\/([0-9]+)\./)[1]:-1}typeof createImageBitmap=="undefined"||n&&o<17||s&&i<98?this.textureLoader=new $7(this.options.manager):this.textureLoader=new A7(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.textureLoader.setRequestHeader(this.options.requestHeader),this.fileLoader=new Rh(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),this.options.crossOrigin==="use-credentials"&&this.fileLoader.setWithCredentials(!0)}setExtensions(e){this.extensions=e}setPlugins(e){this.plugins=e}parse(e,t){const n=this,s=this.json,o=this.extensions;this.cache.removeAll(),this.nodeCache={},this._invokeAll(function(e){return e._markDefs&&e._markDefs()}),Promise.all(this._invokeAll(function(e){return e.beforeRoot&&e.beforeRoot()})).then(function(){return Promise.all([n.getDependencies("scene"),n.getDependencies("animation"),n.getDependencies("camera")])}).then(function(t){const i={scene:t[0][s.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:s.asset,parser:n,userData:{}};return Eo(o,i,s),Nn(i,s),Promise.all(n._invokeAll(function(e){return e.afterRoot&&e.afterRoot(i)})).then(function(){for(const e of i.scenes)e.updateMatrixWorld();e(i)})}).catch(t)}_markDefs(){const e=this.json.nodes||[],t=this.json.skins||[],n=this.json.meshes||[];for(let n=0,o=t.length;n<o;n++){const s=t[n].joints;for(let t=0,n=s.length;t<n;t++)e[s[t]].isBone=!0}for(let s=0,o=e.length;s<o;s++){const t=e[s];t.mesh!==0[0]&&(this._addNodeRef(this.meshCache,t.mesh),t.skin!==0[0]&&(n[t.mesh].isSkinnedMesh=!0)),t.camera!==0[0]&&this._addNodeRef(this.cameraCache,t.camera)}}_addNodeRef(e,t){if(t===0[0])return;e.refs[t]===0[0]&&(e.refs[t]=e.uses[t]=0),e.refs[t]++}_getNodeRef(e,t,n){if(e.refs[t]<=1)return n;const s=n.clone(),o=(e,t)=>{const n=this.associations.get(e);n!=null&&this.associations.set(t,n);for(const[n,s]of e.children.entries())o(s,t.children[n])};return o(n,s),s.name+="_instance_"+e.uses[t]++,s}_invokeOne(e){const t=Object.values(this.plugins);t.push(this);for(let n=0;n<t.length;n++){const s=e(t[n]);if(s)return s}return null}_invokeAll(e){const t=Object.values(this.plugins);t.unshift(this);const n=[];for(let s=0;s<t.length;s++){const o=e(t[s]);o&&n.push(o)}return n}getDependency(e,t){const s=e+":"+t;let n=this.cache.get(s);if(!n){switch(e){case"scene":n=this.loadScene(t);break;case"node":n=this._invokeOne(function(e){return e.loadNode&&e.loadNode(t)});break;case"mesh":n=this._invokeOne(function(e){return e.loadMesh&&e.loadMesh(t)});break;case"accessor":n=this.loadAccessor(t);break;case"bufferView":n=this._invokeOne(function(e){return e.loadBufferView&&e.loadBufferView(t)});break;case"buffer":n=this.loadBuffer(t);break;case"material":n=this._invokeOne(function(e){return e.loadMaterial&&e.loadMaterial(t)});break;case"texture":n=this._invokeOne(function(e){return e.loadTexture&&e.loadTexture(t)});break;case"skin":n=this.loadSkin(t);break;case"animation":n=this._invokeOne(function(e){return e.loadAnimation&&e.loadAnimation(t)});break;case"camera":n=this.loadCamera(t);break;default:if(n=this._invokeOne(function(n){return n!=this&&n.getDependency&&n.getDependency(e,t)}),!n)throw new Error("Unknown type: "+e);break}this.cache.add(s,n)}return n}getDependencies(e){let t=this.cache.get(e);if(!t){const n=this,s=this.json[e+(e==="mesh"?"es":"s")]||[];t=Promise.all(s.map(function(t,s){return n.getDependency(e,s)})),this.cache.add(e,t)}return t}loadBuffer(e){const t=this.json.buffers[e],n=this.fileLoader;if(t.type&&t.type!=="arraybuffer")throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(t.uri===0[0]&&e===0)return Promise.resolve(this.extensions[A.KHR_BINARY_GLTF].body);const s=this.options;return new Promise(function(e,o){n.load(qa.resolveURL(t.uri,s.path),e,0[0],function(){o(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))})})}loadBufferView(e){const t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then(function(e){const s=t.byteLength||0,n=t.byteOffset||0;return e.slice(n,n+s)})}loadAccessor(e){const s=this,o=this.json,t=this.json.accessors[e];if(t.bufferView===0[0]&&t.sparse===0[0]){const e=Wl[t.type],n=Co[t.componentType],s=t.normalized===!0,o=new n(t.count*e);return Promise.resolve(new Mt(o,e,s))}const n=[];return t.bufferView!==0[0]?n.push(this.getDependency("bufferView",t.bufferView)):n.push(null),t.sparse!==0[0]&&(n.push(this.getDependency("bufferView",t.sparse.indices.bufferView)),n.push(this.getDependency("bufferView",t.sparse.values.bufferView))),Promise.all(n).then(function(e){const l=e[0],n=Wl[t.type],r=Co[t.componentType],d=r.BYTES_PER_ELEMENT,m=d*n,u=t.byteOffset||0,a=t.bufferView!==0[0]?o.bufferViews[t.bufferView].byteStride:0[0],h=t.normalized===!0;let c,i;if(a&&a!==m){const o=Math.floor(u/a),m="InterleavedBuffer:"+t.bufferView+":"+t.componentType+":"+o+":"+t.count;let e=s.cache.get(m);e||(c=new r(l,o*a,t.count*a/d),e=new d9(c,a/d),s.cache.add(m,e)),i=new l9(e,n,u%a/d,h)}else l===null?c=new r(t.count*n):c=new r(l,u,t.count*n),i=new Mt(c,n,h);if(t.sparse!==0[0]){const a=Wl.SCALAR,c=Co[t.sparse.indices.componentType],d=t.sparse.indices.byteOffset||0,u=t.sparse.values.byteOffset||0,o=new c(e[1],d,t.sparse.count*a),s=new r(e[2],u,t.sparse.count*n);l!==null&&(i=new Mt(i.array.slice(),i.itemSize,i.normalized)),i.normalized=!1;for(let e=0,a=o.length;e<a;e++){const t=o[e];if(i.setX(t,s[e*n]),n>=2&&i.setY(t,s[e*n+1]),n>=3&&i.setZ(t,s[e*n+2]),n>=4&&i.setW(t,s[e*n+3]),n>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}i.normalized=h}return i})}loadTexture(e){const t=this.json,i=this.options,a=t.textures[e],n=a.source,s=t.images[n];let o=this.textureLoader;if(s.uri){const e=i.manager.getHandler(s.uri);e!==null&&(o=e)}return this.loadTextureImage(e,n,o)}loadTextureImage(e,t,n){const c=this,o=this.json,i=o.textures[e],s=o.images[t],a=(s.uri||s.bufferView)+":"+i.sampler;if(this.textureCache[a])return this.textureCache[a];const r=this.loadImageSource(t,n).then(function(t){t.flipY=!1,t.name=i.name||s.name||"",t.name===""&&typeof s.uri=="string"&&s.uri.startsWith("data:image/")===!1&&(t.name=s.uri);const a=o.samplers||{},n=a[i.sampler]||{};return t.magFilter=L8[n.magFilter]||rc,t.minFilter=L8[n.minFilter]||A1,t.wrapS=N8[n.wrapS]||ar,t.wrapT=N8[n.wrapT]||ar,t.generateMipmaps=!t.isCompressedTexture&&t.minFilter!==lc&&t.minFilter!==rc,c.associations.set(t,{textures:e}),t}).catch(function(){return null});return this.textureCache[a]=r,r}loadImageSource(e,t){const r=this,c=this.json,l=this.options;if(this.sourceCache[e]!==0[0])return this.sourceCache[e].then(e=>e.clone());const n=c.images[e],o=self.URL||self.webkitURL;let s=n.uri||"",i=!1;if(n.bufferView!==0[0])s=r.getDependency("bufferView",n.bufferView).then(function(e){i=!0;const t=new Blob([e],{type:n.mimeType});return s=o.createObjectURL(t),s});else if(n.uri===0[0])throw new Error("THREE.GLTFLoader: Image "+e+" is missing URI and bufferView");const a=Promise.resolve(s).then(function(e){return new Promise(function(n,s){let o=n;t.isImageBitmapLoader===!0&&(o=function(e){const t=new Ls(e);t.needsUpdate=!0,n(t)}),t.load(qa.resolveURL(e,l.path),o,0[0],s)})}).then(function(e){return i===!0&&o.revokeObjectURL(s),Nn(e,n),e.userData.mimeType=n.mimeType||fN(n.uri),e}).catch(function(e){throw console.error("THREE.GLTFLoader: Couldn't load texture",s),e});return this.sourceCache[e]=a,a}assignTexture(e,t,n,s){const o=this;return this.getDependency("texture",n.index).then(function(i){if(!i)return null;if(n.texCoord!==0[0]&&n.texCoord>0&&(i=i.clone(),i.channel=n.texCoord),o.extensions[A.KHR_TEXTURE_TRANSFORM]){const e=n.extensions!==0[0]?n.extensions[A.KHR_TEXTURE_TRANSFORM]:0[0];if(e){const t=o.associations.get(i);i=o.extensions[A.KHR_TEXTURE_TRANSFORM].extendTexture(i,e),o.associations.set(i,t)}}return s!==0[0]&&(i.colorSpace=s),e[t]=i,i})}assignFinalMaterial(e){const n=e.geometry;let t=e.material;const s=n.attributes.tangent===0[0],o=n.attributes.color!==0[0],i=n.attributes.normal===0[0];if(e.isPoints){const n="PointsMaterial:"+t.uuid;let e=this.cache.get(n);e||(e=new nh,_s.prototype.copy.call(e,t),e.color.copy(t.color),e.map=t.map,e.sizeAttenuation=!1,this.cache.add(n,e)),t=e}else if(e.isLine){const n="LineBasicMaterial:"+t.uuid;let e=this.cache.get(n);e||(e=new V3,_s.prototype.copy.call(e,t),e.color.copy(t.color),e.map=t.map,this.cache.add(n,e)),t=e}if(s||o||i){let n="ClonedMaterial:"+t.uuid+":";s&&(n+="derivative-tangents:"),o&&(n+="vertex-colors:"),i&&(n+="flat-shading:");let e=this.cache.get(n);e||(e=t.clone(),o&&(e.vertexColors=!0),i&&(e.flatShading=!0),s&&(e.normalScale&&(e.normalScale.y*=-1),e.clearcoatNormalScale&&(e.clearcoatNormalScale.y*=-1)),this.cache.add(n,e),this.associations.set(e,this.associations.get(t))),t=e}e.material=t}getMaterialType(){return Tu}loadMaterial(e){const o=this,c=this.json,a=this.extensions,t=c.materials[e];let i;const n={},l=t.extensions||{},s=[];if(l[A.KHR_MATERIALS_UNLIT]){const e=a[A.KHR_MATERIALS_UNLIT];i=e.getMaterialType(),s.push(e.extendParams(n,t,o))}else{const a=t.pbrMetallicRoughness||{};if(n.color=new z(1,1,1),n.opacity=1,Array.isArray(a.baseColorFactor)){const e=a.baseColorFactor;n.color.setRGB(e[0],e[1],e[2],It),n.opacity=e[3]}a.baseColorTexture!==0[0]&&s.push(o.assignTexture(n,"map",a.baseColorTexture,Oe)),n.metalness=a.metallicFactor!==0[0]?a.metallicFactor:1,n.roughness=a.roughnessFactor!==0[0]?a.roughnessFactor:1,a.metallicRoughnessTexture!==0[0]&&(s.push(o.assignTexture(n,"metalnessMap",a.metallicRoughnessTexture)),s.push(o.assignTexture(n,"roughnessMap",a.metallicRoughnessTexture))),i=this._invokeOne(function(t){return t.getMaterialType&&t.getMaterialType(e)}),s.push(Promise.all(this._invokeAll(function(t){return t.extendMaterialParams&&t.extendMaterialParams(e,n)})))}t.doubleSided===!0&&(n.side=Tj);const r=t.alphaMode||Kl.OPAQUE;if(r===Kl.BLEND?(n.transparent=!0,n.depthWrite=!1):(n.transparent=!1,r===Kl.MASK&&(n.alphaTest=t.alphaCutoff!==0[0]?t.alphaCutoff:.5)),t.normalTexture!==0[0]&&i!==ji&&(s.push(o.assignTexture(n,"normalMap",t.normalTexture)),n.normalScale=new F(1,1),t.normalTexture.scale!==0[0])){const e=t.normalTexture.scale;n.normalScale.set(e,e)}if(t.occlusionTexture!==0[0]&&i!==ji&&(s.push(o.assignTexture(n,"aoMap",t.occlusionTexture)),t.occlusionTexture.strength!==0[0]&&(n.aoMapIntensity=t.occlusionTexture.strength)),t.emissiveFactor!==0[0]&&i!==ji){const e=t.emissiveFactor;n.emissive=(new z).setRGB(e[0],e[1],e[2],It)}return t.emissiveTexture!==0[0]&&i!==ji&&s.push(o.assignTexture(n,"emissiveMap",t.emissiveTexture,Oe)),Promise.all(s).then(function(){const s=new i(n);return t.name&&(s.name=t.name),Nn(s,t),o.associations.set(s,{materials:e}),t.extensions&&Eo(a,s,t),s})}createUniqueName(e){const t=U.sanitizeNodeName(e||"");return t in this.nodeNamesUsed?t+"_"+ ++this.nodeNamesUsed[t]:(this.nodeNamesUsed[t]=0,t)}loadGeometries(e){const t=this,o=this.extensions,s=this.primitiveCache;function i(e){return o[A.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,t).then(function(n){return dp(n,e,t)})}const n=[];for(let a=0,l=e.length;a<l;a++){const o=e[a],r=pN(o),c=s[r];if(c)n.push(c.promise);else{let e;o.extensions&&o.extensions[A.KHR_DRACO_MESH_COMPRESSION]?e=i(o):e=dp(new jc,o,t),s[r]={primitive:o,promise:e},n.push(e)}}return Promise.all(n)}loadMesh(e){const n=this,a=this.json,o=this.extensions,t=a.meshes[e],s=t.primitives,i=[];for(let e=0,t=s.length;e<t;e++){const n=s[e].material===0[0]?bN(this.cache):this.getDependency("material",s[e].material);i.push(n)}return i.push(n.loadGeometries(s)),Promise.all(i).then(function(i){const l=i.slice(0,i.length-1),c=i[i.length-1],a=[];for(let h=0,m=c.length;h<m;h++){const d=c[h],r=s[h];let i;const u=l[h];if(r.mode===vt.TRIANGLES||r.mode===vt.TRIANGLE_STRIP||r.mode===vt.TRIANGLE_FAN||r.mode===0[0])i=t.isSkinnedMesh===!0?new r9(d,u):new El(d,u),i.isSkinnedMesh===!0&&i.normalizeSkinWeights(),r.mode===vt.TRIANGLE_STRIP?i.geometry=u6(i.geometry,U0):r.mode===vt.TRIANGLE_FAN&&(i.geometry=u6(i.geometry,V1));else if(r.mode===vt.LINES)i=new wv(d,u);else if(r.mode===vt.LINE_STRIP)i=new Hu(d,u);else if(r.mode===vt.LINE_LOOP)i=new _v(d,u);else if(r.mode===vt.POINTS)i=new vv(d,u);else throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+r.mode);Object.keys(i.geometry.morphAttributes).length>0&&gN(i,t),i.name=n.createUniqueName(t.name||"mesh_"+e),Nn(i,t),r.extensions&&Eo(o,i,r),n.assignFinalMaterial(i),a.push(i)}for(let t=0,s=a.length;t<s;t++)n.associations.set(a[t],{meshes:e,primitives:t});if(a.length===1)return t.extensions&&Eo(o,a[0],t),a[0];const r=new t1;t.extensions&&Eo(o,r,t),n.associations.set(r,{meshes:e});for(let e=0,t=a.length;e<t;e++)r.add(a[e]);return r})}loadCamera(e){let s;const n=this.json.cameras[e],t=n[n.type];if(!t){console.warn("THREE.GLTFLoader: Missing camera parameters.");return}return n.type==="perspective"?s=new o1(k4.radToDeg(t.yfov),t.aspectRatio||1,t.znear||1,t.zfar||2e6):n.type==="orthographic"&&(s=new Jh(-t.xmag,t.xmag,t.ymag,-t.ymag,t.znear,t.zfar)),n.name&&(s.name=this.createUniqueName(n.name)),Nn(s,n),Promise.resolve(s)}loadSkin(e){const t=this.json.skins[e],n=[];for(let e=0,s=t.joints.length;e<s;e++)n.push(this._loadNodeShallow(t.joints[e]));return t.inverseBindMatrices!==0[0]?n.push(this.getDependency("accessor",t.inverseBindMatrices)):n.push(null),Promise.all(n).then(function(e){const n=e.pop(),s=e,o=[],i=[];for(let e=0,r=s.length;e<r;e++){const a=s[e];if(a){o.push(a);const t=new D;n!==null&&t.fromArray(n.array,e*16),i.push(t)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[e])}return new n9(o,i)})}loadAnimation(e){const r=this.json,c=this,t=r.animations[e],l=t.name?t.name:"animation_"+e,n=[],s=[],o=[],i=[],a=[];for(let r=0,d=t.channels.length;r<d;r++){const l=t.channels[r],e=t.samplers[l.sampler],c=l.target,u=c.node,h=t.parameters!==0[0]?t.parameters[e.input]:e.input,m=t.parameters!==0[0]?t.parameters[e.output]:e.output;if(c.node===0[0])continue;n.push(this.getDependency("node",u)),s.push(this.getDependency("accessor",h)),o.push(this.getDependency("accessor",m)),i.push(e),a.push(c)}return Promise.all([Promise.all(n),Promise.all(s),Promise.all(o),Promise.all(i),Promise.all(a)]).then(function(e){const n=e[0],i=e[1],a=e[2],r=e[3],d=e[4],s=[];for(let e=0,l=n.length;e<l;e++){const t=n[e],u=i[e],h=a[e],m=r[e],f=d[e];if(t===0[0])continue;t.updateMatrix&&t.updateMatrix();const o=c._createAnimationTracks(t,u,h,m,f);if(o)for(let e=0;e<o.length;e++)s.push(o[e])}const o=new av(l,0[0],s);return Nn(o,t),o})}createNodeMesh(e){const s=this.json,n=this,t=s.nodes[e];return t.mesh===0[0]?null:n.getDependency("mesh",t.mesh).then(function(e){const s=n._getNodeRef(n.meshCache,t.mesh,e);return t.weights!==0[0]&&s.traverse(function(e){if(!e.isMesh)return;for(let n=0,s=t.weights.length;n<s;n++)e.morphTargetInfluences[n]=t.weights[n]}),s})}loadNode(e){const i=this.json,t=this,n=i.nodes[e],a=t._loadNodeShallow(e),s=[],o=n.children||[];for(let e=0,n=o.length;e<n;e++)s.push(t.getDependency("node",o[e]));const r=n.skin===0[0]?Promise.resolve(null):t.getDependency("skin",n.skin);return Promise.all([a,Promise.all(s),r]).then(function(e){const t=e[0],n=e[1],s=e[2];s!==null&&t.traverse(function(e){if(!e.isSkinnedMesh)return;e.bind(s,rp)});for(let e=0,s=n.length;e<s;e++)t.add(n[e]);return t})}_loadNodeShallow(e){const i=this.json,a=this.extensions,n=this;if(this.nodeCache[e]!==0[0])return this.nodeCache[e];const t=i.nodes[e],r=t.name?n.createUniqueName(t.name):"",s=[],o=n._invokeOne(function(t){return t.createNodeMesh&&t.createNodeMesh(e)});return o&&s.push(o),t.camera!==0[0]&&s.push(n.getDependency("camera",t.camera).then(function(e){return n._getNodeRef(n.cameraCache,t.camera,e)})),n._invokeAll(function(t){return t.createNodeAttachment&&t.createNodeAttachment(e)}).forEach(function(e){s.push(e)}),this.nodeCache[e]=Promise.all(s).then(function(s){let o;if(t.isBone===!0?o=new y3:s.length>1?o=new t1:s.length===1?o=s[0]:o=new je,o!==s[0])for(let e=0,t=s.length;e<t;e++)o.add(s[e]);if(t.name&&(o.userData.name=t.name,o.name=r),Nn(o,t),t.extensions&&Eo(a,o,t),t.matrix!==0[0]){const e=new D;e.fromArray(t.matrix),o.applyMatrix4(e)}else t.translation!==0[0]&&o.position.fromArray(t.translation),t.rotation!==0[0]&&o.quaternion.fromArray(t.rotation),t.scale!==0[0]&&o.scale.fromArray(t.scale);if(n.associations.has(o)){if(t.mesh!==0[0]&&n.meshCache.refs[t.mesh]>1){const e=n.associations.get(o);n.associations.set(o,{...e})}}else n.associations.set(o,{});return n.associations.get(o).nodes=e,o}),this.nodeCache[e]}loadScene(e){const a=this.extensions,t=this.json.scenes[e],s=this,n=new t1;t.name&&(n.name=s.createUniqueName(t.name)),Nn(n,t),t.extensions&&Eo(a,n,t);const o=t.nodes||[],i=[];for(let e=0,t=o.length;e<t;e++)i.push(s.getDependency("node",o[e]));return Promise.all(i).then(function(e){for(let t=0,s=e.length;t<s;t++)n.add(e[t]);const t=e=>{const t=new Map;for(const[e,n]of s.associations)(e instanceof _s||e instanceof Ls)&&t.set(e,n);return e.traverse(e=>{const n=s.associations.get(e);n!=null&&t.set(e,n)}),t};return s.associations=t(n),n})}_createAnimationTracks(e,t,n,s,o){const r=[],c=e.name?e.name:e.uuid,a=[];os[o.path]===os.weights?e.traverse(function(e){e.morphTargetInfluences&&a.push(e.name?e.name:e.uuid)}):a.push(c);let i;switch(os[o.path]){case os.weights:i=na;break;case os.rotation:i=sa;break;case os.translation:case os.scale:i=Xi;break;default:switch(n.itemSize){case 1:i=na;break;case 2:case 3:default:i=Xi;break}break}const l=s.interpolation!==0[0]?X6[s.interpolation]:vr,d=this._getArrayFromAccessor(n);for(let e=0,c=a.length;e<c;e++){const n=new i(a[e]+"."+os[o.path],t.array,d,l);s.interpolation==="CUBICSPLINE"&&this._createCubicSplineTrackInterpolant(n),r.push(n)}return r}_getArrayFromAccessor(e){let t=e.array;if(e.normalized){const n=k8(t.constructor),e=new Float32Array(t.length);for(let s=0,o=t.length;s<o;s++)e[s]=t[s]*n;t=e}return t}_createCubicSplineTrackInterpolant(e){e.createInterpolant=function(t){const n=this instanceof sa?V6:H8;return new n(this.times,this.values,this.getValueSize()/3,t)},e.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0}};function mN(e,t,s){const r=t.attributes,o=new zn;if(r.POSITION!==0[0]){const e=s.json.accessors[r.POSITION],t=e.min,i=e.max;if(t!==0[0]&&i!==0[0]){if(o.set(new n(t[0],t[1],t[2]),new n(i[0],i[1],i[2])),e.normalized){const t=k8(Co[e.componentType]);o.min.multiplyScalar(t),o.max.multiplyScalar(t)}}else{console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.");return}}else return;const i=t.targets;if(i!==0[0]){const t=new n,e=new n;for(let n=0,a=i.length;n<a;n++){const o=i[n];if(o.POSITION!==0[0]){const n=s.json.accessors[o.POSITION],i=n.min,a=n.max;if(i!==0[0]&&a!==0[0]){if(e.setX(Math.max(Math.abs(i[0]),Math.abs(a[0]))),e.setY(Math.max(Math.abs(i[1]),Math.abs(a[1]))),e.setZ(Math.max(Math.abs(i[2]),Math.abs(a[2]))),n.normalized){const t=k8(Co[n.componentType]);e.multiplyScalar(t)}t.max(e)}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}o.expandByVector(t)}e.boundingBox=o;const a=new Ut;o.getCenter(a.center),a.radius=o.min.distanceTo(o.max)/2,e.boundingSphere=a}function dp(e,t,n){const s=t.attributes,o=[];function i(t,s){return n.getDependency("accessor",t).then(function(t){e.setAttribute(s,t)})}for(const t in s){const n=Ul[t]||t.toLowerCase();if(n in e.attributes)continue;o.push(i(s[t],n))}if(t.indices!==0[0]&&!e.index){const s=n.getDependency("accessor",t.indices).then(function(t){e.setIndex(t)});o.push(s)}return Ze.workingColorSpace!==It&&"COLOR_0"in s&&console.warn(`THREE.GLTFLoader: Converting vertex colors from "srgb-linear" to "${Ze.workingColorSpace}" not supported.`),Nn(e,t),mN(e,t,n),Promise.all(o).then(function(){return t.targets!==0[0]?vN(e,t.targets,n):e})}E8={type:"change"},Ql={type:"start"},x8={type:"end"},jl=new da,w8=new Gs,gp=Math.cos(70*k4.DEG2RAD),le=new n,Ye=2*Math.PI,P={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},rd=1e-6,_p=class extends p7{constructor(e,t=null){super(e,t),this.state=P.NONE,this.target=new n,this.cursor=new n,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-(1/0),this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.keyRotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:Wo.ROTATE,MIDDLE:Wo.DOLLY,RIGHT:Wo.PAN},this.touches={ONE:Uo.ROTATE,TWO:Uo.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new n,this._lastQuaternion=new Gt,this._lastTargetPosition=new n,this._quat=(new Gt).setFromUnitVectors(e.up,new n(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new bm,this._sphericalDelta=new bm,this._scale=1,this._panOffset=new n,this._rotateStart=new F,this._rotateEnd=new F,this._rotateDelta=new F,this._panStart=new F,this._panEnd=new F,this._panDelta=new F,this._dollyStart=new F,this._dollyEnd=new F,this._dollyDelta=new F,this._dollyDirection=new n,this._mouse=new F,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=uN.bind(this),this._onPointerDown=hN.bind(this),this._onPointerUp=dN.bind(this),this._onContextMenu=sN.bind(this),this._onMouseWheel=rN.bind(this),this._onKeyDown=aN.bind(this),this._onTouchStart=iN.bind(this),this._onTouchMove=oN.bind(this),this._onMouseDown=lN.bind(this),this._onMouseMove=cN.bind(this),this._interceptControlDown=nN.bind(this),this._interceptControlUp=tN.bind(this),this.domElement!==null&&this.connect(this.domElement),this.update()}connect(e){super.connect(e),this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1});const t=this.domElement.getRootNode();t.addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents();const e=this.domElement.getRootNode();e.removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(e){e.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=e}stopListenToKeyEvents(){this._domElementKeyEvents!==null&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(E8),this.update(),this.state=P.NONE}update(e=null){const i=this.object.position;le.copy(i).sub(this.target),le.applyQuaternion(this._quat),this._spherical.setFromVector3(le),this.autoRotate&&this.state===P.NONE&&this._rotateLeft(this._getAutoRotationAngle(e)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let t=this.minAzimuthAngle,s=this.maxAzimuthAngle;isFinite(t)&&isFinite(s)&&(t<-Math.PI?t+=Ye:t>Math.PI&&(t-=Ye),s<-Math.PI?s+=Ye:s>Math.PI&&(s-=Ye),t<=s?this._spherical.theta=Math.max(t,Math.min(s,this._spherical.theta)):this._spherical.theta=this._spherical.theta>(t+s)/2?Math.max(t,this._spherical.theta):Math.min(s,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),this.enableDamping===!0?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let o=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{const e=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),o=e!=this._spherical.radius}if(le.setFromSpherical(this._spherical),le.applyQuaternion(this._quatInverse),i.copy(this.target).add(le),this.object.lookAt(this.target),this.enableDamping===!0?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let e=null;if(this.object.isPerspectiveCamera){const t=le.length();e=this._clampDistance(t*this._scale);const n=t-e;this.object.position.addScaledVector(this._dollyDirection,n),this.object.updateMatrixWorld(),o=!!n}else if(this.object.isOrthographicCamera){const t=new n(this._mouse.x,this._mouse.y,0);t.unproject(this.object);const i=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),o=i!==this.object.zoom;const s=new n(this._mouse.x,this._mouse.y,0);s.unproject(this.object),this.object.position.sub(s).add(t),this.object.updateMatrixWorld(),e=le.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;e!==null&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(e).add(this.object.position):(jl.origin.copy(this.object.position),jl.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot(jl.direction))<gp?this.object.lookAt(this.target):(w8.setFromNormalAndCoplanarPoint(this.object.up,this.target),jl.intersectPlane(w8,this.target))))}else if(this.object.isOrthographicCamera){const e=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),e!==this.object.zoom&&(this.object.updateProjectionMatrix(),o=!0)}return this._scale=1,this._performCursorZoom=!1,!!(o||this._lastPosition.distanceToSquared(this.object.position)>rd||8*(1-this._lastQuaternion.dot(this.object.quaternion))>rd||this._lastTargetPosition.distanceToSquared(this.target)>rd)&&(this.dispatchEvent(E8),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0)}_getAutoRotationAngle(e){return e!==null?Ye/60*this.autoRotateSpeed*e:Ye/60/60*this.autoRotateSpeed}_getZoomScale(e){const t=Math.abs(e*.01);return.95**(this.zoomSpeed*t)}_rotateLeft(e){this._sphericalDelta.theta-=e}_rotateUp(e){this._sphericalDelta.phi-=e}_panLeft(e,t){le.setFromMatrixColumn(t,0),le.multiplyScalar(-e),this._panOffset.add(le)}_panUp(e,t){this.screenSpacePanning===!0?le.setFromMatrixColumn(t,1):(le.setFromMatrixColumn(t,0),le.crossVectors(this.object.up,le)),le.multiplyScalar(e),this._panOffset.add(le)}_pan(e,t){const n=this.domElement;if(this.object.isPerspectiveCamera){const o=this.object.position;le.copy(o).sub(this.target);let s=le.length();s*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*e*s/n.clientHeight,this.object.matrix),this._panUp(2*t*s/n.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(e*(this.object.right-this.object.left)/this.object.zoom/n.clientWidth,this.object.matrix),this._panUp(t*(this.object.top-this.object.bottom)/this.object.zoom/n.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(e){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(e){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(e,t){if(!this.zoomToCursor)return;this._performCursorZoom=!0;const n=this.domElement.getBoundingClientRect(),s=e-n.left,o=t-n.top,i=n.width,a=n.height;this._mouse.x=s/i*2-1,this._mouse.y=-(o/a)*2+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(e){return Math.max(this.minDistance,Math.min(this.maxDistance,e))}_handleMouseDownRotate(e){this._rotateStart.set(e.clientX,e.clientY)}_handleMouseDownDolly(e){this._updateZoomParameters(e.clientX,e.clientX),this._dollyStart.set(e.clientX,e.clientY)}_handleMouseDownPan(e){this._panStart.set(e.clientX,e.clientY)}_handleMouseMoveRotate(e){this._rotateEnd.set(e.clientX,e.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const t=this.domElement;this._rotateLeft(Ye*this._rotateDelta.x/t.clientHeight),this._rotateUp(Ye*this._rotateDelta.y/t.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(e){this._dollyEnd.set(e.clientX,e.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(e){this._panEnd.set(e.clientX,e.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(e){this._updateZoomParameters(e.clientX,e.clientY),e.deltaY<0?this._dollyIn(this._getZoomScale(e.deltaY)):e.deltaY>0&&this._dollyOut(this._getZoomScale(e.deltaY)),this.update()}_handleKeyDown(e){let t=!1;switch(e.code){case this.keys.UP:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateUp(Ye*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,this.keyPanSpeed),t=!0;break;case this.keys.BOTTOM:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateUp(-Ye*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,-this.keyPanSpeed),t=!0;break;case this.keys.LEFT:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateLeft(Ye*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(this.keyPanSpeed,0),t=!0;break;case this.keys.RIGHT:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateLeft(-Ye*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(-this.keyPanSpeed,0),t=!0;break}t&&(e.preventDefault(),this.update())}_handleTouchStartRotate(e){if(this._pointers.length===1)this._rotateStart.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);this._rotateStart.set(n,s)}}_handleTouchStartPan(e){if(this._pointers.length===1)this._panStart.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);this._panStart.set(n,s)}}_handleTouchStartDolly(e){const t=this._getSecondPointerPosition(e),n=e.pageX-t.x,s=e.pageY-t.y,o=(n*n+s*s)**.5;this._dollyStart.set(0,o)}_handleTouchStartDollyPan(e){this.enableZoom&&this._handleTouchStartDolly(e),this.enablePan&&this._handleTouchStartPan(e)}_handleTouchStartDollyRotate(e){this.enableZoom&&this._handleTouchStartDolly(e),this.enableRotate&&this._handleTouchStartRotate(e)}_handleTouchMoveRotate(e){if(this._pointers.length==1)this._rotateEnd.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);this._rotateEnd.set(n,s)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const t=this.domElement;this._rotateLeft(Ye*this._rotateDelta.x/t.clientHeight),this._rotateUp(Ye*this._rotateDelta.y/t.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(e){if(this._pointers.length===1)this._panEnd.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);this._panEnd.set(n,s)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(e){const t=this._getSecondPointerPosition(e),n=e.pageX-t.x,s=e.pageY-t.y,o=(n*n+s*s)**.5;this._dollyEnd.set(0,o),this._dollyDelta.set(0,(this._dollyEnd.y/this._dollyStart.y)**this.zoomSpeed),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);const i=(e.pageX+t.x)*.5,a=(e.pageY+t.y)*.5;this._updateZoomParameters(i,a)}_handleTouchMoveDollyPan(e){this.enableZoom&&this._handleTouchMoveDolly(e),this.enablePan&&this._handleTouchMovePan(e)}_handleTouchMoveDollyRotate(e){this.enableZoom&&this._handleTouchMoveDolly(e),this.enableRotate&&this._handleTouchMoveRotate(e)}_addPointer(e){this._pointers.push(e.pointerId)}_removePointer(e){delete this._pointerPositions[e.pointerId];for(let t=0;t<this._pointers.length;t++)if(this._pointers[t]==e.pointerId){this._pointers.splice(t,1);return}}_isTrackingPointer(e){for(let t=0;t<this._pointers.length;t++)if(this._pointers[t]==e.pointerId)return!0;return!1}_trackPointer(e){let t=this._pointerPositions[e.pointerId];t===0[0]&&(t=new F,this._pointerPositions[e.pointerId]=t),t.set(e.pageX,e.pageY)}_getSecondPointerPosition(e){const t=e.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[t]}_customWheelEvent(e){const n=e.deltaMode,t={clientX:e.clientX,clientY:e.clientY,deltaY:e.deltaY};switch(n){case 1:t.deltaY*=16;break;case 2:t.deltaY*=100;break}return e.ctrlKey&&!this._controlActive&&(t.deltaY*=10),t}};function hN(e){if(this.enabled===!1)return;if(this._pointers.length===0&&(this.domElement.setPointerCapture(e.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),this._isTrackingPointer(e))return;this._addPointer(e),e.pointerType==="touch"?this._onTouchStart(e):this._onMouseDown(e)}function uN(e){if(this.enabled===!1)return;e.pointerType==="touch"?this._onTouchMove(e):this._onMouseMove(e)}function dN(e){switch(this._removePointer(e),this._pointers.length){case 0:this.domElement.releasePointerCapture(e.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(x8),this.state=P.NONE;break;case 1:const t=this._pointers[0],n=this._pointerPositions[t];this._onTouchStart({pointerId:t,pageX:n.x,pageY:n.y});break}}function lN(e){let t;switch(e.button){case 0:t=this.mouseButtons.LEFT;break;case 1:t=this.mouseButtons.MIDDLE;break;case 2:t=this.mouseButtons.RIGHT;break;default:t=-1}switch(t){case Wo.DOLLY:if(this.enableZoom===!1)return;this._handleMouseDownDolly(e),this.state=P.DOLLY;break;case Wo.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(this.enablePan===!1)return;this._handleMouseDownPan(e),this.state=P.PAN}else{if(this.enableRotate===!1)return;this._handleMouseDownRotate(e),this.state=P.ROTATE}break;case Wo.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(this.enableRotate===!1)return;this._handleMouseDownRotate(e),this.state=P.ROTATE}else{if(this.enablePan===!1)return;this._handleMouseDownPan(e),this.state=P.PAN}break;default:this.state=P.NONE}this.state!==P.NONE&&this.dispatchEvent(Ql)}function cN(e){switch(this.state){case P.ROTATE:if(this.enableRotate===!1)return;this._handleMouseMoveRotate(e);break;case P.DOLLY:if(this.enableZoom===!1)return;this._handleMouseMoveDolly(e);break;case P.PAN:if(this.enablePan===!1)return;this._handleMouseMovePan(e);break}}function rN(e){if(this.enabled===!1||this.enableZoom===!1||this.state!==P.NONE)return;e.preventDefault(),this.dispatchEvent(Ql),this._handleMouseWheel(this._customWheelEvent(e)),this.dispatchEvent(x8)}function aN(e){if(this.enabled===!1)return;this._handleKeyDown(e)}function iN(e){switch(this._trackPointer(e),this._pointers.length){case 1:switch(this.touches.ONE){case Uo.ROTATE:if(this.enableRotate===!1)return;this._handleTouchStartRotate(e),this.state=P.TOUCH_ROTATE;break;case Uo.PAN:if(this.enablePan===!1)return;this._handleTouchStartPan(e),this.state=P.TOUCH_PAN;break;default:this.state=P.NONE}break;case 2:switch(this.touches.TWO){case Uo.DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchStartDollyPan(e),this.state=P.TOUCH_DOLLY_PAN;break;case Uo.DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchStartDollyRotate(e),this.state=P.TOUCH_DOLLY_ROTATE;break;default:this.state=P.NONE}break;default:this.state=P.NONE}this.state!==P.NONE&&this.dispatchEvent(Ql)}function oN(e){switch(this._trackPointer(e),this.state){case P.TOUCH_ROTATE:if(this.enableRotate===!1)return;this._handleTouchMoveRotate(e),this.update();break;case P.TOUCH_PAN:if(this.enablePan===!1)return;this._handleTouchMovePan(e),this.update();break;case P.TOUCH_DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchMoveDollyPan(e),this.update();break;case P.TOUCH_DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchMoveDollyRotate(e),this.update();break;default:this.state=P.NONE}}function sN(e){if(this.enabled===!1)return;e.preventDefault()}function nN(e){if(e.key==="Control"){this._controlActive=!0;const e=this.domElement.getRootNode();e.addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0})}}function tN(e){if(e.key==="Control"){this._controlActive=!1;const e=this.domElement.getRootNode();e.removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0})}}self.GPUShaderStage===0[0]&&(self.GPUShaderStage={VERTEX:1,FRAGMENT:2,COMPUTE:4}),fl=navigator.gpu!==0[0],typeof window!="undefined"&&fl&&(fl=navigator.gpu.requestAdapter().then(e=>e)),Np=class{static isAvailable(){return Boolean(fl)}static getStaticAdapter(){return fl}static getErrorMessage(){const t='Your browser does not support <a href="https://gpuweb.github.io/gpuweb/" style="color:blue">WebGPU</a> yet',e=document.createElement("div");return e.id="webgpumessage",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.maxWidth="400px",e.style.margin="5em auto 0",e.innerHTML=t,e}},g8=Np,Rp=class{constructor(e,t){this.nodes=e,this.info=t,this._context=typeof self!="undefined"?self:null,this._animationLoop=null,this._requestId=null}start(){const e=(t,n)=>{this._requestId=this._context.requestAnimationFrame(e),this.info.autoReset===!0&&this.info.reset(),this.nodes.nodeFrame.update(),this.info.frame=this.nodes.nodeFrame.frameId,this._animationLoop!==null&&this._animationLoop(t,n)};e()}stop(){this._context.cancelAnimationFrame(this._requestId),this._requestId=null}getAnimationLoop(){return this._animationLoop}setAnimationLoop(e){this._animationLoop=e}getContext(){return this._context}setContext(e){this._context=e}dispose(){this.stop()}},Pp=Rp,Hp=class{constructor(){this.weakMap=new WeakMap}get(e){let t=this.weakMap;for(let n=0;n<e.length-1;n++)if(t=t.get(e[n]),t===0[0])return 0[0];return t.get(e[e.length-1])}set(e,t){let n=this.weakMap;for(let t=0;t<e.length-1;t++){const s=e[t];n.has(s)===!1&&n.set(s,new WeakMap),n=n.get(s)}return n.set(e[e.length-1],t),this}delete(e){let t=this.weakMap;for(let n=0;n<e.length-1;n++)if(t=t.get(e[n]),t===0[0])return!1;return t.delete(e[e.length-1])}},ln=Hp;function dl(e,t=0){let n=3735928559^t,s=1103547991^t;if(e instanceof Array)for(let t=0,o;t<e.length;t++)o=e[t],n=Math.imul(n^o,2654435761),s=Math.imul(s^o,1597334677);else for(let t=0,o;t<e.length;t++)o=e.charCodeAt(t),n=Math.imul(n^o,2654435761),s=Math.imul(s^o,1597334677);return n=Math.imul(n^n>>>16,2246822507),n^=Math.imul(s^s>>>13,3266489909),s=Math.imul(s^s>>>16,2246822507),s^=Math.imul(n^n>>>13,3266489909),4294967296*(2097151&s)+(n>>>0)}Vp=e=>dl(e),hd=e=>dl(e),al=(...e)=>dl(e);function Up(e,t=!1){const n=[];e.isNode===!0&&n.push(e.id);for(const{property:s,childNode:o}of gd(e))n.push(dl(s.slice(0,-4)),o.getCacheKey(t));return dl(n)}function*gd(e,t=!1){for(const s of Object.getOwnPropertyNames(e)){if(s.startsWith("_")===!0)continue;const n=e[s];if(Array.isArray(n)===!0)for(let e=0;e<n.length;e++){const o=n[e];o&&(o.isNode===!0||t&&typeof o.toJSON=="function")&&(yield{property:s,index:e,childNode:o})}else if(n&&n.isNode===!0)yield{property:s,childNode:n};else if(n&&Object.getPrototypeOf(n)===Object.prototype)for(const o in n){if(o.startsWith("_")===!0)continue;const e=n[o];e&&(e.isNode===!0||t&&typeof e.toJSON=="function")&&(yield{property:s,index:o,childNode:e})}}}qp=new Map([[1,"float"],[2,"vec2"],[3,"vec3"],[4,"vec4"],[9,"mat3"],[16,"mat4"]]),d8=new WeakMap;function eN(e){return qp.get(e)}function vd(e){if(e==null)return null;const t=typeof e;return e.isNode===!0?"node":t==="number"?"float":t==="boolean"?"bool":t==="string"?"string":t==="function"?"shader":e.isVector2===!0?"vec2":e.isVector3===!0?"vec3":e.isVector4===!0?"vec4":e.isMatrix2===!0?"mat2":e.isMatrix3===!0?"mat3":e.isMatrix4===!0?"mat4":e.isColor===!0?"color":e instanceof ArrayBuffer?"ArrayBuffer":null}function c8(n,...e){const s=n?n.slice(-4):0[0];return e.length===1&&(s==="vec2"?e=[e[0],e[0]]:s==="vec3"?e=[e[0],e[0],e[0]]:s==="vec4"&&(e=[e[0],e[0],e[0],e[0]])),n==="color"?new T(...e):s==="vec2"?new w(...e):s==="vec3"?new t(...e):s==="vec4"?new j(...e):s==="mat2"?new w0(...e):s==="mat3"?new b(...e):s==="mat4"?new W(...e):n==="bool"?e[0]||!1:n==="float"||n==="int"||n==="uint"?e[0]||0:n==="string"?e[0]||"":n==="ArrayBuffer"?QD(e[0]):null}function JD(e){let t=d8.get(e);return t===0[0]&&(t={},d8.set(e,t)),t}function ZD(e){let t="";const n=new Uint8Array(e);for(let e=0;e<n.length;e++)t+=String.fromCharCode(n[e]);return btoa(t)}function QD(e){return Uint8Array.from(atob(e),e=>e.charCodeAt(0)).buffer}tg=0;function XD(e){const n=Object.keys(e);let t=Object.getPrototypeOf(e);for(;t;){const e=Object.getOwnPropertyDescriptors(t);for(const t in e)if(e[t]!==0[0]){const s=e[t];s&&typeof s.get=="function"&&n.push(t)}t=Object.getPrototypeOf(t)}return n}sg=class{constructor(e,t,n,s,o,i,a,r,c,l){this.id=tg++,this._nodes=e,this._geometries=t,this.renderer=n,this.object=s,this.material=o,this.scene=i,this.camera=a,this.lightsNode=r,this.context=c,this.geometry=s.geometry,this.version=o.version,this.drawRange=null,this.attributes=null,this.attributesId=null,this.pipeline=null,this.group=null,this.vertexBuffers=null,this.drawParams=null,this.bundle=null,this.clippingContext=l,this.clippingContextCacheKey=l!==null?l.cacheKey:"",this.initialNodesCacheKey=this.getDynamicCacheKey(),this.initialCacheKey=this.getCacheKey(),this._nodeBuilderState=null,this._bindings=null,this._monitor=null,this.onDispose=null,this.isRenderObject=!0,this.onMaterialDispose=()=>{this.dispose()},this.onGeometryDispose=()=>{this.attributes=null,this.attributesId=null},this.material.addEventListener("dispose",this.onMaterialDispose),this.geometry.addEventListener("dispose",this.onGeometryDispose)}updateClipping(e){this.clippingContext=e}get clippingNeedsUpdate(){return this.clippingContext!==null&&this.clippingContext.cacheKey!==this.clippingContextCacheKey&&(this.clippingContextCacheKey=this.clippingContext.cacheKey,!0)}get hardwareClippingPlanes(){return this.material.hardwareClipping===!0?this.clippingContext.unionClippingCount:0}getNodeBuilderState(){return this._nodeBuilderState||(this._nodeBuilderState=this._nodes.getForRender(this))}getMonitor(){return this._monitor||(this._monitor=this.getNodeBuilderState().observer)}getBindings(){return this._bindings||(this._bindings=this.getNodeBuilderState().createBindings())}getBindingGroup(e){for(const t of this.getBindings())if(t.name===e)return t}getIndex(){return this._geometries.getIndex(this)}getIndirect(){return this._geometries.getIndirect(this)}getChainArray(){return[this.object,this.material,this.context,this.lightsNode]}setGeometry(e){this.geometry=e,this.attributes=null,this.attributesId=null}getAttributes(){if(this.attributes!==null)return this.attributes;const s=this.getNodeBuilderState().nodeAttributes,o=this.geometry,e=[],t=new Set,n={};for(const a of s){let i;if(a.node&&a.node.attribute?i=a.node.attribute:(i=o.getAttribute(a.name),n[a.name]=i.version),i===0[0])continue;e.push(i);const r=i.isInterleavedBufferAttribute?i.data:i;t.add(r)}return this.attributes=e,this.attributesId=n,this.vertexBuffers=Array.from(t.values()),e}getVertexBuffers(){return this.vertexBuffers===null&&this.getAttributes(),this.vertexBuffers}getDrawParameters(){const{object:e,material:f,geometry:c,group:i,drawRange:r}=this,n=this.drawParams||(this.drawParams={vertexCount:0,firstVertex:0,instanceCount:0,firstInstance:0}),h=this.getIndex(),m=h!==null;let a=1;if(c.isInstancedBufferGeometry===!0?a=c.instanceCount:e.count!==0[0]&&(a=Math.max(0,e.count)),a===0)return null;if(n.instanceCount=a,e.isBatchedMesh===!0)return n;let o=1;f.wireframe===!0&&!e.isPoints&&!e.isLineSegments&&!e.isLine&&!e.isLineLoop&&(o=2);let t=r.start*o,s=(r.start+r.count)*o;i!==null&&(t=Math.max(t,i.start*o),s=Math.min(s,(i.start+i.count)*o));const l=c.attributes.position;let d=1/0;m?d=h.count:l!=null&&(d=l.count),t=Math.max(t,0),s=Math.min(s,d);const u=s-t;return u<0||u===1/0?null:(n.vertexCount=u,n.firstVertex=t,n)}getGeometryCacheKey(){const{geometry:t}=this;let e="";for(const s of Object.keys(t.attributes).sort()){const n=t.attributes[s];e+=s+",",n.data&&(e+=n.data.stride+","),n.offset&&(e+=n.offset+","),n.itemSize&&(e+=n.itemSize+","),n.normalized&&(e+="n,")}for(const n of Object.keys(t.morphAttributes).sort()){const s=t.morphAttributes[n];e+="morph-"+n+",";for(let t=0,n=s.length;t<n;t++){const o=s[t];e+=o.id+","}}return t.index&&(e+="index,"),e}getMaterialCacheKey(){const{object:e,material:n,renderer:s}=this;let t=n.customProgramCacheKey();for(const i of XD(n)){if(/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(i))continue;const e=n[i];let o;if(e!==null){const t=typeof e;t==="number"?o=e!==0?"1":"0":t==="object"?(o="{",e.isTexture&&(o+=e.mapping,s.backend.isWebGPUBackend===!0&&(o+=e.magFilter,o+=e.minFilter,o+=e.wrapS,o+=e.wrapT,o+=e.wrapR)),o+="}"):o=String(e)}else o=String(e);t+=o+","}return t+=this.clippingContextCacheKey+",",e.geometry&&(t+=this.getGeometryCacheKey()),e.skeleton&&(t+=e.skeleton.bones.length+","),e.isBatchedMesh&&(t+=e._matricesTexture.uuid+",",e._colorsTexture!==null&&(t+=e._colorsTexture.uuid+",")),(e.isInstancedMesh||e.count>1)&&(t+=e.uuid+","),t+=e.receiveShadow+",",Vp(t)}get needsGeometryUpdate(){if(this.geometry.id!==this.object.geometry.id)return!0;if(this.attributes!==null){const e=this.attributesId;for(const t in e){const n=this.geometry.getAttribute(t);if(n===0[0]||e[t]!==n.id)return!0}}return!1}get needsUpdate(){return this.initialNodesCacheKey!==this.getDynamicCacheKey()||this.clippingNeedsUpdate}getDynamicCacheKey(){let e=0;return this.material.isShadowPassMaterial!==!0&&(e=this._nodes.getCacheKey(this.scene,this.lightsNode)),this.camera.isArrayCamera&&(e=al(e,this.camera.cameras.length)),this.object.receiveShadow&&(e=al(e,1)),e}getCacheKey(){return this.getMaterialCacheKey()+this.getDynamicCacheKey()}dispose(){this.material.removeEventListener("dispose",this.onMaterialDispose),this.geometry.removeEventListener("dispose",this.onGeometryDispose),this.onDispose()}},og=sg,ho=[],ag=class{constructor(e,t,n,s,o,i){this.renderer=e,this.nodes=t,this.geometries=n,this.pipelines=s,this.bindings=o,this.info=i,this.chainMaps={}}get(e,t,n,s,o,i,a,r){const l=this.getChainMap(r);ho[0]=e,ho[1]=t,ho[2]=i,ho[3]=o;let c=l.get(ho);return c===0[0]?(c=this.createRenderObject(this.nodes,this.geometries,this.renderer,e,t,n,s,o,i,a,r),l.set(ho,c)):(c.updateClipping(a),c.needsGeometryUpdate&&c.setGeometry(e.geometry),(c.version!==t.version||c.needsUpdate)&&(c.initialCacheKey!==c.getCacheKey()?(c.dispose(),c=this.get(e,t,n,s,o,i,a,r)):c.version=t.version)),ho.length=0,c}getChainMap(e="default"){return this.chainMaps[e]||(this.chainMaps[e]=new ln)}dispose(){this.chainMaps={}}createRenderObject(e,t,n,s,o,i,a,r,c,l,d){const h=this.getChainMap(d),u=new og(e,t,n,s,o,i,a,r,c,l);return u.onDispose=()=>{this.pipelines.delete(u),this.bindings.delete(u),this.nodes.delete(u),h.delete(u.getChainArray())},u}},rg=ag,cg=class{constructor(){this.data=new WeakMap}get(e){let t=this.data.get(e);return t===0[0]&&(t={},this.data.set(e,t)),t}delete(e){let t=null;return this.data.has(e)&&(t=this.data.get(e),this.data.delete(e)),t}has(e){return this.data.has(e)}dispose(){this.data=new WeakMap}},Bn=cg,ft={VERTEX:1,INDEX:2,STORAGE:3,INDIRECT:4},ms=16,hg=211,mg=212,fg=class extends Bn{constructor(e){super(),this.backend=e}delete(e){const t=super.delete(e);return t!==null&&this.backend.destroyAttribute(e),t}update(e,t){const n=this.get(e);if(n.version===0[0])t===ft.VERTEX?this.backend.createAttribute(e):t===ft.INDEX?this.backend.createIndexAttribute(e):t===ft.STORAGE?this.backend.createStorageAttribute(e):t===ft.INDIRECT&&this.backend.createIndirectStorageAttribute(e),n.version=this._getBufferAttribute(e).version;else{const t=this._getBufferAttribute(e);(n.version<t.version||t.usage===Ri)&&(this.backend.updateAttribute(e),n.version=t.version)}}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}},pg=fg;function gg(e){return e.index!==null?e.index.version:e.attributes.position.version}function vg(e){const t=[],n=e.index,o=e.attributes.position;if(n!==null){const e=n.array;for(let n=0,a=e.length;n<a;n+=3){const s=e[n+0],o=e[n+1],i=e[n+2];t.push(s,o,o,i,i,s)}}else{const e=o.array;for(let n=0,a=e.length/3-1;n<a;n+=3){const s=n+0,o=n+1,i=n+2;t.push(s,o,o,i,i,s)}}const s=new(yh(t)?g1:p1)(t,1);return s.version=gg(e),s}bg=class extends Bn{constructor(e,t){super(),this.attributes=e,this.info=t,this.wireframes=new WeakMap,this.attributeCall=new WeakMap}has(e){const t=e.geometry;return super.has(t)&&this.get(t).initialized===!0}updateForRender(e){this.has(e)===!1&&this.initGeometry(e),this.updateAttributes(e)}initGeometry(e){const t=e.geometry,s=this.get(t);s.initialized=!0,this.info.memory.geometries++;const n=()=>{this.info.memory.geometries--;const s=t.index,i=e.getAttributes();s!==null&&this.attributes.delete(s);for(const e of i)this.attributes.delete(e);const o=this.wireframes.get(t);o!==0[0]&&this.attributes.delete(o),t.removeEventListener("dispose",n)};t.addEventListener("dispose",n)}updateAttributes(e){const s=e.getAttributes();for(const e of s)e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute?this.updateAttribute(e,ft.STORAGE):this.updateAttribute(e,ft.VERTEX);const t=this.getIndex(e);t!==null&&this.updateAttribute(t,ft.INDEX);const n=e.geometry.indirect;n!==null&&this.updateAttribute(n,ft.INDIRECT)}updateAttribute(e,t){const n=this.info.render.calls;e.isInterleavedBufferAttribute?this.attributeCall.get(e)===0[0]?(this.attributes.update(e,t),this.attributeCall.set(e,n)):this.attributeCall.get(e.data)!==n&&(this.attributes.update(e,t),this.attributeCall.set(e.data,n),this.attributeCall.set(e,n)):this.attributeCall.get(e)!==n&&(this.attributes.update(e,t),this.attributeCall.set(e,n))}getIndirect(e){return e.geometry.indirect}getIndex(e){const{geometry:t,material:s}=e;let n=t.index;if(s.wireframe===!0){const s=this.wireframes;let e=s.get(t);e===0[0]?(e=vg(t),s.set(t,e)):e.version!==gg(t)&&(this.attributes.delete(e),e=vg(t),s.set(t,e)),n=e}return n}},jg=bg,yg=class{constructor(){this.autoReset=!0,this.frame=0,this.calls=0,this.render={calls:0,frameCalls:0,drawCalls:0,triangles:0,points:0,lines:0,timestamp:0},this.compute={calls:0,frameCalls:0,timestamp:0},this.memory={geometries:0,textures:0}}update(e,t,n){this.render.drawCalls++,e.isMesh||e.isSprite?this.render.triangles+=n*(t/3):e.isPoints?this.render.points+=n*t:e.isLineSegments?this.render.lines+=n*(t/2):e.isLine?this.render.lines+=n*(t-1):console.error("THREE.WebGPUInfo: Unknown object type.")}reset(){this.render.drawCalls=0,this.render.frameCalls=0,this.compute.frameCalls=0,this.render.triangles=0,this.render.points=0,this.render.lines=0}dispose(){this.reset(),this.calls=0,this.render.calls=0,this.compute.calls=0,this.render.timestamp=0,this.compute.timestamp=0,this.memory.geometries=0,this.memory.textures=0}},_g=yg,wg=class{constructor(e){this.cacheKey=e,this.usedTimes=0}},s8=wg,xg=class extends s8{constructor(e,t,n){super(e),this.vertexProgram=t,this.fragmentProgram=n}},Cg=xg,Eg=class extends s8{constructor(e,t){super(e),this.computeProgram=t,this.isComputePipeline=!0}},kg=Eg,Ag=0,Sg=class{constructor(e,t,n,s=null,o=null){this.id=Ag++,this.code=e,this.stage=t,this.name=n,this.transforms=s,this.attributes=o,this.usedTimes=0}},_d=Sg,Fg=class extends Bn{constructor(e,t){super(),this.backend=e,this.nodes=t,this.bindings=null,this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}getForCompute(e,t){const{backend:s}=this,n=this.get(e);if(this._needsComputeUpdate(e)){const o=n.pipeline;o&&(o.usedTimes--,o.computeProgram.usedTimes--);const a=this.nodes.getForCompute(e);let i=this.programs.compute.get(a.computeShader);i===0[0]&&(o&&o.computeProgram.usedTimes===0&&this._releaseProgram(o.computeProgram),i=new _d(a.computeShader,"compute",e.name,a.transforms,a.nodeAttributes),this.programs.compute.set(a.computeShader,i),s.createProgram(i));const c=this._getComputeCacheKey(e,i);let r=this.caches.get(c);r===0[0]&&(o&&o.usedTimes===0&&this._releasePipeline(o),r=this._getComputePipeline(e,i,c,t)),r.usedTimes++,i.usedTimes++,n.version=e.version,n.pipeline=r}return n.pipeline}getForRender(e,t=null){const{backend:s}=this,n=this.get(e);if(this._needsRenderUpdate(e)){const o=n.pipeline;o&&(o.usedTimes--,o.vertexProgram.usedTimes--,o.fragmentProgram.usedTimes--);const r=e.getNodeBuilderState(),l=e.material?e.material.name:"";let i=this.programs.vertex.get(r.vertexShader);i===0[0]&&(o&&o.vertexProgram.usedTimes===0&&this._releaseProgram(o.vertexProgram),i=new _d(r.vertexShader,"vertex",l),this.programs.vertex.set(r.vertexShader,i),s.createProgram(i));let a=this.programs.fragment.get(r.fragmentShader);a===0[0]&&(o&&o.fragmentProgram.usedTimes===0&&this._releaseProgram(o.fragmentProgram),a=new _d(r.fragmentShader,"fragment",l),this.programs.fragment.set(r.fragmentShader,a),s.createProgram(a));const d=this._getRenderCacheKey(e,i,a);let c=this.caches.get(d);c===0[0]?(o&&o.usedTimes===0&&this._releasePipeline(o),c=this._getRenderPipeline(e,i,a,d,t)):e.pipeline=c,c.usedTimes++,i.usedTimes++,a.usedTimes++,n.pipeline=c}return n.pipeline}delete(e){const t=this.get(e).pipeline;return t&&(t.usedTimes--,t.usedTimes===0&&this._releasePipeline(t),t.isComputePipeline?(t.computeProgram.usedTimes--,t.computeProgram.usedTimes===0&&this._releaseProgram(t.computeProgram)):(t.fragmentProgram.usedTimes--,t.vertexProgram.usedTimes--,t.vertexProgram.usedTimes===0&&this._releaseProgram(t.vertexProgram),t.fragmentProgram.usedTimes===0&&this._releaseProgram(t.fragmentProgram))),super.delete(e)}dispose(){super.dispose(),this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}updateForRender(e){this.getForRender(e)}_getComputePipeline(e,t,n,s){n=n||this._getComputeCacheKey(e,t);let o=this.caches.get(n);return o===0[0]&&(o=new kg(n,t),this.caches.set(n,o),this.backend.createComputePipeline(o,s)),o}_getRenderPipeline(e,t,n,s,o){s=s||this._getRenderCacheKey(e,t,n);let i=this.caches.get(s);return i===0[0]&&(i=new Cg(s,t,n),this.caches.set(s,i),e.pipeline=i,this.backend.createRenderPipeline(e,o)),i}_getComputeCacheKey(e,t){return e.id+","+t.id}_getRenderCacheKey(e,t,n){return t.id+","+n.id+","+this.backend.getRenderCacheKey(e)}_releasePipeline(e){this.caches.delete(e.cacheKey)}_releaseProgram(e){const t=e.code,n=e.stage;this.programs[n].delete(t)}_needsComputeUpdate(e){const t=this.get(e);return t.pipeline===0[0]||t.version!==e.version}_needsRenderUpdate(e){const t=this.get(e);return t.pipeline===0[0]||this.backend.needsRenderUpdate(e)}},Tg=Fg,zg=class extends Bn{constructor(e,t,n,s,o,i){super(),this.backend=e,this.textures=n,this.pipelines=o,this.attributes=s,this.nodes=t,this.info=i,this.pipelines.bindings=this}getForRender(e){const t=e.getBindings();for(const e of t){const n=this.get(e);n.bindGroup===0[0]&&(this._init(e),this.backend.createBindings(e,t,0),n.bindGroup=e)}return t}getForCompute(e){const t=this.nodes.getForCompute(e).bindings;for(const e of t){const n=this.get(e);n.bindGroup===0[0]&&(this._init(e),this.backend.createBindings(e,t,0),n.bindGroup=e)}return t}updateForCompute(e){this._updateBindings(this.getForCompute(e))}updateForRender(e){this._updateBindings(this.getForRender(e))}_updateBindings(e){for(const t of e)this._update(t,e)}_init(e){for(const t of e.bindings)if(t.isSampledTexture)this.textures.updateTexture(t.texture);else if(t.isStorageBuffer){const e=t.attribute,n=e.isIndirectStorageBufferAttribute?ft.INDIRECT:ft.STORAGE;this.attributes.update(e,n)}}_update(e,t){const{backend:o}=this;let i=!1,n=!0,s=0,a=0;for(const t of e.bindings){if(t.isNodeUniformsGroup){const e=this.nodes.updateGroup(t);if(e===!1)continue}if(t.isStorageBuffer){const e=t.attribute,n=e.isIndirectStorageBufferAttribute?ft.INDIRECT:ft.STORAGE;this.attributes.update(e,n)}if(t.isUniformBuffer){const e=t.update();e&&o.updateBinding(t)}else if(t.isSampledTexture){{const c=t.update(),e=t.texture,r=this.textures.get(e);c&&(this.textures.updateTexture(e),t.generation!==r.generation&&(t.generation=r.generation,i=!0,n=!1));const l=o.get(e);if(l.externalTexture!==0[0]||r.isDefaultTexture?n=!1:(s=s*10+e.id,a+=e.version),e.isStorageTexture===!0){const n=this.get(e);t.store===!0?n.needsMipmap=!0:this.textures.needsMipmaps(e)&&n.needsMipmap===!0&&(this.backend.generateMipmaps(e),n.needsMipmap=!1)}}}else t.isSampler&&t.update()}i===!0&&this.backend.updateBindings(e,t,n?s:0,a)}},Dg=zg;function GD(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?e.z-t.z:e.id-t.id}function Lg(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Rg(e){const t=e.transmission>0||e.transmissionNode;return t&&e.side===Fe&&e.forceSinglePass===!1}Pg=class{constructor(e,t,n){this.renderItems=[],this.renderItemsIndex=0,this.opaque=[],this.transparentDoublePass=[],this.transparent=[],this.bundles=[],this.lightsNode=e.getNode(t,n),this.lightsArray=[],this.scene=t,this.camera=n,this.occlusionQueryCount=0}begin(){return this.renderItemsIndex=0,this.opaque.length=0,this.transparentDoublePass.length=0,this.transparent.length=0,this.bundles.length=0,this.lightsArray.length=0,this.occlusionQueryCount=0,this}getNextRenderItem(e,t,n,s,o,i,a){let r=this.renderItems[this.renderItemsIndex];return r===0[0]?(r={id:e.id,object:e,geometry:t,material:n,groupOrder:s,renderOrder:e.renderOrder,z:o,group:i,clippingContext:a},this.renderItems[this.renderItemsIndex]=r):(r.id=e.id,r.object=e,r.geometry=t,r.material=n,r.groupOrder=s,r.renderOrder=e.renderOrder,r.z=o,r.group=i,r.clippingContext=a),this.renderItemsIndex++,r}push(e,t,n,s,o,i,a){const r=this.getNextRenderItem(e,t,n,s,o,i,a);e.occlusionTest===!0&&this.occlusionQueryCount++,n.transparent===!0||n.transmission>0?(Rg(n)&&this.transparentDoublePass.push(r),this.transparent.push(r)):this.opaque.push(r)}unshift(e,t,n,s,o,i,a){const r=this.getNextRenderItem(e,t,n,s,o,i,a);n.transparent===!0||n.transmission>0?(Rg(n)&&this.transparentDoublePass.unshift(r),this.transparent.unshift(r)):this.opaque.unshift(r)}pushBundle(e){this.bundles.push(e)}pushLight(e){this.lightsArray.push(e)}sort(e,t){this.opaque.length>1&&this.opaque.sort(e||GD),this.transparentDoublePass.length>1&&this.transparentDoublePass.sort(t||Lg),this.transparent.length>1&&this.transparent.sort(t||Lg)}finish(){this.lightsNode.setLights(this.lightsArray);for(let t=this.renderItemsIndex,n=this.renderItems.length;t<n;t++){const e=this.renderItems[t];if(e.id===null)break;e.id=null,e.object=null,e.geometry=null,e.material=null,e.groupOrder=null,e.renderOrder=null,e.z=null,e.group=null,e.clippingContext=null}}},Hg=Pg,Ya=[],Bg=class{constructor(e){this.lighting=e,this.lists=new ln}get(e,t){const s=this.lists;Ya[0]=e,Ya[1]=t;let n=s.get(Ya);return n===0[0]&&(n=new Hg(this.lighting,e,t),s.set(Ya,n)),Ya.length=0,n}dispose(){this.lists=new ln}},Vg=Bg,$g=0,Wg=class{constructor(){this.id=$g++,this.color=!0,this.clearColor=!0,this.clearColorValue={r:0,g:0,b:0,a:1},this.depth=!0,this.clearDepth=!0,this.clearDepthValue=1,this.stencil=!1,this.clearStencil=!0,this.clearStencilValue=1,this.viewport=!1,this.viewportValue=new j,this.scissor=!1,this.scissorValue=new j,this.renderTarget=null,this.textures=null,this.depthTexture=null,this.activeCubeFace=0,this.activeMipmapLevel=0,this.sampleCount=1,this.width=0,this.height=0,this.occlusionQueryCount=0,this.clippingContext=null,this.isRenderContext=!0}getCacheKey(){return Ug(this)}};function Ug(e){const{textures:n,activeCubeFace:s,activeMipmapLevel:o}=e,t=[s,o];for(const e of n)t.push(e.id);return hd(t)}Kg=Wg,Ga=[],Yg=new Uc,Gg=new x1,Xg=class{constructor(){this.chainMaps={}}get(e,t,n=null){Ga[0]=e,Ga[1]=t;let o;if(n===null)o="default";else{const e=n.texture.format,t=n.textures.length;o=`${t}:${e}:${n.samples}:${n.depthBuffer}:${n.stencilBuffer}`}const i=this._getChainMap(o);let s=i.get(Ga);return s===0[0]&&(s=new Kg,i.set(Ga,s)),Ga.length=0,n!==null&&(s.sampleCount=n.samples===0?1:n.samples),s}getForClear(e=null){return this.get(Yg,Gg,e)}_getChainMap(e){return this.chainMaps[e]||(this.chainMaps[e]=new ln)}dispose(){this.chainMaps={}}},Qg=Xg,Zg=new t,Jg=class extends Bn{constructor(e,t,n){super(),this.renderer=e,this.backend=t,this.info=n}updateRenderTarget(e,t=0){const s=this.get(e),a=e.samples===0?1:e.samples,c=s.depthTextureMips||(s.depthTextureMips={}),i=e.textures,o=this.getSize(i[0]),l=o.width>>t,d=o.height>>t;let n=e.depthTexture||c[t];const h=e.depthBuffer===!0||e.stencilBuffer===!0;let r=!1;n===0[0]&&h&&(n=new At,n.format=e.stencilBuffer?tt:nt,n.type=e.stencilBuffer?dt:I,n.image.width=l,n.image.height=d,n.image.depth=o.depth,n.isArrayTexture=e.multiview===!0&&o.depth>1,c[t]=n),(s.width!==o.width||o.height!==s.height)&&(r=!0,n&&(n.needsUpdate=!0,n.image.width=l,n.image.height=d,n.image.depth=n.isArrayTexture?n.image.depth:1)),s.width=o.width,s.height=o.height,s.textures=i,s.depthTexture=n||null,s.depth=e.depthBuffer,s.stencil=e.stencilBuffer,s.renderTarget=e,s.sampleCount!==a&&(r=!0,n&&(n.needsUpdate=!0),s.sampleCount=a);const u={sampleCount:a};if(e.isXRRenderTarget!==!0){for(let e=0;e<i.length;e++){const t=i[e];r&&(t.needsUpdate=!0),this.updateTexture(t,u)}n&&this.updateTexture(n,u)}if(s.initialized!==!0){s.initialized=!0;const t=()=>{e.removeEventListener("dispose",t);for(let e=0;e<i.length;e++)this._destroyTexture(i[e]);n&&this._destroyTexture(n),this.delete(e),this.backend.delete(e)};e.addEventListener("dispose",t)}}updateTexture(e,t={}){const n=this.get(e);if(n.initialized===!0&&n.version===e.version)return;const o=e.isRenderTargetTexture||e.isDepthTexture||e.isFramebufferTexture,s=this.backend;if(o&&n.initialized===!0&&(s.destroySampler(e),s.destroyTexture(e)),e.isFramebufferTexture){const t=this.renderer.getRenderTarget();t?e.type=t.texture.type:e.type=Y}const{width:i,height:a,depth:r}=this.getSize(e);if(t.width=i,t.height=a,t.depth=r,t.needsMipmaps=this.needsMipmaps(e),t.levels=t.needsMipmaps?this.getMipLevels(e,i,a):1,e.isCubeTexture&&e.mipmaps.length>0&&t.levels++,o||e.isStorageTexture===!0||e.isExternalTexture===!0)s.createSampler(e),s.createTexture(e,t),n.generation=e.version;else{const o=n.initialized!==!0;if(o&&s.createSampler(e),e.version>0){const o=e.image;if(o===0[0])console.warn("THREE.Renderer: Texture marked for update but image is undefined.");else if(o.complete===!1)console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");else{if(e.images){const n=[];for(const t of e.images)n.push(t);t.images=n}else t.image=o;(n.isDefaultTexture===0[0]||n.isDefaultTexture===!0)&&(s.createTexture(e,t),n.isDefaultTexture=!1,n.generation=e.version),e.source.dataReady===!0&&s.updateTexture(e,t),t.needsMipmaps&&e.mipmaps.length===0&&s.generateMipmaps(e),e.onUpdate&&e.onUpdate(e)}}else s.createDefaultTexture(e),n.isDefaultTexture=!0,n.generation=e.version}if(n.initialized!==!0){n.initialized=!0,n.generation=e.version,this.info.memory.textures++,e.isVideoTexture&&v.getTransfer(e.colorSpace)!==c&&console.warn("WebGPURenderer: Video textures must use a color space with a sRGB transfer function, e.g. SRGBColorSpace.");const t=()=>{e.removeEventListener("dispose",t),this._destroyTexture(e)};e.addEventListener("dispose",t)}n.version=e.version}getSize(e,t=Zg){let n=e.images?e.images[0]:e.image;return n?(n.image!==0[0]&&(n=n.image),typeof HTMLVideoElement!="undefined"&&n instanceof HTMLVideoElement?(t.width=n.videoWidth||1,t.height=n.videoHeight||1,t.depth=1):n instanceof VideoFrame?(t.width=n.displayWidth||1,t.height=n.displayHeight||1,t.depth=1):(t.width=n.width||1,t.height=n.height||1,t.depth=e.isCubeTexture?6:n.depth||1)):t.width=t.height=t.depth=1,t}getMipLevels(e,t,n){let s;return e.mipmaps.length>0?s=e.mipmaps.length:e.isCompressedTexture===!0?s=1:s=Math.floor(Math.log2(Math.max(t,n)))+1,s}needsMipmaps(e){return e.generateMipmaps===!0||e.mipmaps.length>0}_destroyTexture(e){this.has(e)===!0&&(this.backend.destroySampler(e),this.backend.destroyTexture(e),this.delete(e),this.info.memory.textures--)}},e5=Jg,t5=class extends T{constructor(e,t,n,s=1){super(e,t,n),this.a=s}set(e,t,n,s=1){return this.a=s,super.set(e,t,n)}copy(e){return e.a!==0[0]&&(this.a=e.a),super.copy(e)}clone(){return new this.constructor(this.r,this.g,this.b,this.a)}},xd=t5,Nc={VERTEX:"vertex",FRAGMENT:"fragment"},x={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},Vt={READ_ONLY:"readOnly",WRITE_ONLY:"writeOnly",READ_WRITE:"readWrite"},a5=["fragment","vertex"],Gm=["setup","analyze","generate"],Ym=[...a5,"compute"],$o=["x","y","z","w"],d5={analyze:"setup",generate:"analyze"},u5=0,h5=class extends fs{static get type(){return"Node"}constructor(e=null){super(),this.nodeType=e,this.updateType=x.NONE,this.updateBeforeType=x.NONE,this.updateAfterType=x.NONE,this.uuid=hy.generateUUID(),this.version=0,this.global=!1,this.parents=!1,this.isNode=!0,this._cacheKey=null,this._cacheKeyVersion=0,Object.defineProperty(this,"id",{value:u5++})}set needsUpdate(e){e===!0&&this.version++}get type(){return this.constructor.type}onUpdate(e,t){return this.updateType=t,this.update=e.bind(this),this}onFrameUpdate(e){return this.onUpdate(e,x.FRAME)}onRenderUpdate(e){return this.onUpdate(e,x.RENDER)}onObjectUpdate(e){return this.onUpdate(e,x.OBJECT)}onReference(e){return this.updateReference=e.bind(this),this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:e}of gd(this))yield e}dispose(){this.dispatchEvent({type:"dispose"})}traverse(e){e(this);for(const t of this.getChildren())t.traverse(e)}getCacheKey(e=!1){return e=e||this.version!==this._cacheKeyVersion,(e===!0||this._cacheKey===null)&&(this._cacheKey=al(Up(this,e),this.customCacheKey()),this._cacheKeyVersion=this.version),this._cacheKey}customCacheKey(){return 0}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(e){const t=this.getNodeType(e),n=e.getElementType(t);return n}getMemberType(){return"void"}getNodeType(e){const t=e.getNodeProperties(this);return t.outputNode?t.outputNode.getNodeType(e):this.nodeType}getShared(e){const t=this.getHash(e),n=e.getNodeFromHash(t);return n||this}getArrayCount(){return null}setup(e){const t=e.getNodeProperties(this);let n=0;for(const e of this.getChildren())t["node"+n++]=e;return t.outputNode||null}analyze(e,t=null){const n=e.increaseUsage(this);if(this.parents===!0){const n=e.getDataFromNode(this,"any");n.stages=n.stages||{},n.stages[e.shaderStage]=n.stages[e.shaderStage]||[],n.stages[e.shaderStage].push(t)}if(n===1){const t=e.getNodeProperties(this);for(const n of Object.values(t))n&&n.isNode===!0&&n.build(e,this)}}generate(e,t){const{outputNode:n}=e.getNodeProperties(this);if(n&&n.isNode===!0)return n.build(e,t)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(e,t=null){const a=this.getShared(e);if(this!==a)return a.build(e,t);const s=e.getDataFromNode(this);s.buildStages=s.buildStages||{},s.buildStages[e.buildStage]=!0;const o=d5[e.buildStage];if(o&&s.buildStages[o]!==!0){const t=e.getBuildStage();e.setBuildStage(o),this.build(e),e.setBuildStage(t)}e.addNode(this),e.addChain(this);let n=null;const i=e.getBuildStage();if(i==="setup"){this.updateReference(e);const t=e.getNodeProperties(this);if(t.initialized!==!0){t.initialized=!0,t.outputNode=this.setup(e)||t.outputNode||null;for(const n of Object.values(t))if(n&&n.isNode===!0){if(n.parents===!0){const t=e.getNodeProperties(n);t.parents=t.parents||[],t.parents.push(this)}n.build(e)}}n=t.outputNode}else if(i==="analyze")this.analyze(e,t);else if(i==="generate"){const s=this.generate.length===1;if(s){const o=this.getNodeType(e),s=e.getDataFromNode(this);n=s.snippet,n===0[0]?s.generated===0[0]?(s.generated=!0,n=this.generate(e)||"",s.snippet=n):(console.warn("THREE.Node: Recursion detected.",this),n="/* Recursion detected. */"):s.flowCodes!==0[0]&&e.context.nodeBlock!==0[0]&&e.addFlowCodeHierarchy(this,e.context.nodeBlock),n=e.format(n,o,t)}else n=this.generate(e,t)||"";n===""&&t!==null&&t!=="void"&&t!=="OutputType"&&(console.error(`THREE.TSL: Invalid generated code, expected a "${t}".`),n=e.generateConst(t))}return e.removeChain(this),e.addSequentialNode(this),n}getSerializeChildren(){return gd(this)}serialize(e){const n=this.getSerializeChildren(),t={};for(const{property:s,index:o,childNode:i}of n)o!==0[0]?(t[s]===0[0]&&(t[s]=Number.isInteger(o)?[]:{}),t[s][o]=i.toJSON(e.meta).uuid):t[s]=i.toJSON(e.meta).uuid;Object.keys(t).length>0&&(e.inputNodes=t)}deserialize(e){if(e.inputNodes!==0[0]){const t=e.meta.nodes;for(const n in e.inputNodes)if(Array.isArray(e.inputNodes[n])){const s=[];for(const o of e.inputNodes[n])s.push(t[o]);this[n]=s}else if(typeof e.inputNodes[n]=="object"){const s={};for(const o in e.inputNodes[n]){const i=e.inputNodes[n][o];s[o]=t[i]}this[n]=s}else{const s=e.inputNodes[n];this[n]=t[s]}}}toJSON(e){const{uuid:o,type:i}=this,n=e===0[0]||typeof e=="string";n&&(e={textures:{},images:{},nodes:{}});let t=e.nodes[o];t===0[0]&&(t={uuid:o,type:i,meta:e,metadata:{version:4.7,type:"Node",generator:"Node.toJSON"}},n!==!0&&(e.nodes[t.uuid]=t),this.serialize(t),delete t.meta);function s(e){const t=[];for(const s in e){const n=e[s];delete n.metadata,t.push(n)}return t}if(n){const n=s(e.textures),o=s(e.images),i=s(e.nodes);n.length>0&&(t.textures=n),o.length>0&&(t.images=o),i.length>0&&(t.nodes=i)}return t}},m=h5,f5=class extends m{static get type(){return"TempNode"}constructor(e=null){super(e),this.isTempNode=!0}hasDependencies(e){return e.getDataFromNode(this).usageCount>1}build(e,t){const n=e.getBuildStage();if(n==="generate"){const n=e.getVectorType(this.getNodeType(e,t)),s=e.getDataFromNode(this);if(s.propertyName!==0[0])return e.format(s.propertyName,n,t);if(n!=="void"&&t!=="void"&&this.hasDependencies(e)){const o=super.build(e,n),a=e.getVarFromNode(this,null,n),i=e.getPropertyName(a);return e.addLineFlowCode(`${i} = ${o}`,this),s.snippet=o,s.propertyName=i,e.format(s.propertyName,n,t)}}return super.build(e,t)}},de=f5,g5=class extends m{static get type(){return"ArrayElementNode"}constructor(e,t){super(),this.node=e,this.indexNode=t,this.isArrayElementNode=!0}getNodeType(e){return this.node.getElementType(e)}generate(e){const t=this.indexNode.getNodeType(e),n=this.node.build(e),s=this.indexNode.build(e,!e.isVector(t)&&e.isInteger(t)?t:"uint");return`${n}[ ${s} ]`}},yr=g5,b5=class extends m{static get type(){return"ConvertNode"}constructor(e,t){super(),this.node=e,this.convertTo=t}getNodeType(e){const n=this.node.getNodeType(e);let t=null;for(const s of this.convertTo.split("|"))(t===null||e.getTypeLength(n)===e.getTypeLength(s))&&(t=s);return t}serialize(e){super.serialize(e),e.convertTo=this.convertTo}deserialize(e){super.deserialize(e),this.convertTo=e.convertTo}generate(e,t){const s=this.node,n=this.getNodeType(e),o=s.build(e,n);return e.format(o,n,t)}},$m=b5,y5=class extends de{static get type(){return"JoinNode"}constructor(e=[],t=null){super(t),this.nodes=e}getNodeType(e){return this.nodeType!==null?e.getVectorType(this.nodeType):e.getTypeFromLength(this.nodes.reduce((t,n)=>t+e.getTypeLength(n.getNodeType(e)),0))}generate(e,t){const n=this.getNodeType(e),o=e.getTypeLength(n),r=this.nodes,i=e.getComponentType(n),a=[];let s=0;for(const d of r){if(s>=o){console.error(`THREE.TSL: Length of parameters exceeds maximum length of function '${n}()' type.`);break}let t=d.getNodeType(e),c=e.getTypeLength(t),l;s+c>o&&(console.error(`THREE.TSL: Length of '${n}()' data exceeds maximum length of output type.`),c=o-s,t=e.getTypeFromLength(c)),s+=c,l=d.build(e,t);const u=e.getComponentType(t);if(u!==i){const n=e.getTypeFromLength(c,i);l=e.format(l,t,n)}a.push(l)}const c=`${e.getType(n)}( ${a.join(", ")} )`;return e.format(c,n,t)}},_5=y5,w5=$o.join(""),O5=class extends m{static get type(){return"SplitNode"}constructor(e,t="x"){super(),this.node=e,this.components=t,this.isSplitNode=!0}getVectorLength(){let e=this.components.length;for(const t of this.components)e=Math.max($o.indexOf(t)+1,e);return e}getComponentType(e){return e.getComponentType(this.node.getNodeType(e))}getNodeType(e){return e.getTypeFromLength(this.components.length,this.getComponentType(e))}getScope(){return this.node.getScope()}generate(e,t){const s=this.node,o=e.getTypeLength(s.getNodeType(e));let n=null;if(o>1){let i=null;const r=this.getVectorLength();r>=o&&(i=e.getTypeFromLength(this.getVectorLength(),this.getComponentType(e)));const a=s.build(e,i);this.components.length===o&&this.components===w5.slice(0,this.components.length)?n=e.format(a,i,t):n=e.format(`${a}.${this.components}`,this.getNodeType(e),t)}else n=s.build(e,t);return n}serialize(e){super.serialize(e),e.components=this.components}deserialize(e){super.deserialize(e),this.components=e.components}},x5=O5,C5=class extends de{static get type(){return"SetNode"}constructor(e,t,n){super(),this.sourceNode=e,this.components=t,this.targetNode=n}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{sourceNode:i,components:t,targetNode:o}=this,n=this.getNodeType(e),a=e.getComponentType(o.getNodeType(e)),r=e.getTypeFromLength(t.length,a),c=o.build(e,r),l=i.build(e,n),d=e.getTypeLength(n),s=[];for(let e=0;e<d;e++){const n=$o[e];n===t[0]?(s.push(c),e+=t.length-1):s.push(l+"."+n)}return`${e.getType(n)}( ${s.join(", ")} )`}},E5=C5,k5=class extends de{static get type(){return"FlipNode"}constructor(e,t){super(),this.sourceNode=e,this.components=t}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{components:i,sourceNode:a}=this,s=this.getNodeType(e),r=a.build(e),c=e.getVarFromNode(this),t=e.getPropertyName(c);e.addLineFlowCode(t+" = "+r,this);const l=e.getTypeLength(s),n=[];let o=0;for(let e=0;e<l;e++){const s=$o[e];s===i[o]?(n.push("1.0 - "+(t+"."+s)),o++):n.push(t+"."+s)}return`${e.getType(s)}( ${n.join(", ")} )`}},A5=k5,S5=class extends m{static get type(){return"InputNode"}constructor(e,t=null){super(t),this.isInputNode=!0,this.value=e,this.precision=null}getNodeType(){return this.nodeType===null?vd(this.value):this.nodeType}getInputType(e){return this.getNodeType(e)}setPrecision(e){return this.precision=e,this}serialize(e){super.serialize(e),e.value=this.value,this.value&&this.value.toArray&&(e.value=this.value.toArray()),e.valueType=vd(this.value),e.nodeType=this.nodeType,e.valueType==="ArrayBuffer"&&(e.value=ZD(e.value)),e.precision=this.precision}deserialize(e){super.deserialize(e),this.nodeType=e.nodeType,this.value=Array.isArray(e.value)?c8(e.valueType,...e.value):e.value,this.precision=e.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(e.value))}generate(){console.warn("Abstract function.")}},Nd=S5,Bm=/float|u?int/,T5=class extends Nd{static get type(){return"ConstNode"}constructor(e,t=null){super(e,t),this.isConstNode=!0}generateConst(e){return e.generateConst(this.getNodeType(e),this.value)}generate(e,t){const n=this.getNodeType(e);return Bm.test(n)&&Bm.test(t)?e.generateConst(t,this.value):e.format(this.generateConst(e),n,t)}},cn=T5,D5=class extends m{static get type(){return"MemberNode"}constructor(e,t){super(),this.structNode=e,this.property=t,this.isMemberNode=!0}hasMember(e){return!(this.structNode.isMemberNode&&this.structNode.hasMember(e)===!1)&&this.structNode.getMemberType(e,this.property)!=="void"}getNodeType(e){return this.hasMember(e)===!1?"float":this.structNode.getMemberType(e,this.property)}getMemberType(e,t){if(this.hasMember(e)===!1)return"float";const n=this.getNodeType(e),s=e.getStructTypeNode(n);return s.getMemberType(e,t)}generate(e){if(this.hasMember(e)===!1){console.warn(`THREE.TSL: Member "${this.property}" does not exist in struct.`);const t=this.getNodeType(e);return e.generateConst(t)}const t=this.structNode.build(e);return t+"."+this.property}},N5=D5,ss=null,Rd=new Map;function o(e,t){if(Rd.has(e)){console.warn(`THREE.TSL: Redefinition of method chaining '${e}'.`);return}if(typeof t!="function")throw new Error(`THREE.TSL: Node element ${e} is not a function`);Rd.set(e,t),e!=="assign"&&(m.prototype[e]=function(...e){return this.isStackNode?this.add(t(...e)):t(this,...e)},m.prototype[e+"Assign"]=function(...e){return this.isStackNode?this.assign(e[0],t(...e)):this.assign(t(this,...e))})}H5=e=>e.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),Lm=e=>H5(e).split("").sort().join(""),m.prototype.assign=function(...e){if(this.isStackNode!==!0)return ss!==null?ss.assign(this,...e):console.error("THREE.TSL: No stack defined for assign operation. Make sure the assign is inside a Fn()."),this;const t=Rd.get("assign");return this.add(t(...e))},m.prototype.toVarIntent=function(){return this},m.prototype.get=function(e){return new N5(this,e)},ir={};function Id(e,t,n){ir[e]=ir[t]=ir[n]={get(){this._cache=this._cache||{};let t=this._cache[e];return t===0[0]&&(t=new x5(this,e),this._cache[e]=t),t},set(t){this[e].assign(a(t))}};const s=e.toUpperCase(),o=t.toUpperCase(),i=n.toUpperCase();m.prototype["set"+s]=m.prototype["set"+o]=m.prototype["set"+i]=function(t){const n=Lm(e);return new E5(this,n,a(t))},m.prototype["flip"+s]=m.prototype["flip"+o]=m.prototype["flip"+i]=function(){const t=Lm(e);return new A5(this,t)}}Bt=["x","y","z","w"],qt=["r","g","b","a"],Kt=["s","t","p","q"];for(let e=0;e<4;e++){let t=Bt[e],n=qt[e],s=Kt[e];Id(t,n,s);for(let o=0;o<4;o++){t=Bt[e]+Bt[o],n=qt[e]+qt[o],s=Kt[e]+Kt[o],Id(t,n,s);for(let i=0;i<4;i++){t=Bt[e]+Bt[o]+Bt[i],n=qt[e]+qt[o]+qt[i],s=Kt[e]+Kt[o]+Kt[i],Id(t,n,s);for(let a=0;a<4;a++)t=Bt[e]+Bt[o]+Bt[i]+Bt[a],n=qt[e]+qt[o]+qt[i]+qt[a],s=Kt[e]+Kt[o]+Kt[i]+Kt[a],Id(t,n,s)}}}for(let e=0;e<32;e++)ir[e]={get(){this._cache=this._cache||{};let t=this._cache[e];return t===0[0]&&(t=new yr(this,new cn(e,"uint")),this._cache[e]=t),t},set(t){this[e].assign(a(t))}};Object.defineProperties(m.prototype,ir),Mm=new WeakMap,q5=function(e,t=null){const n=vd(e);return n==="node"?e:t===null&&(n==="float"||n==="boolean")||n&&n!=="shader"&&n!=="string"?a(qd(e,t)):n==="shader"?e.isFn?e:f(e):e},Y5=function(e,t=null){for(const n in e)e[n]=a(e[n],t);return e},G5=function(e,t=null){const n=e.length;for(let s=0;s<n;s++)e[s]=a(e[s],t);return e},Sm=function(e,t=null,n=null,s=null){function l(e){return s!==null?(e=a(Object.assign(e,s)),s.intent===!0&&(e=e.toVarIntent())):e=a(e),e}let o,i=t,r,c;function d(t){let n;return i?n=/[a-z]/i.test(i)?i+"()":i:n=e.type,r!==0[0]&&t.length<r?(console.error(`THREE.TSL: "${n}" parameter length is less than minimum required.`),t.concat(new Array(r-t.length).fill(0))):c!==0[0]&&t.length>c?(console.error(`THREE.TSL: "${n}" parameter length exceeds limit.`),t.slice(0,c)):t}return t===null?o=(...t)=>l(new e(...Li(d(t)))):n!==null?(n=a(n),o=(...s)=>l(new e(t,...Li(d(s)),n))):o=(...n)=>l(new e(t,...Li(d(n)))),o.setParameterLength=(...e)=>(e.length===1?r=c=e[0]:e.length===2&&([r,c]=e),o),o.setName=e=>(i=e,o),o},Q5=function(e,...t){return a(new e(...Li(t)))},Z5=class extends m{constructor(e,t){super(),this.shaderNode=e,this.rawInputs=t,this.isShaderCallNodeInternal=!0}getNodeType(e){return this.shaderNode.nodeType||this.getOutputNode(e).getNodeType(e)}getMemberType(e,t){return this.getOutputNode(e).getMemberType(e,t)}call(e){const{shaderNode:t,rawInputs:n}=this,o=e.getNodeProperties(t),r=e.getClosestSubBuild(t.subBuilds)||"",i=r||"default";if(o[i])return o[i];const c=e.subBuildFn;e.subBuildFn=r;let s=null;if(t.layout){let o=Mm.get(e.constructor);o===0[0]&&(o=new WeakMap,Mm.set(e.constructor,o));let i=o.get(t);i===0[0]&&(i=a(e.buildFunctionNode(t)),o.set(t,i)),e.addInclude(i);const r=n?YD(n):null;s=a(i.call(r))}else{const i=new Proxy(e,{get:(e,t,n)=>{let s;return Symbol.iterator===t?s=function*(){yield 0[0]}:s=Reflect.get(e,t,n),s}}),r=n?qD(n):null,c=Array.isArray(n)?n.length>0:n!==null,o=t.jsFunc,l=c||o.length>1?o(r,i):o(i);s=a(l)}return e.subBuildFn=c,t.once&&(o[i]=s),s}setupOutput(e){return e.addStack(),e.stack.outputNode=this.call(e),e.removeStack()}getOutputNode(e){const t=e.getNodeProperties(this),n=e.getSubBuildOutput(this);return t[n]=t[n]||this.setupOutput(e),t[n].subBuild=e.getClosestSubBuild(this),t[n]}build(e,t=null){let s=null;const o=e.getBuildStage(),n=e.getNodeProperties(this),i=e.getSubBuildOutput(this),a=this.getOutputNode(e);if(o==="setup"){const t=e.getSubBuildProperty("initialized",this);if(n[t]!==!0&&(n[t]=!0,n[i]=this.getOutputNode(e),n[i].build(e),this.shaderNode.subBuilds))for(const n of e.chaining){const t=e.getDataFromNode(n,"any");t.subBuilds=t.subBuilds||new Set;for(const e of this.shaderNode.subBuilds)t.subBuilds.add(e)}s=n[i]}else o==="analyze"?a.build(e,t):o==="generate"&&(s=a.build(e,t)||"");return s}};function YD(e){let t;Gd(e);const n=e[0]&&(e[0].isNode||Object.getPrototypeOf(e[0])!==Object.prototype);return n?t=[...e]:t=e[0],t}function qD(e){let t=0;return Gd(e),new Proxy(e,{get:(n,s,o)=>{let i;if(s==="length")return i=e.length,i;if(Symbol.iterator===s)i=function*(){for(const t of e)yield a(t)};else{if(e.length>0)if(Object.getPrototypeOf(e[0])===Object.prototype){const n=e[0];n[s]===0[0]?i=n[t++]:i=Reflect.get(n,s,o)}else e[0]instanceof m&&(e[s]===0[0]?i=e[t++]:i=Reflect.get(e,s,o));else i=Reflect.get(n,s,o);i=a(i)}return i}})}t7=class extends m{constructor(e,t){super(t),this.jsFunc=e,this.layout=null,this.global=!0,this.once=!1}setLayout(e){return this.layout=e,this}call(e=null){return a(new Z5(this,e))}setup(){return this.call()}},n7=[!1,!0],s7=[0,1,2,3],o7=[-1,-2],Am=[.5,1.5,1/3,1e-6,1e6,Math.PI,Math.PI*2,1/Math.PI,2/Math.PI,1/(Math.PI*2),Math.PI/2],Wd=new Map;for(const e of n7)Wd.set(e,new cn(e));Ud=new Map;for(const e of s7)Ud.set(e,new cn(e,"uint"));Kd=new Map([...Ud].map(e=>new cn(e.value,"int")));for(const e of o7)Kd.set(e,new cn(e,"int"));pc=new Map([...Kd].map(e=>new cn(e.value)));for(const e of Am)pc.set(e,new cn(e));for(const e of Am)pc.set(-e,new cn(-e));_c={bool:Wd,uint:Ud,ints:Kd,float:pc},wm=new Map([...Wd,...pc]),qd=(e,t)=>wm.has(e)?wm.get(e):e.isNode===!0?e:new cn(e,t),se=function(e,t=null){return(...n)=>{for(const t of n)if(t===0[0])return console.error(`THREE.TSL: Invalid parameter for the type "${e}".`),a(new cn(0,e));if((n.length===0||!["bool","float","int","uint"].includes(e)&&n.every(e=>{const t=typeof e;return t!=="object"&&t!=="function"}))&&(n=[c8(e,...n)]),n.length===1&&t!==null&&t.has(n[0]))return zc(t.get(n[0]));if(n.length===1){const t=qd(n[0],e);return zc(t.nodeType===e?t:new $m(t,e))}const s=n.map(e=>qd(e));return zc(new _5(s,e))}},f7=e=>e!=null?e.nodeType||e.convertTo||(typeof e=="string"?e:null):null;function Oc(e,t){return new t7(e,t)}a=(e,t=null)=>q5(e,t),zc=(e,t=null)=>a(e,t).toVarIntent(),Gd=(e,t=null)=>new Y5(e,t),Li=(e,t=null)=>new G5(e,t),L=(e,t=null,n=null,s=null)=>new Sm(e,t,n,s),u=(e,...t)=>new Q5(e,...t),d=(e,t=null,n=null,s={})=>new Sm(e,t,n,{intent:!0,...s}),O7=0,x7=class extends m{constructor(e,t=null){super();let n=null;t!==null&&(typeof t=="object"?n=t.return:(typeof t=="string"?n=t:console.error("THREE.TSL: Invalid layout type."),t=null)),this.shaderNode=new Oc(e,n),t!==null&&this.setLayout(t),this.isFn=!0}setLayout(e){const t=this.shaderNode.nodeType;if(typeof e.inputs!="object"){const n={name:"fn"+O7++,type:t,inputs:[]};for(const t in e){if(t==="return")continue;n.inputs.push({name:t,type:e[t]})}e=n}return this.shaderNode.setLayout(e),this}getNodeType(e){return this.shaderNode.getNodeType(e)||"float"}call(...t){const e=this.shaderNode.call(t);return this.shaderNode.nodeType==="void"&&e.toStack(),e.toVarIntent()}once(e=null){return this.shaderNode.once=!0,this.shaderNode.subBuilds=e,this}generate(e){const t=this.getNodeType(e);return console.error('THREE.TSL: "Fn()" was declared but not invoked. Try calling it like "Fn()( ...params )".'),e.generateConst(t)}};function f(e,t=null){const n=new x7(e,t);return new Proxy(()=>{},{apply(e,t,s){return n.call(...s)},get(e,t,s){return Reflect.get(n,t,s)},set(e,t,s,o){return Reflect.set(n,t,s,o)}})}Hc=e=>{ss=e},ou=()=>ss,yt=(...e)=>ss.If(...e);function S7(e){return ss&&ss.add(e),e}o("toStack",S7),M7=new se("color"),g=new se("float",_c.float),ne=new se("int",_c.ints),z7=new se("uint",_c.uint),pu=new se("bool",_c.bool),re=new se("vec2"),hn=new se("ivec2"),R7=new se("uvec2"),P7=new se("bvec2"),h=new se("vec3"),I7=new se("ivec3"),B7=new se("uvec3"),V7=new se("bvec3"),we=new se("vec4"),W7=new se("ivec4"),U7=new se("uvec4"),K7=new se("bvec4"),Hh=new se("mat2"),$s=new se("mat3"),Eu=new se("mat4"),o("toColor",M7),o("toFloat",g),o("toInt",ne),o("toUint",z7),o("toBool",pu),o("toVec2",re),o("toIVec2",hn),o("toUVec2",R7),o("toBVec2",P7),o("toVec3",h),o("toIVec3",I7),o("toUVec3",B7),o("toBVec3",V7),o("toVec4",we),o("toIVec4",W7),o("toUVec4",U7),o("toBVec4",K7),o("toMat2",Hh),o("toMat3",$s),o("toMat4",Eu),X7=L(yr).setParameterLength(2),Q7=(e,t)=>a(new $m(a(e),t)),o("element",X7),o("convert",Q7),o("append",e=>(console.warn("THREE.TSL: .append() has been renamed to .toStack()."),S7(e))),Z7=class extends de{static get type(){return"AssignNode"}constructor(e,t){super(),this.targetNode=e,this.sourceNode=t,this.isAssignNode=!0}hasDependencies(){return!1}getNodeType(e,t){return t!=="void"?this.targetNode.getNodeType(e):"void"}needsSplitAssign(e){const{targetNode:t}=this;if(e.isAvailable("swizzleAssign")===!1&&t.isSplitNode&&t.components.length>1){const n=e.getTypeLength(t.node.getNodeType(e)),s=$o.join("").slice(0,n)!==t.components;return s}return!1}setup(e){const{targetNode:t,sourceNode:s}=this,o=t.getScope(),i=e.getNodeProperties(o);i.assign=!0;const n=e.getNodeProperties(this);n.sourceNode=s,n.targetNode=t.context({assign:!0})}generate(e,t){const{targetNode:o,sourceNode:a}=e.getNodeProperties(this),l=this.needsSplitAssign(e),s=o.build(e),i=o.getNodeType(e),r=a.build(e,i),d=a.getNodeType(e),c=e.getDataFromNode(this);let n;if(c.initialized===!0)t!=="void"&&(n=s);else if(l){const l=e.getVarFromNode(this,null,i),c=e.getPropertyName(l);e.addLineFlowCode(`${c} = ${r}`,this);const a=o.node,d=a.node.context({assign:!0}),u=d.build(e);for(let t=0;t<a.components.length;t++){const n=a.components[t];e.addLineFlowCode(`${u}.${n} = ${c}[ ${t} ]`,this)}t!=="void"&&(n=s)}else n=`${s} = ${r}`,(t==="void"||d==="void")&&(e.addLineFlowCode(n,this),t!=="void"&&(n=s));return c.initialized=!0,e.format(n,i,t)}},J7=L(Z7).setParameterLength(2),o("assign",J7),Th=class extends de{static get type(){return"ArrayNode"}constructor(e,t,n=null){super(e),this.count=t,this.values=n,this.isArrayNode=!0}getArrayCount(){return this.count}getNodeType(e){return this.nodeType===null&&(this.nodeType=this.values[0].getNodeType(e)),this.nodeType}getElementType(e){return this.getNodeType(e)}generate(e){const t=this.getNodeType(e);return e.generateArray(t,this.count,this.values)}},tv=(...e)=>{let t;if(e.length===1){const n=e[0];t=new Th(null,n.length,n)}else{const n=e[0],s=e[1];t=new Th(n,s)}return a(t)},o("toArray",(e,t)=>tv(Array(t).fill(e))),Mh=class extends m{static get type(){return"UniformGroupNode"}constructor(e,t=!1,n=1){super("string"),this.name=e,this.shared=t,this.order=n,this.isUniformGroup=!0}serialize(e){super.serialize(e),e.name=this.name,e.version=this.version,e.shared=this.shared}deserialize(e){super.deserialize(e),this.name=e.name,this.version=e.version,this.shared=e.shared}},sv=e=>new Mh(e),ku=(e,t=0)=>new Mh(e,!0,t),iv=ku("frame"),oe=ku("render"),xh=sv("object"),jh=class extends Nd{static get type(){return"UniformNode"}constructor(e,t=null){super(e,t),this.isUniformNode=!0,this.name="",this.groupNode=xh}setName(e){return this.name=e,this}label(e){return console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.'),this.setName(e)}setGroup(e){return this.groupNode=e,this}getGroup(){return this.groupNode}getUniformHash(e){return this.getHash(e)}onUpdate(e,t){return e=e.bind(this),super.onUpdate(t=>{const n=e(t,this);n!==0[0]&&(this.value=n)},t)}getInputType(e){let t=super.getInputType(e);return t==="bool"&&(t="uint"),t}generate(e,t){const o=this.getNodeType(e),i=this.getUniformHash(e);let n=e.getNodeFromHash(i);n===0[0]&&(e.setHashNode(this,i),n=this);const a=n.getInputType(e),c=e.getUniformFromNode(n,a,e.shaderStage,this.name||e.context.nodeName),r=e.getPropertyName(c);e.context.nodeName!==0[0]&&delete e.context.nodeName;let s=r;if(o==="bool"){const n=e.getDataFromNode(this);let t=n.propertyName;if(t===0[0]){const i=e.getVarFromNode(this,null,"bool");t=e.getPropertyName(i),n.propertyName=t,s=e.format(r,a,o),e.addLineFlowCode(`${t} = ${s}`,this)}s=t}return e.format(s,o,t)}},Dl=jh,R=(e,t)=>{const n=f7(t||e);return n===e&&(e=c8(n)),e=e&&e.isNode===!0?e.node&&e.node.value||e.value:e,a(new jh(e,n))},Yi=class extends m{static get type(){return"PropertyNode"}constructor(e,t=null,n=!1){super(e),this.name=t,this.varying=n,this.isPropertyNode=!0,this.global=!0}getHash(e){return this.name||super.getHash(e)}generate(e){let t;return this.varying===!0?(t=e.getVaryingFromNode(this,this.name),t.needsInterpolation=!0):t=e.getVarFromNode(this,this.name),e.getPropertyName(t)}},hv=Yi,pl=(e,t)=>a(new Yi(e,t)),Yc=(e,t)=>a(new Yi(e,t,!0)),Pt=u(Yi,"vec4","DiffuseColor"),ch=u(Yi,"vec3","EmissiveColor"),Ha=u(Yi,"vec4","Output"),bv=class extends de{static get type(){return"FunctionCallNode"}constructor(e=null,t={}){super(),this.functionNode=e,this.parameters=t}setParameters(e){return this.parameters=e,this}getParameters(){return this.parameters}getNodeType(e){return this.functionNode.getNodeType(e)}getMemberType(e,t){return this.functionNode.getMemberType(e,t)}generate(e){const s=[],i=this.functionNode,n=i.getInputs(e),t=this.parameters,o=(t,n)=>{const o=n.type,i=o==="pointer";let s;return i?s="&"+t.build(e):s=t.build(e,o),s};if(Array.isArray(t)){if(t.length>n.length)console.error("THREE.TSL: The number of provided parameters exceeds the expected number of inputs in 'Fn()'."),t.length=n.length;else if(t.length<n.length)for(console.error("THREE.TSL: The number of provided parameters is less than the expected number of inputs in 'Fn()'.");t.length<n.length;)t.push(g(0));for(let e=0;e<t.length;e++)s.push(o(t[e],n[e]))}else for(const e of n){const i=t[e.name];i!==0[0]?s.push(o(i,e)):(console.error(`THREE.TSL: Input '${e.name}' not found in 'Fn()'.`),s.push(o(g(0),e)))}const a=i.build(e,"property");return`${a}( ${s.join(", ")} )`}},jv=(e,...t)=>(t=t.length>1||t[0]&&t[0].isNode===!0?Li(t):Gd(t[0]),a(new bv(a(e),t))),o("call",jv),yv={"==":"equal","!=":"notEqual","<":"lessThan",">":"greaterThan","<=":"lessThanEqual",">=":"greaterThanEqual","%":"mod"},Q=class _OperatorNode extends de{static get type(){return"OperatorNode"}constructor(t,n,s,...e){if(super(),e.length>0){let o=new _OperatorNode(t,n,s);for(let n=0;n<e.length-1;n++)o=new _OperatorNode(t,o,e[n]);n=o,s=e[e.length-1]}this.op=t,this.aNode=n,this.bNode=s,this.isOperatorNode=!0}getOperatorMethod(e,t){return e.getMethod(yv[this.op],t)}getNodeType(e,t=null){const n=this.op,a=this.aNode,i=this.bNode,s=a.getNodeType(e),o=i?i.getNodeType(e):null;if(s==="void"||o==="void")return t||"void";if(n==="%")return s;if(n==="~"||n==="&"||n==="|"||n==="^"||n===">>"||n==="<<")return e.getIntegerType(s);if(n==="!"||n==="&&"||n==="||"||n==="^^")return"bool";if(n==="=="||n==="!="||n==="<"||n===">"||n==="<="||n===">="){const t=Math.max(e.getTypeLength(s),e.getTypeLength(o));return t>1?`bvec${t}`:"bool"}if(e.isMatrix(s)){{if(o==="float")return s;if(e.isVector(o))return e.getVectorFromMatrix(s);if(e.isMatrix(o))return s}}else if(e.isMatrix(o)){if(s==="float")return o;if(e.isVector(s))return e.getVectorFromMatrix(o)}return e.getTypeLength(o)>e.getTypeLength(s)?o:s}generate(e,t){const o=this.op,{aNode:d,bNode:c}=this,i=this.getNodeType(e,t);let n=null,s=null;i!=="void"?(n=d.getNodeType(e),s=c?c.getNodeType(e):null,o==="<"||o===">"||o==="<="||o===">="||o==="=="||o==="!="?e.isVector(n)?s=n:e.isVector(s)?n=s:n!==s&&(n=s="float"):o===">>"||o==="<<"?(n=i,s=e.changeComponentType(s,"uint")):o==="%"?(n=i,s=e.isInteger(n)&&e.isInteger(s)?s:n):e.isMatrix(n)?s==="float"?s="float":e.isVector(s)?s=e.getVectorFromMatrix(n):e.isMatrix(s)||(n=s=i):e.isMatrix(s)?n==="float"?n="float":e.isVector(n)?n=e.getVectorFromMatrix(s):n=s=i:n=s=i):n=s=i;const a=d.build(e,n),r=c?c.build(e,s):null,l=e.getFunctionOperator(o);if(t!=="void"){const c=e.renderer.coordinateSystem===Re;if(o==="=="||o==="!="||o==="<"||o===">"||o==="<="||o===">=")return c?e.isVector(n)?e.format(`${this.getOperatorMethod(e,t)}( ${a}, ${r} )`,i,t):e.format(`( ${a} ${o} ${r} )`,i,t):e.format(`( ${a} ${o} ${r} )`,i,t);else if(o==="%")return e.isInteger(s)?e.format(`( ${a} % ${r} )`,i,t):e.format(`${this.getOperatorMethod(e,i)}( ${a}, ${r} )`,i,t);else if(o==="!"||o==="~")return e.format(`(${o}${a})`,n,t);else if(l)return e.format(`${l}( ${a}, ${r} )`,i,t);else{if(e.isMatrix(n)&&s==="float")return e.format(`( ${r} ${o} ${a} )`,i,t);if(n==="float"&&e.isMatrix(s))return e.format(`${a} ${o} ${r}`,i,t);let l=`( ${a} ${o} ${r} )`;return!c&&i==="bool"&&e.isVector(n)&&e.isVector(s)&&(l=`all${l}`),e.format(l,i,t)}}else if(n!=="void")return l?e.format(`${l}( ${a}, ${r} )`,i,t):e.isMatrix(n)&&s==="float"?e.format(`${r} ${o} ${a}`,i,t):e.format(`${a} ${o} ${r}`,i,t)}serialize(e){super.serialize(e),e.op=this.op}deserialize(e){super.deserialize(e),this.op=e.op}},gr=d(Q,"+").setParameterLength(2,1/0).setName("add"),Ln=d(Q,"-").setParameterLength(2,1/0).setName("sub"),J=d(Q,"*").setParameterLength(2,1/0).setName("mul"),L3=d(Q,"/").setParameterLength(2,1/0).setName("div"),Uu=d(Q,"%").setParameterLength(2).setName("mod"),_4=d(Q,"==").setParameterLength(2).setName("equal"),Av=d(Q,"!=").setParameterLength(2).setName("notEqual"),Sv=d(Q,"<").setParameterLength(2).setName("lessThan"),Mv=d(Q,">").setParameterLength(2).setName("greaterThan"),Fv=d(Q,"<=").setParameterLength(2).setName("lessThanEqual"),Tv=d(Q,">=").setParameterLength(2).setName("greaterThanEqual"),zv=d(Q,"&&").setParameterLength(2,1/0).setName("and"),Dv=d(Q,"||").setParameterLength(2,1/0).setName("or"),Nv=d(Q,"!").setParameterLength(1).setName("not"),Lv=d(Q,"^^").setParameterLength(2).setName("xor"),Rv=d(Q,"&").setParameterLength(2).setName("bitAnd"),Pv=d(Q,"~").setParameterLength(2).setName("bitNot"),Hv=d(Q,"|").setParameterLength(2).setName("bitOr"),Iv=d(Q,"^").setParameterLength(2).setName("bitXor"),Bv=d(Q,"<<").setParameterLength(2).setName("shiftLeft"),Vv=d(Q,">>").setParameterLength(2).setName("shiftRight"),$v=f(([e])=>(e.addAssign(1),e)),Wv=f(([e])=>(e.subAssign(1),e)),Uv=f(([e])=>{const t=ne(e).toConst();return e.addAssign(1),t}),Kv=f(([e])=>{const t=ne(e).toConst();return e.subAssign(1),t}),o("add",gr),o("sub",Ln),o("mul",J),o("div",L3),o("mod",Uu),o("equal",_4),o("notEqual",Av),o("lessThan",Sv),o("greaterThan",Mv),o("lessThanEqual",Fv),o("greaterThanEqual",Tv),o("and",zv),o("or",Dv),o("not",Nv),o("xor",Lv),o("bitAnd",Rv),o("bitNot",Pv),o("bitOr",Hv),o("bitXor",Iv),o("shiftLeft",Bv),o("shiftRight",Vv),o("incrementBefore",$v),o("decrementBefore",Wv),o("increment",Uv),o("decrement",Kv),qv=(e,t)=>(console.warn('THREE.TSL: "modInt()" is deprecated. Use "mod( int( ... ) )" instead.'),Uu(ne(e),ne(t))),o("modInt",qv),s=class _MathNode extends de{static get type(){return"MathNode"}constructor(e,t,n=null,s=null){if(super(),(e===_MathNode.MAX||e===_MathNode.MIN)&&arguments.length>3){let o=new _MathNode(e,t,n);for(let t=2;t<arguments.length-1;t++)o=new _MathNode(e,o,arguments[t]);t=o,n=arguments[arguments.length-1],s=null}this.method=e,this.aNode=t,this.bNode=n,this.cNode=s,this.isMathNode=!0}getInputType(e){const t=this.aNode.getNodeType(e),n=this.bNode?this.bNode.getNodeType(e):null,s=this.cNode?this.cNode.getNodeType(e):null,o=e.isMatrix(t)?0:e.getTypeLength(t),a=e.isMatrix(n)?0:e.getTypeLength(n),i=e.isMatrix(s)?0:e.getTypeLength(s);return o>a&&o>i?t:a>i?n:i>o?s:t}getNodeType(e){const t=this.method;return t===_MathNode.LENGTH||t===_MathNode.DISTANCE||t===_MathNode.DOT?"float":t===_MathNode.CROSS?"vec3":t===_MathNode.ALL||t===_MathNode.ANY?"bool":t===_MathNode.EQUALS?e.changeComponentType(this.aNode.getNodeType(e),"bool"):this.getInputType(e)}setup(e){const{aNode:n,bNode:o,method:s}=this;let t=null;if(s===_MathNode.ONE_MINUS)t=Ln(1,n);else if(s===_MathNode.RECIPROCAL)t=L3(1,n);else if(s===_MathNode.DIFFERENCE)t=Lt(Ln(n,o));else if(s===_MathNode.TRANSFORM_DIRECTION){let s=n,i=o;e.isMatrix(s.getNodeType(e))?i=we(h(i),0):s=we(h(s),0);const a=J(s,i).xyz;t=Ju(a)}return t!==null?t:super.setup(e)}generate(e,t){const d=e.getNodeProperties(this);if(d.outputNode)return super.generate(e,t);let n=this.method;const r=this.getNodeType(e),s=this.getInputType(e),a=this.aNode,o=this.bNode,c=this.cNode,l=e.renderer.coordinateSystem;if(n===_MathNode.NEGATE)return e.format("( - "+a.build(e,s)+" )",r,t);const i=[];return n===_MathNode.CROSS?i.push(a.build(e,r),o.build(e,r)):l===Re&&n===_MathNode.STEP?i.push(a.build(e,e.getTypeLength(a.getNodeType(e))===1?"float":s),o.build(e,s)):l===Re&&(n===_MathNode.MIN||n===_MathNode.MAX)?i.push(a.build(e,s),o.build(e,e.getTypeLength(o.getNodeType(e))===1?"float":s)):n===_MathNode.REFRACT?i.push(a.build(e,s),o.build(e,s),c.build(e,"float")):n===_MathNode.MIX?i.push(a.build(e,s),o.build(e,s),c.build(e,e.getTypeLength(c.getNodeType(e))===1?"float":s)):(l===Os&&n===_MathNode.ATAN&&o!==null&&(n="atan2"),e.shaderStage!=="fragment"&&(n===_MathNode.DFDX||n===_MathNode.DFDY)&&(console.warn(`THREE.TSL: '${n}' is not supported in the ${e.shaderStage} stage.`),n="/*"+n+"*/"),i.push(a.build(e,s)),o!==null&&i.push(o.build(e,s)),c!==null&&i.push(c.build(e,s))),e.format(`${e.getMethod(n,r)}( ${i.join(", ")} )`,r,t)}serialize(e){super.serialize(e),e.method=this.method}deserialize(e){super.deserialize(e),this.method=e.method}},s.ALL="all",s.ANY="any",s.RADIANS="radians",s.DEGREES="degrees",s.EXP="exp",s.EXP2="exp2",s.LOG="log",s.LOG2="log2",s.SQRT="sqrt",s.INVERSE_SQRT="inversesqrt",s.FLOOR="floor",s.CEIL="ceil",s.NORMALIZE="normalize",s.FRACT="fract",s.SIN="sin",s.COS="cos",s.TAN="tan",s.ASIN="asin",s.ACOS="acos",s.ATAN="atan",s.ABS="abs",s.SIGN="sign",s.LENGTH="length",s.NEGATE="negate",s.ONE_MINUS="oneMinus",s.DFDX="dFdx",s.DFDY="dFdy",s.ROUND="round",s.RECIPROCAL="reciprocal",s.TRUNC="trunc",s.FWIDTH="fwidth",s.TRANSPOSE="transpose",s.DETERMINANT="determinant",s.INVERSE="inverse",s.EQUALS="equals",s.MIN="min",s.MAX="max",s.STEP="step",s.REFLECT="reflect",s.DISTANCE="distance",s.DIFFERENCE="difference",s.DOT="dot",s.CROSS="cross",s.POW="pow",s.TRANSFORM_DIRECTION="transformDirection",s.MIX="mix",s.CLAMP="clamp",s.REFRACT="refract",s.SMOOTHSTEP="smoothstep",s.FACEFORWARD="faceforward",Gv=g(Math.PI),BD=g(Math.PI*2),Qv=d(s,s.ALL).setParameterLength(1),Zv=d(s,s.ANY).setParameterLength(1),Jv=d(s,s.RADIANS).setParameterLength(1),e9=d(s,s.DEGREES).setParameterLength(1),t9=d(s,s.EXP).setParameterLength(1),ha=d(s,s.EXP2).setParameterLength(1),s9=d(s,s.LOG).setParameterLength(1),ro=d(s,s.LOG2).setParameterLength(1),i9=d(s,s.SQRT).setParameterLength(1),a9=d(s,s.INVERSE_SQRT).setParameterLength(1),aa=d(s,s.FLOOR).setParameterLength(1),m3=d(s,s.CEIL).setParameterLength(1),Ju=d(s,s.NORMALIZE).setParameterLength(1),ua=d(s,s.FRACT).setParameterLength(1),ma=d(s,s.SIN).setParameterLength(1),Q2=d(s,s.COS).setParameterLength(1),m9=d(s,s.TAN).setParameterLength(1),f9=d(s,s.ASIN).setParameterLength(1),p9=d(s,s.ACOS).setParameterLength(1),F2=d(s,s.ATAN).setParameterLength(1,2),Lt=d(s,s.ABS).setParameterLength(1),A2=d(s,s.SIGN).setParameterLength(1),_1=d(s,s.LENGTH).setParameterLength(1),y9=d(s,s.NEGATE).setParameterLength(1),_9=d(s,s.ONE_MINUS).setParameterLength(1),_2=d(s,s.DFDX).setParameterLength(1),Q0=d(s,s.DFDY).setParameterLength(1),x9=d(s,s.ROUND).setParameterLength(1),C9=d(s,s.RECIPROCAL).setParameterLength(1),E9=d(s,s.TRUNC).setParameterLength(1),k9=d(s,s.FWIDTH).setParameterLength(1),A9=d(s,s.TRANSPOSE).setParameterLength(1),S9=d(s,s.DETERMINANT).setParameterLength(1),M9=d(s,s.INVERSE).setParameterLength(1),F9=(e,t)=>(console.warn('THREE.TSL: "equals" is deprecated. Use "equal" inside a vector instead, like: "bvec*( equal( ... ) )"'),_4(e,t)),K0=d(s,s.MIN).setParameterLength(2,1/0),rl=d(s,s.MAX).setParameterLength(2,1/0),D9=d(s,s.STEP).setParameterLength(2),N9=d(s,s.REFLECT).setParameterLength(2),L9=d(s,s.DISTANCE).setParameterLength(2),R9=d(s,s.DIFFERENCE).setParameterLength(2),$1=d(s,s.DOT).setParameterLength(2),P0=d(s,s.CROSS).setParameterLength(2),F0=d(s,s.POW).setParameterLength(2),B9=e=>J(e,e),V9=e=>J(e,e,e),$9=e=>J(e,e,e,e),W9=d(s,s.TRANSFORM_DIRECTION).setParameterLength(2),U9=e=>J(A2(e),F0(Lt(e),1/3)),M0=e=>$1(e,e),va=d(s,s.MIX).setParameterLength(3),cc=(e,t=0,n=1)=>a(new s(s.CLAMP,a(e),a(t),a(n))),G9=e=>cc(e),X9=d(s,s.REFRACT).setParameterLength(3),lr=d(s,s.SMOOTHSTEP).setParameterLength(3),Z9=d(s,s.FACEFORWARD).setParameterLength(3),J9=f(([e])=>{const t=12.9898,n=78.233,s=43758.5453,o=$1(e.xy,re(t,n)),i=Uu(o,Gv);return ua(ma(i).mul(s))}),eb=(e,t,n)=>va(t,n,e),tb=(e,t,n)=>lr(t,n,e),nb=(e,t)=>D9(t,e),sb=(e,t)=>(console.warn('THREE.TSL: "atan2" is overloaded. Use "atan" instead.'),F2(e,t)),o("all",Qv),o("any",Zv),o("equals",F9),o("radians",Jv),o("degrees",e9),o("exp",t9),o("exp2",ha),o("log",s9),o("log2",ro),o("sqrt",i9),o("inverseSqrt",a9),o("floor",aa),o("ceil",m3),o("normalize",Ju),o("fract",ua),o("sin",ma),o("cos",Q2),o("tan",m9),o("asin",f9),o("acos",p9),o("atan",F2),o("abs",Lt),o("sign",A2),o("length",_1),o("lengthSq",M0),o("negate",y9),o("oneMinus",_9),o("dFdx",_2),o("dFdy",Q0),o("round",x9),o("reciprocal",C9),o("trunc",E9),o("fwidth",k9),o("atan2",sb),o("min",K0),o("max",rl),o("step",nb),o("reflect",N9),o("distance",L9),o("dot",$1),o("cross",P0),o("pow",F0),o("pow2",B9),o("pow3",V9),o("pow4",$9),o("transformDirection",W9),o("mix",eb),o("clamp",cc),o("refract",X9),o("smoothstep",tb),o("faceForward",Z9),o("difference",R9),o("saturate",G9),o("cbrt",U9),o("transpose",A9),o("determinant",S9),o("inverse",M9),o("rand",J9),ob=class extends m{static get type(){return"ConditionalNode"}constructor(e,t,n=null){super(),this.condNode=e,this.ifNode=t,this.elseNode=n}getNodeType(e){const{ifNode:t,elseNode:n}=e.getNodeProperties(this);if(t===0[0])return e.flowBuildStage(this,"setup"),this.getNodeType(e);const s=t.getNodeType(e);if(n!==null){const t=n.getNodeType(e);if(e.getTypeLength(t)>e.getTypeLength(s))return t}return s}setup(e){const a=this.condNode.cache(),n=this.ifNode.cache(),t=this.elseNode?this.elseNode.cache():null,o=e.context.nodeBlock;e.getDataFromNode(n).parentNodeBlock=o,t!==null&&(e.getDataFromNode(t).parentNodeBlock=o);const i=e.context.uniformFlow,s=e.getNodeProperties(this);s.condNode=a,s.ifNode=i?n:n.context({nodeBlock:n}),s.elseNode=t?i?t:t.context({nodeBlock:t}):null}generate(e,t){const s=this.getNodeType(e),a=e.getDataFromNode(this);if(a.nodeProperty!==0[0])return a.nodeProperty;const{condNode:u,ifNode:c,elseNode:o}=e.getNodeProperties(this),l=e.currentFunctionNode,r=t!=="void",i=r?pl(s).build(e):"";a.nodeProperty=i;const d=u.build(e,"bool"),h=e.context.uniformFlow;if(h&&o!==null){const n=c.build(e,s),i=o.build(e,s),a=e.getTernary(d,n,i);return e.format(a,s,t)}e.addFlowCode(`
${e.tab}if ( ${d} ) {

`).addFlowTab();let n=c.build(e,s);if(n&&(r?n=i+" = "+n+";":(n="return "+n+";",l===null&&(console.warn("THREE.TSL: Return statement used in an inline 'Fn()'. Define a layout struct to allow return values."),n="// "+n))),e.removeFlowTab().addFlowCode(e.tab+"	"+n+`

`+e.tab+"}"),o!==null){e.addFlowCode(` else {

`).addFlowTab();let t=o.build(e,s);t&&(r?t=i+" = "+t+";":(t="return "+t+";",l===null&&(console.warn("THREE.TSL: Return statement used in an inline 'Fn()'. Define a layout struct to allow return values."),t="// "+t))),e.removeFlowTab().addFlowCode(e.tab+"	"+t+`

`+e.tab+`}

`)}else e.addFlowCode(`

`);return e.format(i,s,t)}},Nt=L(ob).setParameterLength(2,3),o("select",Nt),K4=class extends m{static get type(){return"ContextNode"}constructor(e,t={}){super(),this.isContextNode=!0,this.node=e,this.value=t}getScope(){return this.node.getScope()}getNodeType(e){return this.node.getNodeType(e)}getMemberType(e,t){return this.node.getMemberType(e,t)}analyze(e){const t=e.getContext();e.setContext({...e.context,...this.value}),this.node.build(e),e.setContext(t)}setup(e){const t=e.getContext();e.setContext({...e.context,...this.value}),this.node.build(e),e.setContext(t)}generate(e,t){const n=e.getContext();e.setContext({...e.context,...this.value});const s=this.node.build(e,t);return e.setContext(n),s}},rb=K4,Qr=L(K4).setParameterLength(1,2),lb=e=>Qr(e,{uniformFlow:!0}),P4=(e,t)=>Qr(e,{nodeName:t});function RD(e,t){return console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.'),P4(e,t)}o("context",Qr),o("label",RD),o("uniformFlow",lb),o("setName",P4),N4=class extends m{static get type(){return"VarNode"}constructor(e,t=null,n=!1){super(),this.node=e,this.name=t,this.global=!0,this.isVarNode=!0,this.readOnly=n,this.parents=!0,this.intent=!1}setIntent(e){return this.intent=e,this}getIntent(){return this.intent}getMemberType(e,t){return this.node.getMemberType(e,t)}getElementType(e){return this.node.getElementType(e)}getNodeType(e){return this.node.getNodeType(e)}getArrayCount(e){return this.node.getArrayCount(e)}build(...e){if(this.intent===!0){const t=e[0],n=t.getNodeProperties(this);if(n.assign!==!0)return this.node.build(...e)}return super.build(...e)}generate(e){const{node:n,name:d,readOnly:a}=this,{renderer:u}=e,r=u.backend.isWebGPUBackend===!0;let s=!1,o=!1;a&&(s=e.isDeterministic(n),o=r?a:s);const c=e.getVectorType(this.getNodeType(e)),h=n.build(e,c),l=e.getVarFromNode(this,d,c,0[0],o),t=e.getPropertyName(l);let i=t;if(o)if(r)i=s?`const ${t}`:`let ${t}`;else{const s=n.getArrayCount(e);i=`const ${e.getVar(l.type,t,s)}`}return e.addLineFlowCode(`${i} = ${h}`,this),t}},b4=N4,j4=L(N4),pb=(e,t=null)=>j4(e,t).toStack(),gb=(e,t=null)=>j4(e,t,!0).toStack(),vb=e=>ou()===null?e:j4(e).setIntent(!0).toStack(),o("toVar",pb),o("toConst",gb),o("toVarIntent",vb),bb=class extends m{static get type(){return"SubBuild"}constructor(e,t,n=null){super(n),this.node=e,this.name=t,this.isSubBuildNode=!0}getNodeType(e){if(this.nodeType!==null)return this.nodeType;e.addSubBuild(this.name);const t=this.node.getNodeType(e);return e.removeSubBuild(),t}build(e,...t){e.addSubBuild(this.name);const n=this.node.build(e,...t);return e.removeSubBuild(),n}},Nr=(e,t,n=null)=>a(new bb(a(e),t,n)),yb=class extends m{static get type(){return"VaryingNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.isVaryingNode=!0,this.interpolationType=null,this.interpolationSampling=null,this.global=!0}setInterpolation(e,t=null){return this.interpolationType=e,this.interpolationSampling=t,this}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}setupVarying(e){const n=e.getNodeProperties(this);let t=n.varying;if(t===0[0]){const s=this.name,o=this.getNodeType(e),i=this.interpolationType,a=this.interpolationSampling;n.varying=t=e.getVaryingFromNode(this,s,o,i,a),n.node=Nr(this.node,"VERTEX")}return t.needsInterpolation||(t.needsInterpolation=e.shaderStage==="fragment"),t}setup(e){this.setupVarying(e),e.flowNodeFromShaderStage(Nc.VERTEX,this.node)}analyze(e){this.setupVarying(e),e.flowNodeFromShaderStage(Nc.VERTEX,this.node)}generate(e){const n=e.getSubBuildProperty("property",e.currentStack),t=e.getNodeProperties(this),s=this.setupVarying(e);if(t[n]===0[0]){const i=this.getNodeType(e),o=e.getPropertyName(s,Nc.VERTEX);e.flowNodeFromShaderStage(Nc.VERTEX,t.node,i,o),t[n]=o}return e.getPropertyName(s)}},so=L(yb).setParameterLength(1,2),wb=e=>so(e),o("toVarying",so),o("toVertexStage",wb),o("varying",(...e)=>(console.warn("THREE.TSL: .varying() has been renamed to .toVarying()."),so(...e))),o("vertexStage",(...e)=>(console.warn("THREE.TSL: .vertexStage() has been renamed to .toVertexStage()."),so(...e))),Ob=f(([e])=>{const t=e.mul(.9478672986).add(.0521327014).pow(2.4),n=e.mul(.0773993808),s=e.lessThanEqual(.04045),o=va(t,n,s);return o}).setLayout({name:"sRGBTransferEOTF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),xb=f(([e])=>{const t=e.pow(.41666).mul(1.055).sub(.055),n=e.mul(12.92),s=e.lessThanEqual(.0031308),o=va(t,n,s);return o}).setLayout({name:"sRGBTransferOETF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Pl="WorkingColorSpace",Eb="OutputColorSpace",O4=class extends de{static get type(){return"ColorSpaceNode"}constructor(e,t,n){super("vec4"),this.colorNode=e,this.source=t,this.target=n}resolveColorSpace(e,t){return t===Pl?v.workingColorSpace:t===Eb?e.context.outputColorSpace||e.renderer.outputColorSpace:t}setup(e){const{colorNode:o}=this,n=this.resolveColorSpace(e,this.source),s=this.resolveColorSpace(e,this.target);let t=o;return v.enabled===!1||n===s||!n||!s?t:(v.getTransfer(n)===c&&(t=we(Ob(t.rgb),t.a)),v.getPrimaries(n)!==v.getPrimaries(s)&&(t=we($s(v._getMatrix(new b,n,s)).mul(t.rgb),t.a)),v.getTransfer(s)===c&&(t=we(xb(t.rgb),t.a)),t)}},Ab=(e,t)=>a(new O4(a(e),Pl,t)),x4=(e,t)=>a(new O4(a(e),t,Pl)),o("workingToColorSpace",Ab),o("colorSpaceToWorking",x4),Mb=class extends yr{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),n=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,n,s)}},Fb=class extends m{static get type(){return"ReferenceBaseNode"}constructor(e,t,n=null,s=null){super(),this.property=e,this.uniformType=t,this.object=n,this.count=s,this.properties=e.split("."),this.reference=n,this.node=null,this.group=null,this.updateType=x.OBJECT}setGroup(e){return this.group=e,this}element(e){return a(new Mb(this,a(e)))}setNodeType(e){const t=R(null,e);this.group!==null&&t.setGroup(this.group),this.node=t}getNodeType(e){return this.node===null&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let n=e[t[0]];for(let e=1;e<t.length;e++)n=n[t[e]];return n}updateReference(e){return this.reference=this.object!==null?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}},Tb=Fb,zb=class extends Tb{static get type(){return"RendererReferenceNode"}constructor(e,t,n=null){super(e,t,n),this.renderer=n,this.setGroup(oe)}updateReference(e){return this.reference=this.renderer!==null?this.renderer:e.renderer,this.reference}},Db=(e,t,n=null)=>a(new zb(e,t,n)),Nb=class extends de{static get type(){return"ToneMappingNode"}constructor(e,t=Rb,n=null){super("vec3"),this.toneMapping=e,this.exposureNode=t,this.colorNode=n}customCacheKey(){return al(this.toneMapping)}setup(e){const t=this.colorNode||e.context.color,n=this.toneMapping;if(n===Ke)return t;let s=null;const o=e.renderer.library.getToneMappingFunction(n);return o!==null?s=we(o(t.rgb,this.exposureNode),t.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",n),s=t),s}},Lb=(e,t,n)=>a(new Nb(e,a(t),a(n))),Rb=Db("toneMappingExposure","float"),o("toneMapping",(e,t,n)=>Lb(t,n,e)),Pb=class extends Nd{static get type(){return"BufferAttributeNode"}constructor(e,t=null,n=0,s=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferStride=n,this.bufferOffset=s,this.usage=$c,this.instanced=!1,this.attribute=null,this.global=!0,e&&e.isBufferAttribute===!0&&(this.attribute=e,this.usage=e.usage,this.instanced=e.isInstancedBufferAttribute)}getHash(e){if(this.bufferStride===0&&this.bufferOffset===0){let t=e.globalCache.getData(this.value);return t===0[0]&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getNodeType(e){return this.bufferType===null&&(this.bufferType=e.getTypeFromAttribute(this.attribute)),this.bufferType}setup(e){if(this.attribute!==null)return;const o=this.getNodeType(e),t=this.value,n=e.getTypeLength(o),i=this.bufferStride||n,a=this.bufferOffset,s=t.isInterleavedBuffer===!0?t:new n2(t,i),r=new Z_(s,n,a);s.setUsage(this.usage),this.attribute=r,this.attribute.isInstancedBufferAttribute=this.instanced}generate(e){const n=this.getNodeType(e),o=e.getBufferAttributeFromNode(this,n),s=e.getPropertyName(o);let t=null;if(e.shaderStage==="vertex"||e.shaderStage==="compute")this.name=s,t=s;else{const s=so(this);t=s.build(e,n)}return t}getInputType(){return"bufferAttribute"}setUsage(e){return this.usage=e,this.attribute&&this.attribute.isBufferAttribute===!0&&(this.attribute.usage=e),this}setInstanced(e){return this.instanced=e,this}},v4=(e,t=null,n=0,s=0)=>a(new Pb(e,t,n,s)),Ib=(e,t=null,n=0,s=0)=>v4(e,t,n,s).setUsage(Ri),E4=(e,t=null,n=0,s=0)=>v4(e,t,n,s).setInstanced(!0),S4=(e,t=null,n=0,s=0)=>Ib(e,t,n,s).setInstanced(!0),o("toAttribute",e=>v4(e.value)),$b=class extends m{static get type(){return"ComputeNode"}constructor(e,t){super("void"),this.isComputeNode=!0,this.computeNode=e,this.workgroupSize=t,this.count=null,this.version=1,this.name="",this.updateBeforeType=x.OBJECT,this.onInitFunction=null}setCount(e){return this.count=e,this}getCount(){return this.count}dispose(){this.dispatchEvent({type:"dispose"})}setName(e){return this.name=e,this}label(e){return console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.'),this.setName(e)}onInit(e){return this.onInitFunction=e,this}updateBefore({renderer:e}){e.compute(this)}setup(e){const t=this.computeNode.build(e);if(t){const n=e.getNodeProperties(this);n.outputComputeNode=t.outputNode,t.outputNode=null}return t}generate(e,t){const{shaderStage:n}=e;if(n==="compute"){const t=this.computeNode.build(e,"void");t!==""&&e.addLineFlowCode(t,this)}else{const s=e.getNodeProperties(this),n=s.outputComputeNode;if(n)return n.build(e,t)}}},M4=(e,t=[64])=>{(t.length===0||t.length>3)&&console.error("THREE.TSL: compute() workgroupSize must have 1, 2, or 3 elements");for(let e=0;e<t.length;e++){const n=t[e];(typeof n!="number"||n<=0||!Number.isInteger(n))&&console.error(`THREE.TSL: compute() workgroupSize element at index [ ${e} ] must be a positive integer`)}for(;t.length<3;)t.push(1);return a(new $b(a(e),t))},Ub=(e,t,n)=>M4(e,n).setCount(t),o("compute",Ub),o("computeKernel",M4),Kb=class extends m{static get type(){return"CacheNode"}constructor(e,t=!0){super(),this.node=e,this.parent=t,this.isCacheNode=!0}getNodeType(e){const t=e.getCache(),n=e.getCacheFromNode(this,this.parent);e.setCache(n);const s=this.node.getNodeType(e);return e.setCache(t),s}build(e,...t){const n=e.getCache(),s=e.getCacheFromNode(this,this.parent);e.setCache(s);const o=this.node.build(e,...t);return e.setCache(n),o}},qb=(e,t)=>a(new Kb(a(e),t)),o("cache",qb),Yb=class extends m{static get type(){return"BypassNode"}constructor(e,t){super(),this.isBypassNode=!0,this.outputNode=e,this.callNode=t}getNodeType(e){return this.outputNode.getNodeType(e)}generate(e){const t=this.callNode.build(e,"void");return t!==""&&e.addLineFlowCode(t,this),this.outputNode.build(e)}},Gb=L(Yb).setParameterLength(2),o("bypass",Gb),F4=class extends m{static get type(){return"RemapNode"}constructor(e,t,n,s=g(0),o=g(1)){super(),this.node=e,this.inLowNode=t,this.inHighNode=n,this.outLowNode=s,this.outHighNode=o,this.doClamp=!0}setup(){const{node:s,inLowNode:t,inHighNode:o,outLowNode:n,outHighNode:i,doClamp:a}=this;let e=s.sub(t).div(o.sub(t));return a===!0&&(e=e.clamp()),e.mul(i.sub(n)).add(n)}},Qb=L(F4,null,null,{doClamp:!1}).setParameterLength(3,5),Zb=L(F4).setParameterLength(3,5),o("remap",Qb),o("remapClamp",Zb),D4=class extends m{static get type(){return"ExpressionNode"}constructor(e="",t="void"){super(t),this.snippet=e}generate(e,t){const n=this.getNodeType(e),s=this.snippet;if(n==="void")e.addLineFlowCode(s,this);else return e.format(s,n,t)}},u4=D4,si=L(D4).setParameterLength(1,2),nj=e=>(e?Nt(e,si("discard")):si("discard")).toStack(),o("discard",nj),sj=class extends de{static get type(){return"RenderOutputNode"}constructor(e,t,n){super("vec4"),this.colorNode=e,this.toneMapping=t,this.outputColorSpace=n,this.isRenderOutputNode=!0}setup({context:e}){let t=this.colorNode||e.color;const s=(this.toneMapping!==null?this.toneMapping:e.toneMapping)||Ke,n=(this.outputColorSpace!==null?this.outputColorSpace:e.outputColorSpace)||$e;return s!==Ke&&(t=t.toneMapping(s)),n!==$e&&n!==v.workingColorSpace&&(t=t.workingToColorSpace(n)),t}},oj=(e,t=null,n=null)=>a(new sj(a(e),t,n)),o("renderOutput",oj),ij=class extends de{static get type(){return"DebugNode"}constructor(e,t=null){super(),this.node=e,this.callback=t}getNodeType(e){return this.node.getNodeType(e)}setup(e){return this.node.build(e)}analyze(e){return this.node.build(e)}generate(e){const n=this.callback,s=this.node.build(e),o="--- TSL debug - "+e.shaderStage+" shader ---",i="-".repeat(o.length);let t="";return t+="// #"+o+`#
`,t+=e.flow.code.replace(/^\t/mg,"")+`
`,t+="/* ... */ "+s+` /* ... */
`,t+="// #"+i+`#
`,n!==null?n(e,t):console.log(t),s}},aj=(e,t=null)=>a(new ij(a(e),t)).toStack(),o("debug",aj),e0=class extends m{static get type(){return"AttributeNode"}constructor(e,t=null){super(t),this.global=!0,this._attributeName=e}getHash(e){return this.getAttributeName(e)}getNodeType(e){let t=this.nodeType;if(t===null){const n=this.getAttributeName(e);if(e.hasGeometryAttribute(n)){const s=e.geometry.getAttribute(n);t=e.getTypeFromAttribute(s)}else t="float"}return t}setAttributeName(e){return this._attributeName=e,this}getAttributeName(){return this._attributeName}generate(e){const t=this.getAttributeName(e),n=this.getNodeType(e),s=e.hasGeometryAttribute(t);if(s===!0){const o=e.geometry.getAttribute(t),s=e.getTypeFromAttribute(o),i=e.getAttribute(t,s);if(e.shaderStage==="vertex")return e.format(i.name,s,n);const a=so(this);return a.build(e,n)}else return console.warn(`AttributeNode: Vertex attribute "${t}" not found on geometry.`),e.generateConst(n)}serialize(e){super.serialize(e),e.global=this.global,e._attributeName=this._attributeName}deserialize(e){super.deserialize(e),this.global=e.global,this._attributeName=e._attributeName}},cj=e0,oo=(e,t=null)=>a(new e0(e,t)),ge=class _IndexNode extends m{static get type(){return"IndexNode"}constructor(e){super("uint"),this.scope=e,this.isIndexNode=!0}generate(e){const o=this.getNodeType(e),t=this.scope;let n;if(t===_IndexNode.VERTEX)n=e.getVertexIndex();else if(t===_IndexNode.INSTANCE)n=e.getInstanceIndex();else if(t===_IndexNode.DRAW)n=e.getDrawIndex();else if(t===_IndexNode.INVOCATION_LOCAL)n=e.getInvocationLocalIndex();else if(t===_IndexNode.INVOCATION_SUBGROUP)n=e.getInvocationSubgroupIndex();else if(t===_IndexNode.SUBGROUP)n=e.getSubgroupIndex();else throw new Error("THREE.IndexNode: Unknown scope: "+t);let s;if(e.shaderStage==="vertex"||e.shaderStage==="compute")s=n;else{const t=so(this);s=t.build(e,o)}return s}},ge.VERTEX="vertex",ge.INSTANCE="instance",ge.SUBGROUP="subgroup",ge.INVOCATION_LOCAL="invocationLocal",ge.INVOCATION_SUBGROUP="invocationSubgroup",ge.DRAW="draw",uj=u(ge,ge.VERTEX),H1=u(ge,ge.INSTANCE),aD=u(ge,ge.SUBGROUP),tD=u(ge,ge.INVOCATION_SUBGROUP),eD=u(ge,ge.INVOCATION_LOCAL),gj=u(ge,ge.DRAW),vj=class extends hv{static get type(){return"ParameterNode"}constructor(e,t=null){super(e,t),this.isParameterNode=!0}getHash(){return this.uuid}generate(){return this.name}},bj=vj,jj=class extends m{static get type(){return"StackNode"}constructor(e=null){super(),this.nodes=[],this.outputNode=null,this.parent=e,this._currentCond=null,this._expressionNode=null,this.isStackNode=!0}getNodeType(e){return this.hasOutput?this.outputNode.getNodeType(e):"void"}getMemberType(e,t){return this.hasOutput?this.outputNode.getMemberType(e,t):"void"}add(e){return e.isNode!==!0?(console.error("THREE.TSL: Invalid node added to stack."),this):(this.nodes.push(e),this)}If(e,t){const n=new Oc(t);return this._currentCond=Nt(e,n),this.add(this._currentCond)}ElseIf(e,t){const s=new Oc(t),n=Nt(e,s);return this._currentCond.elseNode=n,this._currentCond=n,this}Else(e){return this._currentCond.elseNode=new Oc(e),this}Switch(e){return this._expressionNode=a(e),this}Case(...e){const t=[];if(e.length>=2)for(let n=0;n<e.length-1;n++)t.push(this._expressionNode.equal(a(e[n])));else console.error("THREE.TSL: Invalid parameter length. Case() requires at least two parameters.");const o=e[e.length-1],i=new Oc(o);let n=t[0];for(let e=1;e<t.length;e++)n=n.or(t[e]);const s=Nt(n,i);return this._currentCond===null?(this._currentCond=s,this.add(this._currentCond)):(this._currentCond.elseNode=s,this._currentCond=s,this)}Default(e){return this.Else(e),this}setup(e){const t=e.getNodeProperties(this);let n=0;for(const s of this.getChildren()){if(s.isVarNode&&s.intent===!0){const t=e.getNodeProperties(s);if(t.assign!==!0)continue}t["node"+n++]=s}return t.outputNode||null}get hasOutput(){return this.outputNode&&this.outputNode.isNode}build(e,...s){const o=e.currentStack,i=ou();Hc(this),e.currentStack=this;const t=e.buildStage;for(const n of this.nodes){if(n.isVarNode&&n.intent===!0){const t=e.getNodeProperties(n);if(t.assign!==!0)continue}if(t==="setup")n.build(e);else if(t==="analyze")n.build(e,this);else if(t==="generate"){const s=e.getDataFromNode(n,"any").stages,t=s&&s[e.shaderStage];if(n.isVarNode&&t&&t.length===1&&t[0]&&t[0].isStackNode)continue;n.build(e,"void")}}let n;return this.hasOutput?n=this.outputNode.build(e,...s):n=super.build(e,...s),Hc(i),e.currentStack=o,n}},T1=L(jj).setParameterLength(0,1),_j=class extends m{static get type(){return"LoopNode"}constructor(e=[]){super(),this.params=e}getVarName(e){return String.fromCharCode("i".charCodeAt(0)+e)}getProperties(e){const t=e.getNodeProperties(this);if(t.stackNode!==0[0])return t;const n={};for(let e=0,o=this.params.length-1;e<o;e++){const t=this.params[e],s=t.isNode!==!0&&t.name||this.getVarName(e),i=t.isNode!==!0&&t.type||"int";n[s]=si(s,i)}const o=e.addStack();t.returnsNode=this.params[this.params.length-1](n,e),t.stackNode=o;const s=this.params[0];return s.isNode!==!0&&typeof s.update=="function"&&(t.updateNode=f(this.params[0].update)(n)),e.removeStack(),t}getNodeType(e){const{returnsNode:t}=this.getProperties(e);return t?t.getNodeType(e):"void"}setup(e){this.getProperties(e)}generate(e){const t=this.getProperties(e),n=this.params,s=t.stackNode;for(let d=0,m=n.length-1;d<m;d++){const c=n[d];let h=!1,s=null,o=null,l=null,i=null,a=null,r=null;c.isNode?c.getNodeType(e)==="bool"?(h=!0,i="bool",o=c.build(e,i)):(i="int",l=this.getVarName(d),s="0",o=c.build(e,i),a="<"):(i=c.type||"int",l=c.name||this.getVarName(d),s=c.start,o=c.end,a=c.condition,r=c.update,typeof s=="number"?s=e.generateConst(i,s):s&&s.isNode&&(s=s.build(e,i)),typeof o=="number"?o=e.generateConst(i,o):o&&o.isNode&&(o=o.build(e,i)),s!==0[0]&&o===0[0]?(s=s+" - 1",o="0",a=">="):o!==0[0]&&s===0[0]&&(s="0",a="<"),a===0[0]&&(Number(s)>Number(o)?a=">=":a="<"));let u;if(h)u=`while ( ${o} )`;else{const d={start:s,end:o,condition:a},h=d.start,m=d.end;let n;const c=()=>a.includes("<")?"+=":"-=";if(r!=null)switch(typeof r){case"function":const s=e.flowStagesNode(t.updateNode,"void"),o=s.code.replace(/\t|;/g,"");n=o;break;case"number":n=l+" "+c()+" "+e.generateConst(i,r);break;case"string":n=l+" "+r;break;default:r.isNode?n=l+" "+c()+" "+r.build(e):(console.error("THREE.TSL: 'Loop( { update: ... } )' is not a function, string or number."),n="break /* invalid update */")}else i==="int"||i==="uint"?r=a.includes("<")?"++":"--":r=c()+" 1.",n=l+" "+r;const f=e.getVar(i,l)+" = "+h,p=l+" "+a+" "+m;u=`for ( ${f}; ${p}; ${n} )`}e.addFlowCode((d===0?`
`:"")+e.tab+u+` {

`).addFlowTab()}const o=s.build(e,"void"),i=t.returnsNode?t.returnsNode.build(e):"";e.removeFlowTab().addFlowCode(`
`+e.tab+o);for(let t=0,n=this.params.length-1;t<n;t++)e.addFlowCode((t===0?"":e.tab)+`}

`).removeFlowTab();return e.addFlowTab(),i}},to=(...e)=>a(new _j(Li(e,"int"))).toStack(),Oj=()=>si("break").toStack(),m2=new $r,eo=class _Object3DNode extends m{static get type(){return"Object3DNode"}constructor(e,t=null){super(),this.scope=e,this.object3d=t,this.updateType=x.OBJECT,this.uniformNode=new Dl(null)}getNodeType(){const e=this.scope;if(e===_Object3DNode.WORLD_MATRIX)return"mat4";if(e===_Object3DNode.POSITION||e===_Object3DNode.VIEW_POSITION||e===_Object3DNode.DIRECTION||e===_Object3DNode.SCALE)return"vec3";if(e===_Object3DNode.RADIUS)return"float"}update(e){const s=this.object3d,n=this.uniformNode,o=this.scope;if(o===_Object3DNode.WORLD_MATRIX)n.value=s.matrixWorld;else if(o===_Object3DNode.POSITION)n.value=n.value||new t,n.value.setFromMatrixPosition(s.matrixWorld);else if(o===_Object3DNode.SCALE)n.value=n.value||new t,n.value.setFromMatrixScale(s.matrixWorld);else if(o===_Object3DNode.DIRECTION)n.value=n.value||new t,s.getWorldDirection(n.value);else if(o===_Object3DNode.VIEW_POSITION){const o=e.camera;n.value=n.value||new t,n.value.setFromMatrixPosition(s.matrixWorld),n.value.applyMatrix4(o.matrixWorldInverse)}else if(o===_Object3DNode.RADIUS){const t=e.object.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),m2.copy(t.boundingSphere).applyMatrix4(s.matrixWorld),n.value=m2.radius}}generate(e){const t=this.scope;return t===_Object3DNode.WORLD_MATRIX?this.uniformNode.nodeType="mat4":t===_Object3DNode.POSITION||t===_Object3DNode.VIEW_POSITION||t===_Object3DNode.DIRECTION||t===_Object3DNode.SCALE?this.uniformNode.nodeType="vec3":t===_Object3DNode.RADIUS&&(this.uniformNode.nodeType="float"),this.uniformNode.build(e)}serialize(e){super.serialize(e),e.scope=this.scope}deserialize(e){super.deserialize(e),this.scope=e.scope}},eo.WORLD_MATRIX="worldMatrix",eo.POSITION="position",eo.SCALE="scale",eo.VIEW_POSITION="viewPosition",eo.DIRECTION="direction",eo.RADIUS="radius",Ej=eo,z2=class extends Dl{static get type(){return"BufferNode"}constructor(e,t,n=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferCount=n}getElementType(e){return this.getNodeType(e)}getInputType(){return"buffer"}},Aj=z2,P2=(e,t,n)=>a(new z2(e,t,n)),Mj=class extends yr{static get type(){return"UniformArrayElementNode"}constructor(e,t){super(e,t),this.isArrayBufferElementNode=!0}generate(e){const t=super.generate(e),n=this.getNodeType(),s=this.node.getPaddedType();return e.format(t,s,n)}},Fj=class extends Aj{static get type(){return"UniformArrayNode"}constructor(e,t=null){super(null),this.array=e,this.elementType=t===null?vd(e[0]):t,this.paddedType=this.getPaddedType(),this.updateType=x.RENDER,this.isArrayBufferNode=!0}getNodeType(){return this.paddedType}getElementType(){return this.elementType}getPaddedType(){const t=this.elementType;let e="vec4";return t==="mat2"?e="mat2":/mat/.test(t)===!0?e="mat4":t.charAt(0)==="i"?e="ivec4":t.charAt(0)==="u"&&(e="uvec4"),e}update(){const{array:t,value:e}=this,n=this.elementType;if(n==="float"||n==="int"||n==="uint")for(let n=0;n<t.length;n++){const s=n*4;e[s]=t[n]}else if(n==="color")for(let n=0;n<t.length;n++){const s=n*4,o=t[n];e[s]=o.r,e[s+1]=o.g,e[s+2]=o.b||0}else if(n==="mat2")for(let n=0;n<t.length;n++){const s=n*4,o=t[n];e[s]=o.elements[0],e[s+1]=o.elements[1],e[s+2]=o.elements[2],e[s+3]=o.elements[3]}else if(n==="mat3")for(let o=0;o<t.length;o++){const n=o*16,s=t[o];e[n]=s.elements[0],e[n+1]=s.elements[1],e[n+2]=s.elements[2],e[n+4]=s.elements[3],e[n+5]=s.elements[4],e[n+6]=s.elements[5],e[n+8]=s.elements[6],e[n+9]=s.elements[7],e[n+10]=s.elements[8],e[n+15]=1}else if(n==="mat4")for(let n=0;n<t.length;n++){const o=n*16,s=t[n];for(let t=0;t<s.elements.length;t++)e[o+t]=s.elements[t]}else for(let n=0;n<t.length;n++){const s=n*4,o=t[n];e[s]=o.x,e[s+1]=o.y,e[s+2]=o.z||0,e[s+3]=o.w||0}}setup(e){const n=this.array.length,s=this.elementType;let t=Float32Array;const o=this.paddedType,i=e.getTypeLength(o);return s.charAt(0)==="i"&&(t=Int32Array),s.charAt(0)==="u"&&(t=Uint32Array),this.value=new t(n*i),this.bufferCount=n,this.bufferType=o,super.setup(e)}element(e){return a(new Mj(this,a(e)))}},wn=(e,t)=>a(new Fj(e,t)),zj=class extends m{constructor(e){super("float"),this.name=e,this.isBuiltinNode=!0}generate(){return this.name}},gc=L(zj).setParameterLength(1),De=class _ScreenNode extends m{static get type(){return"ScreenNode"}constructor(e){super(),this.scope=e,this._output=null,this.isViewportNode=!0}getNodeType(){return this.scope===_ScreenNode.DPR?"float":this.scope===_ScreenNode.VIEWPORT?"vec4":"vec2"}getUpdateType(){let e=x.NONE;return(this.scope===_ScreenNode.SIZE||this.scope===_ScreenNode.VIEWPORT||this.scope===_ScreenNode.DPR)&&(e=x.RENDER),this.updateType=e,e}update({renderer:e}){const t=e.getRenderTarget();this.scope===_ScreenNode.VIEWPORT?t!==null?Cc.copy(t.viewport):(e.getViewport(Cc),Cc.multiplyScalar(e.getPixelRatio())):this.scope===_ScreenNode.DPR?this._output.value=e.getPixelRatio():t!==null?(xc.width=t.width,xc.height=t.height):e.getDrawingBufferSize(xc)}setup(){const t=this.scope;let e=null;return t===_ScreenNode.SIZE?e=R(xc||(xc=new w)):t===_ScreenNode.VIEWPORT?e=R(Cc||(Cc=new j)):t===_ScreenNode.DPR?e=R(1):e=re(N3.div(D3)),this._output=e,e}generate(e){if(this.scope===_ScreenNode.COORDINATE){let t=e.getFragCoord();if(e.isFlipY()){const n=e.getNodeProperties(D3).outputNode.build(e);t=`${e.getType("vec2")}( ${t}.x, ${n}.y - ${t}.y )`}return t}return super.generate(e)}},De.COORDINATE="coordinate",De.VIEWPORT="viewport",De.SIZE="size",De.UV="uv",De.DPR="dpr",qz=u(De,De.DPR),Vo=u(De,De.UV),D3=u(De,De.SIZE),N3=u(De,De.COORDINATE),I3=u(De,De.VIEWPORT),Rz=I3.zw,Dz=N3.sub(I3.xy),B3=R(0,"uint").setName("u_cameraIndex").setGroup(ku("cameraIndex")).toVarying("v_cameraIndex"),Us=R("float").setName("cameraNear").setGroup(oe).onRenderUpdate(({camera:e})=>e.near),Ms=R("float").setName("cameraFar").setGroup(oe).onRenderUpdate(({camera:e})=>e.far),Yj=f(({camera:e})=>{let t;if(e.isArrayCamera&&e.cameras.length>0){const n=[];for(const t of e.cameras)n.push(t.projectionMatrix);const s=wn(n).setGroup(oe).setName("cameraProjectionMatrices");t=s.element(e.isMultiViewCamera?gc("gl_ViewID_OVR"):B3).toConst("cameraProjectionMatrix")}else t=R("mat4").setName("cameraProjectionMatrix").setGroup(oe).onRenderUpdate(({camera:e})=>e.projectionMatrix);return t}).once()(),Io=f(({camera:e})=>{let t;if(e.isArrayCamera&&e.cameras.length>0){const n=[];for(const t of e.cameras)n.push(t.matrixWorldInverse);const s=wn(n).setGroup(oe).setName("cameraViewMatrices");t=s.element(e.isMultiViewCamera?gc("gl_ViewID_OVR"):B3).toConst("cameraViewMatrix")}else t=R("mat4").setName("cameraViewMatrix").setGroup(oe).onRenderUpdate(({camera:e})=>e.matrixWorldInverse);return t}).once()(),Ot=class extends Ej{static get type(){return"ModelNode"}constructor(e){super(e)}update(e){this.object3d=e.object,super.update(e)}},Ez=u(Ot,Ot.DIRECTION),Pu=u(Ot,Ot.WORLD_MATRIX),xz=u(Ot,Ot.POSITION),wz=u(Ot,Ot.SCALE),_z=u(Ot,Ot.VIEW_POSITION),yz=u(Ot,Ot.RADIUS),sy=R(new b).onObjectUpdate(({object:e},t)=>t.value.getNormalMatrix(e.matrixWorld)),Q3=f(e=>e.renderer.overrideNodes.modelViewMatrix||iy).once()().toVar("modelViewMatrix"),iy=Io.mul(Pu),eh=f(e=>(e.context.isHighPrecisionModelViewMatrix=!0,R("mat4").onObjectUpdate(({object:e,camera:t})=>e.modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,e.matrixWorld)))).once()().toVar("highpModelViewMatrix"),th=f(e=>{const t=e.context.isHighPrecisionModelViewMatrix;return R("mat3").onObjectUpdate(({object:e,camera:n})=>(t!==!0&&e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix)))}).once()().toVar("highpModelNormalViewMatrix"),oh=oo("position","vec3"),Ue=oh.toVarying("positionLocal"),lh=oh.toVarying("positionPrevious"),uh=f(()=>{const e=Ue.transformDirection(Pu).toVarying("v_positionWorldDirection");return e.normalize().toVar("positionWorldDirection")},"vec3").once(["POSITION"])(),fe=f(e=>e.context.setupPositionView().toVarying("v_positionView"),"vec3").once(["POSITION"])(),_h=fe.negate().toVarying("v_positionViewDirection").normalize().toVar("positionViewDirection"),Ch=f(([e=uh])=>{const t=e.z.atan(e.x).mul(1/(Math.PI*2)).add(.5),n=e.y.clamp(-1,1).asin().mul(1/Math.PI).add(.5);return re(t,n)}),py=class extends m{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(e){if(e.shaderStage!=="fragment")return"true";const{material:t}=e;return t.side===B?"false":e.getFrontFacing()}},gy=u(py),Sh=g(gy).mul(2).sub(1),Pc=f(([e],{material:t})=>{const n=t.side;return n===B?e=e.mul(-1):n===Fe&&(e=e.mul(Sh)),e}),jy=oo("normal","vec3"),en=f(e=>e.geometry.hasAttribute("normal")===!1?(console.warn('THREE.TSL: Vertex attribute "normal" not found on geometry.'),h(0,1,0)):jy,"vec3").once()().toVar("normalLocal"),_y=fe.dFdx().cross(fe.dFdy()).normalize().toVar("normalFlat"),Nh=f(e=>{let t;return e.material.flatShading===!0?t=_y:t=Ph(en).toVarying("v_normalViewGeometry").normalize(),t},"vec3").once()().toVar("normalViewGeometry"),Oy=f(e=>{let t=Nh.transformDirection(Io);return e.material.flatShading!==!0&&(t=t.toVarying("v_normalWorldGeometry")),t.normalize().toVar("normalWorldGeometry")},"vec3").once()(),xt=f(({subBuildFn:e,material:t,context:n})=>{let s;return e==="NORMAL"||e==="VERTEX"?(s=Nh,t.flatShading!==!0&&(s=Pc(s))):s=n.setupNormal().context({getUV:null}),s},"vec3").once(["NORMAL","VERTEX"])().toVar("normalView"),Cy=xt.transformDirection(Io).toVar("normalWorld"),Ey=f(({subBuildFn:e,context:t})=>{let n;return e==="NORMAL"||e==="VERTEX"?n=xt:n=t.setupClearcoatNormal().context({getUV:null}),n},"vec3").once(["NORMAL","VERTEX"])().toVar("clearcoatNormalView"),ky=f(([e,t=Pu])=>{const n=$s(t),s=e.div(h(n[0].dot(n[0]),n[1].dot(n[1]),n[2].dot(n[2])));return n.mul(s).xyz}),Ph=f(([e],t)=>{const n=t.renderer.overrideNodes.modelNormalViewMatrix;if(n!==null)return n.transformDirection(e);const s=sy.mul(e);return Io.transformDirection(s)}),ez=f(()=>(console.warn('THREE.TSL: "transformedNormalView" is deprecated. Use "normalView" instead.'),xt)).once(["NORMAL","VERTEX"])(),JT=f(()=>(console.warn('THREE.TSL: "transformedNormalWorld" is deprecated. Use "normalWorld" instead.'),Cy)).once(["NORMAL","VERTEX"])(),ZT=f(()=>(console.warn('THREE.TSL: "transformedClearcoatNormalView" is deprecated. Use "clearcoatNormalView" instead.'),Ey)).once(["NORMAL","VERTEX"])(),Ty=class extends Dl{static get type(){return"MaxMipLevelNode"}constructor(e){super(0),this._textureNode=e,this.updateType=x.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const n=this.texture,e=n.images,t=e&&e.length>0?e[0]&&e[0].image||e[0]:n.image;if(t&&t.width!==0[0]){const{width:e,height:n}=t;this.value=Math.log2(Math.max(e,n))}}},zy=L(Ty).setParameterLength(1),Ka=(e=0)=>oo("uv"+(e>0?e:""),"vec2"),Ny=class extends m{static get type(){return"TextureSizeNode"}constructor(e,t=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=e,this.levelNode=t}generate(e,t){const n=this.textureNode.build(e,"property"),s=this.levelNode===null?"0":this.levelNode.build(e,"int");return e.format(`${e.getMethod("textureDimensions")}( ${n}, ${s} )`,this.getNodeType(e),t)}},Ro=L(Ny).setParameterLength(1,2),Vh=new Te,Uh=class extends Dl{static get type(){return"TextureNode"}constructor(e=Vh,t=null,n=null,s=null){super(e),this.isTextureNode=!0,this.uvNode=t,this.levelNode=n,this.biasNode=s,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.offsetNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=x.NONE,this.referenceNode=null,this._value=e,this._matrixUniform=null,this.setUpdateMatrix(t===null)}set value(e){this.referenceNode?this.referenceNode.value=e:this._value=e}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return this.value.isDepthTexture===!0?"float":this.value.type===I?"uvec4":this.value.type===ue?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return Ka(this.value.channel)}updateReference(){return this.value}getTransformedUV(e){return this._matrixUniform===null&&(this._matrixUniform=R(this.value.matrix)),this._matrixUniform.mul(h(e,1)).xy}setUpdateMatrix(e){return this.updateMatrix=e,this.updateType=e?x.OBJECT:x.NONE,this}setupUV(e,t){const n=this.value;return e.isFlipY()&&(n.image instanceof ImageBitmap&&n.flipY===!0||n.isRenderTargetTexture===!0||n.isFramebufferTexture===!0||n.isDepthTexture===!0)&&(this.sampler?t=t.flipY():t=t.setY(ne(Ro(this,this.levelNode).y).sub(t.y).sub(1))),t}setup(e){const n=e.getNodeProperties(this);n.referenceNode=this.referenceNode;const o=this.value;if(!o||o.isTexture!==!0)throw new Error("THREE.TSL: `texture( value )` function expects a valid instance of THREE.Texture().");let t=this.uvNode;(t===null||e.context.forceUVContext===!0)&&e.context.getUV&&(t=e.context.getUV(this,e)),t||(t=this.getDefaultUV()),this.updateMatrix===!0&&(t=this.getTransformedUV(t)),t=this.setupUV(e,t);let s=this.levelNode;s===null&&e.context.getTextureLevel&&(s=e.context.getTextureLevel(this)),n.uvNode=t,n.levelNode=s,n.biasNode=this.biasNode,n.compareNode=this.compareNode,n.gradNode=this.gradNode,n.depthNode=this.depthNode,n.offsetNode=this.offsetNode}generateUV(e,t){return t.build(e,this.sampler===!0?"vec2":"ivec2")}generateOffset(e,t){return t.build(e,"ivec2")}generateSnippet(e,t,n,s,o,i,a,r,c){const d=this.value;let l;return s?l=e.generateTextureLevel(d,t,n,s,i,c):o?l=e.generateTextureBias(d,t,n,o,i,c):r?l=e.generateTextureGrad(d,t,n,r,i,c):a?l=e.generateTextureCompare(d,t,n,a,i,c):this.sampler===!1?l=e.generateTextureLoad(d,t,n,i,c):l=e.generateTexture(d,t,n,i,c),l}generate(e,t){const r=this.value,c=e.getNodeProperties(this),s=super.generate(e,"property");if(/^sampler/.test(t))return s+"_sampler";if(e.isReference(t))return s;const o=e.getDataFromNode(this);let n=o.propertyName;if(n===0[0]){const{uvNode:m,levelNode:a,biasNode:r,compareNode:l,depthNode:d,gradNode:t,offsetNode:u}=c,y=this.generateUV(e,m),h=a?a.build(e,"float"):null,f=r?r.build(e,"float"):null,p=d?d.build(e,"int"):null,g=l?l.build(e,"float"):null,v=t?[t[0].build(e,"vec2"),t[1].build(e,"vec2")]:null,b=u?this.generateOffset(e,u):null,j=e.getVarFromNode(this);n=e.getPropertyName(j);const i=this.generateSnippet(e,s,y,h,f,p,g,v,b);e.addLineFlowCode(`${n} = ${i}`,this),o.snippet=i,o.propertyName=n}let i=n;const a=this.getNodeType(e);return e.needsToWorkingColorSpace(r)&&(i=x4(si(i,a),r.colorSpace).setup(e).build(e,a)),e.format(i,a,t)}setSampler(e){return this.sampler=e,this}getSampler(){return this.sampler}uv(e){return console.warn("THREE.TextureNode: .uv() has been renamed. Use .sample() instead."),this.sample(e)}sample(e){const t=this.clone();return t.uvNode=a(e),t.referenceNode=this.getBase(),a(t)}load(e){return this.sample(e).setSampler(!1)}blur(e){const t=this.clone();t.biasNode=a(e).mul(zy(t)),t.referenceNode=this.getBase();const n=t.value;return t.generateMipmaps===!1&&(n&&n.generateMipmaps===!1||n.minFilter===V||n.magFilter===V)&&(console.warn("THREE.TSL: texture().blur() requires mipmaps and sampling. Use .generateMipmaps=true and .minFilter/.magFilter=THREE.LinearFilter in the Texture."),t.biasNode=null),a(t)}level(e){const t=this.clone();return t.levelNode=a(e),t.referenceNode=this.getBase(),a(t)}size(e){return Ro(this,e)}bias(e){const t=this.clone();return t.biasNode=a(e),t.referenceNode=this.getBase(),a(t)}getBase(){return this.referenceNode?this.referenceNode.getBase():this}compare(e){const t=this.clone();return t.compareNode=a(e),t.referenceNode=this.getBase(),a(t)}grad(e,t){const n=this.clone();return n.gradNode=[a(e),a(t)],n.referenceNode=this.getBase(),a(n)}depth(e){const t=this.clone();return t.depthNode=a(e),t.referenceNode=this.getBase(),a(t)}offset(e){const t=this.clone();return t.offsetNode=a(e),t.referenceNode=this.getBase(),a(t)}serialize(e){super.serialize(e),e.value=this.value.toJSON(e.meta).uuid,e.sampler=this.sampler,e.updateMatrix=this.updateMatrix,e.updateType=this.updateType}deserialize(e){super.deserialize(e),this.value=e.meta.textures[e.value],this.sampler=e.sampler,this.updateMatrix=e.updateMatrix,this.updateType=e.updateType}update(){const e=this.value,t=this._matrixUniform;t!==null&&(t.value=e.matrix),e.matrixAutoUpdate===!0&&e.updateMatrix()}clone(){const e=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return e.sampler=this.sampler,e.depthNode=this.depthNode,e.compareNode=this.compareNode,e.gradNode=this.gradNode,e.offsetNode=this.offsetNode,e}},$a=Uh,Iy=L(Uh).setParameterLength(1,4).setName("texture"),Wt=(e=Vh,t=null,n=null,s=null)=>{let o;return e&&e.isTextureNode===!0?(o=a(e.clone()),o.referenceNode=e.getBase(),t!==null&&(o.uvNode=a(t)),n!==null&&(o.levelNode=a(n)),s!==null&&(o.biasNode=a(s))):o=Iy(e,t,n,s),o},zt=(...e)=>Wt(...e).setSampler(!1),No=new w,Wy=class extends $a{static get type(){return"ViewportTextureNode"}constructor(e=Vo,t=null,n=null){let s=null;n===null?(s=new Cw,s.minFilter=Be,n=s):s=n,super(n,e,t),this.generateMipmaps=!1,this.defaultFramebuffer=s,this.isOutputTextureNode=!0,this.updateBeforeType=x.FRAME,this._cacheTextures=new WeakMap}getTextureForReference(e=null){let n,t;if(this.referenceNode?(n=this.referenceNode.defaultFramebuffer,t=this.referenceNode._cacheTextures):(n=this.defaultFramebuffer,t=this._cacheTextures),e===null)return n;if(t.has(e)===!1){const s=n.clone();t.set(e,s)}return t.get(e)}updateReference(e){const t=e.renderer.getRenderTarget();return this.value=this.getTextureForReference(t),this.value}updateBefore(e){const s=e.renderer,n=s.getRenderTarget();n===null?s.getDrawingBufferSize(No):No.set(n.width,n.height);const t=this.getTextureForReference(n);(t.image.width!==No.width||t.image.height!==No.height)&&(t.image.width=No.width,t.image.height=No.height,t.needsUpdate=!0);const o=t.generateMipmaps;t.generateMipmaps=this.generateMipmaps,s.copyFramebufferToTexture(t),t.generateMipmaps=o}clone(){const e=new this.constructor(this.uvNode,this.levelNode,this.value);return e.generateMipmaps=this.generateMipmaps,e}},Uy=Wy,tl=null,qy=class extends Uy{static get type(){return"ViewportDepthTextureNode"}constructor(e=Vo,t=null){tl===null&&(tl=new At),super(e,t,tl)}getTextureForReference(){return tl}},Yy=L(qy).setParameterLength(0,2),kn=class _ViewportDepthNode extends m{static get type(){return"ViewportDepthNode"}constructor(e,t=null){super("float"),this.scope=e,this.valueNode=t,this.isViewportDepthNode=!0}generate(e){const{scope:t}=this;return t===_ViewportDepthNode.DEPTH_BASE?e.getFragDepth():super.generate(e)}setup({camera:e}){const{scope:s}=this,n=this.valueNode;let t=null;if(s===_ViewportDepthNode.DEPTH_BASE)n!==null&&(t=nm().assign(n));else if(s===_ViewportDepthNode.DEPTH)e.isPerspectiveCamera?t=Qy(fe.z,Us,Ms):t=Sa(fe.z,Us,Ms);else if(s===_ViewportDepthNode.LINEAR_DEPTH)if(n!==null)if(e.isPerspectiveCamera){const e=tm(n,Us,Ms);t=Sa(e,Us,Ms)}else t=n;else t=Sa(fe.z,Us,Ms);return t}},kn.DEPTH_BASE="depthBase",kn.DEPTH="depth",kn.LINEAR_DEPTH="linearDepth",Sa=(e,t,n)=>e.add(t).div(t.sub(n)),Qy=(e,t,n)=>t.add(e).mul(n).div(n.sub(t).mul(e)),tm=(e,t,n)=>t.mul(n).div(n.sub(t).mul(e).sub(n)),Jy=(e,t,n)=>{t=t.max(1e-6).toVar();const s=ro(e.negate().div(t)),o=ro(n.div(t));return s.div(o)},nm=L(kn,kn.DEPTH_BASE),sm=u(kn,kn.DEPTH),n_=L(kn,kn.LINEAR_DEPTH).setParameterLength(0,1),VT=n_(Yy()),sm.assign=e=>nm(e),IT=new Mn,YS=new t,kD=new t,gD=new t,DT=new W,FT=new t(0,0,-1),AT=new j,kT=new t,ET=new t,CT=new j,OT=new w,p_=new zs,wT=Vo.flipX(),p_.depthTexture=new At(1,1),im=new Hn,iu=new W,j_=R(0).onReference(({material:e})=>e).onObjectUpdate(({material:e})=>e.refractionRatio),am=R(new W).onReference(function(e){return e.material}).onObjectUpdate(function({material:e,scene:t}){const n=t.environment!==null&&e.envMap===null?t.environmentRotation:e.envMapRotation;return n?(im.copy(n),iu.makeRotationFromEuler(im)):iu.identity(),iu}),__=_h.negate().reflect(xt),w_=_h.negate().refract(xt,j_),O_=__.transformDirection(Io).toVar("reflectVector"),x_=w_.transformDirection(Io).toVar("reflectVector"),C_=new oa,E_=class extends $a{static get type(){return"CubeTextureNode"}constructor(e,t=null,n=null,s=null){super(e,t,n,s),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const e=this.value;return e.mapping===Zt?O_:e.mapping===Qt?x_:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',e.mapping),h(0,0,0))}setUpdateMatrix(){}setupUV(e,t){const n=this.value;return(e.renderer.coordinateSystem===Os||!n.isRenderTargetTexture)&&(t=h(t.x.negate(),t.yz)),am.mul(t)}generateUV(e,t){return t.build(e,"vec3")}},k_=L(E_).setParameterLength(1,4).setName("cubeTexture"),Aa=(e=C_,t=null,n=null,s=null)=>{let o;return e&&e.isCubeTextureNode===!0?(o=a(e.clone()),o.referenceNode=e,t!==null&&(o.uvNode=a(t)),n!==null&&(o.levelNode=a(n)),s!==null&&(o.biasNode=a(s))):o=k_(e,t,n,s),o},S_=class extends yr{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),n=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,n,s)}},tu=class extends m{static get type(){return"ReferenceNode"}constructor(e,t,n=null,s=null){super(),this.property=e,this.uniformType=t,this.object=n,this.count=s,this.properties=e.split("."),this.reference=n,this.node=null,this.group=null,this.name=null,this.updateType=x.OBJECT}element(e){return a(new S_(this,a(e)))}setGroup(e){return this.group=e,this}setName(e){return this.name=e,this}label(e){return console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.'),this.setName(e)}setNodeType(e){let t=null;this.count!==null?t=P2(null,e,this.count):Array.isArray(this.getValueFromReference())?t=wn(null,e):e==="texture"?t=Wt(null):e==="cubeTexture"?t=Aa(null):t=R(null,e),this.group!==null&&t.setGroup(this.group),this.name!==null&&t.setName(this.name),this.node=t}getNodeType(e){return this.node===null&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let n=e[t[0]];for(let e=1;e<t.length;e++)n=n[t[e]];return n}updateReference(e){return this.reference=this.object!==null?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}},F_=tu,bt=(e,t,n)=>a(new tu(e,t,n)),lm=(e,t,n,s)=>a(new tu(e,t,s,n)),D_=class extends F_{static get type(){return"MaterialReferenceNode"}constructor(e,t,n=null){super(e,t,n),this.material=n,this.isMaterialReferenceNode=!0}updateReference(e){return this.reference=this.material!==null?this.material:e.material,this.reference}},Mo=(e,t,n=null)=>a(new D_(e,t,n)),um=Ka(),R_=fe.dFdx(),P_=fe.dFdy(),fm=um.dFdx(),vm=um.dFdy(),Cm=xt,Em=P_.cross(Cm),km=Cm.cross(R_),$d=Em.mul(fm.x).add(km.mul(vm.x)),Bd=Em.mul(fm.y).add(km.mul(vm.y)),Dm=$d.dot($d).max(Bd.dot(Bd)),Rm=Dm.equal(0).select(0,Dm.inverseSqrt()),Y_=$d.mul(Rm).toVar("tangentViewFrame"),G_=Bd.mul(Rm).toVar("bitangentViewFrame"),Pm=f(e=>(e.geometry.hasAttribute("tangent")===!1&&e.geometry.computeTangents(),oo("tangent","vec4")))(),Ld=Pm.xyz.toVar("tangentLocal"),Vm=f(({subBuildFn:e,geometry:t,material:n})=>{let s;return e==="VERTEX"||t.hasAttribute("tangent")?s=Q3.mul(we(Ld,0)).xyz.toVarying("v_tangentView").normalize():s=Y_,n.flatShading!==!0&&(s=Pc(s)),s},"vec3").once(["NORMAL","VERTEX"])().toVar("tangentView"),J_=f(([e,t],{subBuildFn:n,material:s})=>{let o=e.mul(Pm.w).xyz;return n==="NORMAL"&&s.flatShading!==!0&&(o=o.toVarying(t)),o}).once(["NORMAL"]),ew=f(({subBuildFn:e,geometry:t,material:n})=>{let s;return e==="VERTEX"||t.hasAttribute("tangent")?s=J_(xt.cross(Vm),"v_bitangentView").normalize():s=G_,n.flatShading!==!0&&(s=Pc(s)),s},"vec3").once(["NORMAL","VERTEX"])().toVar("bitangentView"),tw=$s(Vm,ew,xt).toVar("TBNViewMatrix"),nw=class extends de{static get type(){return"NormalMapNode"}constructor(e,t=null){super("vec3"),this.node=e,this.scaleNode=t,this.normalMapType=Pd}setup({material:e}){const{normalMapType:s,scaleNode:o}=this;let t=this.node.mul(2).sub(1);if(o!==null){let n=o;e.flatShading===!0&&(n=Pc(n)),t=h(t.xy.mul(n),t.z)}let n=null;return s===Nm?n=Ph(t):s===Pd?n=tw.mul(t).normalize():(console.error(`THREE.NodeMaterial: Unsupported normal map type: ${s}`),n=xt),n}},Wm=L(nw).setParameterLength(1,2),ow=f(({textureNode:e,bumpScale:t})=>{const n=t=>e.cache().context({getUV:e=>t(e.uvNode||Ka()),forceUVContext:!0}),s=g(n(e=>e));return re(g(n(e=>e.add(e.dFdx()))).sub(s),g(n(e=>e.add(e.dFdy()))).sub(s)).mul(t)}),iw=f(e=>{const{surf_pos:t,surf_norm:n,dHdxy:s}=e,o=t.dFdx().normalize(),c=t.dFdy().normalize(),i=n,a=c.cross(i),l=i.cross(o),r=o.dot(a).mul(Sh),d=r.sign().mul(s.x.mul(a).add(s.y.mul(l)));return r.abs().mul(n).sub(d).normalize()}),aw=class extends de{static get type(){return"BumpMapNode"}constructor(e,t=null){super("vec3"),this.textureNode=e,this.scaleNode=t}setup(){const e=this.scaleNode!==null?this.scaleNode:1,t=ow({textureNode:this.textureNode,bumpScale:e});return iw({surf_pos:fe,surf_norm:xt,dHdxy:t})}},rw=L(aw).setParameterLength(1,2),Um=new Map,i=class _MaterialNode extends m{static get type(){return"MaterialNode"}constructor(e){super(),this.scope=e}getCache(e,t){let n=Um.get(e);return n===0[0]&&(n=Mo(e,t),Um.set(e,n)),n}getFloat(e){return this.getCache(e,"float")}getColor(e){return this.getCache(e,"color")}getTexture(e){return this.getCache(e==="map"?"map":e+"Map","texture")}setup(e){const s=e.context.material,t=this.scope;let n=null;if(t===_MaterialNode.COLOR){const e=s.color!==0[0]?this.getColor(t):h();s.map&&s.map.isTexture===!0?n=e.mul(this.getTexture("map")):n=e}else if(t===_MaterialNode.OPACITY){const e=this.getFloat(t);s.alphaMap&&s.alphaMap.isTexture===!0?n=e.mul(this.getTexture("alpha")):n=e}else if(t===_MaterialNode.SPECULAR_STRENGTH)s.specularMap&&s.specularMap.isTexture===!0?n=this.getTexture("specular").r:n=g(1);else if(t===_MaterialNode.SPECULAR_INTENSITY){const e=this.getFloat(t);s.specularIntensityMap&&s.specularIntensityMap.isTexture===!0?n=e.mul(this.getTexture(t).a):n=e}else if(t===_MaterialNode.SPECULAR_COLOR){const e=this.getColor(t);s.specularColorMap&&s.specularColorMap.isTexture===!0?n=e.mul(this.getTexture(t).rgb):n=e}else if(t===_MaterialNode.ROUGHNESS){const e=this.getFloat(t);s.roughnessMap&&s.roughnessMap.isTexture===!0?n=e.mul(this.getTexture(t).g):n=e}else if(t===_MaterialNode.METALNESS){const e=this.getFloat(t);s.metalnessMap&&s.metalnessMap.isTexture===!0?n=e.mul(this.getTexture(t).b):n=e}else if(t===_MaterialNode.EMISSIVE){const o=this.getFloat("emissiveIntensity"),e=this.getColor(t).mul(o);s.emissiveMap&&s.emissiveMap.isTexture===!0?n=e.mul(this.getTexture(t)):n=e}else if(t===_MaterialNode.NORMAL)s.normalMap?(n=Wm(this.getTexture("normal"),this.getCache("normalScale","vec2")),n.normalMapType=s.normalMapType):s.bumpMap?n=rw(this.getTexture("bump").r,this.getFloat("bumpScale")):n=xt;else if(t===_MaterialNode.CLEARCOAT){const e=this.getFloat(t);s.clearcoatMap&&s.clearcoatMap.isTexture===!0?n=e.mul(this.getTexture(t).r):n=e}else if(t===_MaterialNode.CLEARCOAT_ROUGHNESS){const e=this.getFloat(t);s.clearcoatRoughnessMap&&s.clearcoatRoughnessMap.isTexture===!0?n=e.mul(this.getTexture(t).r):n=e}else if(t===_MaterialNode.CLEARCOAT_NORMAL)s.clearcoatNormalMap?n=Wm(this.getTexture(t),this.getCache(t+"Scale","vec2")):n=xt;else if(t===_MaterialNode.SHEEN){const e=this.getColor("sheenColor").mul(this.getFloat("sheen"));s.sheenColorMap&&s.sheenColorMap.isTexture===!0?n=e.mul(this.getTexture("sheenColor").rgb):n=e}else if(t===_MaterialNode.SHEEN_ROUGHNESS){const e=this.getFloat(t);s.sheenRoughnessMap&&s.sheenRoughnessMap.isTexture===!0?n=e.mul(this.getTexture(t).a):n=e,n=n.clamp(.07,1)}else if(t===_MaterialNode.ANISOTROPY)if(s.anisotropyMap&&s.anisotropyMap.isTexture===!0){const e=this.getTexture(t),s=Hh(xa.x,xa.y,xa.y.negate(),xa.x);n=s.mul(e.rg.mul(2).sub(re(1)).normalize().mul(e.b))}else n=xa;else if(t===_MaterialNode.IRIDESCENCE_THICKNESS){const e=bt("1","float",s.iridescenceThicknessRange);if(s.iridescenceThicknessMap){const o=bt("0","float",s.iridescenceThicknessRange);n=e.sub(o).mul(this.getTexture(t).g).add(o)}else n=e}else if(t===_MaterialNode.TRANSMISSION){const e=this.getFloat(t);s.transmissionMap?n=e.mul(this.getTexture(t).r):n=e}else if(t===_MaterialNode.THICKNESS){const e=this.getFloat(t);s.thicknessMap?n=e.mul(this.getTexture(t).g):n=e}else if(t===_MaterialNode.IOR)n=this.getFloat(t);else if(t===_MaterialNode.LIGHT_MAP)n=this.getTexture(t).rgb.mul(this.getFloat("lightMapIntensity"));else if(t===_MaterialNode.AO)n=this.getTexture(t).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else if(t===_MaterialNode.LINE_DASH_OFFSET)n=s.dashOffset?this.getFloat(t):g(0);else{const s=this.getNodeType(e);n=this.getCache(t,s)}return n}},i.ALPHA_TEST="alphaTest",i.COLOR="color",i.OPACITY="opacity",i.SHININESS="shininess",i.SPECULAR="specular",i.SPECULAR_STRENGTH="specularStrength",i.SPECULAR_INTENSITY="specularIntensity",i.SPECULAR_COLOR="specularColor",i.REFLECTIVITY="reflectivity",i.ROUGHNESS="roughness",i.METALNESS="metalness",i.NORMAL="normal",i.CLEARCOAT="clearcoat",i.CLEARCOAT_ROUGHNESS="clearcoatRoughness",i.CLEARCOAT_NORMAL="clearcoatNormal",i.EMISSIVE="emissive",i.ROTATION="rotation",i.SHEEN="sheen",i.SHEEN_ROUGHNESS="sheenRoughness",i.ANISOTROPY="anisotropy",i.IRIDESCENCE="iridescence",i.IRIDESCENCE_IOR="iridescenceIOR",i.IRIDESCENCE_THICKNESS="iridescenceThickness",i.IOR="ior",i.TRANSMISSION="transmission",i.THICKNESS="thickness",i.ATTENUATION_DISTANCE="attenuationDistance",i.ATTENUATION_COLOR="attenuationColor",i.LINE_SCALE="scale",i.LINE_DASH_SIZE="dashSize",i.LINE_GAP_SIZE="gapSize",i.LINE_WIDTH="linewidth",i.LINE_DASH_OFFSET="dashOffset",i.POINT_SIZE="size",i.DISPERSION="dispersion",i.LIGHT_MAP="light",i.AO="ao",dw=u(i,i.ALPHA_TEST),uw=u(i,i.COLOR),nT=u(i,i.SHININESS),mw=u(i,i.EMISSIVE),fw=u(i,i.OPACITY),tT=u(i,i.SPECULAR),eT=u(i,i.SPECULAR_INTENSITY),JF=u(i,i.SPECULAR_COLOR),ZF=u(i,i.SPECULAR_STRENGTH),QF=u(i,i.REFLECTIVITY),XF=u(i,i.ROUGHNESS),GF=u(i,i.METALNESS),ww=u(i,i.NORMAL),YF=u(i,i.CLEARCOAT),qF=u(i,i.CLEARCOAT_ROUGHNESS),KF=u(i,i.CLEARCOAT_NORMAL),WF=u(i,i.ROTATION),$F=u(i,i.SHEEN),PT=u(i,i.SHEEN_ROUGHNESS),BF=u(i,i.ANISOTROPY),IF=u(i,i.IRIDESCENCE),HF=u(i,i.IRIDESCENCE_IOR),PF=u(i,i.IRIDESCENCE_THICKNESS),RF=u(i,i.TRANSMISSION),LF=u(i,i.THICKNESS),NF=u(i,i.IOR),zF=u(i,i.ATTENUATION_DISTANCE),FF=u(i,i.ATTENUATION_COLOR),MF=u(i,i.LINE_SCALE),SF=u(i,i.LINE_DASH_SIZE),AF=u(i,i.LINE_GAP_SIZE),kF=u(i,i.LINE_WIDTH),EF=u(i,i.LINE_DASH_OFFSET),xF=u(i,i.POINT_SIZE),OF=u(i,i.DISPERSION),Uw=u(i,i.LIGHT_MAP),Kw=u(i,i.AO),xa=R(new w).onReference(function(e){return e.material}).onRenderUpdate(function({material:e}){this.value.set(e.anisotropy*Math.cos(e.anisotropyRotation),e.anisotropy*Math.sin(e.anisotropyRotation))}),Km=f(e=>e.context.setupModelViewProjection(),"vec4").once()().toVarying("v_modelViewProjection"),Gw=class extends m{static get type(){return"InstanceNode"}constructor(e,t,n=null){super("void"),this.count=e,this.instanceMatrix=t,this.instanceColor=n,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=x.FRAME,this.buffer=null,this.bufferColor=null}setup(e){const{instanceMatrix:n,instanceColor:s}=this,{count:i}=n;let{instanceMatrixNode:t,instanceColorNode:o}=this;if(t===null){if(i<=1e3)t=P2(n.array,"mat4",Math.max(i,1)).element(H1);else{const e=new Dw(n.array,16,1);this.buffer=e;const s=n.usage===Ri?S4:E4,o=[s(e,"vec4",16,0),s(e,"vec4",16,4),s(e,"vec4",16,8),s(e,"vec4",16,12)];t=Eu(...o)}this.instanceMatrixNode=t}if(s&&o===null){const e=new lw(s.array,3),t=s.usage===Ri?S4:E4;this.bufferColor=e,o=h(t(e,"vec3",3,0)),this.instanceColorNode=o}const a=t.mul(Ue).xyz;if(Ue.assign(a),e.hasGeometryAttribute("normal")){const e=ky(en,t);en.assign(e)}this.instanceColorNode!==null&&Yc("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMatrix.usage!==Ri&&this.buffer!==null&&this.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMatrix.version),this.instanceColor&&this.instanceColor.usage!==Ri&&this.bufferColor!==null&&this.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceColor.version)}},Xw=Gw,Qw=class extends Xw{static get type(){return"InstancedMeshNode"}constructor(e){const{count:t,instanceMatrix:n,instanceColor:s}=e;super(t,n,s),this.instancedMesh=e}},Zw=L(Qw).setParameterLength(1),Jw=class extends m{static get type(){return"BatchNode"}constructor(e){super("void"),this.batchMesh=e,this.batchingIdNode=null}setup(e){this.batchingIdNode===null&&(e.getDrawIndex()===null?this.batchingIdNode=H1:this.batchingIdNode=gj);const d=f(([e])=>{const t=ne(Ro(zt(this.batchMesh._indirectTexture),0).x),n=ne(e).mod(t),s=ne(e).div(t);return zt(this.batchMesh._indirectTexture,hn(n,s)).x}).setLayout({name:"getIndirectIndex",type:"uint",inputs:[{name:"id",type:"int"}]}),a=d(ne(this.batchingIdNode)),n=this.batchMesh._matricesTexture,r=ne(Ro(zt(n),0).x),c=g(a).mul(4).toInt().toVar(),s=c.mod(r),o=c.div(r),l=Eu(zt(n,hn(s,o)),zt(n,hn(s.add(1),o)),zt(n,hn(s.add(2),o)),zt(n,hn(s.add(3),o))),i=this.batchMesh._colorsTexture;if(i!==null){const e=f(([e])=>{const t=ne(Ro(zt(i),0).x),n=e,s=n.mod(t),o=n.div(t);return zt(i,hn(s,o)).rgb}).setLayout({name:"getBatchingColor",type:"vec3",inputs:[{name:"id",type:"int"}]}),t=e(a);Yc("vec3","vBatchColor").assign(t)}const t=$s(l);Ue.assign(l.mul(Ue));const u=en.div(h(t[0].dot(t[0]),t[1].dot(t[1]),t[2].dot(t[2]))),m=t.mul(u).xyz;en.assign(m),e.hasGeometryAttribute("tangent")&&Ld.mulAssign(t)}},eO=L(Jw).setParameterLength(1),qm=new WeakMap,nO=class extends m{static get type(){return"SkinningNode"}constructor(e){super("void"),this.skinnedMesh=e,this.updateType=x.OBJECT,this.skinIndexNode=oo("skinIndex","uvec4"),this.skinWeightNode=oo("skinWeight","vec4"),this.bindMatrixNode=bt("bindMatrix","mat4"),this.bindMatrixInverseNode=bt("bindMatrixInverse","mat4"),this.boneMatricesNode=lm("skeleton.boneMatrices","mat4",e.skeleton.bones.length),this.positionNode=Ue,this.toPositionNode=Ue,this.previousBoneMatricesNode=null}getSkinnedPosition(e=this.boneMatricesNode,t=this.positionNode){const{skinIndexNode:n,skinWeightNode:s,bindMatrixNode:i,bindMatrixInverseNode:a}=this,r=e.element(n.x),c=e.element(n.y),l=e.element(n.z),d=e.element(n.w),o=i.mul(t),u=gr(r.mul(s.x).mul(o),c.mul(s.y).mul(o),l.mul(s.z).mul(o),d.mul(s.w).mul(o));return a.mul(u).xyz}getSkinnedNormal(e=this.boneMatricesNode,t=en){const{skinIndexNode:n,skinWeightNode:s,bindMatrixNode:i,bindMatrixInverseNode:a}=this,r=e.element(n.x),c=e.element(n.y),l=e.element(n.z),d=e.element(n.w);let o=gr(s.x.mul(r),s.y.mul(c),s.z.mul(l),s.w.mul(d));return o=a.mul(o).mul(i),o.transformDirection(t).xyz}getPreviousSkinnedPosition(e){const t=e.object;return this.previousBoneMatricesNode===null&&(t.skeleton.previousBoneMatrices=new Float32Array(t.skeleton.boneMatrices),this.previousBoneMatricesNode=lm("skeleton.previousBoneMatrices","mat4",t.skeleton.bones.length)),this.getSkinnedPosition(this.previousBoneMatricesNode,lh)}needsPreviousBoneMatrices(e){const t=e.renderer.getMRT();return t&&t.has("velocity")||JD(e.object).useVelocity===!0}setup(e){this.needsPreviousBoneMatrices(e)&&lh.assign(this.getPreviousSkinnedPosition(e));const t=this.getSkinnedPosition();if(this.toPositionNode&&this.toPositionNode.assign(t),e.hasGeometryAttribute("normal")){const t=this.getSkinnedNormal();en.assign(t),e.hasGeometryAttribute("tangent")&&Ld.assign(t)}return t}generate(e,t){if(t!=="void")return super.generate(e,t)}update(e){const t=e.object&&e.object.skeleton?e.object.skeleton:this.skinnedMesh.skeleton;if(qm.get(t)===e.frameId)return;qm.set(t,e.frameId),this.previousBoneMatricesNode!==null&&t.previousBoneMatrices.set(t.boneMatrices),t.update()}},sO=e=>a(new nO(e)),Ad=new WeakMap,Je=new j,Xm=f(({bufferMap:e,influence:t,stride:n,width:s,depth:o,offset:i})=>{const a=ne(uj).mul(n).add(i),r=a.div(s),c=a.sub(r.mul(s)),l=zt(e,hn(c,r)).depth(o).xyz;return l.mul(t)});function pF(e){const s=e.morphAttributes.position!==0[0],o=e.morphAttributes.normal!==0[0],i=e.morphAttributes.color!==0[0],a=e.morphAttributes.position||e.morphAttributes.normal||e.morphAttributes.color,n=a!==0[0]?a.length:0;let t=Ad.get(e);if(t===0[0]||t.count!==n){let h=function(){d.dispose(),Ad.delete(e),e.removeEventListener("dispose",h)};t!==0[0]&&t.texture.dispose();const m=e.morphAttributes.position||[],f=e.morphAttributes.normal||[],p=e.morphAttributes.color||[];let c=0;s===!0&&(c=1),o===!0&&(c=2),i===!0&&(c=3);let r=e.attributes.position.count*c,l=1;const u=4096;r>u&&(l=Math.ceil(r/u),r=u);const a=new Float32Array(r*l*4*n),d=new Lu(a,r,l,n);d.type=X,d.needsUpdate=!0;const g=c*4;for(let t=0;t<n;t++){const c=m[t],u=f[t],d=p[t],e=r*l*4*t;for(let n=0;n<c.count;n++){const t=n*g;s===!0&&(Je.fromBufferAttribute(c,n),a[e+t+0]=Je.x,a[e+t+1]=Je.y,a[e+t+2]=Je.z,a[e+t+3]=0),o===!0&&(Je.fromBufferAttribute(u,n),a[e+t+4]=Je.x,a[e+t+5]=Je.y,a[e+t+6]=Je.z,a[e+t+7]=0),i===!0&&(Je.fromBufferAttribute(d,n),a[e+t+8]=Je.x,a[e+t+9]=Je.y,a[e+t+10]=Je.z,a[e+t+11]=d.itemSize===4?Je.w:1)}}t={count:n,texture:d,stride:c,size:new w(r,l)},Ad.set(e,t),e.addEventListener("dispose",h)}return t}cO=class extends m{static get type(){return"MorphNode"}constructor(e){super("void"),this.mesh=e,this.morphBaseInfluence=R(1),this.updateType=x.OBJECT}setup(e){const{geometry:t}=e,n=t.morphAttributes.position!==0[0],s=t.hasAttribute("normal")&&t.morphAttributes.normal!==0[0],o=t.morphAttributes.position||t.morphAttributes.normal||t.morphAttributes.color,c=o!==0[0]?o.length:0,{texture:i,stride:a,size:l}=pF(t);n===!0&&Ue.mulAssign(this.morphBaseInfluence),s===!0&&en.mulAssign(this.morphBaseInfluence);const r=ne(l.width);to(c,({i:e})=>{const t=g(0).toVar();this.mesh.count>1&&this.mesh.morphTexture!==null&&this.mesh.morphTexture!==0[0]?t.assign(zt(this.mesh.morphTexture,hn(ne(e).add(1),ne(H1))).r):t.assign(bt("morphTargetInfluences","float").element(e).toVar()),yt(t.notEqual(0),()=>{n===!0&&Ue.addAssign(Xm({bufferMap:i,influence:t,stride:a,width:r,depth:e,offset:ne(0)})),s===!0&&en.addAssign(Xm({bufferMap:i,influence:t,stride:a,width:r,depth:e,offset:ne(1)}))})})}update(){const e=this.morphBaseInfluence;this.mesh.geometry.morphTargetsRelative?e.value=1:e.value=1-this.mesh.morphTargetInfluences.reduce((e,t)=>e+t,0)}},lO=L(cO).setParameterLength(1),dO=class extends m{static get type(){return"LightingNode"}constructor(){super("vec3"),this.isLightingNode=!0}},Qm=dO,hO=class extends Qm{static get type(){return"AONode"}constructor(e=null){super(),this.aoNode=e}setup(e){e.context.ambientOcclusion.mulAssign(this.aoNode)}},mO=hO,fO=class extends rb{static get type(){return"LightingContextNode"}constructor(e,t=null,n=null,s=null){super(e),this.lightingModel=t,this.backdropNode=n,this.backdropAlphaNode=s,this._value=null}getContext(){const{backdropNode:e,backdropAlphaNode:t}=this,n=h().toVar("directDiffuse"),s=h().toVar("directSpecular"),o=h().toVar("indirectDiffuse"),i=h().toVar("indirectSpecular"),a={directDiffuse:n,directSpecular:s,indirectDiffuse:o,indirectSpecular:i},r={radiance:h().toVar("radiance"),irradiance:h().toVar("irradiance"),iblIrradiance:h().toVar("iblIrradiance"),ambientOcclusion:g(1).toVar("ambientOcclusion"),reflectedLight:a,backdrop:e,backdropAlpha:t};return r}setup(e){return this.value=this._value||(this._value=this.getContext()),this.value.lightingModel=this.lightingModel||e.context.lightingModel,super.setup(e)}},pO=L(fO),gO=class extends Qm{static get type(){return"IrradianceNode"}constructor(e){super(),this.node=e}setup(e){e.context.irradiance.addAssign(this.node)}},vO=gO,gs=class _ClippingNode extends m{static get type(){return"ClippingNode"}constructor(e=_ClippingNode.DEFAULT){super(),this.scope=e}setup(e){super.setup(e);const s=e.clippingContext,{intersectionPlanes:n,unionPlanes:t}=s;return this.hardwareClipping=e.material.hardwareClipping,this.scope===_ClippingNode.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(n,t):this.scope===_ClippingNode.HARDWARE?this.setupHardwareClipping(t,e):this.setupDefault(n,t)}setupAlphaToCoverage(e,t){return f(()=>{const n=g().toVar("distanceToPlane"),s=g().toVar("distanceToGradient"),o=g(1).toVar("clipOpacity"),i=t.length;if(this.hardwareClipping===!1&&i>0){const e=wn(t).setGroup(oe);to(i,({i:t})=>{const i=e.element(t);n.assign(fe.dot(i.xyz).negate().add(i.w)),s.assign(n.fwidth().div(2)),o.mulAssign(lr(s.negate(),s,n))})}const a=e.length;if(a>0){const i=wn(e).setGroup(oe),t=g(1).toVar("intersectionClipOpacity");to(a,({i:e})=>{const o=i.element(e);n.assign(fe.dot(o.xyz).negate().add(o.w)),s.assign(n.fwidth().div(2)),t.mulAssign(lr(s.negate(),s,n).oneMinus())}),o.mulAssign(t.oneMinus())}Pt.a.mulAssign(o),Pt.a.equal(0).discard()})()}setupDefault(e,t){return f(()=>{const n=t.length;if(this.hardwareClipping===!1&&n>0){const e=wn(t).setGroup(oe);to(n,({i:t})=>{const n=e.element(t);fe.dot(n.xyz).greaterThan(n.w).discard()})}const s=e.length;if(s>0){const n=wn(e).setGroup(oe),t=pu(!0).toVar("clipped");to(s,({i:e})=>{const s=n.element(e);t.assign(fe.dot(s.xyz).greaterThan(s.w).and(t))}),t.discard()}})()}setupHardwareClipping(e,t){const n=e.length;return t.enableHardwareClipping(n),f(()=>{const s=wn(e).setGroup(oe),o=gc(t.getClipDistance());to(n,({i:e})=>{const t=s.element(e),n=fe.dot(t.xyz).sub(t.w).negate();o.element(e).assign(n)})})()}},gs.ALPHA_TO_COVERAGE="alphaToCoverage",gs.DEFAULT="default",gs.HARDWARE="hardware",jO=()=>a(new gs),yO=()=>a(new gs(gs.ALPHA_TO_COVERAGE)),_O=()=>a(new gs(gs.HARDWARE)),wO=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","aoMapIntensity","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveIntensity","emissiveMap","envMap","envMapIntensity","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","lightMapIntensity","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"],Od=new WeakMap,xO=class{constructor(e){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(e),this.hasAnimation=e.object.isSkinnedMesh===!0,this.refreshUniforms=wO,this.renderId=0}firstInitialization(e){const t=this.renderObjects.has(e);return t===!1&&(this.getRenderObjectData(e),!0)}needsVelocity(e){const t=e.getMRT();return t!==null&&t.has("velocity")}getRenderObjectData(e){let t=this.renderObjects.get(e);if(t===0[0]){const{geometry:n,material:o,object:s}=e;if(t={material:this.getMaterialData(o),geometry:{id:n.id,attributes:this.getAttributesData(n.attributes),indexVersion:n.index?n.index.version:null,drawRange:{start:n.drawRange.start,count:n.drawRange.count}},worldMatrix:s.matrixWorld.clone()},s.center&&(t.center=s.center.clone()),s.morphTargetInfluences&&(t.morphTargetInfluences=s.morphTargetInfluences.slice()),e.bundle!==null&&(t.version=e.bundle.version),t.material.transmission>0){const{width:n,height:s}=e.context;t.bufferWidth=n,t.bufferHeight=s}t.lights=this.getLightsData(e.lightsNode.getLights()),this.renderObjects.set(e,t)}return t}getAttributesData(e){const t={};for(const n in e){const s=e[n];t[n]={version:s.version}}return t}containsNode(e){const t=e.material;for(const e in t)if(t[e]&&t[e].isNode)return!0;return e.renderer.overrideNodes.modelViewMatrix!==null||e.renderer.overrideNodes.modelNormalViewMatrix!==null}getMaterialData(e){const t={};for(const s of this.refreshUniforms){const n=e[s];if(n==null)continue;typeof n=="object"&&n.clone!==0[0]?n.isTexture===!0?t[s]={id:n.id,version:n.version}:t[s]=n.clone():t[s]=n}return t}equals(e,t){const{object:i,material:h,geometry:o}=e,n=this.getRenderObjectData(e);if(n.worldMatrix.equals(i.matrixWorld)!==!0)return n.worldMatrix.copy(i.matrixWorld),!1;const a=n.material;for(const n in a){const t=a[n],e=h[n];if(t.equals!==0[0]){if(t.equals(e)===!1)return t.copy(e),!1}else if(e.isTexture===!0){if(t.id!==e.id||t.version!==e.version)return t.id=e.id,t.version=e.version,!1}else if(t!==e)return a[n]=e,!1}if(a.transmission>0){const{width:t,height:s}=e.context;if(n.bufferWidth!==t||n.bufferHeight!==s)return n.bufferWidth=t,n.bufferHeight=s,!1}const s=n.geometry,r=o.attributes,c=s.attributes,l=Object.keys(c),m=Object.keys(r);if(s.id!==o.id)return s.id=o.id,!1;if(l.length!==m.length)return n.geometry.attributes=this.getAttributesData(r),!1;for(const e of l){const n=c[e],t=r[e];if(t===0[0])return delete c[e],!1;if(n.version!==t.version)return n.version=t.version,!1}const d=o.index,f=s.indexVersion,u=d?d.version:null;if(f!==u)return s.indexVersion=u,!1;if(s.drawRange.start!==o.drawRange.start||s.drawRange.count!==o.drawRange.count)return s.drawRange.start=o.drawRange.start,s.drawRange.count=o.drawRange.count,!1;if(n.morphTargetInfluences){let e=!1;for(let t=0;t<n.morphTargetInfluences.length;t++)n.morphTargetInfluences[t]!==i.morphTargetInfluences[t]&&(e=!0);if(e)return!0}if(n.lights)for(let e=0;e<t.length;e++)if(n.lights[e].map!==t[e].map)return!1;return n.center&&n.center.equals(i.center)===!1?(n.center.copy(i.center),!0):(e.bundle!==null&&(n.version=e.bundle.version),!0)}getLightsData(e){const t=[];for(const n of e)n.isSpotLight===!0&&n.map!==null&&t.push({map:n.map.version});return t}getLights(e,t){if(Od.has(e)){const n=Od.get(e);if(n.renderId===t)return n.lightsData}const n=this.getLightsData(e.getLights());return Od.set(e,{renderId:t,lightsData:n}),n}needsRefresh(e,t){if(this.hasNode||this.hasAnimation||this.firstInitialization(e)||this.needsVelocity(t.renderer))return!0;const{renderId:n}=t;if(this.renderId!==n)return this.renderId=n,!0;const s=e.object.static===!0,o=e.bundle!==null&&e.bundle.static===!0&&this.getRenderObjectData(e).version===e.bundle.version;if(s||o)return!1;const i=this.getLights(e.lightsNode,n),a=this.equals(e,i)!==!0;return a}},CO=xO,EO=.05,e8=f(([e])=>ua(J(1e4,ma(J(17,e.x).add(J(.1,e.y)))).mul(gr(.1,Lt(ma(J(13,e.y).add(e.x))))))),n8=f(([e])=>e8(re(e8(e.xy),e.z))),SO=f(([e])=>{const c=rl(_1(_2(e.xyz)),_1(Q0(e.xyz))),o=g(1).div(g(EO).mul(c)).toVar("pixScale"),a=re(ha(aa(ro(o))),ha(m3(ro(o)))),r=re(n8(aa(a.x.mul(e.xyz))),n8(aa(a.y.mul(e.xyz)))),s=ua(ro(o)),n=gr(J(s.oneMinus(),r.x),J(s,r.y)),t=K0(s,s.oneMinus()),i=h(n.mul(n).div(J(2,t).mul(Ln(1,t))),n.sub(J(.5,t)).div(Ln(1,t)),Ln(1,Ln(1,n).mul(Ln(1,n)).div(J(2,t).mul(Ln(1,t))))),l=n.lessThan(t.oneMinus()).select(n.lessThan(t).select(i.x,i.y),i.z);return cc(l,1e-6,1)}).setLayout({name:"getAlphaHashThreshold",type:"float",inputs:[{name:"position",type:"vec3"}]}),MO=SO,FO=class extends cj{static get type(){return"VertexColorNode"}constructor(e){super(null,"vec4"),this.isVertexColorNode=!0,this.index=e}getAttributeName(){const e=this.index;return"color"+(e>0?e:"")}generate(e){const n=this.getAttributeName(e),s=e.hasGeometryAttribute(n);let t;return s===!0?t=super.generate(e):t=e.generateConst(this.nodeType,new j(1,1,1,1)),t}serialize(e){super.serialize(e),e.index=this.index}deserialize(e){super.deserialize(e),this.index=e.index}},TO=(e=0)=>a(new FO(e)),zO=f(([e])=>we(e.rgb.mul(e.a),e.a),{color:"vec4",return:"vec4"}),DO=class extends Do{static get type(){return"NodeMaterial"}get type(){return this.constructor.type}set type(e){}constructor(){super(),this.isNodeMaterial=!0,this.fog=!0,this.lights=!1,this.hardwareClipping=!1,this.lightsNode=null,this.envNode=null,this.aoNode=null,this.colorNode=null,this.normalNode=null,this.opacityNode=null,this.backdropNode=null,this.backdropAlphaNode=null,this.alphaTestNode=null,this.maskNode=null,this.positionNode=null,this.geometryNode=null,this.depthNode=null,this.receivedShadowPositionNode=null,this.castShadowPositionNode=null,this.receivedShadowNode=null,this.castShadowNode=null,this.outputNode=null,this.mrtNode=null,this.fragmentNode=null,this.vertexNode=null,Object.defineProperty(this,"shadowPositionNode",{get:()=>this.receivedShadowPositionNode,set:e=>{console.warn('THREE.NodeMaterial: ".shadowPositionNode" was renamed to ".receivedShadowPositionNode".'),this.receivedShadowPositionNode=e}})}customProgramCacheKey(){return this.type+Up(this)}build(e){this.setup(e)}setupObserver(e){return new CO(e)}setup(e){e.context.setupNormal=()=>Nr(this.setupNormal(e),"NORMAL","vec3"),e.context.setupPositionView=()=>this.setupPositionView(e),e.context.setupModelViewProjection=()=>this.setupModelViewProjection(e);const n=e.renderer,s=n.getRenderTarget();e.addStack();const i=Nr(this.setupVertex(e),"VERTEX"),a=this.vertexNode||i;e.stack.outputNode=a,this.setupHardwareClipping(e),this.geometryNode!==null&&(e.stack.outputNode=e.stack.outputNode.bypass(this.geometryNode)),e.addFlow("vertex",e.removeStack()),e.addStack();let t;const o=this.setupClipping(e);if((this.depthWrite===!0||this.depthTest===!0)&&(s!==null?s.depthBuffer===!0&&this.setupDepth(e):n.depth===!0&&this.setupDepth(e)),this.fragmentNode===null){{this.setupDiffuseColor(e),this.setupVariants(e);const a=this.setupLighting(e);o!==null&&e.stack.add(o);const r=we(a,Pt.a).max(0);t=this.setupOutput(e,r),Ha.assign(t);const i=this.outputNode!==null;if(i&&(t=this.outputNode),s!==null){const s=n.getMRT(),e=this.mrtNode;s!==null?(i&&Ha.assign(t),t=s,e!==null&&(t=s.merge(e))):e!==null&&(t=e)}}}else{let n=this.fragmentNode;n.isOutputStructNode!==!0&&(n=we(n)),t=this.setupOutput(e,n)}e.stack.outputNode=t,e.addFlow("fragment",e.removeStack()),e.observer=this.setupObserver(e)}setupClipping(e){if(e.clippingContext===null)return null;const{unionPlanes:n,intersectionPlanes:s}=e.clippingContext;let t=null;if(n.length>0||s.length>0){const n=e.renderer.samples;this.alphaToCoverage&&n>1?t=yO():e.stack.add(jO())}return t}setupHardwareClipping(e){if(this.hardwareClipping=!1,e.clippingContext===null)return;const t=e.clippingContext.unionPlanes.length;t>0&&t<=8&&e.isAvailable("clipDistance")&&(e.stack.add(_O()),this.hardwareClipping=!0)}setupDepth(e){const{renderer:n,camera:s}=e;let t=this.depthNode;if(t===null){const e=n.getMRT();e&&e.has("depth")?t=e.get("depth"):n.logarithmicDepthBuffer===!0&&(s.isPerspectiveCamera?t=Jy(fe.z,Us,Ms):t=Sa(fe.z,Us,Ms))}t!==null&&sm.assign(t).toStack()}setupPositionView(){return Q3.mul(Ue).xyz}setupModelViewProjection(){return Yj.mul(fe)}setupVertex(e){return e.addStack(),this.setupPosition(e),e.context.vertex=e.removeStack(),Km}setupPosition(e){const{object:t,geometry:n}=e;if((n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color)&&lO(t).toStack(),t.isSkinnedMesh===!0&&sO(t).toStack(),this.displacementMap){const e=Mo("displacementMap","texture"),t=Mo("displacementScale","float"),n=Mo("displacementBias","float");Ue.addAssign(en.normalize().mul(e.x.mul(t).add(n)))}return t.isBatchedMesh&&eO(t).toStack(),t.isInstancedMesh&&t.instanceMatrix&&t.instanceMatrix.isInstancedBufferAttribute===!0&&Zw(t).toStack(),this.positionNode!==null&&Ue.assign(Nr(this.positionNode,"POSITION","vec3")),Ue}setupDiffuseColor({object:e,geometry:t}){this.maskNode!==null&&pu(this.maskNode).not().discard();let n=this.colorNode?we(this.colorNode):uw;if(this.vertexColors===!0&&t.hasAttribute("color")&&(n=n.mul(TO())),e.instanceColor){const e=Yc("vec3","vInstanceColor");n=e.mul(n)}if(e.isBatchedMesh&&e._colorsTexture){const e=Yc("vec3","vBatchColor");n=e.mul(n)}Pt.assign(n);const o=this.opacityNode?g(this.opacityNode):fw;Pt.a.assign(Pt.a.mul(o));let s=null;(this.alphaTestNode!==null||this.alphaTest>0)&&(s=this.alphaTestNode!==null?g(this.alphaTestNode):dw,Pt.a.lessThanEqual(s).discard()),this.alphaHash===!0&&Pt.a.lessThan(MO(Ue)).discard();const i=this.transparent===!1&&this.blending===rt&&this.alphaToCoverage===!1;i?Pt.a.assign(1):s===null&&Pt.a.lessThanEqual(0).discard()}setupVariants(){}setupOutgoingLight(){return this.lights===!0?h(0):Pt.rgb}setupNormal(){return this.normalNode?h(this.normalNode):ww}setupEnvironment(){let e=null;return this.envNode?e=this.envNode:this.envMap&&(e=this.envMap.isCubeTexture?Mo("envMap","cubeTexture"):Mo("envMap","texture")),e}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new vO(Uw)),t}setupLights(e){const t=[],n=this.setupEnvironment(e);n&&n.isLightingNode&&t.push(n);const s=this.setupLightMap(e);if(s&&s.isLightingNode&&t.push(s),this.aoNode!==null||e.material.aoMap){const e=this.aoNode!==null?this.aoNode:Kw;t.push(new mO(e))}let o=this.lightsNode||e.lightsNode;return t.length>0&&(o=e.renderer.lighting.createNode([...o.getLights(),...t])),o}setupLightingModel(){}setupLighting(e){const{material:a}=e,{backdropNode:n,backdropAlphaNode:o,emissiveNode:s}=this,r=this.lights===!0||this.lightsNode!==null,i=r?this.setupLights(e):null;let t=this.setupOutgoingLight(e);if(i&&i.getScope().hasLights){const s=this.setupLightingModel(e)||null;t=pO(i,s,n,o)}else n!==null&&(t=h(o!==null?va(t,n,o):n));return(s&&s.isNode===!0||a.emissive&&a.emissive.isColor===!0)&&(ch.assign(h(s||mw)),t=t.add(ch)),t}setupFog(e,t){const n=e.fogNode;return n&&(Ha.assign(t),t=we(n.toVar())),t}setupPremultipliedAlpha(e,t){return zO(t)}setupOutput(e,t){return this.fog===!0&&(t=this.setupFog(e,t)),this.premultipliedAlpha===!0&&(t=this.setupPremultipliedAlpha(e,t)),t}setDefaultValues(e){for(const t in e){const n=e[t];this[t]===0[0]&&(this[t]=n,n&&n.clone&&(this[t]=n.clone()))}const t=Object.getOwnPropertyDescriptors(e.constructor.prototype);for(const e in t)Object.getOwnPropertyDescriptor(this.constructor.prototype,e)===0[0]&&t[e].get!==0[0]&&Object.defineProperty(this.constructor.prototype,e,t[e])}toJSON(e){const s=e===0[0]||typeof e=="string";s&&(e={textures:{},images:{},nodes:{}});const t=Do.prototype.toJSON.call(this,e),o=gd(this);t.inputNodes={};for(const{property:n,childNode:s}of o)t.inputNodes[n]=s.toJSON(e).uuid;function n(e){const t=[];for(const s in e){const n=e[s];delete n.metadata,t.push(n)}return t}if(s){const s=n(e.textures),o=n(e.images),i=n(e.nodes);s.length>0&&(t.textures=s),o.length>0&&(t.images=o),i.length>0&&(t.nodes=i)}return t}copy(e){return this.lightsNode=e.lightsNode,this.envNode=e.envNode,this.colorNode=e.colorNode,this.normalNode=e.normalNode,this.opacityNode=e.opacityNode,this.backdropNode=e.backdropNode,this.backdropAlphaNode=e.backdropAlphaNode,this.alphaTestNode=e.alphaTestNode,this.maskNode=e.maskNode,this.positionNode=e.positionNode,this.geometryNode=e.geometryNode,this.depthNode=e.depthNode,this.receivedShadowPositionNode=e.receivedShadowPositionNode,this.castShadowPositionNode=e.castShadowPositionNode,this.receivedShadowNode=e.receivedShadowNode,this.castShadowNode=e.castShadowNode,this.outputNode=e.outputNode,this.mrtNode=e.mrtNode,this.fragmentNode=e.fragmentNode,this.vertexNode=e.vertexNode,super.copy(e)}},ko=DO,jd=new q1(-1,1,1,-1,0,1),RO=class extends Cn{constructor(e=!1){super();const t=e===!1?[0,-1,0,1,2,1]:[0,2,0,0,2,0];this.setAttribute("position",new Le([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new Le(t,2))}},PO=new RO,HO=class extends be{constructor(e=null){super(PO,e),this.camera=jd,this.isQuadMesh=!0}async renderAsync(e){return e.renderAsync(this,jd)}render(e){e.render(this,jd)}},o8=HO,l8=class _EventNode extends m{static get type(){return"EventNode"}constructor(e,t){super("void"),this.eventType=e,this.callback=t,e===_EventNode.OBJECT?this.updateType=x.OBJECT:e===_EventNode.MATERIAL&&(this.updateType=x.RENDER)}update(e){this.callback(e)}},l8.OBJECT="object",l8.MATERIAL="material",iF=1/6,ya=new Hn,pd=new W,In=class _SceneNode extends m{static get type(){return"SceneNode"}constructor(e=_SceneNode.BACKGROUND_BLURRINESS,t=null){super(),this.scope=e,this.scene=t}setup(e){const t=this.scope,n=this.scene!==null?this.scene:e.scene;let s;return t===_SceneNode.BACKGROUND_BLURRINESS?s=bt("backgroundBlurriness","float",n):t===_SceneNode.BACKGROUND_INTENSITY?s=bt("backgroundIntensity","float",n):t===_SceneNode.BACKGROUND_ROTATION?s=R("mat4").setName("backgroundRotation").setGroup(oe).onRenderUpdate(()=>{const e=n.background;return e!==null&&e.isTexture&&e.mapping!==Cd?(ya.copy(n.backgroundRotation),ya.x*=-1,ya.y*=-1,ya.z*=-1,pd.makeRotationFromEuler(ya)):pd.identity(),pd}):console.error("THREE.SceneNode: Unknown scope:",t),s}},In.BACKGROUND_BLURRINESS="backgroundBlurriness",In.BACKGROUND_INTENSITY="backgroundIntensity",In.BACKGROUND_ROTATION="backgroundRotation",Y8=u(In,In.BACKGROUND_BLURRINESS),m8=u(In,In.BACKGROUND_INTENSITY),YO=u(In,In.BACKGROUND_ROTATION),GO=f(({texture:e,uv:t})=>{const s=1e-4,n=h().toVar();return yt(t.x.lessThan(s),()=>{n.assign(h(1,0,0))}).ElseIf(t.y.lessThan(s),()=>{n.assign(h(0,1,0))}).ElseIf(t.z.lessThan(s),()=>{n.assign(h(0,0,1))}).ElseIf(t.x.greaterThan(1-s),()=>{n.assign(h(-1,0,0))}).ElseIf(t.y.greaterThan(1-s),()=>{n.assign(h(0,-1,0))}).ElseIf(t.z.greaterThan(1-s),()=>{n.assign(h(0,0,-1))}).Else(()=>{const s=.01,o=e.sample(t.add(h(-s,0,0))).r.sub(e.sample(t.add(h(s,0,0))).r),i=e.sample(t.add(h(0,-s,0))).r.sub(e.sample(t.add(h(0,s,0))).r),a=e.sample(t.add(h(0,0,-s))).r.sub(e.sample(t.add(h(0,0,s))).r);n.assign(h(o,i,a))}),n.normalize()}),XO=class extends $a{static get type(){return"Texture3DNode"}constructor(e,t=null,n=null){super(e,t,n),this.isTexture3DNode=!0}getInputType(){return"texture3D"}getDefaultUV(){return h(.5,.5,.5)}setUpdateMatrix(){}setupUV(e,t){const n=this.value;return e.isFlipY()&&(n.isRenderTargetTexture===!0||n.isFramebufferTexture===!0)&&(this.sampler?t=t.flipY():t=t.setY(ne(Ro(this,this.levelNode).y).sub(t.y).sub(1))),t}generateUV(e,t){return t.build(e,"vec3")}generateOffset(e,t){return t.build(e,"ivec3")}normal(e){return GO({texture:this,uv:e})}},QO=L(XO).setParameterLength(1,3),Cl=new w,JO=class extends $a{static get type(){return"PassTextureNode"}constructor(e,t){super(t),this.passNode=e,this.setUpdateMatrix(!1)}setup(e){return this.passNode.build(e),super.setup(e)}clone(){return new this.constructor(this.passNode,this.value)}},f8=class extends JO{static get type(){return"PassMultipleTextureNode"}constructor(e,t,n=!1){super(e,null),this.textureName=t,this.previousTexture=n}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(e){return this.updateTexture(),super.setup(e)}clone(){const e=new this.constructor(this.passNode,this.textureName,this.previousTexture);return e.uvNode=this.uvNode,e.levelNode=this.levelNode,e.biasNode=this.biasNode,e.sampler=this.sampler,e.depthNode=this.depthNode,e.compareNode=this.compareNode,e.gradNode=this.gradNode,e}},p8=class _PassNode extends de{static get type(){return"PassNode"}constructor(e,t,n,s={}){super("vec4"),this.scope=e,this.scene=t,this.camera=n,this.options=s,this._pixelRatio=1,this._width=1,this._height=1;const o=new At;o.isRenderTargetTexture=!0,o.name="depth";const i=new zs(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:ht,...s});i.texture.name="output",i.depthTexture=o,this.renderTarget=i,this._textures={output:i.texture,depth:o},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=R(0),this._cameraFar=R(0),this._mrt=null,this._layers=null,this._resolution=1,this._viewport=null,this._scissor=null,this.isPassNode=!0,this.updateBeforeType=x.FRAME,this.global=!0}setResolution(e){return this._resolution=e,this}getResolution(){return this._resolution}setLayers(e){return this._layers=e,this}getLayers(){return this._layers}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}getTexture(e){let t=this._textures[e];if(t===0[0]){const n=this.renderTarget.texture;t=n.clone(),t.name=e,this._textures[e]=t,this.renderTarget.textures.push(t)}return t}getPreviousTexture(e){let t=this._previousTextures[e];return t===0[0]&&(t=this.getTexture(e).clone(),this._previousTextures[e]=t),t}toggleTexture(e){const t=this._previousTextures[e];if(t!==0[0]){const n=this._textures[e],s=this.renderTarget.textures.indexOf(n);this.renderTarget.textures[s]=t,this._textures[e]=t,this._previousTextures[e]=n,this._textureNodes[e].updateTexture(),this._previousTextureNodes[e].updateTexture()}}getTextureNode(e="output"){let t=this._textureNodes[e];return t===0[0]&&(t=a(new f8(this,e)),t.updateTexture(),this._textureNodes[e]=t),t}getPreviousTextureNode(e="output"){let t=this._previousTextureNodes[e];return t===0[0]&&(this._textureNodes[e]===0[0]&&this.getTextureNode(e),t=a(new f8(this,e,!0)),t.updateTexture(),this._previousTextureNodes[e]=t),t}getViewZNode(e="depth"){let t=this._viewZNodes[e];if(t===0[0]){const n=this._cameraNear,s=this._cameraFar;this._viewZNodes[e]=t=tm(this.getTextureNode(e),n,s)}return t}getLinearDepthNode(e="depth"){let t=this._linearDepthNodes[e];if(t===0[0]){const n=this._cameraNear,s=this._cameraFar,o=this.getViewZNode(e);this._linearDepthNodes[e]=t=Sa(o,n,s)}return t}async compileAsync(e){const t=e.getRenderTarget(),n=e.getMRT();e.setRenderTarget(this.renderTarget),e.setMRT(this._mrt),await e.compileAsync(this.scene,this.camera),e.setRenderTarget(t),e.setMRT(n)}setup({renderer:e}){return this.renderTarget.samples=this.options.samples===0[0]?e.samples:this.options.samples,this.renderTarget.texture.type=e.getColorBufferType(),this.scope===_PassNode.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(e){const{renderer:t}=e,{scene:i}=this;let n,o;const s=t.getOutputRenderTarget();s&&s.isXRRenderTarget===!0?(o=1,n=t.xr.getCamera(),t.xr.updateCamera(n),Cl.set(s.width,s.height)):(n=this.camera,o=t.getPixelRatio(),t.getSize(Cl)),this._pixelRatio=o,this.setSize(Cl.width,Cl.height);const a=t.getRenderTarget(),r=t.getMRT(),c=n.layers.mask;this._cameraNear.value=n.near,this._cameraFar.value=n.far,this._layers!==null&&(n.layers.mask=this._layers.mask);for(const e in this._previousTextures)this.toggleTexture(e);t.setRenderTarget(this.renderTarget),t.setMRT(this._mrt),t.render(i,n),t.setRenderTarget(a),t.setMRT(r),n.layers.mask=c}setSize(e,t){this._width=e,this._height=t;const n=this._width*this._pixelRatio*this._resolution,s=this._height*this._pixelRatio*this._resolution;this.renderTarget.setSize(n,s),this._scissor!==null&&this.renderTarget.scissor.copy(this._scissor),this._viewport!==null&&this.renderTarget.viewport.copy(this._viewport)}setScissor(e,t,n,s){e===null?this._scissor=null:(this._scissor===null&&(this._scissor=new j),e.isVector4?this._scissor.copy(e):this._scissor.set(e,t,n,s),this._scissor.multiplyScalar(this._pixelRatio*this._resolution).floor())}setViewport(e,t,n,s){e===null?this._viewport=null:(this._viewport===null&&(this._viewport=new j),e.isVector4?this._viewport.copy(e):this._viewport.set(e,t,n,s),this._viewport.multiplyScalar(this._pixelRatio*this._resolution).floor())}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}},p8.COLOR="color",p8.DEPTH="depth",GM=$s(h(1.6605,-.1246,-.0182),h(-.5876,1.1329,-.1006),h(-.0728,-.0083,1.1187)),YM=$s(h(.6274,.0691,.0164),h(.3293,.9195,.088),h(.0433,.0113,.8956)),ox=class extends m{static get type(){return"CodeNode"}constructor(e="",t=[],n=""){super("code"),this.isCodeNode=!0,this.global=!0,this.code=e,this.includes=t,this.language=n}setIncludes(e){return this.includes=e,this}getIncludes(){return this.includes}generate(e){const n=this.getIncludes(e);for(const t of n)t.build(e);const t=e.getCodeFromNode(this,this.getNodeType(e));return t.code=this.code,t.code}serialize(e){super.serialize(e),e.code=this.code,e.language=this.language}deserialize(e){super.deserialize(e),this.code=e.code,this.language=e.language}},ze=ox,ax=class extends ze{static get type(){return"FunctionNode"}constructor(e="",t=[],n=""){super(e,t,n)}getNodeType(e){return this.getNodeFunction(e).type}getMemberType(e,t){const n=this.getNodeType(e),s=e.getStructTypeNode(n);return s.getMemberType(e,t)}getInputs(e){return this.getNodeFunction(e).inputs}getNodeFunction(e){const n=e.getDataFromNode(this);let t=n.nodeFunction;return t===0[0]&&(t=e.parser.parseFunction(this.code),n.nodeFunction=t),t}generate(e,t){super.generate(e);const o=this.getNodeFunction(e),i=o.name,a=o.type,n=e.getCodeFromNode(this,a);i!==""&&(n.name=i);const s=e.getPropertyName(n),r=this.getNodeFunction(e).getCode(s);return n.code=r+`
`,t==="property"?s:e.format(`${s}()`,a,t)}},rx=ax,cx=class extends Map{get(e,t=null,...n){if(this.has(e))return super.get(e);if(t!==null){const s=t(...n);return this.set(e,s),s}}},KM=new cx;function dx(e){let t;const n=e.context.getViewZ;return n!==0[0]&&(t=n(this)),(t||fe.z).negate()}ux=f(([e,t],n)=>{const s=dx(n);return lr(e,t,s)}),hx=f(([e],t)=>{const n=dx(t);return e.mul(e,n,n).negate().exp().oneMinus()}),b8=f(([e,t])=>we(t.toFloat().mix(Ha.rgb,e.toVec3()),Ha.a)),fx=class extends m{constructor(e){super(),this.scope=e}generate(e){const{scope:t}=this,{renderer:n}=e;n.backend.isWebGLBackend===!0?e.addFlowCode(`	// ${t}Barrier 
`):e.addLineFlowCode(`${t}Barrier()`,this)}},WM=L(fx),dn=class extends m{static get type(){return"AtomicFunctionNode"}constructor(e,t,n){super("uint"),this.method=e,this.pointerNode=t,this.valueNode=n,this.parents=!0}getInputType(e){return this.pointerNode.getNodeType(e)}getNodeType(e){return this.getInputType(e)}generate(e){const t=e.getNodeProperties(this),n=t.parents,c=this.method,o=this.getNodeType(e),i=this.getInputType(e),l=this.pointerNode,a=this.valueNode,s=[];s.push(`&${l.build(e,i)}`),a!==null&&s.push(a.build(e,i));const r=`${e.getMethod(c,o)}( ${s.join(", ")} )`,d=!!n&&n.length===1&&n[0].isStackNode===!0;if(d)e.addLineFlowCode(r,this);else return t.constNode===0[0]&&(t.constNode=si(r,o).toConst()),t.constNode.build(e)}},dn.ATOMIC_LOAD="atomicLoad",dn.ATOMIC_STORE="atomicStore",dn.ATOMIC_ADD="atomicAdd",dn.ATOMIC_SUB="atomicSub",dn.ATOMIC_MAX="atomicMax",dn.ATOMIC_MIN="atomicMin",dn.ATOMIC_AND="atomicAnd",dn.ATOMIC_OR="atomicOr",dn.ATOMIC_XOR="atomicXor",BM=L(dn),$=class _SubgroupFunctionNode extends de{static get type(){return"SubgroupFunctionNode"}constructor(e,t=null,n=null){super(),this.method=e,this.aNode=t,this.bNode=n}getInputType(e){const t=this.aNode?this.aNode.getNodeType(e):null,n=this.bNode?this.bNode.getNodeType(e):null,s=e.isMatrix(t)?0:e.getTypeLength(t),o=e.isMatrix(n)?0:e.getTypeLength(n);return s>o?t:n}getNodeType(e){const t=this.method;return t===_SubgroupFunctionNode.SUBGROUP_ELECT?"bool":t===_SubgroupFunctionNode.SUBGROUP_BALLOT?"uvec4":this.getInputType(e)}generate(e,t){const n=this.method,o=this.getNodeType(e),r=this.getInputType(e),a=this.aNode,i=this.bNode,s=[];if(n===_SubgroupFunctionNode.SUBGROUP_BROADCAST||n===_SubgroupFunctionNode.SUBGROUP_SHUFFLE||n===_SubgroupFunctionNode.QUAD_BROADCAST){const t=i.getNodeType(e);s.push(a.build(e,o),i.build(e,t==="float"?"int":o))}else n===_SubgroupFunctionNode.SUBGROUP_SHUFFLE_XOR||n===_SubgroupFunctionNode.SUBGROUP_SHUFFLE_DOWN||n===_SubgroupFunctionNode.SUBGROUP_SHUFFLE_UP?s.push(a.build(e,o),i.build(e,"uint")):(a!==null&&s.push(a.build(e,r)),i!==null&&s.push(i.build(e,r)));const c=s.length===0?"()":`( ${s.join(", ")} )`;return e.format(`${e.getMethod(n,o)}${c}`,o,t)}serialize(e){super.serialize(e),e.method=this.method}deserialize(e){super.deserialize(e),this.method=e.method}},$.SUBGROUP_ELECT="subgroupElect",$.SUBGROUP_BALLOT="subgroupBallot",$.SUBGROUP_ADD="subgroupAdd",$.SUBGROUP_INCLUSIVE_ADD="subgroupInclusiveAdd",$.SUBGROUP_EXCLUSIVE_AND="subgroupExclusiveAdd",$.SUBGROUP_MUL="subgroupMul",$.SUBGROUP_INCLUSIVE_MUL="subgroupInclusiveMul",$.SUBGROUP_EXCLUSIVE_MUL="subgroupExclusiveMul",$.SUBGROUP_AND="subgroupAnd",$.SUBGROUP_OR="subgroupOr",$.SUBGROUP_XOR="subgroupXor",$.SUBGROUP_MIN="subgroupMin",$.SUBGROUP_MAX="subgroupMax",$.SUBGROUP_ALL="subgroupAll",$.SUBGROUP_ANY="subgroupAny",$.SUBGROUP_BROADCAST_FIRST="subgroupBroadcastFirst",$.QUAD_SWAP_X="quadSwapX",$.QUAD_SWAP_Y="quadSwapY",$.QUAD_SWAP_DIAGONAL="quadSwapDiagonal",$.SUBGROUP_BROADCAST="subgroupBroadcast",$.SUBGROUP_SHUFFLE="subgroupShuffle",$.SUBGROUP_SHUFFLE_XOR="subgroupShuffleXor",$.SUBGROUP_SHUFFLE_UP="subgroupShuffleUp",$.SUBGROUP_SHUFFLE_DOWN="subgroupShuffleDown",$.QUAD_BROADCAST="quadBroadcast",jx=e=>e.sort((e,t)=>e.id-t.id),yx=(e,t)=>{for(const n of t)if(n.isAnalyticLightNode&&n.light.id===e)return n;return null},od=new WeakMap,ca=[],Ox=class extends m{static get type(){return"LightsNode"}constructor(){super("vec3"),this.totalDiffuseNode=pl("vec3","totalDiffuse"),this.totalSpecularNode=pl("vec3","totalSpecular"),this.outgoingLightNode=pl("vec3","outgoingLight"),this._lights=[],this._lightNodes=null,this._lightNodesHash=null,this.global=!0}customCacheKey(){const e=this._lights;for(let n=0;n<e.length;n++){const t=e[n];if(ca.push(t.id),ca.push(t.castShadow?1:0),t.isSpotLight===!0){const e=t.map!==null?t.map.id:-1,n=t.colorNode?t.colorNode.getCacheKey():-1;ca.push(e,n)}}const t=hd(ca);return ca.length=0,t}getHash(e){if(this._lightNodesHash===null){this._lightNodes===null&&this.setupLightsNode(e);const t=[];for(const e of this._lightNodes)t.push(e.getHash());this._lightNodesHash="lights-"+t.join(",")}return this._lightNodesHash}analyze(e){const t=e.getNodeProperties(this);for(const n of t.nodes)n.build(e);t.outputNode.build(e)}setupLightsNode(e){const t=[],n=this._lightNodes,s=jx(this._lights),o=e.renderer.library;for(const e of s)if(e.isNode)t.push(a(e));else{let s=null;if(n!==null&&(s=yx(e.id,n)),s===null){const s=o.getLightNodeClass(e.constructor);if(s===null){console.warn(`LightsNode.setupNodeLights: Light node not found for ${e.constructor.name}`);continue}let n=null;od.has(e)?n=od.get(e):(n=a(new s(e)),od.set(e,n)),t.push(n)}}this._lightNodes=t}setupDirectLight(e,t,n){const{lightingModel:s,reflectedLight:o}=e.context;s.direct({...n,lightNode:t,reflectedLight:o},e)}setupDirectRectAreaLight(e,t,n){const{lightingModel:s,reflectedLight:o}=e.context;s.directRectArea({...n,lightNode:t,reflectedLight:o},e)}setupLights(e,t){for(const n of t)n.build(e)}getLightNodes(e){return this._lightNodes===null&&this.setupLightsNode(e),this._lightNodes}setup(e){const i=e.lightsNode;e.lightsNode=this;let t=this.outgoingLightNode;const n=e.context,s=n.lightingModel,o=e.getNodeProperties(this);if(s){const{totalDiffuseNode:r,totalSpecularNode:c}=this;n.outgoingLight=t;const d=e.addStack();o.nodes=d.nodes,s.start(e);const{backdrop:a,backdropAlpha:l}=n,{directDiffuse:u,directSpecular:m,indirectDiffuse:f,indirectSpecular:p}=n.reflectedLight;let i=u.add(f);a!==null&&(l!==null?i=h(l.mix(i,a)):i=h(a),n.material.transparent=!0),r.assign(i),c.assign(m.add(p)),t.assign(r.add(c)),s.finish(e),t=t.bypass(e.removeStack())}else o.nodes=[];return e.lightsNode=i,t}setLights(e){return this._lights=e,this._lightNodes=null,this._lightNodesHash=null,this}getLights(){return this._lights}get hasLights(){return this._lights.length>0}},y8=Ox,_8=g(1),ed=g(-2),Tl=g(.8),Zl=g(-1),zl=g(.4),Xl=g(2),Nl=g(.305),Yl=g(3),C8=g(.21),Dx=g(4),O8=g(4),Lx=g(16),Rx=f(([e])=>{const t=h(Lt(e)).toVar(),n=g(-1).toVar();return yt(t.x.greaterThan(t.z),()=>{yt(t.x.greaterThan(t.y),()=>{n.assign(Nt(e.x.greaterThan(0),0,3))}).Else(()=>{n.assign(Nt(e.y.greaterThan(0),1,4))})}).Else(()=>{yt(t.z.greaterThan(t.y),()=>{n.assign(Nt(e.z.greaterThan(0),2,5))}).Else(()=>{n.assign(Nt(e.y.greaterThan(0),1,4))})}),n}).setLayout({name:"getFace",type:"float",inputs:[{name:"direction",type:"vec3"}]}),Px=f(([e,t])=>{const n=re().toVar();return yt(t.equal(0),()=>{n.assign(re(e.z,e.y).div(Lt(e.x)))}).ElseIf(t.equal(1),()=>{n.assign(re(e.x.negate(),e.z.negate()).div(Lt(e.y)))}).ElseIf(t.equal(2),()=>{n.assign(re(e.x.negate(),e.y).div(Lt(e.z)))}).ElseIf(t.equal(3),()=>{n.assign(re(e.z.negate(),e.y).div(Lt(e.x)))}).ElseIf(t.equal(4),()=>{n.assign(re(e.x.negate(),e.z).div(Lt(e.y)))}).Else(()=>{n.assign(re(e.x,e.y).div(Lt(e.z)))}),J(.5,n.add(1))}).setLayout({name:"getUV",type:"vec2",inputs:[{name:"direction",type:"vec3"},{name:"face",type:"float"}]}),Hx=f(([e])=>{const t=g(0).toVar();return yt(e.greaterThanEqual(Tl),()=>{t.assign(_8.sub(e).mul(Zl.sub(ed)).div(_8.sub(Tl)).add(ed))}).ElseIf(e.greaterThanEqual(zl),()=>{t.assign(Tl.sub(e).mul(Xl.sub(Zl)).div(Tl.sub(zl)).add(Zl))}).ElseIf(e.greaterThanEqual(Nl),()=>{t.assign(zl.sub(e).mul(Yl.sub(Xl)).div(zl.sub(Nl)).add(Xl))}).ElseIf(e.greaterThanEqual(C8),()=>{t.assign(Nl.sub(e).mul(Dx.sub(Yl)).div(Nl.sub(C8)).add(Yl))}).Else(()=>{t.assign(g(-2).mul(ro(J(1.16,e))))}),t}).setLayout({name:"roughnessToMip",type:"float",inputs:[{name:"roughness",type:"float"}]}),Ix=f(([e,t])=>{const s=e.toVar();s.assign(J(2,s).sub(1));const n=h(s,1).toVar();return yt(t.equal(0),()=>{n.assign(n.zyx)}).ElseIf(t.equal(1),()=>{n.assign(n.xzy),n.xz.mulAssign(-1)}).ElseIf(t.equal(2),()=>{n.x.mulAssign(-1)}).ElseIf(t.equal(3),()=>{n.assign(n.zyx),n.xz.mulAssign(-1)}).ElseIf(t.equal(4),()=>{n.assign(n.xzy),n.xy.mulAssign(-1)}).ElseIf(t.equal(5),()=>{n.z.mulAssign(-1)}),n}).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]}),Bx=f(([e,t,n,s,o,i])=>{const u=g(n),r=h(t),c=cc(Hx(u),ed,i),l=ua(c),d=aa(c),a=h(sd(e,r,d,s,o,i)).toVar();return yt(l.notEqual(0),()=>{const t=h(sd(e,r,d.add(1),s,o,i)).toVar();a.assign(va(a,t,l))}),a}),sd=f(([e,t,n,s,o,i])=>{const r=g(n).toVar(),d=h(t),c=g(Rx(d)).toVar(),u=g(rl(O8.sub(r),0)).toVar();r.assign(rl(r,O8));const l=g(ha(r)).toVar(),a=re(Px(d,c).mul(l.sub(2)).add(1)).toVar();return yt(c.greaterThan(2),()=>{a.y.addAssign(l),c.subAssign(3)}),a.x.addAssign(c.mul(l)),a.x.addAssign(u.mul(J(3,Lx))),a.y.addAssign(J(4,ha(i).sub(l))),a.x.mulAssign(s),a.y.mulAssign(o),e.sample(a).grad(re(),re())}),id=f(({envMap:e,mipInt:t,outputDirection:n,theta:s,axis:o,CUBEUV_TEXEL_WIDTH:i,CUBEUV_TEXEL_HEIGHT:a,CUBEUV_MAX_MIP:r})=>{const c=Q2(s),l=n.mul(c).add(o.cross(n).mul(ma(s))).add(o.mul(o.dot(n).mul(c.oneMinus())));return sd(e,l,t,i,a,r)}),Wx=f(({n:e,latitudinal:t,poleAxis:n,outputDirection:s,weights:o,samples:i,dTheta:a,mipInt:r,envMap:c,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:u})=>{const m=h(Nt(t,n,P0(n,s))).toVar();yt(m.equal(h(0)),()=>{m.assign(h(s.z,0,s.x.negate()))}),m.assign(Ju(m));const f=h().toVar();return f.addAssign(o.element(0).mul(id({theta:0,axis:m,outputDirection:s,mipInt:r,envMap:c,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:u}))),to({start:ne(1),end:e},({i:e})=>{yt(e.greaterThanEqual(i),()=>{Oj()});const t=g(a.mul(g(e))).toVar();f.addAssign(o.element(e).mul(id({theta:t.mul(-1),axis:m,outputDirection:s,mipInt:r,envMap:c,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:u}))),f.addAssign(o.element(e).mul(id({theta:t,axis:m,outputDirection:s,mipInt:r,envMap:c,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:u})))}),we(f,1)}),yo=4,v8=[.125,.215,.35,.446,.526,.582],Ws=20,ud=new q1(-1,1,1,-1,0,1),Gx=new Ee(90,1),h8=new T,fd=null,yd=0,nu=0,io=(1+5**.5)/2,zo=1/io,rm=[new t(-io,zo,0),new t(io,zo,0),new t(-zo,0,io),new t(zo,0,io),new t(0,io,-zo),new t(0,io,zo),new t(-1,1,-1),new t(1,1,-1),new t(-1,1,1),new t(1,1,1)],sC=new t,em=new WeakMap,iC=[3,1,5,0,4,2],hu=Ix(Ka(),oo("faceIndex")).normalize(),mu=h(hu.x,hu.y,hu.z),cC=class{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._lodMeshes=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._backgroundBox=null}get _hasInitialized(){return this._renderer.hasInitialized()}fromScene(e,t=0,n=.1,s=100,o={}){const{size:r=256,position:c=sC,renderTarget:a=null}=o;if(this._setSize(r),this._hasInitialized===!1){console.warn("THREE.PMREMGenerator: .fromScene() called before the backend is initialized. Try using .fromSceneAsync() instead.");const i=a||this._allocateTarget();return o.renderTarget=i,this.fromSceneAsync(e,t,n,s,o),i}fd=this._renderer.getRenderTarget(),yd=this._renderer.getActiveCubeFace(),nu=this._renderer.getActiveMipmapLevel();const i=a||this._allocateTarget();return i.depthBuffer=!0,this._init(i),this._sceneToCubeUV(e,n,s,i,c),t>0&&this._blur(i,0,0,t),this._applyPMREM(i),this._cleanup(i),i}async fromSceneAsync(e,t=0,n=.1,s=100,o={}){return this._hasInitialized===!1&&await this._renderer.init(),this.fromScene(e,t,n,s,o)}fromEquirectangular(e,t=null){if(this._hasInitialized===!1){console.warn("THREE.PMREMGenerator: .fromEquirectangular() called before the backend is initialized. Try using .fromEquirectangularAsync() instead."),this._setSizeFromTexture(e);const n=t||this._allocateTarget();return this.fromEquirectangularAsync(e,n),n}return this._fromTexture(e,t)}async fromEquirectangularAsync(e,t=null){return this._hasInitialized===!1&&await this._renderer.init(),this._fromTexture(e,t)}fromCubemap(e,t=null){if(this._hasInitialized===!1){console.warn("THREE.PMREMGenerator: .fromCubemap() called before the backend is initialized. Try using .fromCubemapAsync() instead."),this._setSizeFromTexture(e);const n=t||this._allocateTarget();return this.fromCubemapAsync(e,t),n}return this._fromTexture(e,t)}async fromCubemapAsync(e,t=null){return this._hasInitialized===!1&&await this._renderer.init(),this._fromTexture(e,t)}async compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=fC(),await this._compileMaterial(this._cubemapMaterial))}async compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=pC(),await this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose(),this._backgroundBox!==null&&(this._backgroundBox.geometry.dispose(),this._backgroundBox.material.dispose())}_setSizeFromTexture(e){e.mapping===Zt||e.mapping===Qt?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4)}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=2**this._lodMax}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(fd,yd,nu),e.scissorTest=!1,fu(e,0,0,e.width,e.height)}_fromTexture(e,t){this._setSizeFromTexture(e),fd=this._renderer.getRenderTarget(),yd=this._renderer.getActiveCubeFace(),nu=this._renderer.getActiveMipmapLevel();const n=t||this._allocateTarget();return this._init(n),this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTarget(){const e=3*Math.max(this._cubeSize,16*7),t=4*this._cubeSize,n=dC(e,t);return n}_init(e){if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e.width||this._pingPongRenderTarget.height!==e.height){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=dC(e.width,e.height);const{_lodMax:t}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas,lodMeshes:this._lodMeshes}=pM(t),this._blurMaterial=fM(t,e.width,e.height))}}async _compileMaterial(e){const t=new be(this._lodPlanes[0],e);await this._renderer.compile(t,ud)}_sceneToCubeUV(e,t,n,s,o){const i=Gx;i.near=t,i.far=n;const l=[1,1,1,1,-1,1],d=[1,-1,1,-1,1,-1],a=this._renderer,h=a.autoClear;a.getClearColor(h8),a.autoClear=!1;let r=this._backgroundBox;if(r===null){const e=new sn({name:"PMREM.Background",side:B,depthWrite:!1,depthTest:!1});r=new be(new kr,e)}let u=!1;const c=e.background;c?c.isColor&&(r.material.color.copy(c),e.background=null,u=!0):(r.material.color.copy(h8),u=!0),a.setRenderTarget(s),a.clear(),u&&a.render(r,i);for(let t=0;t<6;t++){const r=t%3;r===0?(i.up.set(0,l[t],0),i.position.set(o.x,o.y,o.z),i.lookAt(o.x+d[t],o.y,o.z)):r===1?(i.up.set(0,0,l[t]),i.position.set(o.x,o.y,o.z),i.lookAt(o.x,o.y+d[t],o.z)):(i.up.set(0,l[t],0),i.position.set(o.x,o.y,o.z),i.lookAt(o.x,o.y,o.z+d[t]));const n=this._cubeSize;fu(s,r*n,t>2?n:0,n,n),a.render(e,i)}a.autoClear=h,e.background=c}_textureToCubeUV(e,t){const n=this._renderer,s=e.mapping===Zt||e.mapping===Qt;s?this._cubemapMaterial===null&&(this._cubemapMaterial=fC(e)):this._equirectMaterial===null&&(this._equirectMaterial=pC(e));const o=s?this._cubemapMaterial:this._equirectMaterial;o.fragmentNode.value=e;const i=this._lodMeshes[0];i.material=o;const a=this._cubeSize;fu(t,0,0,3*a,2*a),n.setRenderTarget(t),n.render(i,ud)}_applyPMREM(e){const t=this._renderer,s=t.autoClear;t.autoClear=!1;const n=this._lodPlanes.length;for(let t=1;t<n;t++){const s=(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1])**.5,o=rm[(n-t-1)%rm.length];this._blur(e,t-1,t,s,o)}t.autoClear=s}_blur(e,t,n,s,o){const i=this._pingPongRenderTarget;this._halfBlur(e,i,t,n,s,"latitudinal",o),this._halfBlur(i,e,n,n,s,"longitudinal",o)}_halfBlur(e,t,n,s,o,i,a){const g=this._renderer,v=this._blurMaterial;i!=="latitudinal"&&i!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const j=3,m=this._lodMeshes[s];m.material=v;const r=em.get(v),b=this._sizeLods[n]-1,p=isFinite(o)?Math.PI/(2*b):2*Math.PI/(2*Ws-1),f=o/p,l=isFinite(o)?1+Math.floor(j*f):Ws;l>Ws&&console.warn(`sigmaRadians, ${o}, is too large and will clip, as it requested ${l} samples when the maximum is set to ${Ws}`);const c=[];let h=0;for(let e=0;e<Ws;++e){const n=e/f,t=Math.exp(-n*n/2);c.push(t),e===0?h+=t:e<l&&(h+=2*t)}for(let e=0;e<c.length;e++)c[e]=c[e]/h;e.texture.frame=(e.texture.frame||0)+1,r.envMap.value=e.texture,r.samples.value=l,r.weights.array=c,r.latitudinal.value=i==="latitudinal"?1:0,a&&(r.poleAxis.value=a);const{_lodMax:u}=this;r.dTheta.value=p,r.mipInt.value=u-n;const d=this._sizeLods[s],y=3*d*(s>u-yo?s-u+yo:0),_=4*(this._cubeSize-d);fu(t,y,_,3*d,2*d),g.setRenderTarget(t),g.render(m,ud)}};function pM(e){const n=[],s=[],o=[],i=[];let t=e;const a=e-yo+1+v8.length;for(let d=0;d<a;d++){const f=2**t;s.push(f);let v=1/f;d>e-yo?v=v8[d-e+yo-1]:d===0&&(v=0),o.push(v);const b=1/(f-2),c=-b,l=1+b,w=[c,c,l,c,l,l,c,c,l,l,c,l],h=6,r=6,m=3,p=2,g=1,j=new Float32Array(m*r*h),y=new Float32Array(p*r*h),_=new Float32Array(g*r*h);for(let s=0;s<h;s++){const t=s%3*2/3-1,n=s>2?0:-1,o=[t,n,0,t+2/3,n,0,t+2/3,n+1,0,t,n,0,t+2/3,n+1,0,t,n+1,0],e=iC[s];j.set(o,m*r*e),y.set(w,p*r*e);const i=[e,e,e,e,e,e];_.set(i,g*r*e)}const u=new Cn;u.setAttribute("position",new Me(j,m)),u.setAttribute("uv",new Me(y,p)),u.setAttribute("faceIndex",new Me(_,g)),n.push(u),i.push(new be(u,null)),t>yo&&t--}return{lodPlanes:n,sizeLods:s,sigmas:o,lodMeshes:i}}function dC(e,t){const s={magFilter:ie,minFilter:ie,generateMipmaps:!1,type:ht,format:G,colorSpace:Rs},n=new zs(e,t,s);return n.texture.mapping=Cs,n.texture.name="PMREM.cubeUv",n.texture.isPMREMTexture=!0,n.scissorTest=!0,n}function fu(e,t,n,s,o){e.viewport.set(t,n,s,o),e.scissor.set(t,n,s,o)}function Zh(e){const t=new ko;return t.depthTest=!1,t.depthWrite=!1,t.blending=Qe,t.name=`PMREM_${e}`,t}function fM(e,n,s){const d=wn(new Array(Ws).fill(0)),v=R(new t(0,1,0)),p=R(0),c=g(Ws),i=R(0),l=R(1),r=Wt(null),u=R(0),h=g(1/n),m=g(1/s),f=g(e),a={n:c,latitudinal:i,weights:d,poleAxis:v,outputDirection:mu,dTheta:p,samples:l,envMap:r,mipInt:u,CUBEUV_TEXEL_WIDTH:h,CUBEUV_TEXEL_HEIGHT:m,CUBEUV_MAX_MIP:f},o=Zh("blur");return o.fragmentNode=Wx({...a,latitudinal:i.equal(1)}),em.set(o,a),o}function fC(e){const t=Zh("cubemap");return t.fragmentNode=Aa(e,mu),t}function pC(e){const t=Zh("equirect");return t.fragmentNode=Wt(e,Ch(mu),0),t}gC=cC,Xh=new WeakMap;function mM(e){const t=Math.log2(e)-2,n=1/e,s=1/(3*Math.max(2**t,7*16));return{texelWidth:s,texelHeight:n,maxMip:t}}function hM(e,t,n){const o=uM(t);let s=o.get(e);const i=s!==0[0]?s.pmremVersion:-1;if(i!==e.pmremVersion){const t=e.image;if(e.isCubeTexture)if(dM(t))s=n.fromCubemap(e,s);else return null;else if(lM(t))s=n.fromEquirectangular(e,s);else return null;s.pmremVersion=e.pmremVersion,o.set(e,s)}return s.texture}function uM(e){let t=Xh.get(e);return t===0[0]&&(t=new WeakMap,Xh.set(e,t)),t}_C=class extends de{static get type(){return"PMREMNode"}constructor(e,t=null,n=null){super("vec3"),this._value=e,this._pmrem=null,this.uvNode=t,this.levelNode=n,this._generator=null;const s=new Te;s.isRenderTargetTexture=!0,this._texture=Wt(s),this._width=R(0),this._height=R(0),this._maxMip=R(0),this.updateBeforeType=x.RENDER}set value(e){this._value=e,this._pmrem=null}get value(){return this._value}updateFromTexture(e){const t=mM(e.image.height);this._texture.value=e,this._width.value=t.texelWidth,this._height.value=t.texelHeight,this._maxMip.value=t.maxMip}updateBefore(e){let t=this._pmrem;const s=t?t.pmremVersion:-1,n=this._value;s!==n.pmremVersion&&(n.isPMREMTexture===!0?t=n:t=hM(n,e.renderer,this._generator),t!==null&&(this._pmrem=t,this.updateFromTexture(t)))}setup(e){this._generator===null&&(this._generator=new gC(e.renderer)),this.updateBefore(e);let t=this.uvNode;t===null&&e.context.getUV&&(t=e.context.getUV(this)),t=am.mul(h(t.x,t.y.negate(),t.z));let n=this.levelNode;return n===null&&e.context.getTextureLevel&&(n=e.context.getTextureLevel(this)),Bx(this._texture,t,n,this._width,this._height,this._maxMip)}dispose(){super.dispose(),this._generator!==null&&this._generator.dispose()}};function dM(e){if(e==null)return!1;let t=0;const n=6;for(let s=0;s<n;s++)e[s]!==0[0]&&t++;return t===n}function lM(e){return e!=null&&e.height>0}xC=L(_C).setParameterLength(1,3),cM=f(([e=Ka()],{renderer:t,material:n})=>{const s=M0(e.mul(2).sub(1));let o;if(n.alphaToCoverage&&t.samples>1){const e=g(s.fwidth()).toVar();o=lr(e.oneMinus(),e.add(1),s).oneMinus()}else o=Nt(s.greaterThan(1),0,1);return o}),rM=g(1/Math.PI),Dt=new xd,AC=class extends Bn{constructor(e,t){super(),this.renderer=e,this.nodes=t}update(e,t,n){const s=this.renderer,o=this.nodes.getBackgroundNode(e)||e.background;let i=!1;if(o===null)s._clearColor.getRGB(Dt),Dt.a=s._clearColor.a;else if(o.isColor===!0)o.getRGB(Dt),Dt.a=1,i=!0;else if(o.isNode===!0){const i=this.get(e),a=o;Dt.copy(s._clearColor);let n=i.backgroundMesh;if(n===0[0]){let s=function(){o.removeEventListener("dispose",s),n.material.dispose(),n.geometry.dispose()};const r=Qr(we(a).mul(m8),{getUV:()=>YO.mul(Oy),getTextureLevel:()=>Y8});let t=Km;t=t.setZ(t.w);const e=new ko;e.name="Background.material",e.side=B,e.depthTest=!1,e.depthWrite=!1,e.allowOverride=!1,e.fog=!1,e.lights=!1,e.vertexNode=t,e.colorNode=r,i.backgroundMeshNode=r,i.backgroundMesh=n=new be(new kw(1,32,32),e),n.frustumCulled=!1,n.name="Background.mesh",n.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)},o.addEventListener("dispose",s)}const r=a.getCacheKey();i.backgroundCacheKey!==r&&(i.backgroundMeshNode.node=we(a).mul(m8),i.backgroundMeshNode.needsUpdate=!0,n.material.needsUpdate=!0,i.backgroundCacheKey=r),t.unshift(n,n.geometry,n.material,0,0,null,null)}else console.error("THREE.Renderer: Unsupported background configuration.",o);const a=s.xr.getEnvironmentBlendMode();if(a==="additive"?Dt.set(0,0,0,1):a==="alpha-blend"&&Dt.set(0,0,0,0),s.autoClear===!0||i===!0){const e=n.clearColorValue;e.r=Dt.r,e.g=Dt.g,e.b=Dt.b,e.a=Dt.a,(s.backend.isWebGLBackend===!0||s.alpha===!0)&&(e.r*=e.a,e.g*=e.a,e.b*=e.a),n.depthClearValue=s._clearDepth,n.stencilClearValue=s._clearStencil,n.clearColor=s.autoClearColor===!0,n.clearDepth=s.autoClearDepth===!0,n.clearStencil=s.autoClearStencil===!0}else n.clearColor=!1,n.clearDepth=!1,n.clearStencil=!1}},SC=AC,MC=0,FC=class{constructor(e="",t=[],n=0,s=[]){this.name=e,this.bindings=t,this.index=n,this.bindingsReference=s,this.id=MC++}},vu=FC,zC=class{constructor(e,t,n,s,o,i,a,r,c,l=[]){this.vertexShader=e,this.fragmentShader=t,this.computeShader=n,this.transforms=l,this.nodeAttributes=s,this.bindings=o,this.updateNodes=i,this.updateBeforeNodes=a,this.updateAfterNodes=r,this.observer=c,this.usedTimes=0}createBindings(){const e=[];for(const t of this.bindings){const n=t.bindings[0].groupNode.shared;if(n!==!0){const n=new vu(t.name,[],t.index,t.bindingsReference);e.push(n);for(const e of t.bindings)n.bindings.push(e.clone())}else e.push(t)}return e}},DC=zC,NC=class extends i2{constructor(e=1,t={}){super(e,t),this.isCubeRenderTarget=!0}fromEquirectangularTexture(e,t){const i=t.minFilter,a=t.generateMipmaps;t.generateMipmaps=!0,this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const r=new kr(5,5,5),c=Ch(uh),n=new ko;n.colorNode=Wt(t,c,0),n.side=B,n.blending=Qe;const s=new be(r,n),o=new Uc;o.add(s),t.minFilter===Be&&(t.minFilter=ie);const l=new a2(1,10,this),d=e.getMRT();return e.setMRT(null),l.update(e,o),e.setMRT(d),t.minFilter=i,t.currentGenerateMipmaps=a,s.geometry.dispose(),s.material.dispose(),this}},Bh=NC,Ua=new WeakMap,PC=class extends de{static get type(){return"CubeMapNode"}constructor(e){super("vec3"),this.envNode=e,this._cubeTexture=null,this._cubeTextureNode=Aa(null);const t=new oa;t.isRenderTargetTexture=!0,this._defaultTexture=t,this.updateBeforeType=x.RENDER}updateBefore(e){const{renderer:n,material:s}=e,t=this.envNode;if(t.isTextureNode||t.isMaterialReferenceNode){const e=t.isTextureNode?t.value:s[t.property];if(e&&e.isTexture){const t=e.mapping;if(t===Po||t===Ho){if(Ua.has(e)){const t=Ua.get(e);BC(t,e.mapping),this._cubeTexture=t}else{const t=e.image;if(aM(t)){const s=new Bh(t.height);s.fromEquirectangularTexture(n,e),BC(s.texture,e.mapping),this._cubeTexture=s.texture,Ua.set(e,s.texture),e.addEventListener("dispose",IC)}else this._cubeTexture=this._defaultTexture}this._cubeTextureNode.value=this._cubeTexture}else this._cubeTextureNode=this.envNode}}}setup(e){return this.updateBefore(e),this._cubeTextureNode}};function aM(e){return e!=null&&e.height>0}function IC(e){const t=e.target;t.removeEventListener("dispose",IC);const n=Ua.get(t);n!==0[0]&&(Ua.delete(t),n.dispose())}function BC(e,t){t===Po?e.mapping=Zt:t===Ho&&(e.mapping=Qt)}VC=L(PC).setParameterLength(1),$C=class{constructor(e,t,n=null){this.isNodeAttribute=!0,this.name=e,this.type=t,this.node=n}},Ih=$C,UC=class{constructor(e,t,n){this.isNodeUniform=!0,this.name=e,this.type=t,this.node=n}get value(){return this.node.value}set value(e){this.node.value=e}get id(){return this.node.id}get groupNode(){return this.node.groupNode}},KC=UC,qC=class{constructor(e,t,n=!1,s=null){this.isNodeVar=!0,this.name=e,this.type=t,this.readOnly=n,this.count=s}},Lh=qC,GC=class extends Lh{constructor(e,t,n=null,s=null){super(e,t),this.needsInterpolation=!1,this.isNodeVarying=!0,this.interpolationType=n,this.interpolationSampling=s}},XC=GC,QC=class{constructor(e,t,n=""){this.name=e,this.type=t,this.code=n,Object.defineProperty(this,"isNodeCode",{value:!0})}},ZC=QC,JC=0,eE=class{constructor(e=null){this.id=JC++,this.nodesData=new WeakMap,this.parent=e}getData(e){let t=this.nodesData.get(e);return t===0[0]&&this.parent!==null&&(t=this.parent.getData(e)),t}setData(e,t){this.nodesData.set(e,t)}},Cu=eE,nE=class{constructor(e,t){this.name=e,this.members=t,this.output=!1}},sE=nE,vs=class{constructor(e,t){this.name=e,this.value=t,this.boundary=0,this.itemSize=0,this.offset=0}setValue(e){this.value=e}getValue(){return this.value}},iE=class extends vs{constructor(e,t=0){super(e,t),this.isNumberUniform=!0,this.boundary=4,this.itemSize=1}},aE=class extends vs{constructor(e,t=new w){super(e,t),this.isVector2Uniform=!0,this.boundary=8,this.itemSize=2}},rE=class extends vs{constructor(e,n=new t){super(e,n),this.isVector3Uniform=!0,this.boundary=16,this.itemSize=3}},cE=class extends vs{constructor(e,t=new j){super(e,t),this.isVector4Uniform=!0,this.boundary=16,this.itemSize=4}},lE=class extends vs{constructor(e,t=new T){super(e,t),this.isColorUniform=!0,this.boundary=16,this.itemSize=3}},dE=class extends vs{constructor(e,t=new w0){super(e,t),this.isMatrix2Uniform=!0,this.boundary=8,this.itemSize=4}},uE=class extends vs{constructor(e,t=new b){super(e,t),this.isMatrix3Uniform=!0,this.boundary=48,this.itemSize=12}},hE=class extends vs{constructor(e,t=new W){super(e,t),this.isMatrix4Uniform=!0,this.boundary=64,this.itemSize=16}},mE=class extends iE{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}},fE=class extends aE{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}},pE=class extends rE{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}},gE=class extends cE{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}},vE=class extends lE{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}},bE=class extends dE{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}},jE=class extends uE{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}},yE=class extends hE{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}},zh=new WeakMap,wE=new Map([[Int8Array,"int"],[Int16Array,"int"],[Int32Array,"int"],[Uint8Array,"uint"],[Uint16Array,"uint"],[Uint32Array,"uint"],[Float32Array,"float"]]),Rc=e=>/e/g.test(e)?String(e).replace(/\+/g,""):(e=Number(e),e+(e%1?"":".0")),xE=class{constructor(e,t,n){this.object=e,this.material=e&&e.material||null,this.geometry=e&&e.geometry||null,this.renderer=t,this.parser=n,this.scene=null,this.camera=null,this.nodes=[],this.sequentialNodes=[],this.updateNodes=[],this.updateBeforeNodes=[],this.updateAfterNodes=[],this.hashNodes={},this.observer=null,this.lightsNode=null,this.environmentNode=null,this.fogNode=null,this.clippingContext=null,this.vertexShader=null,this.fragmentShader=null,this.computeShader=null,this.flowNodes={vertex:[],fragment:[],compute:[]},this.flowCode={vertex:"",fragment:"",compute:""},this.uniforms={vertex:[],fragment:[],compute:[],index:0},this.structs={vertex:[],fragment:[],compute:[],index:0},this.types={vertex:[],fragment:[],compute:[],index:0},this.bindings={vertex:{},fragment:{},compute:{}},this.bindingsIndexes={},this.bindGroups=null,this.attributes=[],this.bufferAttributes=[],this.varyings=[],this.codes={},this.vars={},this.declarations={},this.flow={code:""},this.chaining=[],this.stack=T1(),this.stacks=[],this.tab="	",this.currentFunctionNode=null,this.context={material:this.material},this.cache=new Cu,this.globalCache=this.cache,this.flowsData=new WeakMap,this.shaderStage=null,this.buildStage=null,this.subBuildLayers=[],this.currentStack=null,this.subBuildFn=null}getBindGroupsCache(){let e=zh.get(this.renderer);return e===0[0]&&(e=new ln,zh.set(this.renderer,e)),e}createRenderTarget(e,t,n){return new zs(e,t,n)}createCubeRenderTarget(e,t){return new Bh(e,t)}includes(e){return this.nodes.includes(e)}getOutputStructName(){}_getBindGroup(e,t){const i=this.getBindGroupsCache(),n=[];let o=!0;for(const e of t)n.push(e),o=o&&e.groupNode.shared!==!0;let s;return o?(s=i.get(n),s===0[0]&&(s=new vu(e,n,this.bindingsIndexes[e].group,n),i.set(n,s))):s=new vu(e,n,this.bindingsIndexes[e].group,n),s}getBindGroupArray(e,t){const s=this.bindings[t];let n=s[e];return n===0[0]&&(this.bindingsIndexes[e]===0[0]&&(this.bindingsIndexes[e]={binding:0,group:Object.keys(this.bindingsIndexes).length}),s[e]=n=[]),n}getBindings(){let e=this.bindGroups;if(e===null){const t={},n=this.bindings;for(const e of Ym)for(const s in n[e]){const o=n[e][s],i=t[s]||(t[s]=[]);i.push(...o)}e=[];for(const n in t){const s=t[n],o=this._getBindGroup(n,s);e.push(o)}this.bindGroups=e}return e}sortBindingGroups(){const e=this.getBindings();e.sort((e,t)=>e.bindings[0].groupNode.order-t.bindings[0].groupNode.order);for(let t=0;t<e.length;t++){const n=e[t];this.bindingsIndexes[n.name].group=t,n.index=t}}setHashNode(e,t){this.hashNodes[t]=e}addNode(e){this.nodes.includes(e)===!1&&(this.nodes.push(e),this.setHashNode(e,e.getHash(this)))}addSequentialNode(e){this.sequentialNodes.includes(e)===!1&&this.sequentialNodes.push(e)}buildUpdateNodes(){for(const e of this.nodes){const t=e.getUpdateType();t!==x.NONE&&this.updateNodes.push(e)}for(const e of this.sequentialNodes){const t=e.getUpdateBeforeType(),n=e.getUpdateAfterType();t!==x.NONE&&this.updateBeforeNodes.push(e),n!==x.NONE&&this.updateAfterNodes.push(e)}}get currentNode(){return this.chaining[this.chaining.length-1]}isFilteredTexture(e){return e.magFilter===ie||e.magFilter===Bo||e.magFilter===An||e.magFilter===Be||e.minFilter===ie||e.minFilter===Bo||e.minFilter===An||e.minFilter===Be}addChain(e){this.chaining.push(e)}removeChain(e){const t=this.chaining.pop();if(t!==e)throw new Error("NodeBuilder: Invalid node chaining!")}getMethod(e){return e}getTernary(){return null}getNodeFromHash(e){return this.hashNodes[e]}addFlow(e,t){return this.flowNodes[e].push(t),t}setContext(e){this.context=e}getContext(){return this.context}getSharedContext(){const e={...this.context};return delete e.material,this.context}setCache(e){this.cache=e}getCache(){return this.cache}getCacheFromNode(e,t=!0){const n=this.getDataFromNode(e);return n.cache===0[0]&&(n.cache=new Cu(t?this.getCache():null)),n.cache}isAvailable(){return!1}getVertexIndex(){console.warn("Abstract function.")}getInstanceIndex(){console.warn("Abstract function.")}getDrawIndex(){console.warn("Abstract function.")}getFrontFacing(){console.warn("Abstract function.")}getFragCoord(){console.warn("Abstract function.")}isFlipY(){return!1}increaseUsage(e){const t=this.getDataFromNode(e);return t.usageCount=t.usageCount===0[0]?1:t.usageCount+1,t.usageCount}generateTexture(){console.warn("Abstract function.")}generateTextureLod(){console.warn("Abstract function.")}generateArrayDeclaration(e,t){return this.getType(e)+"[ "+t+" ]"}generateArray(e,t,n=null){let s=this.generateArrayDeclaration(e,t)+"( ";for(let o=0;o<t;o++){const i=n?n[o]:null;i!==null?s+=i.build(this,e):s+=this.generateConst(e),o<t-1&&(s+=", ")}return s+=" )",s}generateStruct(e,t,n=null){const s=[];for(const i of t){const{name:e,type:o}=i;n&&n[e]&&n[e].isNode?s.push(n[e].build(this,o)):s.push(this.generateConst(o))}return e+"( "+s.join(", ")+" )"}generateConst(e,n=null){if(n===null&&(e==="float"||e==="int"||e==="uint"?n=0:e==="bool"?n=!1:e==="color"?n=new T:e==="vec2"?n=new w:e==="vec3"?n=new t:e==="vec4"&&(n=new j)),e==="float")return Rc(n);if(e==="int")return`${Math.round(n)}`;if(e==="uint")return n>=0?`${Math.round(n)}u`:"0u";if(e==="bool")return n?"true":"false";if(e==="color")return`${this.getType("vec3")}( ${Rc(n.r)}, ${Rc(n.g)}, ${Rc(n.b)} )`;const o=this.getTypeLength(e),i=this.getComponentType(e),s=e=>this.generateConst(i,e);if(o===2)return`${this.getType(e)}( ${s(n.x)}, ${s(n.y)} )`;if(o===3)return`${this.getType(e)}( ${s(n.x)}, ${s(n.y)}, ${s(n.z)} )`;if(o===4&&e!=="mat2")return`${this.getType(e)}( ${s(n.x)}, ${s(n.y)}, ${s(n.z)}, ${s(n.w)} )`;if(o>=4&&n&&(n.isMatrix2||n.isMatrix3||n.isMatrix4))return`${this.getType(e)}( ${n.elements.map(s).join(", ")} )`;if(o>4)return`${this.getType(e)}()`;throw new Error(`NodeBuilder: Type '${e}' not found in generate constant attempt.`)}getType(e){return e==="color"?"vec3":e}hasGeometryAttribute(e){return this.geometry&&this.geometry.getAttribute(e)!==0[0]}getAttribute(e,t){const s=this.attributes;for(const t of s)if(t.name===e)return t;const n=new Ih(e,t);return this.registerDeclaration(n),s.push(n),n}getPropertyName(e){return e.name}isVector(e){return/vec\d/.test(e)}isMatrix(e){return/mat\d/.test(e)}isReference(e){return e==="void"||e==="property"||e==="sampler"||e==="samplerComparison"||e==="texture"||e==="cubeTexture"||e==="storageTexture"||e==="depthTexture"||e==="texture3D"}needsToWorkingColorSpace(){return!1}getComponentTypeFromTexture(e){const t=e.type;if(e.isDataTexture){if(t===ue)return"int";if(t===I)return"uint"}return"float"}getElementType(e){return e==="mat2"?"vec2":e==="mat3"?"vec3":e==="mat4"?"vec4":this.getComponentType(e)}getComponentType(e){if(e=this.getVectorType(e),e==="float"||e==="bool"||e==="int"||e==="uint")return e;const t=/(b|i|u|)(vec|mat)([2-4])/.exec(e);return t===null?null:t[1]==="b"?"bool":t[1]==="i"?"int":t[1]==="u"?"uint":"float"}getVectorType(e){return e==="color"?"vec3":e==="texture"||e==="cubeTexture"||e==="storageTexture"||e==="texture3D"?"vec4":e}getTypeFromLength(e,t="float"){if(e===1)return t;let n=eN(e);const s=t==="float"?"":t[0];return/mat2/.test(t)===!0&&(n=n.replace("vec","mat")),s+n}getTypeFromArray(e){return wE.get(e.constructor)}isInteger(e){return/int|uint|(i|u)vec/.test(e)}getTypeFromAttribute(e){let t=e;e.isInterleavedBufferAttribute&&(t=e.data);const s=t.array,o=e.itemSize,i=e.normalized;let n;return!(e instanceof R2)&&i!==!0&&(n=this.getTypeFromArray(s)),this.getTypeFromLength(o,n)}getTypeLength(e){const t=this.getVectorType(e),n=/vec([2-4])/.exec(t);return n!==null?Number(n[1]):t==="float"||t==="bool"||t==="int"||t==="uint"?1:/mat2/.test(e)===!0?4:/mat3/.test(e)===!0?9:/mat4/.test(e)===!0?16:0}getVectorFromMatrix(e){return e.replace("mat","vec")}changeComponentType(e,t){return this.getTypeFromLength(this.getTypeLength(e),t)}getIntegerType(e){const t=this.getComponentType(e);return t==="int"||t==="uint"?e:this.changeComponentType(e,"int")}addStack(){this.stack=T1(this.stack);const e=ou();return this.stacks.push(e),Hc(this.stack),this.stack}removeStack(){const e=this.stack;return this.stack=e.parent,Hc(this.stacks.pop()),e}getDataFromNode(e,t=this.shaderStage,n=null){n=n===null?e.isGlobal(this)?this.globalCache:this.cache:n;let s=n.getData(e);s===0[0]&&(s={},n.setData(e,s)),s[t]===0[0]&&(s[t]={});let o=s[t];const a=s.any?s.any.subBuilds:null,i=this.getClosestSubBuild(a);return i&&(o.subBuildsCache===0[0]&&(o.subBuildsCache={}),o=o.subBuildsCache[i]||(o.subBuildsCache[i]={}),o.subBuilds=a),o}getNodeProperties(e,t="any"){const n=this.getDataFromNode(e,t);return n.properties||(n.properties={outputNode:null})}getBufferAttributeFromNode(e,t){const s=this.getDataFromNode(e);let n=s.bufferAttribute;if(n===0[0]){const o=this.uniforms.index++;n=new Ih("nodeAttribute"+o,t,e),this.bufferAttributes.push(n),s.bufferAttribute=n}return n}getStructTypeNode(e,t=this.shaderStage){return this.types[t][e]||null}getStructTypeFromNode(e,t,n=null,s=this.shaderStage){const i=this.getDataFromNode(e,s,this.globalCache);let o=i.structType;if(o===0[0]){const a=this.structs.index++;n===null&&(n="StructType"+a),o=new sE(n,t),this.structs[s].push(o),this.types[s][n]=e,i.structType=o}return o}getOutputStructTypeFromNode(e,t){const n=this.getStructTypeFromNode(e,t,"OutputType","fragment");return n.output=!0,n}getUniformFromNode(e,t,n=this.shaderStage,s=null){const i=this.getDataFromNode(e,n,this.globalCache);let o=i.uniform;if(o===0[0]){const a=this.uniforms.index++;o=new KC(s||"nodeUniform"+a,t,e),this.uniforms[n].push(o),this.registerDeclaration(o),i.uniform=o}return o}getVarFromNode(e,t=null,n=e.getNodeType(this),s=this.shaderStage,o=!1){const a=this.getDataFromNode(e,s),r=this.getSubBuildProperty("variable",a.subBuilds);let i=a[r];if(i===0[0]){const c=o?"_const":"_var",l=this.vars[s]||(this.vars[s]=[]),d=this.vars[c]||(this.vars[c]=0);t===null&&(t=(o?"nodeConst":"nodeVar")+d,this.vars[c]++),r!=="variable"&&(t=this.getSubBuildProperty(t,a.subBuilds));const u=e.getArrayCount(this);i=new Lh(t,n,o,u),o||l.push(i),this.registerDeclaration(i),a[r]=i}return i}isDeterministic(e){if(e.isMathNode)return this.isDeterministic(e.aNode)&&(!e.bNode||this.isDeterministic(e.bNode))&&(!e.cNode||this.isDeterministic(e.cNode));if(e.isOperatorNode)return this.isDeterministic(e.aNode)&&(!e.bNode||this.isDeterministic(e.bNode));if(e.isArrayNode){if(e.values!==null)for(const t of e.values)if(!this.isDeterministic(t))return!1;return!0}return!!e.isConstNode}getVaryingFromNode(e,t=null,n=e.getNodeType(this),s=null,o=null){const a=this.getDataFromNode(e,"any"),r=this.getSubBuildProperty("varying",a.subBuilds);let i=a[r];if(i===0[0]){const e=this.varyings,c=e.length;t===null&&(t="nodeVarying"+c),r!=="varying"&&(t=this.getSubBuildProperty(t,a.subBuilds)),i=new XC(t,n,s,o),e.push(i),this.registerDeclaration(i),a[r]=i}return i}registerDeclaration(e){const s=this.shaderStage,o=this.declarations[s]||(this.declarations[s]={}),n=this.getPropertyName(e);let i=1,t=n;for(;o[t]!==0[0];)t=n+"_"+i++;i>1&&(e.name=t,console.warn(`THREE.TSL: Declaration name '${n}' of '${e.type}' already in use. Renamed to '${t}'.`)),o[t]=e}getCodeFromNode(e,t,n=this.shaderStage){const o=this.getDataFromNode(e);let s=o.code;if(s===0[0]){const e=this.codes[n]||(this.codes[n]=[]),i=e.length;s=new ZC("nodeCode"+i,t),e.push(s),o.code=s}return s}addFlowCodeHierarchy(e,t){const{flowCodes:o,flowCodeBlock:i}=this.getDataFromNode(e);let s=!0,n=t;for(;n;){if(i.get(n)===!0){s=!1;break}n=this.getDataFromNode(n).parentNodeBlock}if(s)for(const e of o)this.addLineFlowCode(e)}addLineFlowCodeBlock(e,t,n){const s=this.getDataFromNode(e),o=s.flowCodes||(s.flowCodes=[]),i=s.flowCodeBlock||(s.flowCodeBlock=new WeakMap);o.push(t),i.set(n,!0)}addLineFlowCode(e,t=null){return e===""?this:(t!==null&&this.context.nodeBlock&&this.addLineFlowCodeBlock(t,e,this.context.nodeBlock),e=this.tab+e,/;\s*$/.test(e)||(e=e+`;
`),this.flow.code+=e,this)}addFlowCode(e){return this.flow.code+=e,this}addFlowTab(){return this.tab+="	",this}removeFlowTab(){return this.tab=this.tab.slice(0,-1),this}getFlowData(e){return this.flowsData.get(e)}flowNode(e){const n=e.getNodeType(this),t=this.flowChildNode(e,n);return this.flowsData.set(e,t),t}addInclude(e){this.currentFunctionNode!==null&&this.currentFunctionNode.includes.push(e)}buildFunctionNode(e){const t=new rx,n=this.currentFunctionNode;return this.currentFunctionNode=t,t.code=this.buildFunctionCode(e),this.currentFunctionNode=n,t}flowShaderNode(e){const t=e.layout,n={[Symbol.iterator](){let e=0;const t=Object.values(this);return{next:()=>({value:t[e],done:e++>=t.length})}}};for(const e of t.inputs)n[e.name]=new bj(e.type,e.name);e.layout=null;const s=e.call(n),o=this.flowStagesNode(s,t.type);return e.layout=t,o}flowBuildStage(e,t,n=null){const s=this.getBuildStage();this.setBuildStage(t);const o=e.build(this,n);return this.setBuildStage(s),o}flowStagesNode(e,t=null){const s=this.flow,o=this.vars,i=this.declarations,a=this.cache,r=this.buildStage,c=this.stack,n={code:""};this.flow=n,this.vars={},this.declarations={},this.cache=new Cu,this.stack=T1();for(const s of Gm)this.setBuildStage(s),n.result=e.build(this,t);return n.vars=this.getVars(this.shaderStage),this.flow=s,this.vars=o,this.declarations=i,this.cache=a,this.stack=c,this.setBuildStage(r),n}getFunctionOperator(){return null}buildFunctionCode(){console.warn("Abstract function.")}flowChildNode(e,t=null){const s=this.flow,n={code:""};return this.flow=n,n.result=e.build(this,t),this.flow=s,n}flowNodeFromShaderStage(e,t,n=null,s=null){const a=this.tab,r=this.cache,c=this.shaderStage,l=this.context;this.setShaderStage(e);const i={...this.context};delete i.nodeBlock,this.cache=this.globalCache,this.tab="	",this.context=i;let o=null;if(this.buildStage==="generate"){const i=this.flowChildNode(t,n);s!==null&&(i.code+=`${this.tab+s} = ${i.result};
`),this.flowCode[e]=this.flowCode[e]+i.code,o=i}else o=t.build(this);return this.setShaderStage(c),this.cache=r,this.tab=a,this.context=l,o}getAttributesArray(){return this.attributes.concat(this.bufferAttributes)}getAttributes(){console.warn("Abstract function.")}getVaryings(){console.warn("Abstract function.")}getVar(e,t,n=null){return`${n!==null?this.generateArrayDeclaration(e,n):this.getType(e)} ${t}`}getVars(e){let t="";const n=this.vars[e];if(n!==0[0])for(const e of n)t+=`${this.getVar(e.type,e.name)}; `;return t}getUniforms(){console.warn("Abstract function.")}getCodes(e){const t=this.codes[e];let n="";if(t!==0[0])for(const e of t)n+=e.code+`
`;return n}getHash(){return this.vertexShader+this.fragmentShader+this.computeShader}setShaderStage(e){this.shaderStage=e}getShaderStage(){return this.shaderStage}setBuildStage(e){this.buildStage=e}getBuildStage(){return this.buildStage}buildCode(){console.warn("Abstract function.")}get subBuild(){return this.subBuildLayers[this.subBuildLayers.length-1]||null}addSubBuild(e){this.subBuildLayers.push(e)}removeSubBuild(){return this.subBuildLayers.pop()}getClosestSubBuild(e){let t;if(e&&e.isNode?e.isShaderCallNodeInternal?t=e.shaderNode.subBuilds:e.isStackNode?t=[e.subBuild]:t=this.getDataFromNode(e,"any").subBuilds:e instanceof Set?t=[...e]:t=e,!t)return null;const n=this.subBuildLayers;for(let e=t.length-1;e>=0;e--){const s=t[e];if(n.includes(s))return s}return null}getSubBuildOutput(e){return this.getSubBuildProperty("outputNode",e)}getSubBuildProperty(e="",t=null){let n;t!==null?n=this.getClosestSubBuild(t):n=this.subBuildFn;let s;return n?s=e?n+"_"+e:n:s=e,s}build(){const{object:t,material:e,renderer:n}=this;if(e!==null){let t=n.library.fromMaterial(e);t===null&&(console.error(`NodeMaterial: Material "${e.type}" is not compatible.`),t=new ko),t.build(this)}else this.addFlow("compute",t);for(const e of Gm){this.setBuildStage(e),this.context.vertex&&this.context.vertex.isNode&&this.flowNodeFromShaderStage("vertex",this.context.vertex);for(const t of Ym){this.setShaderStage(t);const n=this.flowNodes[t];for(const t of n)e==="generate"?this.flowNode(t):t.build(this)}}return this.setBuildStage(null),this.setShaderStage(null),this.buildCode(),this.buildUpdateNodes(),this}getNodeUniform(e,t){if(t==="float"||t==="int"||t==="uint")return new mE(e);if(t==="vec2"||t==="ivec2"||t==="uvec2")return new fE(e);if(t==="vec3"||t==="ivec3"||t==="uvec3")return new pE(e);if(t==="vec4"||t==="ivec4"||t==="uvec4")return new gE(e);if(t==="color")return new vE(e);if(t==="mat2")return new bE(e);if(t==="mat3")return new jE(e);if(t==="mat4")return new yE(e);throw new Error(`Uniform "${t}" not declared.`)}format(e,t,n){if(t=this.getVectorType(t),n=this.getVectorType(n),t===n||n===null||this.isReference(n))return e;const o=this.getTypeLength(t),s=this.getTypeLength(n);return o===16&&s===9?`${this.getType(n)}( ${e}[ 0 ].xyz, ${e}[ 1 ].xyz, ${e}[ 2 ].xyz )`:o===9&&s===4?`${this.getType(n)}( ${e}[ 0 ].xy, ${e}[ 1 ].xy )`:o>4?e:s>4||s===0?e:o===s?`${this.getType(n)}( ${e} )`:o>s?(e=n==="bool"?`all( ${e} )`:`${e}.${"xyz".slice(0,s)}`,this.format(e,this.getTypeFromLength(s,this.getComponentType(t)),n)):s===4&&o>1?`${this.getType(n)}( ${this.format(e,t,"vec3")}, 1.0 )`:o===2?`${this.getType(n)}( ${this.format(e,t,"vec2")}, 0.0 )`:(o===1&&s>1&&t!==this.getComponentType(n)&&(e=`${this.getType(this.getComponentType(n))}( ${e} )`),`${this.getType(n)}( ${e} )`)}getSignature(){return`// Three.js r${ba} - Node System
`}},bh=xE,EE=class{constructor(){this.time=0,this.deltaTime=0,this.frameId=0,this.renderId=0,this.updateMap=new WeakMap,this.updateBeforeMap=new WeakMap,this.updateAfterMap=new WeakMap,this.renderer=null,this.material=null,this.camera=null,this.object=null,this.scene=null}_getMaps(e,t){let n=e.get(t);return n===0[0]&&(n={renderMap:new WeakMap,frameMap:new WeakMap},e.set(t,n)),n}updateBeforeNode(e){const n=e.getUpdateBeforeType(),t=e.updateReference(this);if(n===x.FRAME){const{frameMap:n}=this._getMaps(this.updateBeforeMap,t);n.get(t)!==this.frameId&&e.updateBefore(this)!==!1&&n.set(t,this.frameId)}else if(n===x.RENDER){const{renderMap:n}=this._getMaps(this.updateBeforeMap,t);n.get(t)!==this.renderId&&e.updateBefore(this)!==!1&&n.set(t,this.renderId)}else n===x.OBJECT&&e.updateBefore(this)}updateAfterNode(e){const n=e.getUpdateAfterType(),t=e.updateReference(this);if(n===x.FRAME){const{frameMap:n}=this._getMaps(this.updateAfterMap,t);n.get(t)!==this.frameId&&e.updateAfter(this)!==!1&&n.set(t,this.frameId)}else if(n===x.RENDER){const{renderMap:n}=this._getMaps(this.updateAfterMap,t);n.get(t)!==this.renderId&&e.updateAfter(this)!==!1&&n.set(t,this.renderId)}else n===x.OBJECT&&e.updateAfter(this)}updateNode(e){const n=e.getUpdateType(),t=e.updateReference(this);if(n===x.FRAME){const{frameMap:n}=this._getMaps(this.updateMap,t);n.get(t)!==this.frameId&&e.update(this)!==!1&&n.set(t,this.frameId)}else if(n===x.RENDER){const{renderMap:n}=this._getMaps(this.updateMap,t);n.get(t)!==this.renderId&&e.update(this)!==!1&&n.set(t,this.renderId)}else n===x.OBJECT&&e.update(this)}update(){this.frameId++,this.lastTime===0[0]&&(this.lastTime=performance.now()),this.deltaTime=(performance.now()-this.lastTime)/1e3,this.lastTime=performance.now(),this.time+=this.deltaTime}},rh=EE,X3=class{constructor(e,t,n=null,s="",o=!1){this.type=e,this.name=t,this.count=n,this.qualifier=s,this.isConst=o}},X3.isNodeFunctionInput=!0,Y3=X3,ME=class{parseFunction(){console.warn("Abstract function.")}},W3=ME,$3=class{constructor(e,t,n="",s=""){this.type=e,this.inputs=t,this.name=n,this.precision=s}getCode(){console.warn("Abstract function.")}},$3.isNodeFunction=!0,C3=$3,DE=/^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i,NE=/[a-z_0-9]+/ig,j3="#pragma main",RE=e=>{e=e.trim();const n=e.indexOf(j3),s=n!==-1?e.slice(n+j3.length):e,t=s.match(DE);if(t!==null&&t.length===5){const a=t[4],i=[];let r=null;for(;(r=NE.exec(a))!==null;)i.push(r);const c=[];let o=0;for(;o<i.length;){const n=i[o][0]==="const";n===!0&&o++;let e=i[o][0];e==="in"||e==="out"||e==="inout"?o++:e="";const s=i[o++][0];let t=Number.parseInt(i[o][0]);Number.isNaN(t)===!1?o++:t=null;const a=i[o++][0];c.push(new Y3(s,a,t,e,n))}const l=s.substring(t[0].length),d=t[3]!==0[0]?t[3]:"",u=t[2],h=t[1]!==0[0]?t[1]:"",m=n!==-1?e.slice(0,n):"";return{type:u,inputs:c,name:d,precision:h,inputsCode:a,blockCode:l,headerCode:m}}throw new Error("FunctionNode: Function is not a GLSL code.")},PE=class extends C3{constructor(e){const{type:t,inputs:n,name:s,precision:o,inputsCode:i,blockCode:a,headerCode:r}=RE(e);super(t,n,s,o),this.inputsCode=i,this.blockCode=a,this.headerCode=r}getCode(e=this.name){let t;const n=this.blockCode;if(n!==""){const{type:i,inputsCode:a,headerCode:r,precision:o}=this;let s=`${i} ${e} ( ${a.trim()} )`;o!==""&&(s=`${o} ${s}`),t=r+s+n}else t="";return t}},HE=PE,IE=class extends W3{parseFunction(e){return new HE(e)}},BE=IE,iM=h(.04),oM=g(1),b3=new WeakMap,on=[],Qs=[],qE=class extends Bn{constructor(e,t){super(),this.renderer=e,this.backend=t,this.nodeFrame=new rh,this.nodeBuilderCache=new Map,this.callHashCache=new ln,this.groupsData=new ln,this.cacheLib={}}updateGroup(e){const t=e.groupNode,s=t.name;if(s===xh.name)return!0;if(s===oe.name){const t=this.get(e),n=this.nodeFrame.renderId;return t.renderId!==n&&(t.renderId=n,!0)}if(s===iv.name){const t=this.get(e),n=this.nodeFrame.frameId;return t.frameId!==n&&(t.frameId=n,!0)}on[0]=t,on[1]=e;let n=this.groupsData.get(on);return n===0[0]&&this.groupsData.set(on,n={}),on.length=0,n.version!==t.version&&(n.version=t.version,!0)}getForRenderCacheKey(e){return e.initialCacheKey}getForRender(e){const n=this.get(e);let t=n.nodeBuilderState;if(t===0[0]){const{nodeBuilderCache:s}=this,o=this.getForRenderCacheKey(e);if(t=s.get(o),t===0[0]){const n=this.backend.createNodeBuilder(e.object,this.renderer);n.scene=e.scene,n.material=e.material,n.camera=e.camera,n.context.material=e.material,n.lightsNode=e.lightsNode,n.environmentNode=this.getEnvironmentNode(e.scene),n.fogNode=this.getFogNode(e.scene),n.clippingContext=e.clippingContext,!!this.renderer.getOutputRenderTarget()&&this.renderer.getOutputRenderTarget().multiview&&n.enableMultiview(),n.build(),t=this._createNodeBuilderState(n),s.set(o,t)}t.usedTimes++,n.nodeBuilderState=t}return t}delete(e){if(e.isRenderObject){const t=this.get(e).nodeBuilderState;t.usedTimes--,t.usedTimes===0&&this.nodeBuilderCache.delete(this.getForRenderCacheKey(e))}return super.delete(e)}getForCompute(e){const n=this.get(e);let t=n.nodeBuilderState;if(t===0[0]){const s=this.backend.createNodeBuilder(e,this.renderer);s.build(),t=this._createNodeBuilderState(s),n.nodeBuilderState=t}return t}_createNodeBuilderState(e){return new DC(e.vertexShader,e.fragmentShader,e.computeShader,e.getAttributesArray(),e.getBindings(),e.updateNodes,e.updateBeforeNodes,e.updateAfterNodes,e.observer,e.transforms)}getEnvironmentNode(e){this.updateEnvironment(e);let t=null;if(e.environmentNode&&e.environmentNode.isNode)t=e.environmentNode;else{const n=this.get(e);n.environmentNode&&(t=n.environmentNode)}return t}getBackgroundNode(e){this.updateBackground(e);let t=null;if(e.backgroundNode&&e.backgroundNode.isNode)t=e.backgroundNode;else{const n=this.get(e);n.backgroundNode&&(t=n.backgroundNode)}return t}getFogNode(e){return this.updateFog(e),e.fogNode||this.get(e).fogNode||null}getCacheKey(e,t){on[0]=e,on[1]=t;const s=this.renderer.info.calls,n=this.callHashCache.get(on)||{};if(n.callId!==s){const o=this.getEnvironmentNode(e),i=this.getFogNode(e);t&&Qs.push(t.getCacheKey(!0)),o&&Qs.push(o.getCacheKey()),i&&Qs.push(i.getCacheKey()),Qs.push(this.renderer.getOutputRenderTarget()&&this.renderer.getOutputRenderTarget().multiview?1:0),Qs.push(this.renderer.shadowMap.enabled?1:0),n.callId=s,n.cacheKey=hd(Qs),this.callHashCache.set(on,n),Qs.length=0}return on.length=0,n.cacheKey}get isToneMappingState(){return!this.renderer.getRenderTarget()}updateBackground(e){const n=this.get(e),t=e.background;if(t){{const s=e.backgroundBlurriness===0&&n.backgroundBlurriness>0||e.backgroundBlurriness>0&&n.backgroundBlurriness===0;if(n.background!==t||s){const o=this.getCacheNode("background",t,()=>{if(t.isCubeTexture===!0||t.mapping===Po||t.mapping===Ho||t.mapping===Cs){if(e.backgroundBlurriness>0||t.mapping===Cs)return xC(t);let n;return t.isCubeTexture===!0?n=Aa(t):n=Wt(t),VC(n)}else if(t.isTexture===!0)return Wt(t,Vo.flipY()).setUpdateMatrix(!0);else t.isColor!==!0&&console.error("WebGPUNodes: Unsupported background configuration.",t)},s);n.backgroundNode=o,n.background=t,n.backgroundBlurriness=e.backgroundBlurriness}}}else n.backgroundNode&&(delete n.backgroundNode,delete n.background)}getCacheNode(e,t,n,s=!1){const i=this.cacheLib[e]||(this.cacheLib[e]=new WeakMap);let o=i.get(t);return(o===0[0]||s)&&(o=n(),i.set(t,o)),o}updateFog(e){const n=this.get(e),t=e.fog;if(t){if(n.fog!==t){const e=this.getCacheNode("fog",t,()=>{if(t.isFogExp2){const e=bt("color","color",t).setGroup(oe),n=bt("density","float",t).setGroup(oe);return b8(e,hx(n))}if(t.isFog){const e=bt("color","color",t).setGroup(oe),n=bt("near","float",t).setGroup(oe),s=bt("far","float",t).setGroup(oe);return b8(e,ux(n,s))}console.error("THREE.Renderer: Unsupported fog configuration.",t)});n.fogNode=e,n.fog=t}}else delete n.fogNode,delete n.fog}updateEnvironment(e){const n=this.get(e),t=e.environment;if(t){if(n.environment!==t){const e=this.getCacheNode("environment",t,()=>{if(t.isCubeTexture===!0)return Aa(t);if(t.isTexture===!0)return Wt(t);console.error("Nodes: Unsupported environment configuration.",t)});n.environmentNode=e,n.environment=t}}else n.environmentNode&&(delete n.environmentNode,delete n.environment)}getNodeFrame(e=this.renderer,t=null,n=null,s=null,o=null){const i=this.nodeFrame;return i.renderer=e,i.scene=t,i.object=n,i.camera=s,i.material=o,i}getNodeFrameForRender(e){return this.getNodeFrame(e.renderer,e.scene,e.object,e.camera,e.material)}getOutputCacheKey(){const e=this.renderer;return e.toneMapping+","+e.currentColorSpace+","+e.xr.isPresenting}hasOutputChange(e){const t=b3.get(e);return t!==this.getOutputCacheKey()}getOutputNode(e){const t=this.renderer,n=this.getOutputCacheKey(),s=e.isArrayTexture?QO(e,h(Vo,gc("gl_ViewID_OVR"))).renderOutput(t.toneMapping,t.currentColorSpace):Wt(e,Vo).renderOutput(t.toneMapping,t.currentColorSpace);return b3.set(e,n),s}updateBefore(e){const t=e.getNodeBuilderState();for(const n of t.updateBeforeNodes)this.getNodeFrameForRender(e).updateBeforeNode(n)}updateAfter(e){const t=e.getNodeBuilderState();for(const n of t.updateAfterNodes)this.getNodeFrameForRender(e).updateAfterNode(n)}updateForCompute(e){const t=this.getNodeFrame(),n=this.getForCompute(e);for(const e of n.updateNodes)t.updateNode(e)}updateForRender(e){const t=this.getNodeFrameForRender(e),n=e.getNodeBuilderState();for(const e of n.updateNodes)t.updateNode(e)}needsRefresh(e){const t=this.getNodeFrameForRender(e),n=e.getMonitor();return n.needsRefresh(e,t)}dispose(){super.dispose(),this.nodeFrame=new rh,this.nodeBuilderCache=new Map,this.cacheLib={}}},YE=qE,Xu=new Mn,XE=class _ClippingContext{constructor(e=null){this.version=0,this.clipIntersection=null,this.cacheKey="",this.shadowPass=!1,this.viewNormalMatrix=new b,this.clippingGroupContexts=new WeakMap,this.intersectionPlanes=[],this.unionPlanes=[],this.parentVersion=null,e!==null&&(this.viewNormalMatrix=e.viewNormalMatrix,this.clippingGroupContexts=e.clippingGroupContexts,this.shadowPass=e.shadowPass,this.viewMatrix=e.viewMatrix)}projectPlanes(e,t,n){const s=e.length;for(let o=0;o<s;o++){Xu.copy(e[o]).applyMatrix4(this.viewMatrix,this.viewNormalMatrix);const i=t[n+o],a=Xu.normal;i.x=-a.x,i.y=-a.y,i.z=-a.z,i.w=Xu.constant}}updateGlobal(e,t){this.shadowPass=e.overrideMaterial!==null&&e.overrideMaterial.isShadowPassMaterial,this.viewMatrix=t.matrixWorldInverse,this.viewNormalMatrix.getNormalMatrix(this.viewMatrix)}update(e,t){let i=!1;e.version!==this.parentVersion&&(this.intersectionPlanes=Array.from(e.intersectionPlanes),this.unionPlanes=Array.from(e.unionPlanes),this.parentVersion=e.version),this.clipIntersection!==t.clipIntersection&&(this.clipIntersection=t.clipIntersection,this.clipIntersection?this.unionPlanes.length=e.unionPlanes.length:this.intersectionPlanes.length=e.intersectionPlanes.length);const a=t.clippingPlanes,o=a.length;let n,s;if(this.clipIntersection?(n=this.intersectionPlanes,s=e.intersectionPlanes.length):(n=this.unionPlanes,s=e.unionPlanes.length),n.length!==s+o){n.length=s+o;for(let e=0;e<o;e++)n[s+e]=new j;i=!0}this.projectPlanes(a,n,s),i&&(this.version++,this.cacheKey=`${this.intersectionPlanes.length}:${this.unionPlanes.length}`)}getGroupContext(e){if(this.shadowPass&&!e.clipShadows)return this;let t=this.clippingGroupContexts.get(e);return t===0[0]&&(t=new _ClippingContext(this),this.clippingGroupContexts.set(e,t)),t.update(this,e),t}get unionClippingCount(){return this.unionPlanes.length}},g3=XE,ZE=class{constructor(e,t){this.bundleGroup=e,this.camera=t}},JE=ZE,er=[],tk=class{constructor(){this.bundles=new ln}get(e,t){const s=this.bundles;er[0]=e,er[1]=t;let n=s.get(er);return n===0[0]&&(n=new JE(e,t),s.set(er,n)),er.length=0,n}dispose(){this.bundles=new ln}},nk=tk,sk=class{constructor(){this.lightNodes=new WeakMap,this.materialNodes=new Map,this.toneMappingNodes=new Map}fromMaterial(e){if(e.isNodeMaterial)return e;let t=null;const n=this.getMaterialNodeClass(e.type);if(n!==null){t=new n;for(const n in e)t[n]=e[n]}return t}addToneMapping(e,t){this.addType(e,t,this.toneMappingNodes)}getToneMappingFunction(e){return this.toneMappingNodes.get(e)||null}getMaterialNodeClass(e){return this.materialNodes.get(e)||null}addMaterial(e,t){this.addType(e,t,this.materialNodes)}getLightNodeClass(e){return this.lightNodes.get(e)||null}addLight(e,t){this.addClass(e,t,this.lightNodes)}addType(e,t,n){if(n.has(t)){console.warn(`Redefinition of node ${t}`);return}if(typeof e!="function")throw new Error(`Node class ${e.name} is not a class.`);if(typeof t=="function"||typeof t=="object")throw new Error(`Base class ${t} is not a class.`);n.set(t,e)}addClass(e,t,n){if(n.has(t)){console.warn(`Redefinition of node ${t.name}`);return}if(typeof e!="function")throw new Error(`Node class ${e.name} is not a class.`);if(typeof t!="function")throw new Error(`Base class ${t.name} is not a class.`);n.set(t,e)}},ok=sk,ik=new y8,tr=[],rk=class extends ln{constructor(){super()}createNode(e=[]){return(new y8).setLights(e)}getNode(e,t){if(e.isQuadMesh)return ik;tr[0]=e,tr[1]=t;let n=this.get(tr);return n===0[0]&&(n=this.createNode(),this.set(tr,n)),tr.length=0,n}},ck=rk,nr=class extends zs{constructor(e=1,t=1,n={}){super(e,t,n),this.isXRRenderTarget=!0,this._hasExternalTextures=!1,this._autoAllocateDepthBuffer=!0,this._isOpaqueFramebuffer=!1}copy(e){return super.copy(e),this._hasExternalTextures=e._hasExternalTextures,this._autoAllocateDepthBuffer=e._autoAllocateDepthBuffer,this._isOpaqueFramebuffer=e._isOpaqueFramebuffer,this}},l3=new t,r3=new t,hk=class extends fs{constructor(e,t=!1){super(),this.enabled=!1,this.isPresenting=!1,this.cameraAutoUpdate=!0,this._renderer=e,this._cameraL=new Ee,this._cameraL.viewport=new j,this._cameraR=new Ee,this._cameraR.viewport=new j,this._cameras=[this._cameraL,this._cameraR],this._cameraXR=new E0,this._currentDepthNear=null,this._currentDepthFar=null,this._controllers=[],this._controllerInputSources=[],this._xrRenderTarget=null,this._layers=[],this._sessionUsesLayers=!1,this._supportsGlBinding=typeof XRWebGLBinding!="undefined",this._frameBufferTargets=null,this._createXRLayer=ZS.bind(this),this._gl=null,this._currentAnimationContext=null,this._currentAnimationLoop=null,this._currentPixelRatio=null,this._currentSize=new w,this._onSessionEvent=tM.bind(this),this._onSessionEnd=eM.bind(this),this._onInputSourcesChange=JS.bind(this),this._onAnimationFrame=QS.bind(this),this._referenceSpace=null,this._referenceSpaceType="local-floor",this._customReferenceSpace=null,this._framebufferScaleFactor=1,this._foveation=1,this._session=null,this._glBaseLayer=null,this._glBinding=null,this._glProjLayer=null,this._xrFrame=null,this._supportsLayers=this._supportsGlBinding&&"createProjectionLayer"in XRWebGLBinding.prototype,this._useMultiviewIfPossible=t,this._useMultiview=!1}getController(e){const t=this._getController(e);return t.getTargetRaySpace()}getControllerGrip(e){const t=this._getController(e);return t.getGripSpace()}getHand(e){const t=this._getController(e);return t.getHandSpace()}getFoveation(){return this._glProjLayer===null&&this._glBaseLayer===null?0[0]:this._foveation}setFoveation(e){this._foveation=e,this._glProjLayer!==null&&(this._glProjLayer.fixedFoveation=e),this._glBaseLayer!==null&&this._glBaseLayer.fixedFoveation!==0[0]&&(this._glBaseLayer.fixedFoveation=e)}getFramebufferScaleFactor(){return this._framebufferScaleFactor}setFramebufferScaleFactor(e){this._framebufferScaleFactor=e,this.isPresenting===!0&&console.warn("THREE.XRManager: Cannot change framebuffer scale while presenting.")}getReferenceSpaceType(){return this._referenceSpaceType}setReferenceSpaceType(e){this._referenceSpaceType=e,this.isPresenting===!0&&console.warn("THREE.XRManager: Cannot change reference space type while presenting.")}getReferenceSpace(){return this._customReferenceSpace||this._referenceSpace}setReferenceSpace(e){this._customReferenceSpace=e}getCamera(){return this._cameraXR}getEnvironmentBlendMode(){if(this._session!==null)return this._session.environmentBlendMode}getBinding(){return this._glBinding===null&&this._supportsGlBinding&&(this._glBinding=new XRWebGLBinding(this._session,this._gl)),this._glBinding}getFrame(){return this._xrFrame}useMultiview(){return this._useMultiview}createQuadLayer(e,t,n,s,o,i,a,r={}){const h=new U1(e,t),d=new nr(o,i,{format:G,type:Y,depthTexture:new At(o,i,r.stencil?dt:I,0[0],0[0],0[0],0[0],0[0],0[0],r.stencil?tt:nt),stencilBuffer:r.stencil,resolveDepthBuffer:!1,resolveStencilBuffer:!1});d._autoAllocateDepthBuffer=!0;const l=new sn({color:16777215,side:ot});l.map=d.texture,l.map.offset.y=1,l.map.repeat.y=-1;const u=new be(h,l);u.position.copy(n),u.quaternion.copy(s);const c={type:"quad",width:e,height:t,translation:n,quaternion:s,pixelwidth:o,pixelheight:i,plane:u,material:l,rendercall:a,renderTarget:d};if(this._layers.push(c),this._session!==null){c.plane.material=new sn({color:16777215,side:ot}),c.plane.material.blending=xo,c.plane.material.blendEquation=Se,c.plane.material.blendSrc=Pn,c.plane.material.blendDst=Pn,c.xrlayer=this._createXRLayer(c);const e=this._session.renderState.layers;e.unshift(c.xrlayer),this._session.updateRenderState({layers:e})}else d.isXRRenderTarget=!1;return u}createCylinderLayer(e,t,n,s,o,i,a,r,c={}){const m=new Ew(e,e,e*t/n,64,64,!0,Math.PI-t/2,t),u=new nr(i,a,{format:G,type:Y,depthTexture:new At(i,a,c.stencil?dt:I,0[0],0[0],0[0],0[0],0[0],0[0],c.stencil?tt:nt),stencilBuffer:c.stencil,resolveDepthBuffer:!1,resolveStencilBuffer:!1});u._autoAllocateDepthBuffer=!0;const d=new sn({color:16777215,side:B});d.map=u.texture,d.map.offset.y=1,d.map.repeat.y=-1;const h=new be(m,d);h.position.copy(s),h.quaternion.copy(o);const l={type:"cylinder",radius:e,centralAngle:t,aspectratio:n,translation:s,quaternion:o,pixelwidth:i,pixelheight:a,plane:h,material:d,rendercall:r,renderTarget:u};if(this._layers.push(l),this._session!==null){l.plane.material=new sn({color:16777215,side:B}),l.plane.material.blending=xo,l.plane.material.blendEquation=Se,l.plane.material.blendSrc=Pn,l.plane.material.blendDst=Pn,l.xrlayer=this._createXRLayer(l);const e=this._session.renderState.layers;e.unshift(l.xrlayer),this._session.updateRenderState({layers:e})}else u.isXRRenderTarget=!1;return h}renderLayers(){const s=new t,o=new po,e=this._renderer,i=this.isPresenting,a=e.getOutputRenderTarget(),r=e._frameBufferTarget;this.isPresenting=!1;const n=new w;e.getSize(n);const c=e._quad;for(const t of this._layers)if(t.renderTarget.isXRRenderTarget=this._session!==null,t.renderTarget._hasExternalTextures=t.renderTarget.isXRRenderTarget,t.renderTarget.isXRRenderTarget&&this._sessionUsesLayers){t.xrlayer.transform=new XRRigidTransform(t.plane.getWorldPosition(s),t.plane.getWorldQuaternion(o));const i=this._glBinding.getSubImage(t.xrlayer,this._xrFrame);e.backend.setXRRenderTargetTextures(t.renderTarget,i.colorTexture,0[0]),e._setXRLayerSize(t.renderTarget.width,t.renderTarget.height),e.setOutputRenderTarget(t.renderTarget),e.setRenderTarget(null),e._frameBufferTarget=null,this._frameBufferTargets||(this._frameBufferTargets=new WeakMap);const{frameBufferTarget:n,quad:a}=this._frameBufferTargets.get(t.renderTarget)||{frameBufferTarget:null,quad:null};n?(e._frameBufferTarget=n,e._quad=a):(e._quad=new o8(new ko),this._frameBufferTargets.set(t.renderTarget,{frameBufferTarget:e._getFrameBufferTarget(),quad:e._quad})),t.rendercall(),e._frameBufferTarget=null}else e.setRenderTarget(t.renderTarget),t.rendercall();e.setRenderTarget(null),e.setOutputRenderTarget(a),e._frameBufferTarget=r,e._setXRLayerSize(n.x,n.y),e._quad=c,this.isPresenting=i}getSession(){return this._session}async setSession(e){const t=this._renderer,s=t.backend;this._gl=t.getContext();const n=this._gl,o=n.getContextAttributes();if(this._session=e,e!==null){if(s.isWebGPUBackend===!0)throw new Error('THREE.XRManager: XR is currently not supported with a WebGPU backend. Use WebGL by passing "{ forceWebGL: true }" to the constructor of the renderer.');if(e.addEventListener("select",this._onSessionEvent),e.addEventListener("selectstart",this._onSessionEvent),e.addEventListener("selectend",this._onSessionEvent),e.addEventListener("squeeze",this._onSessionEvent),e.addEventListener("squeezestart",this._onSessionEvent),e.addEventListener("squeezeend",this._onSessionEvent),e.addEventListener("end",this._onSessionEnd),e.addEventListener("inputsourceschange",this._onInputSourcesChange),await s.makeXRCompatible(),this._currentPixelRatio=t.getPixelRatio(),t.getSize(this._currentSize),this._currentAnimationContext=t._animation.getContext(),this._currentAnimationLoop=t._animation.getAnimationLoop(),t._animation.stop(),this._supportsLayers===!0){let i=null,a=null,r=null;t.depth&&(r=t.stencil?n.DEPTH24_STENCIL8:n.DEPTH_COMPONENT24,i=t.stencil?tt:nt,a=t.stencil?dt:I);const c={colorFormat:n.RGBA8,depthFormat:r,scaleFactor:this._framebufferScaleFactor,clearOnAccess:!1};this._useMultiviewIfPossible&&t.hasFeature("OVR_multiview2")&&(c.textureType="texture-array",this._useMultiview=!0),this._glBinding=this.getBinding();const s=this._glBinding.createProjectionLayer(c),l=[s];this._glProjLayer=s,t.setPixelRatio(1),t._setXRLayerSize(s.textureWidth,s.textureHeight);const d=this._useMultiview?2:1,u=new At(s.textureWidth,s.textureHeight,a,0[0],0[0],0[0],0[0],0[0],0[0],i,d);if(this._xrRenderTarget=new nr(s.textureWidth,s.textureHeight,{format:G,type:Y,colorSpace:t.outputColorSpace,depthTexture:u,stencilBuffer:t.stencil,samples:o.antialias?4:0,resolveDepthBuffer:s.ignoreDepthValues===!1,resolveStencilBuffer:s.ignoreDepthValues===!1,depth:this._useMultiview?2:1,multiview:this._useMultiview}),this._xrRenderTarget._hasExternalTextures=!0,this._xrRenderTarget.depth=this._useMultiview?2:1,this._sessionUsesLayers=e.enabledFeatures.includes("layers"),this._referenceSpace=await e.requestReferenceSpace(this.getReferenceSpaceType()),this._sessionUsesLayers)for(const e of this._layers)e.plane.material=new sn({color:16777215,side:e.type==="cylinder"?B:ot}),e.plane.material.blending=xo,e.plane.material.blendEquation=Se,e.plane.material.blendSrc=Pn,e.plane.material.blendDst=Pn,e.xrlayer=this._createXRLayer(e),l.unshift(e.xrlayer);e.updateRenderState({layers:l})}else{const o={antialias:t.samples>0,alpha:!0,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:this.getFramebufferScaleFactor()},s=new XRWebGLLayer(e,n,o);this._glBaseLayer=s,e.updateRenderState({baseLayer:s}),t.setPixelRatio(1),t._setXRLayerSize(s.framebufferWidth,s.framebufferHeight),this._xrRenderTarget=new nr(s.framebufferWidth,s.framebufferHeight,{format:G,type:Y,colorSpace:t.outputColorSpace,stencilBuffer:t.stencil,resolveDepthBuffer:s.ignoreDepthValues===!1,resolveStencilBuffer:s.ignoreDepthValues===!1}),this._xrRenderTarget._isOpaqueFramebuffer=!0,this._referenceSpace=await e.requestReferenceSpace(this.getReferenceSpaceType())}this.setFoveation(this.getFoveation()),t._animation.setAnimationLoop(this._onAnimationFrame),t._animation.setContext(e),t._animation.start(),this.isPresenting=!0,this.dispatchEvent({type:"sessionstart"})}}updateCamera(e){const a=this._session;if(a===null)return;const r=e.near,c=e.far,t=this._cameraXR,n=this._cameraL,s=this._cameraR;t.near=s.near=n.near=r,t.far=s.far=n.far=c,t.isMultiViewCamera=this._useMultiview,(this._currentDepthNear!==t.near||this._currentDepthFar!==t.far)&&(a.updateRenderState({depthNear:t.near,depthFar:t.far}),this._currentDepthNear=t.near,this._currentDepthFar=t.far),t.layers.mask=e.layers.mask|6,n.layers.mask=t.layers.mask&3,s.layers.mask=t.layers.mask&5;const o=e.parent,i=t.cameras;fk(t,o);for(let e=0;e<i.length;e++)fk(i[e],o);i.length===2?sM(t,n,s):t.projectionMatrix.copy(n.projectionMatrix),nM(e,t,o)}_getController(e){let t=this._controllers[e];return t===0[0]&&(t=new Wc,this._controllers[e]=t),t}};function sM(e,t,n){l3.setFromMatrixPosition(t.matrixWorld),r3.setFromMatrixPosition(n.matrixWorld);const d=l3.distanceTo(r3),s=t.projectionMatrix.elements,l=n.projectionMatrix.elements,i=s[14]/(s[10]-1),a=s[14]/(s[10]+1),p=(s[9]+1)/s[5],h=(s[9]-1)/s[5],c=(s[8]-1)/s[0],u=(l[8]+1)/l[0],f=i*c,m=i*u,o=d/(-c+u),r=o*-c;if(t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(r),e.translateZ(o),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert(),s[10]===-1)e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse);else{const t=i+o,n=a+o,s=f-r,c=m+(d-r),l=p*a/n*t,u=h*a/n*t;e.projectionMatrix.makePerspective(s,c,l,u,t,n),e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}}function fk(e,t){t===null?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}function nM(e,t,n){n===null?e.matrix.copy(t.matrixWorld):(e.matrix.copy(n.matrixWorld),e.matrix.invert(),e.matrix.multiply(t.matrixWorld)),e.matrix.decompose(e.position,e.quaternion,e.scale),e.updateMatrixWorld(!0),e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse),e.isPerspectiveCamera&&(e.fov=Ii*2*Math.atan(1/e.projectionMatrix.elements[5]),e.zoom=1)}function tM(e){const n=this._controllerInputSources.indexOf(e.inputSource);if(n===-1)return;const t=this._controllers[n];if(t!==0[0]){const n=this.getReferenceSpace();t.update(e.inputSource,e.frame,n),t.dispatchEvent({type:e.type,data:e.inputSource})}}function eM(){const e=this._session,t=this._renderer;e.removeEventListener("select",this._onSessionEvent),e.removeEventListener("selectstart",this._onSessionEvent),e.removeEventListener("selectend",this._onSessionEvent),e.removeEventListener("squeeze",this._onSessionEvent),e.removeEventListener("squeezestart",this._onSessionEvent),e.removeEventListener("squeezeend",this._onSessionEvent),e.removeEventListener("end",this._onSessionEnd),e.removeEventListener("inputsourceschange",this._onInputSourcesChange);for(let e=0;e<this._controllers.length;e++){const t=this._controllerInputSources[e];if(t===null)continue;this._controllerInputSources[e]=null,this._controllers[e].disconnect(t)}if(this._currentDepthNear=null,this._currentDepthFar=null,t._resetXRState(),this._session=null,this._xrRenderTarget=null,this._sessionUsesLayers===!0)for(const e of this._layers)e.renderTarget=new nr(e.pixelwidth,e.pixelheight,{format:G,type:Y,depthTexture:new At(e.pixelwidth,e.pixelheight,e.stencilBuffer?dt:I,0[0],0[0],0[0],0[0],0[0],0[0],e.stencilBuffer?tt:nt),stencilBuffer:e.stencilBuffer,resolveDepthBuffer:!1,resolveStencilBuffer:!1}),e.renderTarget.isXRRenderTarget=!1,e.plane.material=e.material,e.material.map=e.renderTarget.texture,e.material.map.offset.y=1,e.material.map.repeat.y=-1,delete e.xrlayer;this.isPresenting=!1,this._useMultiview=!1,t._animation.stop(),t._animation.setAnimationLoop(this._currentAnimationLoop),t._animation.setContext(this._currentAnimationContext),t._animation.start(),t.setPixelRatio(this._currentPixelRatio),t.setSize(this._currentSize.width,this._currentSize.height,!1),this.dispatchEvent({type:"sessionend"})}function JS(e){const n=this._controllers,t=this._controllerInputSources;for(let s=0;s<e.removed.length;s++){const i=e.removed[s],o=t.indexOf(i);o>=0&&(t[o]=null,n[o].disconnect(i))}for(let i=0;i<e.added.length;i++){const o=e.added[i];let s=t.indexOf(o);if(s===-1){for(let e=0;e<n.length;e++){if(e>=t.length){t.push(o),s=e;break}if(t[e]===null){t[e]=o,s=e;break}}if(s===-1)break}const a=n[s];a&&a.connect(o)}}function ZS(e){return e.type==="quad"?this._glBinding.createQuadLayer({transform:new XRRigidTransform(e.translation,e.quaternion),width:e.width/2,height:e.height/2,space:this._referenceSpace,viewPixelWidth:e.pixelwidth,viewPixelHeight:e.pixelheight,clearOnAccess:!1}):this._glBinding.createCylinderLayer({transform:new XRRigidTransform(e.translation,e.quaternion),radius:e.radius,centralAngle:e.centralAngle,aspectRatio:e.aspectRatio,space:this._referenceSpace,viewPixelWidth:e.pixelwidth,viewPixelHeight:e.pixelheight,clearOnAccess:!1})}function QS(e,t){if(t===0[0])return;const n=this._cameraXR,s=this._renderer,o=s.backend,i=this._glBaseLayer,a=this.getReferenceSpace(),r=t.getViewerPose(a);if(this._xrFrame=t,r!==null){const e=r.views;this._glBaseLayer!==null&&o.setXRTarget(i.framebuffer);let t=!1;e.length!==n.cameras.length&&(n.cameras.length=0,t=!0);for(let a=0;a<e.length;a++){const c=e[a];let r;if(this._supportsLayers===!0){const e=this._glBinding.getViewSubImage(this._glProjLayer,c);r=e.viewport,a===0&&o.setXRRenderTargetTextures(this._xrRenderTarget,e.colorTexture,this._glProjLayer.ignoreDepthValues&&!this._useMultiview?0[0]:e.depthStencilTexture)}else r=i.getViewport(c);let s=this._cameras[a];s===0[0]&&(s=new Ee,s.layers.enable(a),s.viewport=new j,this._cameras[a]=s),s.matrix.fromArray(c.transform.matrix),s.matrix.decompose(s.position,s.quaternion,s.scale),s.projectionMatrix.fromArray(c.projectionMatrix),s.projectionMatrixInverse.copy(s.projectionMatrix).invert(),s.viewport.set(r.x,r.y,r.width,r.height),a===0&&(n.matrix.copy(s.matrix),n.matrix.decompose(n.position,n.quaternion,n.scale)),t===!0&&n.cameras.push(s)}s.setOutputRenderTarget(this._xrRenderTarget)}for(let e=0;e<this._controllers.length;e++){const n=this._controllerInputSources[e],s=this._controllers[e];n!==null&&s!==0[0]&&s.update(n,t,a)}this._currentAnimationLoop&&this._currentAnimationLoop(e,t),t.detectedPlanes&&this.dispatchEvent({type:"planesdetected",data:t}),this._xrFrame=null}_k=hk,a3=new Uc,qo=new w,n1=new j,s1=new Ml,u1=new xw,mc=new W,jn=new j,Sk=class{constructor(e,t={}){this.isRenderer=!0;const{logarithmicDepthBuffer:n=!1,alpha:s=!0,depth:o=!0,stencil:i=!1,antialias:a=!1,samples:r=0,getFallback:c=null,colorBufferType:l=ht,multiview:d=!1}=t;this.domElement=e.getDomElement(),this.backend=e,this.samples=r||a===!0?4:0,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.alpha=s,this.logarithmicDepthBuffer=n,this.outputColorSpace=lt,this.toneMapping=Ke,this.toneMappingExposure=1,this.sortObjects=!0,this.depth=o,this.stencil=i,this.info=new _g,this.overrideNodes={modelViewMatrix:null,modelNormalViewMatrix:null},this.library=new ok,this.lighting=new ck,this._getFallback=c,this._pixelRatio=1,this._width=this.domElement.width,this._height=this.domElement.height,this._viewport=new j(0,0,this._width,this._height),this._scissor=new j(0,0,this._width,this._height),this._scissorTest=!1,this._attributes=null,this._geometries=null,this._nodes=null,this._animation=null,this._bindings=null,this._objects=null,this._pipelines=null,this._bundles=null,this._renderLists=null,this._renderContexts=null,this._textures=null,this._background=null,this._quad=new o8(new ko),this._quad.material.name="Renderer_output",this._currentRenderContext=null,this._opaqueSort=null,this._transparentSort=null,this._frameBufferTarget=null;const u=this.alpha===!0?0:1;this._clearColor=new xd(0,0,0,u),this._clearDepth=1,this._clearStencil=0,this._renderTarget=null,this._activeCubeFace=0,this._activeMipmapLevel=0,this._outputRenderTarget=null,this._mrt=null,this._renderObjectFunction=null,this._currentRenderObjectFunction=null,this._currentRenderBundle=null,this._handleObjectFunction=this._renderObjectDirect,this._isDeviceLost=!1,this.onDeviceLost=this._onDeviceLost,this._colorBufferType=l,this._initialized=!1,this._initPromise=null,this._compilationPromises=null,this.transparent=!0,this.opaque=!0,this.shadowMap={enabled:!1,type:Il},this.xr=new _k(this,d),this.debug={checkShaderErrors:!0,onShaderError:null,getShaderAsync:async(e,t,n)=>{await this.compileAsync(e,t);const o=this._renderLists.get(e,t),s=this._renderContexts.get(e,t,this._renderTarget),i=e.overrideMaterial||n.material,a=this._objects.get(n,i,e,t,o.lightsNode,s,s.clippingContext),{fragmentShader:r,vertexShader:c}=a.getNodeBuilderState();return{fragmentShader:r,vertexShader:c}}}}async init(){if(this._initialized)throw new Error("Renderer: Backend has already been initialized.");return this._initPromise!==null?this._initPromise:(this._initPromise=new Promise(async(e,t)=>{let n=this.backend;try{await n.init(this)}catch(e){if(this._getFallback!==null)try{this.backend=n=this._getFallback(e),await n.init(this)}catch(e){t(e);return}else{t(e);return}}this._nodes=new YE(this,n),this._animation=new Pp(this._nodes,this.info),this._attributes=new pg(n),this._background=new SC(this,this._nodes),this._geometries=new jg(this._attributes,this.info),this._textures=new e5(this,n,this.info),this._pipelines=new Tg(n,this._nodes),this._bindings=new Dg(n,this._nodes,this._textures,this._attributes,this._pipelines,this.info),this._objects=new rg(this,this._nodes,this._geometries,this._pipelines,this._bindings,this.info),this._renderLists=new Vg(this.lighting),this._bundles=new nk,this._renderContexts=new Qg,this._animation.start(),this._initialized=!0,e(this)}),this._initPromise)}get coordinateSystem(){return this.backend.coordinateSystem}async compileAsync(e,t,n=null){if(this._isDeviceLost===!0)return;this._initialized===!1&&await this.init();const r=this._nodes.nodeFrame,g=r.renderId,p=this._currentRenderContext,m=this._currentRenderObjectFunction,h=this._compilationPromises,i=e.isScene===!0?e:a3;n===null&&(n=e);const a=this._renderTarget,s=this._renderContexts.get(n,t,a),f=this._activeMipmapLevel,c=[];this._currentRenderContext=s,this._currentRenderObjectFunction=this.renderObject,this._handleObjectFunction=this._createObjectPipeline,this._compilationPromises=c,r.renderId++,r.update(),s.depth=this.depth,s.stencil=this.stencil,s.clippingContext||(s.clippingContext=new g3),s.clippingContext.updateGlobal(i,t),i.onBeforeRender(this,e,t,a);const o=this._renderLists.get(e,t);if(o.begin(),this._projectObject(e,t,0,o,s.clippingContext),n!==e&&n.traverseVisible(function(e){e.isLight&&e.layers.test(t.layers)&&o.pushLight(e)}),o.finish(),a!==null){this._textures.updateRenderTarget(a,f);const e=this._textures.get(a);s.textures=e.textures,s.depthTexture=e.depthTexture}else s.textures=null,s.depthTexture=null;this._background.update(i,o,s);const l=o.opaque,d=o.transparent,v=o.transparentDoublePass,u=o.lightsNode;this.opaque===!0&&l.length>0&&this._renderObjects(l,t,i,u),this.transparent===!0&&d.length>0&&this._renderTransparents(d,v,t,i,u),r.renderId=g,this._currentRenderContext=p,this._currentRenderObjectFunction=m,this._compilationPromises=h,this._handleObjectFunction=this._renderObjectDirect,await Promise.all(c)}async renderAsync(e,t){this._initialized===!1&&await this.init(),this._renderScene(e,t)}async waitForGPU(){await this.backend.waitForGPU()}set highPrecision(e){e===!0?(this.overrideNodes.modelViewMatrix=eh,this.overrideNodes.modelNormalViewMatrix=th):this.highPrecision&&(this.overrideNodes.modelViewMatrix=null,this.overrideNodes.modelNormalViewMatrix=null)}get highPrecision(){return this.overrideNodes.modelViewMatrix===eh&&this.overrideNodes.modelNormalViewMatrix===th}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}getColorBufferType(){return this._colorBufferType}_onDeviceLost(e){let t=`THREE.WebGPURenderer: ${e.api} Device Lost:

Message: ${e.message}`;e.reason&&(t+=`
Reason: ${e.reason}`),console.error(t),this._isDeviceLost=!0}_renderBundle(e,t,n){const{bundleGroup:a,camera:r,renderList:l}=e,o=this._currentRenderContext,i=this._bundles.get(a,r),s=this.backend.get(i);s.renderContexts===0[0]&&(s.renderContexts=new Set);const c=a.version!==s.version,d=s.renderContexts.has(o)===!1||c;if(s.renderContexts.add(o),d){this.backend.beginBundle(o),(s.renderObjects===0[0]||c)&&(s.renderObjects=[]),this._currentRenderBundle=i;const{transparentDoublePass:u,transparent:e,opaque:d}=l;this.opaque===!0&&d.length>0&&this._renderObjects(d,r,t,n),this.transparent===!0&&e.length>0&&this._renderTransparents(e,u,r,t,n),this._currentRenderBundle=null,this.backend.finishBundle(o,i),s.version=a.version}else{const{renderObjects:e}=s;for(let n=0,s=e.length;n<s;n++){const t=e[n];this._nodes.needsRefresh(t)&&(this._nodes.updateBefore(t),this._nodes.updateForRender(t),this._bindings.updateForRender(t),this._nodes.updateAfter(t))}}this.backend.addBundle(o,i)}render(e,t){if(this._initialized===!1)return console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead."),this.renderAsync(e,t);this._renderScene(e,t)}_getFrameBufferTarget(){const{currentToneMapping:a,currentColorSpace:r}=this,c=a!==Ke,l=r!==v.workingColorSpace;if(c===!1&&l===!1)return null;const{width:n,height:s}=this.getDrawingBufferSize(qo),{depth:o,stencil:i}=this;let e=this._frameBufferTarget;e===null&&(e=new zs(n,s,{depthBuffer:o,stencilBuffer:i,type:this._colorBufferType,format:G,colorSpace:v.workingColorSpace,generateMipmaps:!1,minFilter:ie,magFilter:ie,samples:this.samples}),e.isPostProcessingRenderTarget=!0,this._frameBufferTarget=e);const t=this.getOutputRenderTarget();return e.depthBuffer=o,e.stencilBuffer=i,t!==null?e.setSize(t.width,t.height,t.depth):e.setSize(n,s,1),e.viewport.copy(this._viewport),e.scissor.copy(this._scissor),e.viewport.multiplyScalar(this._pixelRatio),e.scissor.multiplyScalar(this._pixelRatio),e.scissorTest=this._scissorTest,e.multiview=t!==null&&t.multiview,e.resolveDepthBuffer=t===null||t.resolveDepthBuffer,e._autoAllocateDepthBuffer=t!==null&&t._autoAllocateDepthBuffer,e}_renderScene(e,t,n=!0){if(this._isDeviceLost===!0)return;const m=n?this._getFrameBufferTarget():null,d=this._nodes.nodeFrame,E=d.renderId,C=this._currentRenderContext,_=this._currentRenderObjectFunction,r=e.isScene===!0?e:a3,p=this._renderTarget||this._outputRenderTarget,g=this._activeCubeFace,i=this._activeMipmapLevel;let o;m!==null?(o=m,this.setRenderTarget(o)):o=p;const s=this._renderContexts.get(e,t,o);this._currentRenderContext=s,this._currentRenderObjectFunction=this._renderObjectFunction||this.renderObject,this.info.calls++,this.info.render.calls++,this.info.render.frameCalls++,d.renderId=this.info.calls;const f=this.coordinateSystem,c=this.xr;if(t.coordinateSystem!==f&&c.isPresenting===!1&&(t.coordinateSystem=f,t.updateProjectionMatrix(),t.isArrayCamera))for(const e of t.cameras)e.coordinateSystem=f,e.updateProjectionMatrix();e.matrixWorldAutoUpdate===!0&&e.updateMatrixWorld(),t.parent===null&&t.matrixWorldAutoUpdate===!0&&t.updateMatrixWorld(),c.enabled===!0&&c.isPresenting===!0&&(c.cameraAutoUpdate===!0&&c.updateCamera(t),t=c.getCamera());let l=this._viewport,v=this._scissor,h=this._pixelRatio;o!==null&&(l=o.viewport,v=o.scissor,h=1),this.getDrawingBufferSize(qo),n1.set(0,0,qo.width,qo.height);const w=l.minDepth===0[0]?0:l.minDepth,O=l.maxDepth===0[0]?1:l.maxDepth;s.viewportValue.copy(l).multiplyScalar(h).floor(),s.viewportValue.width>>=i,s.viewportValue.height>>=i,s.viewportValue.minDepth=w,s.viewportValue.maxDepth=O,s.viewport=s.viewportValue.equals(n1)===!1,s.scissorValue.copy(v).multiplyScalar(h).floor(),s.scissor=this._scissorTest&&s.scissorValue.equals(n1)===!1,s.scissorValue.width>>=i,s.scissorValue.height>>=i,s.clippingContext||(s.clippingContext=new g3),s.clippingContext.updateGlobal(r,t),r.onBeforeRender(this,e,t,o);const x=t.isArrayCamera?u1:s1;t.isArrayCamera||(mc.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),x.setFromProjectionMatrix(mc,t.coordinateSystem,t.reversedDepth));const a=this._renderLists.get(e,t);if(a.begin(),this._projectObject(e,t,0,a,s.clippingContext),a.finish(),this.sortObjects===!0&&a.sort(this._opaqueSort,this._transparentSort),o!==null){this._textures.updateRenderTarget(o,i);const e=this._textures.get(o);s.textures=e.textures,s.depthTexture=e.depthTexture,s.width=e.width,s.height=e.height,s.renderTarget=o,s.depth=o.depthBuffer,s.stencil=o.stencilBuffer}else s.textures=null,s.depthTexture=null,s.width=qo.width,s.height=qo.height,s.depth=this.depth,s.stencil=this.stencil;s.width>>=i,s.height>>=i,s.activeCubeFace=g,s.activeMipmapLevel=i,s.occlusionQueryCount=a.occlusionQueryCount,s.scissorValue.max(jn.set(0,0,0,0)),s.scissorValue.x+s.scissorValue.width>s.width&&(s.scissorValue.width=Math.max(s.width-s.scissorValue.x,0)),s.scissorValue.y+s.scissorValue.height>s.height&&(s.scissorValue.height=Math.max(s.height-s.scissorValue.y,0)),this._background.update(r,a,s),s.camera=t,this.backend.beginRender(s);const{bundles:b,lightsNode:u,transparentDoublePass:k,transparent:j,opaque:y}=a;return b.length>0&&this._renderBundles(b,r,u),this.opaque===!0&&y.length>0&&this._renderObjects(y,t,r,u),this.transparent===!0&&j.length>0&&this._renderTransparents(j,k,t,r,u),this.backend.finishRender(s),d.renderId=E,this._currentRenderContext=C,this._currentRenderObjectFunction=_,m!==null&&(this.setRenderTarget(p,g,i),this._renderOutput(o)),r.onAfterRender(this,e,t,o),s}_setXRLayerSize(e,t){this._width=e,this._height=t,this.setViewport(0,0,e,t)}_renderOutput(e){const t=this._quad;this._nodes.hasOutputChange(e.texture)&&(t.material.fragmentNode=this._nodes.getOutputNode(e.texture),t.material.needsUpdate=!0);const n=this.autoClear,s=this.xr.enabled;this.autoClear=!1,this.xr.enabled=!1,this._renderScene(t,t.camera,!1),this.autoClear=n,this.xr.enabled=s}getMaxAnisotropy(){return this.backend.getMaxAnisotropy()}getActiveCubeFace(){return this._activeCubeFace}getActiveMipmapLevel(){return this._activeMipmapLevel}async setAnimationLoop(e){this._initialized===!1&&await this.init(),this._animation.setAnimationLoop(e)}async getArrayBufferAsync(e){return await this.backend.getArrayBufferAsync(e)}getContext(){return this.backend.getContext()}getPixelRatio(){return this._pixelRatio}getDrawingBufferSize(e){return e.set(this._width*this._pixelRatio,this._height*this._pixelRatio).floor()}getSize(e){return e.set(this._width,this._height)}setPixelRatio(e=1){if(this._pixelRatio===e)return;this._pixelRatio=e,this.setSize(this._width,this._height,!1)}setDrawingBufferSize(e,t,n){if(this.xr&&this.xr.isPresenting)return;this._width=e,this._height=t,this._pixelRatio=n,this.domElement.width=Math.floor(e*n),this.domElement.height=Math.floor(t*n),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize()}setSize(e,t,n=!0){if(this.xr&&this.xr.isPresenting)return;this._width=e,this._height=t,this.domElement.width=Math.floor(e*this._pixelRatio),this.domElement.height=Math.floor(t*this._pixelRatio),n===!0&&(this.domElement.style.width=e+"px",this.domElement.style.height=t+"px"),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize()}setOpaqueSort(e){this._opaqueSort=e}setTransparentSort(e){this._transparentSort=e}getScissor(e){const t=this._scissor;return e.x=t.x,e.y=t.y,e.width=t.width,e.height=t.height,e}setScissor(e,t,n,s){const o=this._scissor;e.isVector4?o.copy(e):o.set(e,t,n,s)}getScissorTest(){return this._scissorTest}setScissorTest(e){this._scissorTest=e,this.backend.setScissorTest(e)}getViewport(e){return e.copy(this._viewport)}setViewport(e,t,n,s,o=0,i=1){const a=this._viewport;e.isVector4?a.copy(e):a.set(e,t,n,s),a.minDepth=o,a.maxDepth=i}getClearColor(e){return e.copy(this._clearColor)}setClearColor(e,t=1){this._clearColor.set(e),this._clearColor.a=t}getClearAlpha(){return this._clearColor.a}setClearAlpha(e){this._clearColor.a=e}getClearDepth(){return this._clearDepth}setClearDepth(e){this._clearDepth=e}getClearStencil(){return this._clearStencil}setClearStencil(e){this._clearStencil=e}isOccluded(e){const t=this._currentRenderContext;return t&&this.backend.isOccluded(t,e)}clear(e=!0,t=!0,n=!0){if(this._initialized===!1)return console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead."),this.clearAsync(e,t,n);const o=this._renderTarget||this._getFrameBufferTarget();let s=null;if(o!==null){this._textures.updateRenderTarget(o);const e=this._textures.get(o);s=this._renderContexts.getForClear(o),s.textures=e.textures,s.depthTexture=e.depthTexture,s.width=e.width,s.height=e.height,s.renderTarget=o,s.depth=o.depthBuffer,s.stencil=o.stencilBuffer,s.clearColorValue=this.backend.getClearColor(),s.activeCubeFace=this.getActiveCubeFace(),s.activeMipmapLevel=this.getActiveMipmapLevel()}this.backend.clear(e,t,n,s),o!==null&&this._renderTarget===null&&this._renderOutput(o)}clearColor(){return this.clear(!0,!1,!1)}clearDepth(){return this.clear(!1,!0,!1)}clearStencil(){return this.clear(!1,!1,!0)}async clearAsync(e=!0,t=!0,n=!0){this._initialized===!1&&await this.init(),this.clear(e,t,n)}async clearColorAsync(){this.clearAsync(!0,!1,!1)}async clearDepthAsync(){this.clearAsync(!1,!0,!1)}async clearStencilAsync(){this.clearAsync(!1,!1,!0)}get currentToneMapping(){return this.isOutputTarget?this.toneMapping:Ke}get currentColorSpace(){return this.isOutputTarget?this.outputColorSpace:v.workingColorSpace}get isOutputTarget(){return this._renderTarget===this._outputRenderTarget||this._renderTarget===null}dispose(){this._initialized===!0&&(this.info.dispose(),this.backend.dispose(),this._animation.dispose(),this._objects.dispose(),this._pipelines.dispose(),this._nodes.dispose(),this._bindings.dispose(),this._renderLists.dispose(),this._renderContexts.dispose(),this._textures.dispose(),this._frameBufferTarget!==null&&this._frameBufferTarget.dispose(),Object.values(this.backend.timestampQueryPool).forEach(e=>{e!==null&&e.dispose()})),this.setRenderTarget(null),this.setAnimationLoop(null)}setRenderTarget(e,t=0,n=0){this._renderTarget=e,this._activeCubeFace=t,this._activeMipmapLevel=n}getRenderTarget(){return this._renderTarget}setOutputRenderTarget(e){this._outputRenderTarget=e}getOutputRenderTarget(){return this._outputRenderTarget}_resetXRState(){this.backend.setXRTarget(null),this.setOutputRenderTarget(null),this.setRenderTarget(null),this._frameBufferTarget.dispose(),this._frameBufferTarget=null}setRenderObjectFunction(e){this._renderObjectFunction=e}getRenderObjectFunction(){return this._renderObjectFunction}compute(e,t=null){if(this._isDeviceLost===!0)return;if(this._initialized===!1)return console.warn("THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead."),this.computeAsync(e);const n=this._nodes.nodeFrame,c=n.renderId;this.info.calls++,this.info.compute.calls++,this.info.compute.frameCalls++,n.renderId=this.info.calls;const s=this.backend,o=this._pipelines,i=this._bindings,r=this._nodes,a=Array.isArray(e)?e:[e];if(a[0]===0[0]||a[0].isComputeNode!==!0)throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");s.beginCompute(e);for(const n of a){if(o.has(n)===!1){const e=()=>{n.removeEventListener("dispose",e),o.delete(n),i.delete(n),r.delete(n)};n.addEventListener("dispose",e);const t=n.onInitFunction;t!==null&&t.call(n,{renderer:this})}r.updateForCompute(n),i.updateForCompute(n);const c=i.getForCompute(n),l=o.getForCompute(n,c);s.compute(e,n,c,l,t)}s.finishCompute(e),n.renderId=c}async computeAsync(e,t=null){this._initialized===!1&&await this.init(),this.compute(e,t)}async hasFeatureAsync(e){return this._initialized===!1&&await this.init(),this.backend.hasFeature(e)}async resolveTimestampsAsync(e="render"){return this._initialized===!1&&await this.init(),this.backend.resolveTimestampsAsync(e)}hasFeature(e){return this._initialized===!1?(console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead."),!1):this.backend.hasFeature(e)}hasInitialized(){return this._initialized}async initTextureAsync(e){this._initialized===!1&&await this.init(),this._textures.updateTexture(e)}initTexture(e){this._initialized===!1&&console.warn("THREE.Renderer: .initTexture() called before the backend is initialized. Try using .initTextureAsync() instead."),this._textures.updateTexture(e)}copyFramebufferToTexture(e,t=null){if(t!==null)if(t.isVector2)t=jn.set(t.x,t.y,e.image.width,e.image.height).floor();else if(t.isVector4)t=jn.copy(t).floor();else{console.error("THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.");return}else t=jn.set(0,0,e.image.width,e.image.height);let s=this._currentRenderContext,n;s!==null?n=s.renderTarget:(n=this._renderTarget||this._getFrameBufferTarget(),n!==null&&(this._textures.updateRenderTarget(n),s=this._textures.get(n))),this._textures.updateTexture(e,{renderTarget:n}),this.backend.copyFramebufferToTexture(e,s,t)}copyTextureToTexture(e,t,n=null,s=null,o=0,i=0){this._textures.updateTexture(e),this._textures.updateTexture(t),this.backend.copyTextureToTexture(e,t,n,s,o,i)}async readRenderTargetPixelsAsync(e,t,n,s,o,i=0,a=0){return this.backend.copyTextureToBuffer(e.textures[i],t,n,s,o,a)}_projectObject(e,t,n,s,o){if(e.visible===!1)return;const a=e.layers.test(t.layers);if(a)if(e.isGroup)n=e.renderOrder,e.isClippingGroup&&e.enabled&&(o=o.getGroupContext(e));else if(e.isLOD)e.autoUpdate===!0&&e.update(t);else if(e.isLight)s.pushLight(e);else if(e.isSprite){{const i=t.isArrayCamera?u1:s1;if(!e.frustumCulled||i.intersectsSprite(e,t)){this.sortObjects===!0&&jn.setFromMatrixPosition(e.matrixWorld).applyMatrix4(mc);const{geometry:i,material:t}=e;t.visible&&s.push(e,i,t,n,jn.z,null,o)}}}else if(e.isLineLoop)console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");else if(e.isMesh||e.isLine||e.isPoints){const i=t.isArrayCamera?u1:s1;if(!e.frustumCulled||i.intersectsObject(e,t)){const{geometry:t,material:i}=e;if(this.sortObjects===!0&&(t.boundingSphere===null&&t.computeBoundingSphere(),jn.copy(t.boundingSphere.center).applyMatrix4(e.matrixWorld).applyMatrix4(mc)),Array.isArray(i)){const a=t.groups;for(let r=0,d=a.length;r<d;r++){const l=a[r],c=i[l.materialIndex];c&&c.visible&&s.push(e,t,c,n,jn.z,l,o)}}else i.visible&&s.push(e,t,i,n,jn.z,null,o)}}if(e.isBundleGroup===!0&&this.backend.beginBundle!==0[0]){const n=s;s=this._renderLists.get(e,t),s.begin(),n.pushBundle({bundleGroup:e,camera:t,renderList:s}),s.finish()}const i=e.children;for(let e=0,a=i.length;e<a;e++)this._projectObject(i[e],t,n,s,o)}_renderBundles(e,t,n){for(const s of e)this._renderBundle(s,t,n)}_renderTransparents(e,t,n,s,o){if(t.length>0){for(const{material:e}of t)e.side=B;this._renderObjects(t,n,s,o,"backSide");for(const{material:e}of t)e.side=ot;this._renderObjects(e,n,s,o);for(const{material:e}of t)e.side=Fe}else this._renderObjects(e,n,s,o)}_renderObjects(e,t,n,s,o=null){for(let i=0,a=e.length;i<a;i++){const{object:r,geometry:c,material:l,group:d,clippingContext:u}=e[i];this._currentRenderObjectFunction(r,n,t,c,l,d,s,u,o)}}renderObject(e,t,n,s,o,i,a,r=null,c=null){let l,d,u;if(e.onBeforeRender(this,t,n,s,o,i),o.allowOverride===!0&&t.overrideMaterial!==null){const e=t.overrideMaterial;o.positionNode&&o.positionNode.isNode&&(l=e.positionNode,e.positionNode=o.positionNode),e.alphaTest=o.alphaTest,e.alphaMap=o.alphaMap,e.transparent=o.transparent||o.transmission>0,e.isShadowPassMaterial&&(e.side=o.shadowSide===null?o.side:o.shadowSide,o.depthNode&&o.depthNode.isNode&&(u=e.depthNode,e.depthNode=o.depthNode),o.castShadowNode&&o.castShadowNode.isNode&&(d=e.colorNode,e.colorNode=o.castShadowNode),o.castShadowPositionNode&&o.castShadowPositionNode.isNode&&(l=e.positionNode,e.positionNode=o.castShadowPositionNode)),o=e}o.transparent===!0&&o.side===Fe&&o.forceSinglePass===!1?(o.side=B,this._handleObjectFunction(e,o,t,n,a,i,r,"backSide"),o.side=ot,this._handleObjectFunction(e,o,t,n,a,i,r,c),o.side=Fe):this._handleObjectFunction(e,o,t,n,a,i,r,c),l!==0[0]&&(t.overrideMaterial.positionNode=l),u!==0[0]&&(t.overrideMaterial.depthNode=u),d!==0[0]&&(t.overrideMaterial.colorNode=d),e.onAfterRender(this,t,n,s,o,i)}_renderObjectDirect(e,t,n,s,o,i,a,r){const c=this._objects.get(e,t,n,s,o,this._currentRenderContext,a,r);c.drawRange=e.geometry.drawRange,c.group=i;const l=this._nodes.needsRefresh(c);if(l&&(this._nodes.updateBefore(c),this._geometries.updateForRender(c),this._nodes.updateForRender(c),this._bindings.updateForRender(c)),this._pipelines.updateForRender(c),this._currentRenderBundle!==null){const e=this.backend.get(this._currentRenderBundle);e.renderObjects.push(c),c.bundle=this._currentRenderBundle.bundleGroup}this.backend.draw(c,this.info),l&&this._nodes.updateAfter(c)}_createObjectPipeline(e,t,n,s,o,i,a,r){const c=this._objects.get(e,t,n,s,o,this._currentRenderContext,a,r);c.drawRange=e.geometry.drawRange,c.group=i,this._nodes.updateBefore(c),this._geometries.updateForRender(c),this._nodes.updateForRender(c),this._bindings.updateForRender(c),this._pipelines.getForRender(c,this._compilationPromises),this._nodes.updateAfter(c)}get compile(){return this.compileAsync}},Mk=Sk,Fk=class{constructor(e=""){this.name=e,this.visibility=0}setVisibility(e){this.visibility|=e}clone(){return Object.assign(new this.constructor,this)}},S2=Fk;function XS(e){return e+(ms-e%ms)%ms}Dk=class extends S2{constructor(e,t=null){super(e),this.isBuffer=!0,this.bytesPerElement=Float32Array.BYTES_PER_ELEMENT,this._buffer=t}get byteLength(){return XS(this._buffer.byteLength)}get buffer(){return this._buffer}update(){return!0}},E2=Dk,Lk=class extends E2{constructor(e,t=null){super(e,t),this.isUniformBuffer=!0}},x2=Lk,Pk=0,Hk=class extends x2{constructor(e,t){super("UniformBuffer_"+Pk++,e?e.value:null),this.nodeUniform=e,this.groupNode=t}get buffer(){return this.nodeUniform.value}},v2=Hk,Bk=class extends x2{constructor(e){super(e),this.isUniformsGroup=!0,this._values=null,this.uniforms=[]}addUniform(e){return this.uniforms.push(e),this}removeUniform(e){const t=this.uniforms.indexOf(e);return t!==-1&&this.uniforms.splice(t,1),this}get values(){return this._values===null&&(this._values=Array.from(this.buffer)),this._values}get buffer(){let e=this._buffer;if(e===null){const t=this.byteLength;e=new Float32Array(new ArrayBuffer(t)),this._buffer=e}return e}get byteLength(){const t=this.bytesPerElement;let e=0;for(let n=0,c=this.uniforms.length;n<c;n++){const s=this.uniforms[n],l=s.boundary,i=s.itemSize*t,a=e%ms,r=a%l,o=a+r;e+=r,o!==0&&ms-o<i&&(e+=ms-o),s.offset=e/t,e+=i}return Math.ceil(e/ms)*ms}update(){let e=!1;for(const t of this.uniforms)this.updateByType(t)===!0&&(e=!0);return e}updateByType(e){if(e.isNumberUniform)return this.updateNumber(e);if(e.isVector2Uniform)return this.updateVector2(e);if(e.isVector3Uniform)return this.updateVector3(e);if(e.isVector4Uniform)return this.updateVector4(e);if(e.isColorUniform)return this.updateColor(e);if(e.isMatrix3Uniform)return this.updateMatrix3(e);if(e.isMatrix4Uniform)return this.updateMatrix4(e);console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.",e)}updateNumber(e){let n=!1;const s=this.values,o=e.getValue(),t=e.offset,i=e.getType();if(s[t]!==o){const e=this._getBufferForType(i);e[t]=s[t]=o,n=!0}return n}updateVector2(e){let o=!1;const n=this.values,s=e.getValue(),t=e.offset,i=e.getType();if(n[t+0]!==s.x||n[t+1]!==s.y){const e=this._getBufferForType(i);e[t+0]=n[t+0]=s.x,e[t+1]=n[t+1]=s.y,o=!0}return o}updateVector3(e){let o=!1;const n=this.values,s=e.getValue(),t=e.offset,i=e.getType();if(n[t+0]!==s.x||n[t+1]!==s.y||n[t+2]!==s.z){const e=this._getBufferForType(i);e[t+0]=n[t+0]=s.x,e[t+1]=n[t+1]=s.y,e[t+2]=n[t+2]=s.z,o=!0}return o}updateVector4(e){let o=!1;const n=this.values,s=e.getValue(),t=e.offset,i=e.getType();if(n[t+0]!==s.x||n[t+1]!==s.y||n[t+2]!==s.z||n[t+4]!==s.w){const e=this._getBufferForType(i);e[t+0]=n[t+0]=s.x,e[t+1]=n[t+1]=s.y,e[t+2]=n[t+2]=s.z,e[t+3]=n[t+3]=s.w,o=!0}return o}updateColor(e){let o=!1;const n=this.values,s=e.getValue(),t=e.offset;if(n[t+0]!==s.r||n[t+1]!==s.g||n[t+2]!==s.b){const e=this.buffer;e[t+0]=n[t+0]=s.r,e[t+1]=n[t+1]=s.g,e[t+2]=n[t+2]=s.b,o=!0}return o}updateMatrix3(e){let o=!1;const n=this.values,s=e.getValue().elements,t=e.offset;if(n[t+0]!==s[0]||n[t+1]!==s[1]||n[t+2]!==s[2]||n[t+4]!==s[3]||n[t+5]!==s[4]||n[t+6]!==s[5]||n[t+8]!==s[6]||n[t+9]!==s[7]||n[t+10]!==s[8]){const e=this.buffer;e[t+0]=n[t+0]=s[0],e[t+1]=n[t+1]=s[1],e[t+2]=n[t+2]=s[2],e[t+4]=n[t+4]=s[3],e[t+5]=n[t+5]=s[4],e[t+6]=n[t+6]=s[5],e[t+8]=n[t+8]=s[6],e[t+9]=n[t+9]=s[7],e[t+10]=n[t+10]=s[8],o=!0}return o}updateMatrix4(e){let s=!1;const o=this.values,t=e.getValue().elements,n=e.offset;if(VF(o,t,n)===!1){const e=this.buffer;e.set(t,n),RT(o,t,n),s=!0}return s}_getBufferForType(e){return e==="int"||e==="ivec2"||e==="ivec3"||e==="ivec4"?new Int32Array(this.buffer.buffer):e==="uint"||e==="uvec2"||e==="uvec3"||e==="uvec4"?new Uint32Array(this.buffer.buffer):this.buffer}};function RT(e,t,n){for(let s=0,o=t.length;s<o;s++)e[n+s]=t[s]}function VF(e,t,n){for(let s=0,o=t.length;s<o;s++)if(e[n+s]!==t[s])return!1;return!0}Wk=Bk,Uk=0,Kk=class extends Wk{constructor(e,t){super(e),this.id=Uk++,this.groupNode=t,this.isNodeUniformsGroup=!0}},h2=Kk,Yk=class extends S2{constructor(e,t){super(e),this.texture=t,this.version=t?t.version:0,this.generation=null,this.isSampler=!0}set texture(e){if(this._texture===e)return;const t=()=>{this._texture=null,this.generation=null,this.version=0};this._texture&&this._texture.removeEventListener("dispose",t),this._texture=e,this.generation=null,this.version=0,this._texture&&this._texture.addEventListener("dispose",t)}get texture(){return this._texture}update(){const{texture:e,version:t}=this;return t!==e.version&&(this.version=e.version,!0)}clone(){const e=super.clone();return e._texture=null,e.texture=this.texture,e}},u2=Yk,Xk=0,Qk=class extends u2{constructor(e,t){super(e,t),this.id=Xk++,this.store=!1,this.isSampledTexture=!0}},ic=class extends Qk{constructor(e,t,n,s=null){super(e,t?t.value:null),this.textureNode=t,this.groupNode=n,this.access=s}update(){const{textureNode:e}=this;return this.texture!==e.value?(this.texture=e.value,!0):super.update()}},c2=class extends ic{constructor(e,t,n,s=null){super(e,t,n,s),this.isSampledCubeTexture=!0}},D1=class extends ic{constructor(e,t,n,s=null){super(e,t,n,s),this.isSampledTexture3D=!0}},Z0={textureDimensions:"textureSize",equals:"equal",bitcast_float_int:"floatBitsToInt",bitcast_int_float:"intBitsToFloat",bitcast_uint_float:"uintBitsToFloat",bitcast_float_uint:"floatBitsToUint"},nA={low:"lowp",medium:"mediump",high:"highp"},H0={swizzleAssign:!0,storageBuffer:!1},T0={perspective:"smooth",linear:"noperspective"},A0={centroid:"centroid"},C0=`
precision highp float;
precision highp int;
precision highp sampler2D;
precision highp sampler3D;
precision highp samplerCube;
precision highp sampler2DArray;

precision highp usampler2D;
precision highp usampler3D;
precision highp usamplerCube;
precision highp usampler2DArray;

precision highp isampler2D;
precision highp isampler3D;
precision highp isamplerCube;
precision highp isampler2DArray;

precision lowp sampler2DShadow;
precision lowp sampler2DArrayShadow;
precision lowp samplerCubeShadow;
`,rA=class extends bh{constructor(e,t){super(e,t,new BE),this.uniformGroups={},this.transforms=[],this.extensions={},this.builtins={vertex:[],fragment:[],compute:[]}}needsToWorkingColorSpace(e){return e.isVideoTexture===!0&&e.colorSpace!==$e}getMethod(e){return Z0[e]||e}getBitcastMethod(e,t){return Z0[`bitcast_${t}_${e}`]}getTernary(e,t,n){return`${e} ? ${t} : ${n}`}getOutputStructName(){return""}buildFunctionCode(e){const t=e.layout,n=this.flowShaderNode(e),s=[];for(const e of t.inputs)s.push(this.getType(e.type)+" "+e.name);const o=`${this.getType(t.type)} ${t.name}( ${s.join(", ")} ) {

	${n.vars}

${n.code}
	return ${n.result};

}`;return o}setupPBO(e){const t=e.value;if(t.pbo===0[0]){const l=t.array,a=t.count*t.itemSize,{itemSize:e}=t,n=t.array.constructor.name.toLowerCase().includes("int");let s=n?Yo:or;e===2?s=n?Go:ur:e===3?s=n?Fp:sr:e===4&&(s=n?Xo:G);const u={Float32Array:X,Uint8Array:Y,Uint16Array:St,Uint32Array:I,Int8Array:Fs,Int16Array:Ns,Int32Array:ue,Uint8ClampedArray:Y},o=2**Math.ceil(Math.log2((a/e)**.5));let i=Math.ceil(a/e/o);o*i*e<a&&i++;const h=o*i*e,d=new l.constructor(h);d.set(l,0),t.array=d;const r=new sw(t.array,o,i,s,u[t.array.constructor.name]||X);r.needsUpdate=!0,r.isPBOTexture=!0;const c=new $a(r,null,null);c.setPrecision("high"),t.pboNode=c,t.pbo=c.value,this.getUniformFromNode(t.pboNode,"texture",this.shaderStage,this.context.nodeName)}}getPropertyName(e,t=this.shaderStage){return e.isNodeUniform&&e.node.isTextureNode!==!0&&e.node.isBufferNode!==!0?t.charAt(0)+"_"+e.name:super.getPropertyName(e,t)}generatePBO(e){const{node:s,indexNode:o}=e,t=s.value;if(this.renderer.backend.has(t)){const e=this.renderer.backend.get(t);e.pbo=t.pbo}const c=this.getUniformFromNode(t.pboNode,"texture",this.shaderStage,this.context.nodeName),i=this.getPropertyName(c);this.increaseUsage(o);const a=o.build(this,"uint"),r=this.getDataFromNode(e);let n=r.propertyName;if(n===0[0]){const d=this.getVarFromNode(e);n=this.getPropertyName(d);const l=this.getDataFromNode(s);let o=l.propertySizeName;o===0[0]&&(o=n+"Size",this.getVarFromNode(s,o,"uint"),this.addLineFlowCode(`${o} = uint( textureSize( ${i}, 0 ).x )`,e),l.propertySizeName=o);const{itemSize:u}=t,h="."+$o.join("").slice(0,u),m=`ivec2(${a} % ${o}, ${a} / ${o})`,f=this.generateTextureLoad(null,i,m,null,null,"0");let c="vec4";t.pbo.type===I?c="uvec4":t.pbo.type===ue&&(c="ivec4"),this.addLineFlowCode(`${n} = ${c}(${f})${h}`,e),r.propertyName=n}return n}generateTextureLoad(e,t,n,s,o,i="0"){let a;return s?o?a=`texelFetchOffset( ${t}, ivec3( ${n}, ${s} ), ${i}, ${o} )`:a=`texelFetch( ${t}, ivec3( ${n}, ${s} ), ${i} )`:o?a=`texelFetchOffset( ${t}, ${n}, ${i}, ${o} )`:a=`texelFetch( ${t}, ${n}, ${i} )`,e!==null&&e.isDepthTexture&&(a+=".x"),a}generateTexture(e,t,n,s,o){return s&&(n=`vec3( ${n}, ${s} )`),e.isDepthTexture?o?`textureOffset( ${t}, ${n}, ${o} ).x`:`texture( ${t}, ${n} ).x`:o?`textureOffset( ${t}, ${n}, ${o} )`:`texture( ${t}, ${n} )`}generateTextureLevel(e,t,n,s,o){return o?`textureLodOffset( ${t}, ${n}, ${s}, ${o} )`:`textureLod( ${t}, ${n}, ${s} )`}generateTextureBias(e,t,n,s,o){return o?`textureOffset( ${t}, ${n}, ${o}, ${s} )`:`texture( ${t}, ${n}, ${s} )`}generateTextureGrad(e,t,n,s,o){return o?`textureGradOffset( ${t}, ${n}, ${s[0]}, ${s[1]}, ${o} )`:`textureGrad( ${t}, ${n}, ${s[0]}, ${s[1]} )`}generateTextureCompare(e,t,n,s,o,i,a=this.shaderStage){if(a==="fragment")return o?i?`textureOffset( ${t}, vec4( ${n}, ${o}, ${s} ), ${i} )`:`texture( ${t}, vec4( ${n}, ${o}, ${s} ) )`:i?`textureOffset( ${t}, vec3( ${n}, ${s} ), ${i} )`:`texture( ${t}, vec3( ${n}, ${s} ) )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${a} shader.`)}getVars(e){const t=[],n=this.vars[e];if(n!==0[0])for(const e of n)t.push(`${this.getVar(e.type,e.name,e.count)};`);return t.join(`
	`)}getUniforms(e){const o=this.uniforms[e],s=[],t={};for(const n of o){let i=null,a=!1;if(n.type==="texture"||n.type==="texture3D"){const e=n.node.value;let t="";(e.isDataTexture===!0||e.isData3DTexture===!0)&&(e.type===I?t="u":e.type===ue&&(t="i")),n.type==="texture3D"&&e.isArrayTexture===!1?i=`${t}sampler3D ${n.name};`:e.compareFunction?e.isArrayTexture===!0?i=`sampler2DArrayShadow ${n.name};`:i=`sampler2DShadow ${n.name};`:e.isArrayTexture===!0||e.isDataArrayTexture===!0||e.isCompressedArrayTexture===!0?i=`${t}sampler2DArray ${n.name};`:i=`${t}sampler2D ${n.name};`}else if(n.type==="cubeTexture")i=`samplerCube ${n.name};`;else if(n.type==="buffer"){const e=n.node,s=this.getType(e.bufferType),t=e.bufferCount,o=t>0?t:"";i=`${e.name} {
	${s} ${n.name}[${o}];
};
`}else{const t=this.getVectorType(n.type);i=`${t} ${this.getPropertyName(n,e)};`,a=!0}const r=n.node.precision;if(r!==null&&(i=nA[r]+" "+i),a){i="	"+i;const e=n.groupNode.name,s=t[e]||(t[e]=[]);s.push(i)}else i="uniform "+i,s.push(i)}let n="";for(const s in t){const o=t[s];n+=this._getGLSLUniformStruct(e+"_"+s,o.join(`
`))+`
`}return n+=s.join(`
`),n}getTypeFromAttribute(e){let t=super.getTypeFromAttribute(e);if(/^[iu]/.test(t)&&e.gpuType!==ue){let n=e;e.isInterleavedBufferAttribute&&(n=e.data);const s=n.array;(s instanceof Uint32Array||s instanceof Int32Array)===!1&&(t=t.slice(1))}return t}getAttributes(e){let t="";if(e==="vertex"||e==="compute"){const e=this.getAttributesArray();let n=0;for(const s of e)t+=`layout( location = ${n++} ) in ${s.type} ${s.name};
`}return t}getStructMembers(e){const t=[];for(const n of e.members)t.push(`	${n.type} ${n.name};`);return t.join(`
`)}getStructs(e){const n=[],s=this.structs[e],t=[];for(const e of s)if(e.output)for(const n of e.members)t.push(`layout( location = ${n.index} ) out ${n.type} ${n.name};`);else{let t="struct "+e.name+` {
`;t+=this.getStructMembers(e),t+=`
};
`,n.push(t)}return t.length===0&&t.push("layout( location = 0 ) out vec4 fragColor;"),`
`+t.join(`
`)+`

`+n.join(`
`)}getVaryings(e){let t="";const n=this.varyings;if(e==="vertex"||e==="compute")for(const s of n){e==="compute"&&(s.needsInterpolation=!0);const o=this.getType(s.type);if(s.needsInterpolation)if(s.interpolationType){const e=T0[s.interpolationType]||s.interpolationType,n=A0[s.interpolationSampling]||"";t+=`${e} ${n} out ${o} ${s.name};
`}else{const e=o.includes("int")||o.includes("uv")||o.includes("iv")?"flat ":"";t+=`${e}out ${o} ${s.name};
`}else t+=`${o} ${s.name};
`}else if(e==="fragment")for(const e of n)if(e.needsInterpolation){const n=this.getType(e.type);if(e.interpolationType){const s=T0[e.interpolationType]||e.interpolationType,o=A0[e.interpolationSampling]||"";t+=`${s} ${o} in ${n} ${e.name};
`}else{const s=n.includes("int")||n.includes("uv")||n.includes("iv")?"flat ":"";t+=`${s}in ${n} ${e.name};
`}}for(const n of this.builtins[e])t+=`${n};
`;return t}getVertexIndex(){return"uint( gl_VertexID )"}getInstanceIndex(){return"uint( gl_InstanceID )"}getInvocationLocalIndex(){const e=this.object.workgroupSize,t=e.reduce((e,t)=>e*t,1);return`uint( gl_InstanceID ) % ${t}u`}getDrawIndex(){const e=this.renderer.backend.extensions;return e.has("WEBGL_multi_draw")?"uint( gl_DrawID )":null}getFrontFacing(){return"gl_FrontFacing"}getFragCoord(){return"gl_FragCoord.xy"}getFragDepth(){return"gl_FragDepth"}enableExtension(e,t,n=this.shaderStage){const s=this.extensions[n]||(this.extensions[n]=new Map);s.has(e)===!1&&s.set(e,{name:e,behavior:t})}getExtensions(e){const t=[];if(e==="vertex"){const t=this.renderer.backend.extensions,n=this.object.isBatchedMesh;n&&t.has("WEBGL_multi_draw")&&this.enableExtension("GL_ANGLE_multi_draw","require",e)}const n=this.extensions[e];if(n!==0[0])for(const{name:e,behavior:s}of n.values())t.push(`#extension ${e} : ${s}`);return t.join(`
`)}getClipDistance(){return"gl_ClipDistance"}isAvailable(e){let t=H0[e];if(t===0[0]){let n;switch(t=!1,e){case"float32Filterable":n="OES_texture_float_linear";break;case"clipDistance":n="WEBGL_clip_cull_distance";break}if(n!==0[0]){const e=this.renderer.backend.extensions;e.has(n)&&(e.get(n),t=!0)}H0[e]=t}return t}isFlipY(){return!0}enableHardwareClipping(e){this.enableExtension("GL_ANGLE_clip_cull_distance","require"),this.builtins.vertex.push(`out float gl_ClipDistance[ ${e} ]`)}enableMultiview(){this.enableExtension("GL_OVR_multiview2","require","fragment"),this.enableExtension("GL_OVR_multiview2","require","vertex"),this.builtins.vertex.push("layout(num_views = 2) in")}registerTransform(e,t){this.transforms.push({varyingName:e,attributeNode:t})}getTransforms(){const e=this.transforms;let t="";for(let n=0;n<e.length;n++){const s=e[n],o=this.getPropertyName(s.attributeNode);o&&(t+=`${s.varyingName} = ${o};
	`)}return t}_getGLSLUniformStruct(e,t){return`
layout( std140 ) uniform ${e} {
${t}
};`}_getGLSLVertexCode(e){return`#version 300 es

${this.getSignature()}

// extensions
${e.extensions}

// precision
${C0}

// uniforms
${e.uniforms}

// varyings
${e.varyings}

// attributes
${e.attributes}

// codes
${e.codes}

void main() {

	// vars
	${e.vars}

	// transforms
	${e.transforms}

	// flow
	${e.flow}

	gl_PointSize = 1.0;

}
`}_getGLSLFragmentCode(e){return`#version 300 es

${this.getSignature()}

// extensions
${e.extensions}

// precision
${C0}

// uniforms
${e.uniforms}

// varyings
${e.varyings}

// codes
${e.codes}

// structs
${e.structs}

void main() {

	// vars
	${e.vars}

	// flow
	${e.flow}

}
`}buildCode(){const e=this.material!==null?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){let n=`// code

`;n+=this.flowCode[t];const o=this.flowNodes[t],i=o[o.length-1];for(const e of o){const s=this.getFlowData(e),a=e.name;a&&(n.length>0&&(n+=`
`),n+=`	// flow -> ${a}
	`),n+=`${s.code}
	`,e===i&&t!=="compute"&&(n+=`// result
	`,t==="vertex"?(n+="gl_Position = ",n+=`${s.result};`):t==="fragment"&&(e.outputNode.isOutputStructNode||(n+="fragColor = ",n+=`${s.result};`)))}const s=e[t];s.extensions=this.getExtensions(t),s.uniforms=this.getUniforms(t),s.attributes=this.getAttributes(t),s.varyings=this.getVaryings(t),s.vars=this.getVars(t),s.structs=this.getStructs(t),s.codes=this.getCodes(t),s.transforms=this.getTransforms(t),s.flow=n}this.material!==null?(this.vertexShader=this._getGLSLVertexCode(e.vertex),this.fragmentShader=this._getGLSLFragmentCode(e.fragment)):this.computeShader=this._getGLSLVertexCode(e.compute)}getUniformFromNode(e,t,n,s=null){const i=super.getUniformFromNode(e,t,n,s),a=this.getDataFromNode(e,n,this.globalCache);let o=a.uniformGPU;if(o===0[0]){const s=e.groupNode,c=s.name,r=this.getBindGroupArray(c,n);if(t==="texture")o=new ic(i.name,i.node,s),r.push(o);else if(t==="cubeTexture")o=new c2(i.name,i.node,s),r.push(o);else if(t==="texture3D")o=new D1(i.name,i.node,s),r.push(o);else if(t==="buffer"){e.name=`NodeBuffer_${e.id}`,i.name=`buffer${e.id}`;const t=new v2(e,s);t.name=e.name,r.push(t),o=t}else{const a=this.uniformGroups[n]||(this.uniformGroups[n]={});let e=a[c];e===0[0]&&(e=new h2(n+"_"+c,s),a[c]=e,r.push(e)),o=this.getNodeUniform(i,t),e.addUniform(o)}a.uniformGPU=o}return i}},cA=rA,Z1=null,Jo=null,uA=class{constructor(e={}){this.parameters=Object.assign({},e),this.data=new WeakMap,this.renderer=null,this.domElement=null,this.timestampQueryPool={render:null,compute:null},this.trackTimestamp=e.trackTimestamp===!0}async init(e){this.renderer=e}get coordinateSystem(){}beginRender(){}finishRender(){}beginCompute(){}finishCompute(){}draw(){}compute(){}createProgram(){}destroyProgram(){}createBindings(){}updateBindings(){}updateBinding(){}createRenderPipeline(){}createComputePipeline(){}needsRenderUpdate(){}getRenderCacheKey(){}createNodeBuilder(){}createSampler(){}destroySampler(){}createDefaultTexture(){}createTexture(){}updateTexture(){}generateMipmaps(){}destroyTexture(){}async copyTextureToBuffer(){}copyTextureToTexture(){}copyFramebufferToTexture(){}createAttribute(){}createIndexAttribute(){}createStorageAttribute(){}updateAttribute(){}destroyAttribute(){}getContext(){}updateSize(){}updateViewport(){}getTimestampUID(e){const n=this.get(e);let t=e.isComputeNode===!0?"c":"r";return t+=":"+n.frameCalls+":"+e.id,t}isOccluded(){}async resolveTimestampsAsync(e="render"){if(!this.trackTimestamp){gt("WebGPURenderer: Timestamp tracking is disabled.");return}const t=this.timestampQueryPool[e];if(!t){gt(`WebGPURenderer: No timestamp query pool for type '${e}' found.`);return}const n=await t.resolveQueriesAsync();return this.renderer.info[e].timestamp=n,n}async waitForGPU(){}async getArrayBufferAsync(){}async hasFeatureAsync(){}hasFeature(){}getMaxAnisotropy(){}getDrawingBufferSize(){return Z1=Z1||new w,this.renderer.getDrawingBufferSize(Z1)}setScissorTest(){}getClearColor(){const e=this.renderer;return Jo=Jo||new xd,e.getClearColor(Jo),Jo.getRGB(Jo),Jo}getDomElement(){let e=this.domElement;return e===null&&(e=this.parameters.canvas!==0[0]?this.parameters.canvas:my(),"setAttribute"in e&&e.setAttribute("data-engine",`three.js r${ba} webgpu`),this.domElement=e),e}set(e,t){this.data.set(e,t)}get(e){let t=this.data.get(e);return t===0[0]&&(t={},this.data.set(e,t)),t}has(e){return this.data.has(e)}delete(e){this.data.delete(e)}dispose(){}},y0=uA,mA=0,fA=class{constructor(e,t){this.buffers=[e.bufferGPU,t],this.type=e.type,this.bufferType=e.bufferType,this.pbo=e.pbo,this.byteLength=e.byteLength,this.bytesPerElement=e.BYTES_PER_ELEMENT,this.version=e.version,this.isInteger=e.isInteger,this.activeBufferIndex=0,this.baseId=e.id}get id(){return`${this.baseId}|${this.activeBufferIndex}`}get bufferGPU(){return this.buffers[this.activeBufferIndex]}get transformBuffer(){return this.buffers[this.activeBufferIndex^1]}switchBuffers(){this.activeBufferIndex^=1}},pA=class{constructor(e){this.backend=e}createAttribute(e,t){const r=this.backend,{gl:n}=r,s=e.array,l=e.usage||n.STATIC_DRAW,d=e.isInterleavedBufferAttribute?e.data:e,i=r.get(d);let a=i.bufferGPU;a===0[0]&&(a=this._createBuffer(n,t,s,l),i.bufferGPU=a,i.bufferType=t,i.version=d.version);let o;if(s instanceof Float32Array)o=n.FLOAT;else if(typeof Float16Array!="undefined"&&s instanceof Float16Array)o=n.HALF_FLOAT;else if(s instanceof Uint16Array)e.isFloat16BufferAttribute?o=n.HALF_FLOAT:o=n.UNSIGNED_SHORT;else if(s instanceof Int16Array)o=n.SHORT;else if(s instanceof Uint32Array)o=n.UNSIGNED_INT;else if(s instanceof Int32Array)o=n.INT;else if(s instanceof Int8Array)o=n.BYTE;else if(s instanceof Uint8Array)o=n.UNSIGNED_BYTE;else if(s instanceof Uint8ClampedArray)o=n.UNSIGNED_BYTE;else throw new Error("THREE.WebGLBackend: Unsupported buffer data format: "+s);let c={bufferGPU:a,bufferType:t,type:o,byteLength:s.byteLength,bytesPerElement:s.BYTES_PER_ELEMENT,version:e.version,pbo:e.pbo,isInteger:o===n.INT||o===n.UNSIGNED_INT||e.gpuType===ue,id:mA++};if(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute){const e=this._createBuffer(n,t,s,l);c=new fA(c,e)}r.set(e,c)}updateAttribute(e){const r=this.backend,{gl:t}=r,s=e.array,o=e.isInterleavedBufferAttribute?e.data:e,i=r.get(o),n=i.bufferType,a=e.isInterleavedBufferAttribute?e.data.updateRanges:e.updateRanges;if(t.bindBuffer(n,i.bufferGPU),a.length===0)t.bufferSubData(n,0,s);else{for(let e=0,i=a.length;e<i;e++){const o=a[e];t.bufferSubData(n,o.start*s.BYTES_PER_ELEMENT,s,o.start,o.count)}o.clearUpdateRanges()}t.bindBuffer(n,null),i.version=o.version}destroyAttribute(e){const t=this.backend,{gl:n}=t;e.isInterleavedBufferAttribute&&t.delete(e.data);const s=t.get(e);n.deleteBuffer(s.bufferGPU),t.delete(e)}async getArrayBufferAsync(e){const n=this.backend,{gl:t}=n,r=e.isInterleavedBufferAttribute?e.data:e,{bufferGPU:c}=n.get(r),o=e.array,i=o.byteLength;t.bindBuffer(t.COPY_READ_BUFFER,c);const s=t.createBuffer();t.bindBuffer(t.COPY_WRITE_BUFFER,s),t.bufferData(t.COPY_WRITE_BUFFER,i,t.STREAM_READ),t.copyBufferSubData(t.COPY_READ_BUFFER,t.COPY_WRITE_BUFFER,0,0,i),await n.utils._clientWaitAsync();const a=new e.array.constructor(o.length);return t.bindBuffer(t.COPY_WRITE_BUFFER,s),t.getBufferSubData(t.COPY_WRITE_BUFFER,0,a),t.deleteBuffer(s),t.bindBuffer(t.COPY_READ_BUFFER,null),t.bindBuffer(t.COPY_WRITE_BUFFER,null),a.buffer}_createBuffer(e,t,n,s){const o=e.createBuffer();return e.bindBuffer(t,o),e.bufferData(t,n,s),e.bindBuffer(t,null),o}},gA=pA,jA=class{constructor(e){this.backend=e,this.gl=this.backend.gl,this.enabled={},this.currentFlipSided=null,this.currentCullFace=null,this.currentProgram=null,this.currentBlendingEnabled=!1,this.currentBlending=null,this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentPremultipledAlpha=null,this.currentPolygonOffsetFactor=null,this.currentPolygonOffsetUnits=null,this.currentColorMask=null,this.currentDepthFunc=null,this.currentDepthMask=null,this.currentStencilFunc=null,this.currentStencilRef=null,this.currentStencilFuncMask=null,this.currentStencilFail=null,this.currentStencilZFail=null,this.currentStencilZPass=null,this.currentStencilMask=null,this.currentLineWidth=null,this.currentClippingPlanes=0,this.currentVAO=null,this.currentIndex=null,this.currentBoundFramebuffers={},this.currentDrawbuffers=new WeakMap,this.maxTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),this.currentTextureSlot=null,this.currentBoundTextures={},this.currentBoundBufferBases={},this._init()}_init(){const e=this.gl;v0={[Se]:e.FUNC_ADD,[Vl]:e.FUNC_SUBTRACT,[$l]:e.FUNC_REVERSE_SUBTRACT},qr={[Pn]:e.ZERO,[ql]:e.ONE,[Jl]:e.SRC_COLOR,[_a]:e.SRC_ALPHA,[dd]:e.SRC_ALPHA_SATURATE,[cd]:e.DST_COLOR,[nd]:e.DST_ALPHA,[td]:e.ONE_MINUS_SRC_COLOR,[wa]:e.ONE_MINUS_SRC_ALPHA,[ld]:e.ONE_MINUS_DST_COLOR,[ad]:e.ONE_MINUS_DST_ALPHA};const t=e.getParameter(e.SCISSOR_BOX),n=e.getParameter(e.VIEWPORT);this.currentScissor=(new j).fromArray(t),this.currentViewport=(new j).fromArray(n),this._tempVec4=new j}enable(e){const{enabled:t}=this;t[e]!==!0&&(this.gl.enable(e),t[e]=!0)}disable(e){const{enabled:t}=this;t[e]!==!1&&(this.gl.disable(e),t[e]=!1)}setFlipSided(e){if(this.currentFlipSided!==e){const{gl:t}=this;e?t.frontFace(t.CW):t.frontFace(t.CCW),this.currentFlipSided=e}}setCullFace(e){const{gl:t}=this;e!==q8?(this.enable(t.CULL_FACE),e!==this.currentCullFace&&(e===Hl?t.cullFace(t.BACK):e===W8?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):this.disable(t.CULL_FACE),this.currentCullFace=e}setLineWidth(e){const{currentLineWidth:t,gl:n}=this;e!==t&&(n.lineWidth(e),this.currentLineWidth=e)}setBlending(e,t,n,s,o,i,a,r){const{gl:c}=this;if(e===Qe){this.currentBlendingEnabled===!0&&(this.disable(c.BLEND),this.currentBlendingEnabled=!1);return}if(this.currentBlendingEnabled===!1&&(this.enable(c.BLEND),this.currentBlendingEnabled=!0),e!==xo){if(e!==this.currentBlending||r!==this.currentPremultipledAlpha){if((this.currentBlendEquation!==Se||this.currentBlendEquationAlpha!==Se)&&(c.blendEquation(c.FUNC_ADD),this.currentBlendEquation=Se,this.currentBlendEquationAlpha=Se),r)switch(e){case rt:c.blendFuncSeparate(c.ONE,c.ONE_MINUS_SRC_ALPHA,c.ONE,c.ONE_MINUS_SRC_ALPHA);break;case bo:c.blendFunc(c.ONE,c.ONE);break;case wo:c.blendFuncSeparate(c.ZERO,c.ONE_MINUS_SRC_COLOR,c.ZERO,c.ONE);break;case Oo:c.blendFuncSeparate(c.DST_COLOR,c.ONE_MINUS_SRC_ALPHA,c.ZERO,c.ONE);break;default:console.error("THREE.WebGLState: Invalid blending: ",e);break}else switch(e){case rt:c.blendFuncSeparate(c.SRC_ALPHA,c.ONE_MINUS_SRC_ALPHA,c.ONE,c.ONE_MINUS_SRC_ALPHA);break;case bo:c.blendFuncSeparate(c.SRC_ALPHA,c.ONE,c.ONE,c.ONE);break;case wo:console.error("THREE.WebGLState: SubtractiveBlending requires material.premultipliedAlpha = true");break;case Oo:console.error("THREE.WebGLState: MultiplyBlending requires material.premultipliedAlpha = true");break;default:console.error("THREE.WebGLState: Invalid blending: ",e);break}this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentBlending=e,this.currentPremultipledAlpha=r}return}o=o||t,i=i||n,a=a||s,(t!==this.currentBlendEquation||o!==this.currentBlendEquationAlpha)&&(c.blendEquationSeparate(v0[t],v0[o]),this.currentBlendEquation=t,this.currentBlendEquationAlpha=o),(n!==this.currentBlendSrc||s!==this.currentBlendDst||i!==this.currentBlendSrcAlpha||a!==this.currentBlendDstAlpha)&&(c.blendFuncSeparate(qr[n],qr[s],qr[i],qr[a]),this.currentBlendSrc=n,this.currentBlendDst=s,this.currentBlendSrcAlpha=i,this.currentBlendDstAlpha=a),this.currentBlending=e,this.currentPremultipledAlpha=!1}setColorMask(e){this.currentColorMask!==e&&(this.gl.colorMask(e,e,e,e),this.currentColorMask=e)}setDepthTest(e){const{gl:t}=this;e?this.enable(t.DEPTH_TEST):this.disable(t.DEPTH_TEST)}setDepthMask(e){this.currentDepthMask!==e&&(this.gl.depthMask(e),this.currentDepthMask=e)}setDepthFunc(e){if(this.currentDepthFunc!==e){const{gl:t}=this;switch(e){case Ma:t.depthFunc(t.NEVER);break;case Ta:t.depthFunc(t.ALWAYS);break;case za:t.depthFunc(t.LESS);break;case ps:t.depthFunc(t.LEQUAL);break;case Da:t.depthFunc(t.EQUAL);break;case Na:t.depthFunc(t.GEQUAL);break;case La:t.depthFunc(t.GREATER);break;case Ba:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}this.currentDepthFunc=e}}scissor(e,t,n,s){const o=this._tempVec4.set(e,t,n,s);if(this.currentScissor.equals(o)===!1){const{gl:e}=this;e.scissor(o.x,o.y,o.z,o.w),this.currentScissor.copy(o)}}viewport(e,t,n,s){const o=this._tempVec4.set(e,t,n,s);if(this.currentViewport.equals(o)===!1){const{gl:e}=this;e.viewport(o.x,o.y,o.z,o.w),this.currentViewport.copy(o)}}setScissorTest(e){const t=this.gl;e?t.enable(t.SCISSOR_TEST):t.disable(t.SCISSOR_TEST)}setStencilTest(e){const{gl:t}=this;e?this.enable(t.STENCIL_TEST):this.disable(t.STENCIL_TEST)}setStencilMask(e){this.currentStencilMask!==e&&(this.gl.stencilMask(e),this.currentStencilMask=e)}setStencilFunc(e,t,n){(this.currentStencilFunc!==e||this.currentStencilRef!==t||this.currentStencilFuncMask!==n)&&(this.gl.stencilFunc(e,t,n),this.currentStencilFunc=e,this.currentStencilRef=t,this.currentStencilFuncMask=n)}setStencilOp(e,t,n){(this.currentStencilFail!==e||this.currentStencilZFail!==t||this.currentStencilZPass!==n)&&(this.gl.stencilOp(e,t,n),this.currentStencilFail=e,this.currentStencilZFail=t,this.currentStencilZPass=n)}setMaterial(e,t,n){const{gl:s}=this;e.side===Fe?this.disable(s.CULL_FACE):this.enable(s.CULL_FACE);let o=e.side===B;t&&(o=!o),this.setFlipSided(o),e.blending===rt&&e.transparent===!1?this.setBlending(Qe):this.setBlending(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),this.setDepthFunc(e.depthFunc),this.setDepthTest(e.depthTest),this.setDepthMask(e.depthWrite),this.setColorMask(e.colorWrite);const i=e.stencilWrite;if(this.setStencilTest(i),i&&(this.setStencilMask(e.stencilWriteMask),this.setStencilFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),this.setStencilOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),this.setPolygonOffset(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),e.alphaToCoverage===!0&&this.backend.renderer.samples>1?this.enable(s.SAMPLE_ALPHA_TO_COVERAGE):this.disable(s.SAMPLE_ALPHA_TO_COVERAGE),n>0&&this.currentClippingPlanes!==n){const e=12288;for(let t=0;t<8;t++)t<n?this.enable(e+t):this.disable(e+t)}}setPolygonOffset(e,t,n){const{gl:s}=this;e?(this.enable(s.POLYGON_OFFSET_FILL),(this.currentPolygonOffsetFactor!==t||this.currentPolygonOffsetUnits!==n)&&(s.polygonOffset(t,n),this.currentPolygonOffsetFactor=t,this.currentPolygonOffsetUnits=n)):this.disable(s.POLYGON_OFFSET_FILL)}useProgram(e){return this.currentProgram!==e&&(this.gl.useProgram(e),this.currentProgram=e,!0)}setVertexState(e,t=null){const n=this.gl;return(this.currentVAO!==e||this.currentIndex!==t)&&(n.bindVertexArray(e),t!==null&&n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,t),this.currentVAO=e,this.currentIndex=t,!0)}resetVertexState(){const e=this.gl;e.bindVertexArray(null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),this.currentVAO=null,this.currentIndex=null}bindFramebuffer(e,t){const{gl:n,currentBoundFramebuffers:s}=this;return s[e]!==t&&(n.bindFramebuffer(e,t),s[e]=t,e===n.DRAW_FRAMEBUFFER&&(s[n.FRAMEBUFFER]=t),e===n.FRAMEBUFFER&&(s[n.DRAW_FRAMEBUFFER]=t),!0)}drawBuffers(e,t){const{gl:s}=this;let n=[],o=!1;if(e.textures!==null){{n=this.currentDrawbuffers.get(t),n===0[0]&&(n=[],this.currentDrawbuffers.set(t,n));const i=e.textures;if(n.length!==i.length||n[0]!==s.COLOR_ATTACHMENT0){for(let e=0,t=i.length;e<t;e++)n[e]=s.COLOR_ATTACHMENT0+e;n.length=i.length,o=!0}}}else n[0]!==s.BACK&&(n[0]=s.BACK,o=!0);o&&s.drawBuffers(n)}activeTexture(e){const{gl:t,currentTextureSlot:n,maxTextures:s}=this;e===0[0]&&(e=t.TEXTURE0+s-1),n!==e&&(t.activeTexture(e),this.currentTextureSlot=e)}bindTexture(e,t,n){const{gl:o,currentTextureSlot:i,currentBoundTextures:a,maxTextures:r}=this;n===0[0]&&(i===null?n=o.TEXTURE0+r-1:n=i);let s=a[n];s===0[0]&&(s={type:0[0],texture:0[0]},a[n]=s),(s.type!==e||s.texture!==t)&&(i!==n&&(o.activeTexture(n),this.currentTextureSlot=n),o.bindTexture(e,t),s.type=e,s.texture=t)}bindBufferBase(e,t,n){const{gl:o}=this,s=`${e}-${t}`;return this.currentBoundBufferBases[s]!==n&&(o.bindBufferBase(e,t,n),this.currentBoundBufferBases[s]=n,!0)}unbindTexture(){const{gl:t,currentTextureSlot:n,currentBoundTextures:s}=this,e=s[n];e!==0[0]&&e.type!==0[0]&&(t.bindTexture(e.type,null),e.type=0[0],e.texture=0[0])}},yA=jA,_A=class{constructor(e){this.backend=e,this.gl=this.backend.gl,this.extensions=e.extensions}convert(e,t=$e){const{gl:s,extensions:i}=this;let n;const o=v.getTransfer(t);if(e===Y)return s.UNSIGNED_BYTE;if(e===Fc)return s.UNSIGNED_SHORT_4_4_4_4;if(e===Mc)return s.UNSIGNED_SHORT_5_5_5_1;if(e===Ac)return s.UNSIGNED_INT_5_9_9_9_REV;if(e===kc)return s.UNSIGNED_INT_10F_11F_11F_REV;if(e===Fs)return s.BYTE;if(e===Ns)return s.SHORT;if(e===St)return s.UNSIGNED_SHORT;if(e===ue)return s.INT;if(e===I)return s.UNSIGNED_INT;if(e===X)return s.FLOAT;if(e===ht)return s.HALF_FLOAT;if(e===Sd)return s.ALPHA;if(e===sr)return s.RGB;if(e===G)return s.RGBA;if(e===nt)return s.DEPTH_COMPONENT;if(e===tt)return s.DEPTH_STENCIL;if(e===or)return s.RED;if(e===Yo)return s.RED_INTEGER;if(e===ur)return s.RG;if(e===Go)return s.RG_INTEGER;if(e===Xo)return s.RGBA_INTEGER;if(e===Xn||e===Un||e===qn||e===Wn)if(o===c)if(n=i.get("WEBGL_compressed_texture_s3tc_srgb"),n!==null){{if(e===Xn)return n.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(e===Un)return n.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(e===qn)return n.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(e===Wn)return n.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}}else return null;else if(n=i.get("WEBGL_compressed_texture_s3tc"),n!==null){{if(e===Xn)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===Un)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===qn)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===Wn)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}}else return null;if(e===br||e===jr||e===_r||e===ia)if(n=i.get("WEBGL_compressed_texture_pvrtc"),n!==null){{if(e===br)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===jr)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===_r)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===ia)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}}else return null;if(e===ei||e===ti||e===oi)if(n=i.get("WEBGL_compressed_texture_etc"),n!==null){{if(e===ei||e===ti)return o===c?n.COMPRESSED_SRGB8_ETC2:n.COMPRESSED_RGB8_ETC2;if(e===oi)return o===c?n.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:n.COMPRESSED_RGBA8_ETC2_EAC}}else return null;if(e===ai||e===ri||e===ci||e===li||e===ui||e===hi||e===mi||e===fi||e===pi||e===gi||e===vi||e===bi||e===Oi||e===xi)if(n=i.get("WEBGL_compressed_texture_astc"),n!==null){{if(e===ai)return o===c?n.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:n.COMPRESSED_RGBA_ASTC_4x4_KHR;if(e===ri)return o===c?n.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:n.COMPRESSED_RGBA_ASTC_5x4_KHR;if(e===ci)return o===c?n.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:n.COMPRESSED_RGBA_ASTC_5x5_KHR;if(e===li)return o===c?n.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:n.COMPRESSED_RGBA_ASTC_6x5_KHR;if(e===ui)return o===c?n.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:n.COMPRESSED_RGBA_ASTC_6x6_KHR;if(e===hi)return o===c?n.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:n.COMPRESSED_RGBA_ASTC_8x5_KHR;if(e===mi)return o===c?n.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:n.COMPRESSED_RGBA_ASTC_8x6_KHR;if(e===fi)return o===c?n.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:n.COMPRESSED_RGBA_ASTC_8x8_KHR;if(e===pi)return o===c?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:n.COMPRESSED_RGBA_ASTC_10x5_KHR;if(e===gi)return o===c?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:n.COMPRESSED_RGBA_ASTC_10x6_KHR;if(e===vi)return o===c?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:n.COMPRESSED_RGBA_ASTC_10x8_KHR;if(e===bi)return o===c?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:n.COMPRESSED_RGBA_ASTC_10x10_KHR;if(e===Oi)return o===c?n.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:n.COMPRESSED_RGBA_ASTC_12x10_KHR;if(e===xi)return o===c?n.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:n.COMPRESSED_RGBA_ASTC_12x12_KHR}}else return null;if(e===Ci)if(n=i.get("EXT_texture_compression_bptc"),n!==null){if(e===Ci)return o===c?n.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:n.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;if(e===Ei||e===ki||e===Si||e===zi)if(n=i.get("EXT_texture_compression_rgtc"),n!==null){{if(e===Ei)return n.COMPRESSED_RED_RGTC1_EXT;if(e===ki)return n.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(e===Si)return n.COMPRESSED_RED_GREEN_RGTC2_EXT;if(e===zi)return n.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}}else return null;return e===dt?s.UNSIGNED_INT_24_8:s[e]!==0[0]?s[e]:null}_clientWaitAsync(){const{gl:e}=this,t=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);return e.flush(),new Promise((n,s)=>{function o(){const i=e.clientWaitSync(t,e.SYNC_FLUSH_COMMANDS_BIT,0);if(i===e.WAIT_FAILED){e.deleteSync(t),s();return}if(i===e.TIMEOUT_EXPIRED){requestAnimationFrame(o);return}e.deleteSync(t),n()}o()})}},wA=_A,r0=!1,kA=class{constructor(e){this.backend=e,this.gl=e.gl,this.extensions=e.extensions,this.defaultTextures={},r0===!1&&(this._init(),r0=!0)}_init(){const e=this.gl;o4={[Es]:e.REPEAT,[$t]:e.CLAMP_TO_EDGE,[js]:e.MIRRORED_REPEAT},i0={[V]:e.NEAREST,[Ed]:e.NEAREST_MIPMAP_NEAREST,[An]:e.NEAREST_MIPMAP_LINEAR,[ie]:e.LINEAR,[Bo]:e.LINEAR_MIPMAP_NEAREST,[Be]:e.LINEAR_MIPMAP_LINEAR},EA={[Qd]:e.NEVER,[uu]:e.ALWAYS,[Jd]:e.LESS,[Ic]:e.LEQUAL,[eu]:e.EQUAL,[du]:e.GEQUAL,[ru]:e.GREATER,[lu]:e.NOTEQUAL}}getGLTextureType(e){const{gl:n}=this;let t;return e.isCubeTexture===!0?t=n.TEXTURE_CUBE_MAP:e.isArrayTexture===!0||e.isDataArrayTexture===!0||e.isCompressedArrayTexture===!0?t=n.TEXTURE_2D_ARRAY:e.isData3DTexture===!0?t=n.TEXTURE_3D:t=n.TEXTURE_2D,t}getInternalFormat(e,t,n,s,o=!1){const{gl:i,extensions:r}=this;if(e!==null){if(i[e]!==0[0])return i[e];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+e+"'")}let a=t;if(t===i.RED&&(n===i.FLOAT&&(a=i.R32F),n===i.HALF_FLOAT&&(a=i.R16F),n===i.UNSIGNED_BYTE&&(a=i.R8),n===i.UNSIGNED_SHORT&&(a=i.R16),n===i.UNSIGNED_INT&&(a=i.R32UI),n===i.BYTE&&(a=i.R8I),n===i.SHORT&&(a=i.R16I),n===i.INT&&(a=i.R32I)),t===i.RED_INTEGER&&(n===i.UNSIGNED_BYTE&&(a=i.R8UI),n===i.UNSIGNED_SHORT&&(a=i.R16UI),n===i.UNSIGNED_INT&&(a=i.R32UI),n===i.BYTE&&(a=i.R8I),n===i.SHORT&&(a=i.R16I),n===i.INT&&(a=i.R32I)),t===i.RG&&(n===i.FLOAT&&(a=i.RG32F),n===i.HALF_FLOAT&&(a=i.RG16F),n===i.UNSIGNED_BYTE&&(a=i.RG8),n===i.UNSIGNED_SHORT&&(a=i.RG16),n===i.UNSIGNED_INT&&(a=i.RG32UI),n===i.BYTE&&(a=i.RG8I),n===i.SHORT&&(a=i.RG16I),n===i.INT&&(a=i.RG32I)),t===i.RG_INTEGER&&(n===i.UNSIGNED_BYTE&&(a=i.RG8UI),n===i.UNSIGNED_SHORT&&(a=i.RG16UI),n===i.UNSIGNED_INT&&(a=i.RG32UI),n===i.BYTE&&(a=i.RG8I),n===i.SHORT&&(a=i.RG16I),n===i.INT&&(a=i.RG32I)),t===i.RGB){const e=o?Ni:v.getTransfer(s);n===i.FLOAT&&(a=i.RGB32F),n===i.HALF_FLOAT&&(a=i.RGB16F),n===i.UNSIGNED_BYTE&&(a=i.RGB8),n===i.UNSIGNED_SHORT&&(a=i.RGB16),n===i.UNSIGNED_INT&&(a=i.RGB32UI),n===i.BYTE&&(a=i.RGB8I),n===i.SHORT&&(a=i.RGB16I),n===i.INT&&(a=i.RGB32I),n===i.UNSIGNED_BYTE&&(a=e===c?i.SRGB8:i.RGB8),n===i.UNSIGNED_SHORT_5_6_5&&(a=i.RGB565),n===i.UNSIGNED_SHORT_5_5_5_1&&(a=i.RGB5_A1),n===i.UNSIGNED_SHORT_4_4_4_4&&(a=i.RGB4),n===i.UNSIGNED_INT_5_9_9_9_REV&&(a=i.RGB9_E5),n===i.UNSIGNED_INT_10F_11F_11F_REV&&(a=i.R11F_G11F_B10F)}if(t===i.RGB_INTEGER&&(n===i.UNSIGNED_BYTE&&(a=i.RGB8UI),n===i.UNSIGNED_SHORT&&(a=i.RGB16UI),n===i.UNSIGNED_INT&&(a=i.RGB32UI),n===i.BYTE&&(a=i.RGB8I),n===i.SHORT&&(a=i.RGB16I),n===i.INT&&(a=i.RGB32I)),t===i.RGBA){const e=o?Ni:v.getTransfer(s);n===i.FLOAT&&(a=i.RGBA32F),n===i.HALF_FLOAT&&(a=i.RGBA16F),n===i.UNSIGNED_BYTE&&(a=i.RGBA8),n===i.UNSIGNED_SHORT&&(a=i.RGBA16),n===i.UNSIGNED_INT&&(a=i.RGBA32UI),n===i.BYTE&&(a=i.RGBA8I),n===i.SHORT&&(a=i.RGBA16I),n===i.INT&&(a=i.RGBA32I),n===i.UNSIGNED_BYTE&&(a=e===c?i.SRGB8_ALPHA8:i.RGBA8),n===i.UNSIGNED_SHORT_4_4_4_4&&(a=i.RGBA4),n===i.UNSIGNED_SHORT_5_5_5_1&&(a=i.RGB5_A1)}return t===i.RGBA_INTEGER&&(n===i.UNSIGNED_BYTE&&(a=i.RGBA8UI),n===i.UNSIGNED_SHORT&&(a=i.RGBA16UI),n===i.UNSIGNED_INT&&(a=i.RGBA32UI),n===i.BYTE&&(a=i.RGBA8I),n===i.SHORT&&(a=i.RGBA16I),n===i.INT&&(a=i.RGBA32I)),t===i.DEPTH_COMPONENT&&(n===i.UNSIGNED_SHORT&&(a=i.DEPTH_COMPONENT16),n===i.UNSIGNED_INT&&(a=i.DEPTH_COMPONENT24),n===i.FLOAT&&(a=i.DEPTH_COMPONENT32F)),t===i.DEPTH_STENCIL&&n===i.UNSIGNED_INT_24_8&&(a=i.DEPTH24_STENCIL8),(a===i.R16F||a===i.R32F||a===i.RG16F||a===i.RG32F||a===i.RGBA16F||a===i.RGBA32F)&&r.get("EXT_color_buffer_float"),a}setTextureParameters(e,t){const{gl:n,extensions:s,backend:o}=this,i=v.getPrimaries(v.workingColorSpace),a=t.colorSpace===$e?null:v.getPrimaries(t.colorSpace),r=t.colorSpace===$e||i===a?n.NONE:n.BROWSER_DEFAULT_WEBGL;n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,t.flipY),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),n.pixelStorei(n.UNPACK_ALIGNMENT,t.unpackAlignment),n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL,r),n.texParameteri(e,n.TEXTURE_WRAP_S,o4[t.wrapS]),n.texParameteri(e,n.TEXTURE_WRAP_T,o4[t.wrapT]),(e===n.TEXTURE_3D||e===n.TEXTURE_2D_ARRAY)&&(t.isArrayTexture||n.texParameteri(e,n.TEXTURE_WRAP_R,o4[t.wrapR])),n.texParameteri(e,n.TEXTURE_MAG_FILTER,i0[t.magFilter]);const c=t.mipmaps!==0[0]&&t.mipmaps.length>0,l=t.minFilter===ie&&c?Be:t.minFilter;if(n.texParameteri(e,n.TEXTURE_MIN_FILTER,i0[l]),t.compareFunction&&(n.texParameteri(e,n.TEXTURE_COMPARE_MODE,n.COMPARE_REF_TO_TEXTURE),n.texParameteri(e,n.TEXTURE_COMPARE_FUNC,EA[t.compareFunction])),s.has("EXT_texture_filter_anisotropic")===!0){if(t.magFilter===V)return;if(t.minFilter!==An&&t.minFilter!==Be)return;if(t.type===X&&s.has("OES_texture_float_linear")===!1)return;if(t.anisotropy>1){const i=s.get("EXT_texture_filter_anisotropic");n.texParameterf(e,i.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(t.anisotropy,o.getMaxAnisotropy()))}}}createDefaultTexture(e){const{gl:t,backend:o,defaultTextures:i}=this,n=this.getGLTextureType(e);let s=i[n];s===0[0]&&(s=t.createTexture(),o.state.bindTexture(n,s),t.texParameteri(n,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(n,t.TEXTURE_MAG_FILTER,t.NEAREST),i[n]=s),o.set(e,{textureGPU:s,glTextureType:n,isDefault:!0})}createTexture(e,t){const{gl:n,backend:s}=this,{levels:a,width:r,height:c,depth:l}=t,d=s.utils.convert(e.format,e.colorSpace),u=s.utils.convert(e.type),o=this.getInternalFormat(e.internalFormat,d,u,e.colorSpace,e.isVideoTexture),h=n.createTexture(),i=this.getGLTextureType(e);s.state.bindTexture(i,h),this.setTextureParameters(i,e),e.isArrayTexture||e.isDataArrayTexture||e.isCompressedArrayTexture?n.texStorage3D(n.TEXTURE_2D_ARRAY,a,o,r,c,l):e.isData3DTexture?n.texStorage3D(n.TEXTURE_3D,a,o,r,c,l):e.isVideoTexture||n.texStorage2D(i,a,o,r,c),s.set(e,{textureGPU:h,glTextureType:i,glFormat:d,glType:u,glInternalFormat:o})}copyBufferToTexture(e,t){const{gl:n,backend:s}=this,{textureGPU:i,glTextureType:o,glFormat:a,glType:r}=s.get(t),{width:c,height:l}=t.source.data;n.bindBuffer(n.PIXEL_UNPACK_BUFFER,e),s.state.bindTexture(o,i),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,!1),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),n.texSubImage2D(o,0,0,0,c,l,a,r,0),n.bindBuffer(n.PIXEL_UNPACK_BUFFER,null),s.state.unbindTexture()}updateTexture(e,t){const{gl:n}=this,{width:a,height:r}=t,{textureGPU:c,glTextureType:i,glFormat:s,glType:o,glInternalFormat:l}=this.backend.get(e);if(e.isRenderTargetTexture||c===0[0])return;if(this.backend.state.bindTexture(i,c),this.setTextureParameters(i,e),e.isCompressedTexture){const i=e.mipmaps,a=t.image;for(let r=0;r<i.length;r++){const t=i[r];e.isCompressedArrayTexture?e.format!==n.RGBA?s!==null?n.compressedTexSubImage3D(n.TEXTURE_2D_ARRAY,r,0,0,0,t.width,t.height,a.depth,s,t.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texSubImage3D(n.TEXTURE_2D_ARRAY,r,0,0,0,t.width,t.height,a.depth,s,o,t.data):s!==null?n.compressedTexSubImage2D(n.TEXTURE_2D,r,0,0,t.width,t.height,s,t.data):console.warn("Unsupported compressed texture format")}}else if(e.isCubeTexture){const c=t.images,i=e.mipmaps;for(let e=0;e<6;e++){const t=a4(c[e]);n.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,0,0,a,r,s,o,t);for(let t=0;t<i.length;t++){const r=i[t],a=a4(r.images[e]);n.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+e,t+1,0,0,a.width,a.height,s,o,a)}}}else if(e.isDataArrayTexture||e.isArrayTexture){const i=t.image;if(e.layerUpdates.size>0){const t=_0(i.width,i.height,e.format,e.type);for(const a of e.layerUpdates){const r=i.data.subarray(a*t/i.data.BYTES_PER_ELEMENT,(a+1)*t/i.data.BYTES_PER_ELEMENT);n.texSubImage3D(n.TEXTURE_2D_ARRAY,0,0,0,a,i.width,i.height,1,s,o,r)}e.clearLayerUpdates()}else n.texSubImage3D(n.TEXTURE_2D_ARRAY,0,0,0,0,i.width,i.height,i.depth,s,o,i.data)}else if(e.isData3DTexture){const e=t.image;n.texSubImage3D(n.TEXTURE_3D,0,0,0,0,e.width,e.height,e.depth,s,o,e.data)}else if(e.isVideoTexture)e.update(),n.texImage2D(i,0,l,s,o,t.image);else{const c=e.mipmaps;if(c.length>0)for(let e=0,a=c.length;e<a;e++){const t=c[e],r=a4(t);n.texSubImage2D(i,e,0,0,t.width,t.height,s,o,r)}else{const e=a4(t.image);n.texSubImage2D(i,0,0,0,a,r,s,o,e)}}}generateMipmaps(e){const{gl:s,backend:t}=this,{textureGPU:o,glTextureType:n}=t.get(e);t.state.bindTexture(n,o),s.generateMipmap(n)}deallocateRenderBuffers(e){const{gl:t,backend:n}=this;if(e){const s=n.get(e);if(s.renderBufferStorageSetup=0[0],s.framebuffers){for(const e in s.framebuffers)t.deleteFramebuffer(s.framebuffers[e]);delete s.framebuffers}if(s.depthRenderbuffer&&(t.deleteRenderbuffer(s.depthRenderbuffer),delete s.depthRenderbuffer),s.stencilRenderbuffer&&(t.deleteRenderbuffer(s.stencilRenderbuffer),delete s.stencilRenderbuffer),s.msaaFrameBuffer&&(t.deleteFramebuffer(s.msaaFrameBuffer),delete s.msaaFrameBuffer),s.msaaRenderbuffers){for(let e=0;e<s.msaaRenderbuffers.length;e++)t.deleteRenderbuffer(s.msaaRenderbuffers[e]);delete s.msaaRenderbuffers}}}destroyTexture(e){const{gl:n,backend:t}=this,{textureGPU:s,renderTarget:o}=t.get(e);this.deallocateRenderBuffers(o),n.deleteTexture(s),t.delete(e)}copyTextureToTexture(e,t,n=null,s=null,o=0,i=0){const{gl:a,backend:g}=this,{state:f}=this.backend,{textureGPU:w,glTextureType:h,glType:b,glFormat:p}=g.get(t);f.bindTexture(h,w);let l,d,m,y,j,_,c,u,v;const r=e.isCompressedTexture?e.mipmaps[i]:e.image;if(n!==null)l=n.max.x-n.min.x,d=n.max.y-n.min.y,m=n.isBox3?n.max.z-n.min.z:1,y=n.min.x,j=n.min.y,_=n.isBox3?n.min.z:0;else{const t=2**-o;l=Math.floor(r.width*t),d=Math.floor(r.height*t),e.isDataArrayTexture||e.isArrayTexture?m=r.depth:e.isData3DTexture?m=Math.floor(r.depth*t):m=1,y=0,j=0,_=0}s!==null?(c=s.x,u=s.y,v=s.z):(c=0,u=0,v=0),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,t.flipY),a.pixelStorei(a.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),a.pixelStorei(a.UNPACK_ALIGNMENT,t.unpackAlignment);const O=a.getParameter(a.UNPACK_ROW_LENGTH),x=a.getParameter(a.UNPACK_IMAGE_HEIGHT),C=a.getParameter(a.UNPACK_SKIP_PIXELS),E=a.getParameter(a.UNPACK_SKIP_ROWS),k=a.getParameter(a.UNPACK_SKIP_IMAGES);a.pixelStorei(a.UNPACK_ROW_LENGTH,r.width),a.pixelStorei(a.UNPACK_IMAGE_HEIGHT,r.height),a.pixelStorei(a.UNPACK_SKIP_PIXELS,y),a.pixelStorei(a.UNPACK_SKIP_ROWS,j),a.pixelStorei(a.UNPACK_SKIP_IMAGES,_);const A=t.isDataArrayTexture||t.isData3DTexture||t.isArrayTexture;if(e.isRenderTargetTexture||e.isDepthTexture){const n=g.get(e),s=g.get(t),i=g.get(n.renderTarget),r=g.get(s.renderTarget),h=i.framebuffers[n.cacheKey],m=r.framebuffers[s.cacheKey];f.bindFramebuffer(a.READ_FRAMEBUFFER,h),f.bindFramebuffer(a.DRAW_FRAMEBUFFER,m);let o=a.COLOR_BUFFER_BIT;e.isDepthTexture&&(o=a.DEPTH_BUFFER_BIT),a.blitFramebuffer(y,j,l,d,c,u,l,d,o,a.NEAREST),f.bindFramebuffer(a.READ_FRAMEBUFFER,null),f.bindFramebuffer(a.DRAW_FRAMEBUFFER,null)}else A?e.isDataTexture||e.isData3DTexture?a.texSubImage3D(h,i,c,u,v,l,d,m,p,b,r.data):t.isCompressedArrayTexture?a.compressedTexSubImage3D(h,i,c,u,v,l,d,m,p,r.data):a.texSubImage3D(h,i,c,u,v,l,d,m,p,b,r):e.isDataTexture?a.texSubImage2D(h,i,c,u,l,d,p,b,r.data):e.isCompressedTexture?a.compressedTexSubImage2D(h,i,c,u,r.width,r.height,p,r.data):a.texSubImage2D(h,i,c,u,l,d,p,b,r);a.pixelStorei(a.UNPACK_ROW_LENGTH,O),a.pixelStorei(a.UNPACK_IMAGE_HEIGHT,x),a.pixelStorei(a.UNPACK_SKIP_PIXELS,C),a.pixelStorei(a.UNPACK_SKIP_ROWS,E),a.pixelStorei(a.UNPACK_SKIP_IMAGES,k),i===0&&t.generateMipmaps&&a.generateMipmap(h),f.unbindTexture()}copyFramebufferToTexture(e,t,n){const{gl:s}=this,{state:o}=this.backend,{textureGPU:c}=this.backend.get(e),{x:a,y:l,z:r,w:i}=n,u=e.isDepthTexture===!0||t.renderTarget&&t.renderTarget.samples>0,d=t.renderTarget?t.renderTarget.height:this.backend.getDrawingBufferSize().y;if(u){const h=a!==0||l!==0;let n,u;if(e.isDepthTexture===!0?(n=s.DEPTH_BUFFER_BIT,u=s.DEPTH_ATTACHMENT,t.stencil&&(n|=s.STENCIL_BUFFER_BIT)):(n=s.COLOR_BUFFER_BIT,u=s.COLOR_ATTACHMENT0),h){const u=this.backend.get(t.renderTarget),h=u.framebuffers[t.getCacheKey()],m=u.msaaFrameBuffer;o.bindFramebuffer(s.DRAW_FRAMEBUFFER,h),o.bindFramebuffer(s.READ_FRAMEBUFFER,m);const e=d-l-i;s.blitFramebuffer(a,e,a+r,e+i,a,e,a+r,e+i,n,s.NEAREST),o.bindFramebuffer(s.READ_FRAMEBUFFER,h),o.bindTexture(s.TEXTURE_2D,c),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,a,e,r,i),o.unbindTexture()}else{const e=s.createFramebuffer();o.bindFramebuffer(s.DRAW_FRAMEBUFFER,e),s.framebufferTexture2D(s.DRAW_FRAMEBUFFER,u,s.TEXTURE_2D,c,0),s.blitFramebuffer(0,0,r,i,0,0,r,i,n,s.NEAREST),s.deleteFramebuffer(e)}}else o.bindTexture(s.TEXTURE_2D,c),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,a,d-i-l,r,i),o.unbindTexture();e.generateMipmaps&&this.generateMipmaps(e),this.backend._setFramebuffer(t)}setupRenderBufferStorage(e,t,n,s=!1){const{gl:o}=this,c=t.renderTarget,{depthTexture:r,depthBuffer:l,stencilBuffer:d,width:i,height:a}=c;if(o.bindRenderbuffer(o.RENDERBUFFER,e),l&&!d){let t=o.DEPTH_COMPONENT24;if(s===!0){const e=this.extensions.get("WEBGL_multisampled_render_to_texture");e.renderbufferStorageMultisampleEXT(o.RENDERBUFFER,c.samples,t,i,a)}else n>0?(r&&r.isDepthTexture&&r.type===o.FLOAT&&(t=o.DEPTH_COMPONENT32F),o.renderbufferStorageMultisample(o.RENDERBUFFER,n,t,i,a)):o.renderbufferStorage(o.RENDERBUFFER,t,i,a);o.framebufferRenderbuffer(o.FRAMEBUFFER,o.DEPTH_ATTACHMENT,o.RENDERBUFFER,e)}else l&&d&&(n>0?o.renderbufferStorageMultisample(o.RENDERBUFFER,n,o.DEPTH24_STENCIL8,i,a):o.renderbufferStorage(o.RENDERBUFFER,o.DEPTH_STENCIL,i,a),o.framebufferRenderbuffer(o.FRAMEBUFFER,o.DEPTH_STENCIL_ATTACHMENT,o.RENDERBUFFER,e));o.bindRenderbuffer(o.RENDERBUFFER,null)}async copyTextureToBuffer(e,t,n,s,o,i){const{backend:v,gl:a}=this,{textureGPU:b,glFormat:d,glType:r}=this.backend.get(e),u=a.createFramebuffer();a.bindFramebuffer(a.READ_FRAMEBUFFER,u);const f=e.isCubeTexture?a.TEXTURE_CUBE_MAP_POSITIVE_X+i:a.TEXTURE_2D;a.framebufferTexture2D(a.READ_FRAMEBUFFER,a.COLOR_ATTACHMENT0,f,b,0);const m=this._getTypedArrayType(r),g=this._getBytesPerTexel(r,d),p=s*o,c=p*g,h=a.createBuffer();a.bindBuffer(a.PIXEL_PACK_BUFFER,h),a.bufferData(a.PIXEL_PACK_BUFFER,c,a.STREAM_READ),a.readPixels(t,n,s,o,d,r,0),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),await v.utils._clientWaitAsync();const l=new m(c/m.BYTES_PER_ELEMENT);return a.bindBuffer(a.PIXEL_PACK_BUFFER,h),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,l),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),a.deleteFramebuffer(u),l}_getTypedArrayType(e){const{gl:t}=this;if(e===t.UNSIGNED_BYTE)return Uint8Array;if(e===t.UNSIGNED_SHORT_4_4_4_4)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_5_5_1)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_6_5)return Uint16Array;if(e===t.UNSIGNED_SHORT)return Uint16Array;if(e===t.UNSIGNED_INT)return Uint32Array;if(e===t.HALF_FLOAT)return Uint16Array;if(e===t.FLOAT)return Float32Array;throw new Error(`Unsupported WebGL type: ${e}`)}_getBytesPerTexel(e,t){const{gl:n}=this;let s=0;if(e===n.UNSIGNED_BYTE&&(s=1),(e===n.UNSIGNED_SHORT_4_4_4_4||e===n.UNSIGNED_SHORT_5_5_5_1||e===n.UNSIGNED_SHORT_5_6_5||e===n.UNSIGNED_SHORT||e===n.HALF_FLOAT)&&(s=2),(e===n.UNSIGNED_INT||e===n.FLOAT)&&(s=4),t===n.RGBA)return s*4;if(t===n.RGB)return s*3;if(t===n.ALPHA)return s}};function a4(e){return e.isDataTexture?e.image.data:typeof HTMLImageElement!="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&e instanceof ImageBitmap||typeof OffscreenCanvas!="undefined"&&e instanceof OffscreenCanvas?e:e.data}SA=kA,MA=class{constructor(e){this.backend=e,this.gl=this.backend.gl,this.availableExtensions=this.gl.getSupportedExtensions(),this.extensions={}}get(e){let t=this.extensions[e];return t===0[0]&&(t=this.gl.getExtension(e),this.extensions[e]=t),t}has(e){return this.availableExtensions.includes(e)}},FA=MA,TA=class{constructor(e){this.backend=e,this.maxAnisotropy=null}getMaxAnisotropy(){if(this.maxAnisotropy!==null)return this.maxAnisotropy;const t=this.backend.gl,e=this.backend.extensions;if(e.has("EXT_texture_filter_anisotropic")===!0){const n=e.get("EXT_texture_filter_anisotropic");this.maxAnisotropy=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else this.maxAnisotropy=0;return this.maxAnisotropy}},zA=TA,Z4={WEBGL_multi_draw:"WEBGL_multi_draw",WEBGL_compressed_texture_astc:"texture-compression-astc",WEBGL_compressed_texture_etc:"texture-compression-etc2",WEBGL_compressed_texture_etc1:"texture-compression-etc1",WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBKIT_WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBGL_compressed_texture_s3tc:"texture-compression-bc",EXT_texture_compression_bptc:"texture-compression-bptc",EXT_disjoint_timer_query_webgl2:"timestamp-query",OVR_multiview2:"OVR_multiview2"},NA=class{constructor(e){this.gl=e.gl,this.extensions=e.extensions,this.info=e.renderer.info,this.mode=null,this.index=0,this.type=null,this.object=null}render(e,t){const{gl:n,mode:s,object:o,type:i,info:a,index:r}=this;r!==0?n.drawElements(s,t,i,e):n.drawArrays(s,e,t),a.update(o,t,1)}renderInstances(e,t,n){const{gl:s,mode:o,type:i,index:a,object:r,info:c}=this;if(n===0)return;a!==0?s.drawElementsInstanced(o,t,i,e,n):s.drawArraysInstanced(o,e,t,n),c.update(r,t,n)}renderMultiDraw(e,t,n){const{extensions:i,mode:o,object:a,info:r}=this;if(n===0)return;const s=i.get("WEBGL_multi_draw");if(s===null)for(let s=0;s<n;s++)this.render(e[s],t[s]);else{this.index!==0?s.multiDrawElementsWEBGL(o,t,0,this.type,e,0,n):s.multiDrawArraysWEBGL(o,e,0,t,0,n);let i=0;for(let e=0;e<n;e++)i+=t[e];r.update(a,i,1)}}renderMultiDrawInstances(e,t,n,s){const{extensions:a,mode:i,object:r,info:c}=this;if(n===0)return;const o=a.get("WEBGL_multi_draw");if(o===null)for(let o=0;o<n;o++)this.renderInstances(e[o],t[o],s[o]);else{this.index!==0?o.multiDrawElementsInstancedWEBGL(i,t,0,this.type,e,0,s,0,n):o.multiDrawArraysInstancedWEBGL(i,e,0,t,0,s,0,n);let a=0;for(let e=0;e<n;e++)a+=t[e]*s[e];c.update(r,a,1)}}},LA=class{constructor(e=256){this.trackTimestamp=!0,this.maxQueries=e,this.currentQueryIndex=0,this.queryOffsets=new Map,this.isDisposed=!1,this.lastValue=0,this.pendingResolve=!1}allocateQueriesForContext(){}async resolveQueriesAsync(){}dispose(){}},Q4=LA,PA=class extends Q4{constructor(e,t,n=2048){if(super(n),this.gl=e,this.type=t,this.ext=e.getExtension("EXT_disjoint_timer_query_webgl2")||e.getExtension("EXT_disjoint_timer_query"),!this.ext){console.warn("EXT_disjoint_timer_query not supported; timestamps will be disabled."),this.trackTimestamp=!1;return}this.queries=[];for(let t=0;t<this.maxQueries;t++)this.queries.push(e.createQuery());this.activeQuery=null,this.queryStates=new Map}allocateQueriesForContext(e){if(!this.trackTimestamp)return null;if(this.currentQueryIndex+2>this.maxQueries)return gt(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`),null;const t=this.currentQueryIndex;return this.currentQueryIndex+=2,this.queryStates.set(t,"inactive"),this.queryOffsets.set(e,t),t}beginQuery(e){if(!this.trackTimestamp||this.isDisposed)return;const t=this.queryOffsets.get(e);if(t==null)return;if(this.activeQuery!==null)return;const n=this.queries[t];if(!n)return;try{this.queryStates.get(t)==="inactive"&&(this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT,n),this.activeQuery=t,this.queryStates.set(t,"started"))}catch(e){console.error("Error in beginQuery:",e),this.activeQuery=null,this.queryStates.set(t,"inactive")}}endQuery(e){if(!this.trackTimestamp||this.isDisposed)return;const t=this.queryOffsets.get(e);if(t==null)return;if(this.activeQuery!==t)return;try{this.gl.endQuery(this.ext.TIME_ELAPSED_EXT),this.queryStates.set(t,"ended"),this.activeQuery=null}catch(e){console.error("Error in endQuery:",e),this.queryStates.set(t,"inactive"),this.activeQuery=null}}async resolveQueriesAsync(){if(!this.trackTimestamp||this.pendingResolve)return this.lastValue;this.pendingResolve=!0;try{const e=[];for(const[t,n]of this.queryStates)if(n==="ended"){const n=this.queries[t];e.push(this.resolveQuery(n))}if(e.length===0)return this.lastValue;const n=await Promise.all(e),t=n.reduce((e,t)=>e+t,0);return this.lastValue=t,this.currentQueryIndex=0,this.queryOffsets.clear(),this.queryStates.clear(),this.activeQuery=null,t}catch(e){return console.error("Error resolving queries:",e),this.lastValue}finally{this.pendingResolve=!1}}async resolveQuery(e){return new Promise(t=>{if(this.isDisposed){t(this.lastValue);return}let n,s=!1;const a=()=>{n&&(clearTimeout(n),n=null)},o=e=>{s||(s=!0,a(),t(e))},i=()=>{if(this.isDisposed){o(this.lastValue);return}try{const s=this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);if(s){o(this.lastValue);return}const a=this.gl.getQueryParameter(e,this.gl.QUERY_RESULT_AVAILABLE);if(!a){n=setTimeout(i,1);return}const r=this.gl.getQueryParameter(e,this.gl.QUERY_RESULT);t(Number(r)/1e6)}catch(e){console.error("Error checking query:",e),t(this.lastValue)}};i()})}dispose(){if(this.isDisposed)return;if(this.isDisposed=!0,!this.trackTimestamp)return;for(const e of this.queries)this.gl.deleteQuery(e);this.queries=[],this.queryStates.clear(),this.queryOffsets.clear(),this.lastValue=0,this.activeQuery=null}},HA=PA,IA=class extends y0{constructor(e={}){super(e),this.isWebGLBackend=!0,this.attributeUtils=null,this.extensions=null,this.capabilities=null,this.textureUtils=null,this.bufferRenderer=null,this.gl=null,this.state=null,this.utils=null,this.vaoCache={},this.transformFeedbackCache={},this.discard=!1,this.disjoint=null,this.parallel=null,this._currentContext=null,this._knownBindings=new WeakSet,this._supportsInvalidateFramebuffer=typeof navigator!="undefined"&&/OculusBrowser/g.test(navigator.userAgent),this._xrFramebuffer=null}init(e){super.init(e);const t=this.parameters,s={antialias:e.samples>0,alpha:!0,depth:e.depth,stencil:e.stencil},o=t.context!==0[0]?t.context:e.domElement.getContext("webgl2",s);function n(t){t.preventDefault();const n={api:"WebGL",message:t.statusMessage||"Unknown reason",reason:null,originalEvent:t};e.onDeviceLost(n)}this._onContextLost=n,e.domElement.addEventListener("webglcontextlost",n,!1),this.gl=o,this.extensions=new FA(this),this.capabilities=new zA(this),this.attributeUtils=new gA(this),this.textureUtils=new SA(this),this.bufferRenderer=new NA(this),this.state=new yA(this),this.utils=new wA(this),this.extensions.get("EXT_color_buffer_float"),this.extensions.get("WEBGL_clip_cull_distance"),this.extensions.get("OES_texture_float_linear"),this.extensions.get("EXT_color_buffer_half_float"),this.extensions.get("WEBGL_multisampled_render_to_texture"),this.extensions.get("WEBGL_render_shared_exponent"),this.extensions.get("WEBGL_multi_draw"),this.extensions.get("OVR_multiview2"),this.disjoint=this.extensions.get("EXT_disjoint_timer_query_webgl2"),this.parallel=this.extensions.get("KHR_parallel_shader_compile")}get coordinateSystem(){return Re}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}async waitForGPU(){await this.utils._clientWaitAsync()}async makeXRCompatible(){const e=this.gl.getContextAttributes();e.xrCompatible!==!0&&await this.gl.makeXRCompatible()}setXRTarget(e){this._xrFramebuffer=e}setXRRenderTargetTextures(e,t,n=null){const s=this.gl;if(this.set(e.texture,{textureGPU:t,glInternalFormat:s.RGBA8}),n!==null){const t=e.stencilBuffer?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT24;this.set(e.depthTexture,{textureGPU:n,glInternalFormat:t}),this.extensions.has("WEBGL_multisampled_render_to_texture")===!0&&e._autoAllocateDepthBuffer===!0&&e.multiview===!1&&console.warn("THREE.WebGLBackend: Render-to-texture extension was disabled because an external texture was provided"),e._autoAllocateDepthBuffer=!1}}initTimestampQuery(e,t){if(!this.disjoint||!this.trackTimestamp)return;this.timestampQueryPool[e]||(this.timestampQueryPool[e]=new HA(this.gl,e,2048));const n=this.timestampQueryPool[e],s=n.allocateQueriesForContext(t);s!==null&&n.beginQuery(t)}prepareTimestampBuffer(e,t){if(!this.disjoint||!this.trackTimestamp)return;const n=this.timestampQueryPool[e];n.endQuery(t)}getContext(){return this.gl}beginRender(e){const{state:s}=this,t=this.get(e);if(t.frameCalls=this.renderer.info.render.frameCalls,e.viewport)this.updateViewport(e);else{const{width:e,height:t}=this.getDrawingBufferSize();s.viewport(0,0,e,t)}if(e.scissor){const{x:n,y:o,width:i,height:t}=e.scissorValue;s.scissor(n,e.height-t-o,i,t)}this.initTimestampQuery(Pi.RENDER,this.getTimestampUID(e)),t.previousContext=this._currentContext,this._currentContext=e,this._setFramebuffer(e),this.clear(e.clearColor,e.clearDepth,e.clearStencil,e,!1);const n=e.occlusionQueryCount;n>0&&(t.currentOcclusionQueries=t.occlusionQueries,t.currentOcclusionQueryObjects=t.occlusionQueryObjects,t.lastOcclusionObject=null,t.occlusionQueries=new Array(n),t.occlusionQueryObjects=new Array(n),t.occlusionQueryIndex=0)}finishRender(e){const{gl:s,state:o}=this,i=this.get(e),t=i.previousContext;o.resetVertexState();const a=e.occlusionQueryCount;a>0&&(a>i.occlusionQueryIndex&&s.endQuery(s.ANY_SAMPLES_PASSED),this.resolveOccludedAsync(e));const n=e.textures;if(n!==null)for(let e=0;e<n.length;e++){const t=n[e];t.generateMipmaps&&this.generateMipmaps(t)}if(this._currentContext=t,this._resolveRenderTarget(e),t!==null)if(this._setFramebuffer(t),t.viewport)this.updateViewport(t);else{const{width:e,height:t}=this.getDrawingBufferSize();o.viewport(0,0,e,t)}this.prepareTimestampBuffer(Pi.RENDER,this.getTimestampUID(e))}resolveOccludedAsync(e){const n=this.get(e),{currentOcclusionQueries:t,currentOcclusionQueryObjects:s}=n;if(t&&s){const o=new WeakSet,{gl:e}=this;n.currentOcclusionQueryObjects=null,n.currentOcclusionQueries=null;const i=()=>{let a=0;for(let n=0;n<t.length;n++){const i=t[n];if(i===null)continue;e.getQueryParameter(i,e.QUERY_RESULT_AVAILABLE)&&(e.getQueryParameter(i,e.QUERY_RESULT)===0&&o.add(s[n]),t[n]=null,e.deleteQuery(i),a++)}a<t.length?requestAnimationFrame(i):n.occluded=o};i()}}isOccluded(e,t){const n=this.get(e);return n.occluded&&n.occluded.has(t)}updateViewport(e){const{state:n}=this,{x:s,y:o,width:i,height:t}=e.viewportValue;n.viewport(s,e.height-t-o,i,t)}setScissorTest(e){const t=this.state;t.setScissorTest(e)}getClearColor(){const e=super.getClearColor();return e.r*=e.a,e.g*=e.a,e.b*=e.a,e}clear(e,t,n,s=null,o=!0,i=!0){const{gl:a,renderer:c}=this;if(s===null){const e=this.getClearColor();s={textures:null,clearColorValue:e}}let r=0;if(e&&(r|=a.COLOR_BUFFER_BIT),t&&(r|=a.DEPTH_BUFFER_BIT),n&&(r|=a.STENCIL_BUFFER_BIT),r!==0){let l;s.clearColorValue?l=s.clearColorValue:l=this.getClearColor();const d=c.getClearDepth(),u=c.getClearStencil();if(t&&this.state.setDepthMask(!0),s.textures===null)a.clearColor(l.r,l.g,l.b,l.a),a.clear(r);else{if(o&&this._setFramebuffer(s),e)for(let e=0;e<s.textures.length;e++)e===0?a.clearBufferfv(a.COLOR,e,[l.r,l.g,l.b,l.a]):a.clearBufferfv(a.COLOR,e,[0,0,0,1]);t&&n?a.clearBufferfi(a.DEPTH_STENCIL,0,d,u):t?a.clearBufferfv(a.DEPTH,0,[d]):n&&a.clearBufferiv(a.STENCIL,0,[u]),o&&i&&this._resolveRenderTarget(s)}}}beginCompute(e){const{state:t,gl:n}=this,s=this.get(e);s.frameCalls=this.renderer.info.compute.frameCalls,t.bindFramebuffer(n.FRAMEBUFFER,null),this.initTimestampQuery(Pi.COMPUTE,this.getTimestampUID(e))}compute(e,t,n,s,o=null){const{state:c,gl:i}=this;this.discard===!1&&(i.enable(i.RASTERIZER_DISCARD),this.discard=!0);const{programGPU:u,transformBuffers:a,attributes:r}=this.get(s),l=this._getVaoKey(r),d=this.vaoCache[l];d===0[0]?this.vaoCache[l]=this._createVao(r):c.setVertexState(d),c.useProgram(u),this._bindUniforms(n);const h=this._getTransformFeedback(a);i.bindTransformFeedback(i.TRANSFORM_FEEDBACK,h),i.beginTransformFeedback(i.POINTS),o=o!==null?o:t.count,Array.isArray(o)&&(gt("WebGLBackend.compute(): The count parameter must be a single number, not an array."),o=o[0]),r[0].isStorageInstancedBufferAttribute?i.drawArraysInstanced(i.POINTS,0,1,o):i.drawArrays(i.POINTS,0,o),i.endTransformFeedback(),i.bindTransformFeedback(i.TRANSFORM_FEEDBACK,null);for(let t=0;t<a.length;t++){const e=a[t];e.pbo&&this.has(e.pbo)&&this.textureUtils.copyBufferToTexture(e.transformBuffer,e.pbo),e.switchBuffers()}}finishCompute(e){const t=this.gl;this.discard=!1,t.disable(t.RASTERIZER_DISCARD),this.prepareTimestampBuffer(Pi.COMPUTE,this.getTimestampUID(e)),this._currentContext&&this._setFramebuffer(this._currentContext)}_isRenderCameraDepthArray(e){return e.depthTexture&&e.depthTexture.isArrayTexture&&e.camera.isArrayCamera}draw(e){const{object:t,pipeline:w,material:l,context:_,hardwareClippingPlanes:y}=e,{programGPU:j}=this.get(w),{gl:n,state:r}=this,i=this.get(_),u=e.getDrawParameters();if(u===null)return;this._bindUniforms(e.getBindings());const v=t.isMesh&&t.matrixWorld.determinant()<0;r.setMaterial(l,v,y),r.useProgram(j);const h=e.getAttributes(),f=this.get(h);let o=f.vaoGPU;if(o===0[0]){const e=this._getVaoKey(h);o=this.vaoCache[e],o===0[0]&&(o=this._createVao(h),this.vaoCache[e]=o,f.vaoGPU=o)}const a=e.getIndex(),b=a!==null?this.get(a).bufferGPU:null;r.setVertexState(o,b);const c=i.lastOcclusionObject;if(c!==t&&c!==0[0]){if(c!==null&&c.occlusionTest===!0&&(n.endQuery(n.ANY_SAMPLES_PASSED),i.occlusionQueryIndex++),t.occlusionTest===!0){const e=n.createQuery();n.beginQuery(n.ANY_SAMPLES_PASSED,e),i.occlusionQueries[i.occlusionQueryIndex]=e,i.occlusionQueryObjects[i.occlusionQueryIndex]=t}i.lastOcclusionObject=t}const s=this.bufferRenderer;t.isPoints?s.mode=n.POINTS:t.isLineSegments?s.mode=n.LINES:t.isLine?s.mode=n.LINE_STRIP:t.isLineLoop?s.mode=n.LINE_LOOP:l.wireframe===!0?(r.setLineWidth(l.wireframeLinewidth*this.renderer.getPixelRatio()),s.mode=n.LINES):s.mode=n.TRIANGLES;const{vertexCount:p,instanceCount:m}=u;let{firstVertex:d}=u;if(s.object=t,a!==null){d*=a.array.BYTES_PER_ELEMENT;const e=this.get(a);s.index=a.count,s.type=e.type}else s.index=0;const g=()=>{t.isBatchedMesh?t._multiDrawInstances!==null?(gt("THREE.WebGLBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),s.renderMultiDrawInstances(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount,t._multiDrawInstances)):this.hasFeature("WEBGL_multi_draw")?s.renderMultiDraw(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount):gt("THREE.WebGLRenderer: WEBGL_multi_draw not supported."):m>1?s.renderInstances(d,p,m):s.render(d,p)};if(e.camera.isArrayCamera===!0&&e.camera.cameras.length>0&&e.camera.isMultiViewCamera===!1){const o=this.get(e.camera),s=e.camera.cameras,d=e.getBindingGroup("cameraIndex").bindings[0];if(o.indexesGPU===0[0]||o.indexesGPU.length!==s.length){const e=new Uint32Array([0,0,0,0]),t=[];for(let o=0,a=s.length;o<a;o++){const i=n.createBuffer();e[0]=o,n.bindBuffer(n.UNIFORM_BUFFER,i),n.bufferData(n.UNIFORM_BUFFER,e,n.STATIC_DRAW),t.push(i)}o.indexesGPU=t}const u=this.get(d),i=this.renderer.getPixelRatio(),c=this._currentContext.renderTarget,l=this._isRenderCameraDepthArray(this._currentContext),a=this._currentContext.activeCubeFace;if(l){const e=this.get(c.depthTexture);if(e.clearedRenderId!==this.renderer._nodes.nodeFrame.renderId){e.clearedRenderId=this.renderer._nodes.nodeFrame.renderId;const{stencilBuffer:t}=c;for(let e=0,n=s.length;e<n;e++)this.renderer._activeCubeFace=e,this._currentContext.activeCubeFace=e,this._setFramebuffer(this._currentContext),this.clear(!1,!0,t,this._currentContext,!1,!1);this.renderer._activeCubeFace=a,this._currentContext.activeCubeFace=a}}for(let c=0,h=s.length;c<h;c++){const d=s[c];if(t.layers.test(d.layers)){l&&(this.renderer._activeCubeFace=c,this._currentContext.activeCubeFace=c,this._setFramebuffer(this._currentContext));const t=d.viewport;if(t!==0[0]){const s=t.x*i,o=t.y*i,a=t.width*i,n=t.height*i;r.viewport(Math.floor(s),Math.floor(e.context.height-n-o),Math.floor(a),Math.floor(n))}r.bindBufferBase(n.UNIFORM_BUFFER,u.index,o.indexesGPU[c]),g()}this._currentContext.activeCubeFace=a,this.renderer._activeCubeFace=a}}else g()}needsRenderUpdate(){return!1}getRenderCacheKey(){return""}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}async copyTextureToBuffer(e,t,n,s,o,i){return this.textureUtils.copyTextureToBuffer(e,t,n,s,o,i)}createSampler(){}destroySampler(){}createNodeBuilder(e,t){return new cA(e,t)}createProgram(e){const t=this.gl,{stage:s,code:o}=e,n=s==="fragment"?t.createShader(t.FRAGMENT_SHADER):t.createShader(t.VERTEX_SHADER);t.shaderSource(n,o),t.compileShader(n),this.set(e,{shaderGPU:n})}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){const n=this.gl,o=e.pipeline,{fragmentProgram:r,vertexProgram:c}=o,s=n.createProgram(),i=this.get(r).shaderGPU,a=this.get(c).shaderGPU;if(n.attachShader(s,i),n.attachShader(s,a),n.linkProgram(s),this.set(o,{programGPU:s,fragmentShader:i,vertexShader:a}),t!==null&&this.parallel){const i=new Promise(t=>{const a=this.parallel,i=()=>{n.getProgramParameter(s,a.COMPLETION_STATUS_KHR)?(this._completeCompile(e,o),t()):requestAnimationFrame(i)};i()});t.push(i);return}this._completeCompile(e,o)}_handleSource(e,t){const n=e.split(`
`),s=[],o=Math.max(t-6,0),i=Math.min(t+6,n.length);for(let e=o;e<i;e++){const a=e+1;s.push(`${a===t?">":" "} ${a}: ${n[e]}`)}return s.join(`
`)}_getShaderErrors(e,t,n){const i=e.getShaderParameter(t,e.COMPILE_STATUS),a=e.getShaderInfoLog(t)||"",s=a.trim();if(i&&s==="")return"";const o=/ERROR: 0:(\d+)/.exec(s);if(o){const i=parseInt(o[1]);return n.toUpperCase()+`

`+s+`

`+this._handleSource(e.getShaderSource(t),i)}return s}_logProgramError(e,t,n){if(this.renderer.debug.checkShaderErrors){const s=this.gl,i=s.getProgramInfoLog(e)||"",o=i.trim();if(s.getProgramParameter(e,s.LINK_STATUS)===!1)if(typeof this.renderer.debug.onShaderError=="function")this.renderer.debug.onShaderError(s,e,n,t);else{const i=this._getShaderErrors(s,n,"vertex"),a=this._getShaderErrors(s,t,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(e,s.VALIDATE_STATUS)+`

Program Info Log: `+o+`
`+i+`
`+a)}else o!==""&&console.warn("THREE.WebGLProgram: Program Info Log:",o)}}_completeCompile(e,t){const{state:o,gl:s}=this,i=this.get(t),{programGPU:n,fragmentShader:a,vertexShader:r}=i;s.getProgramParameter(n,s.LINK_STATUS)===!1&&this._logProgramError(n,a,r),o.useProgram(n);const c=e.getBindings();this._setupBindings(c,n),this.set(t,{programGPU:n})}createComputePipeline(e,t){const{state:f,gl:n}=this,a={stage:"fragment",code:`#version 300 es
precision highp float;
void main() {}`};this.createProgram(a);const{computeProgram:i}=e,s=n.createProgram(),r=this.get(a).shaderGPU,c=this.get(i).shaderGPU,l=i.transforms,d=[],o=[];for(let e=0;e<l.length;e++){const t=l[e];d.push(t.varyingName),o.push(t.attributeNode)}n.attachShader(s,r),n.attachShader(s,c),n.transformFeedbackVaryings(s,d,n.SEPARATE_ATTRIBS),n.linkProgram(s),n.getProgramParameter(s,n.LINK_STATUS)===!1&&this._logProgramError(s,r,c),f.useProgram(s),this._setupBindings(t,s);const u=i.attributes,h=[],m=[];for(let e=0;e<u.length;e++){const t=u[e].node.attribute;h.push(t),this.has(t)||this.attributeUtils.createAttribute(t,n.ARRAY_BUFFER)}for(let e=0;e<o.length;e++){const t=o[e].attribute;this.has(t)||this.attributeUtils.createAttribute(t,n.ARRAY_BUFFER);const s=this.get(t);m.push(s)}this.set(e,{programGPU:s,transformBuffers:m,attributes:h})}createBindings(e,t){if(this._knownBindings.has(t)===!1){this._knownBindings.add(t);let e=0,n=0;for(const s of t){this.set(s,{textures:n,uniformBuffers:e});for(const t of s.bindings)t.isUniformBuffer&&e++,t.isSampledTexture&&n++}}this.updateBindings(e,t)}updateBindings(e){const{gl:t}=this,n=this.get(e);let s=n.uniformBuffers,o=n.textures;for(const n of e.bindings){const i=this.get(n);if(n.isUniformsGroup||n.isUniformBuffer){const o=n.buffer;let{bufferGPU:e}=this.get(o);e===0[0]?(e=t.createBuffer(),t.bindBuffer(t.UNIFORM_BUFFER,e),t.bufferData(t.UNIFORM_BUFFER,o,t.DYNAMIC_DRAW),this.set(o,{bufferGPU:e})):(t.bindBuffer(t.UNIFORM_BUFFER,e),t.bufferSubData(t.UNIFORM_BUFFER,0,o)),i.index=s++,i.bufferGPU=e,this.set(n,i)}else if(n.isSampledTexture){const{textureGPU:e,glTextureType:t}=this.get(n.texture);i.index=o++,i.textureGPU=e,i.glTextureType=t,this.set(n,i)}}}updateBinding(e){const t=this.gl;if(e.isUniformsGroup||e.isUniformBuffer){const n=this.get(e),s=n.bufferGPU,o=e.buffer;t.bindBuffer(t.UNIFORM_BUFFER,s),t.bufferData(t.UNIFORM_BUFFER,o,t.DYNAMIC_DRAW)}}createIndexAttribute(e){const t=this.gl;this.attributeUtils.createAttribute(e,t.ELEMENT_ARRAY_BUFFER)}createAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}createStorageAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}hasFeature(e){const t=Object.keys(Z4).filter(t=>Z4[t]===e),n=this.extensions;for(let e=0;e<t.length;e++)if(n.has(t[e]))return!0;return!1}getMaxAnisotropy(){return this.capabilities.getMaxAnisotropy()}copyTextureToTexture(e,t,n=null,s=null,o=0,i=0){this.textureUtils.copyTextureToTexture(e,t,n,s,o,i)}copyFramebufferToTexture(e,t,n){this.textureUtils.copyFramebufferToTexture(e,t,n)}_setFramebuffer(e){const{gl:t,state:n}=this;let s=null;if(e.textures!==null){const i=e.renderTarget,o=this.get(i),{samples:r,depthBuffer:y,stencilBuffer:l}=i,v=i.isWebGLCubeRenderTarget===!0,j=i.isRenderTarget3D===!0,b=i.depth>1,p=i.isXRRenderTarget===!0,g=p===!0&&i._hasExternalTextures===!0;let h=o.msaaFrameBuffer,m=o.depthRenderbuffer;const u=this.extensions.get("WEBGL_multisampled_render_to_texture"),f=this.extensions.get("OVR_multiview2"),c=this._useMultisampledExtension(i),d=Ug(e);let a;if(v?(o.cubeFramebuffers||(o.cubeFramebuffers={}),a=o.cubeFramebuffers[d]):p&&g===!1?a=this._xrFramebuffer:(o.framebuffers||(o.framebuffers={}),a=o.framebuffers[d]),a===0[0]){a=t.createFramebuffer(),n.bindFramebuffer(t.FRAMEBUFFER,a);const h=e.textures,m=[];if(v){o.cubeFramebuffers[d]=a;const{textureGPU:e}=this.get(h[0]),n=this.renderer._activeCubeFace,s=this.renderer._activeMipmapLevel;t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+n,e,s)}else{o.framebuffers[d]=a;for(let s=0;s<h.length;s++){const a=h[s],n=this.get(a);n.renderTarget=e.renderTarget,n.cacheKey=d;const o=t.COLOR_ATTACHMENT0+s;if(i.multiview)f.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,o,n.textureGPU,0,r,0,2);else if(j||b){const e=this.renderer._activeCubeFace,s=this.renderer._activeMipmapLevel;t.framebufferTextureLayer(t.FRAMEBUFFER,o,n.textureGPU,s,e)}else if(c)u.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,o,t.TEXTURE_2D,n.textureGPU,0,r);else{const e=this.renderer._activeMipmapLevel;t.framebufferTexture2D(t.FRAMEBUFFER,o,t.TEXTURE_2D,n.textureGPU,e)}}}const s=l?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;if(i._autoAllocateDepthBuffer===!0){const n=t.createRenderbuffer();this.textureUtils.setupRenderBufferStorage(n,e,0,c),o.xrDepthRenderbuffer=n,m.push(l?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT),t.bindRenderbuffer(t.RENDERBUFFER,n),t.framebufferRenderbuffer(t.FRAMEBUFFER,s,t.RENDERBUFFER,n)}else if(e.depthTexture!==null){m.push(l?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT);const n=this.get(e.depthTexture);if(n.renderTarget=e.renderTarget,n.cacheKey=d,i.multiview)f.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,s,n.textureGPU,0,r,0,2);else if(g&&c)u.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,s,t.TEXTURE_2D,n.textureGPU,0,r);else if(e.depthTexture.isArrayTexture){const e=this.renderer._activeCubeFace;t.framebufferTextureLayer(t.FRAMEBUFFER,s,n.textureGPU,0,e)}else t.framebufferTexture2D(t.FRAMEBUFFER,s,t.TEXTURE_2D,n.textureGPU,0)}o.depthInvalidationArray=m}else{const s=this._isRenderCameraDepthArray(e);if(s){n.bindFramebuffer(t.FRAMEBUFFER,a);const s=this.renderer._activeCubeFace,o=this.get(e.depthTexture),i=l?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;t.framebufferTextureLayer(t.FRAMEBUFFER,i,o.textureGPU,0,s)}if((p||c||i.multiview)&&i._isOpaqueFramebuffer!==!0){n.bindFramebuffer(t.FRAMEBUFFER,a);const d=this.get(e.textures[0]);i.multiview?f.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,d.textureGPU,0,r,0,2):c?u.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,d.textureGPU,0,r):t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,d.textureGPU,0);const s=l?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;if(i._autoAllocateDepthBuffer===!0){const e=o.xrDepthRenderbuffer;t.bindRenderbuffer(t.RENDERBUFFER,e),t.framebufferRenderbuffer(t.FRAMEBUFFER,s,t.RENDERBUFFER,e)}else{const n=this.get(e.depthTexture);i.multiview?f.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,s,n.textureGPU,0,r,0,2):c?u.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,s,t.TEXTURE_2D,n.textureGPU,0,r):t.framebufferTexture2D(t.FRAMEBUFFER,s,t.TEXTURE_2D,n.textureGPU,0)}}}if(r>0&&c===!1&&!i.multiview){if(h===0[0]){const i=[];h=t.createFramebuffer(),n.bindFramebuffer(t.FRAMEBUFFER,h);const s=[],a=e.textures;for(let n=0;n<a.length;n++){s[n]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,s[n]),i.push(t.COLOR_ATTACHMENT0+n);const o=e.textures[n],c=this.get(o);t.renderbufferStorageMultisample(t.RENDERBUFFER,r,c.glInternalFormat,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+n,t.RENDERBUFFER,s[n])}if(t.bindRenderbuffer(t.RENDERBUFFER,null),o.msaaFrameBuffer=h,o.msaaRenderbuffers=s,y&&m===0[0]){m=t.createRenderbuffer(),this.textureUtils.setupRenderBufferStorage(m,e,r),o.depthRenderbuffer=m;const n=l?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;i.push(n)}o.invalidationArray=i}s=o.msaaFrameBuffer}else s=a;n.drawBuffers(e,a)}n.bindFramebuffer(t.FRAMEBUFFER,s)}_getVaoKey(e){let t="";for(let n=0;n<e.length;n++){const s=this.get(e[n]);t+=":"+s.id}return t}_createVao(e){const{gl:t}=this,n=t.createVertexArray();t.bindVertexArray(n);for(let s=0;s<e.length;s++){const n=e[s],o=this.get(n);t.bindBuffer(t.ARRAY_BUFFER,o.bufferGPU),t.enableVertexAttribArray(s);let i,a;n.isInterleavedBufferAttribute===!0?(i=n.data.stride*o.bytesPerElement,a=n.offset*o.bytesPerElement):(i=0,a=0),o.isInteger?t.vertexAttribIPointer(s,n.itemSize,o.type,i,a):t.vertexAttribPointer(s,n.itemSize,o.type,n.normalized,i,a),n.isInstancedBufferAttribute&&!n.isInterleavedBufferAttribute?t.vertexAttribDivisor(s,n.meshPerAttribute):n.isInterleavedBufferAttribute&&n.data.isInstancedInterleavedBuffer&&t.vertexAttribDivisor(s,n.data.meshPerAttribute)}return t.bindBuffer(t.ARRAY_BUFFER,null),n}_getTransformFeedback(e){let s="";for(let t=0;t<e.length;t++)s+=":"+e[t].id;let n=this.transformFeedbackCache[s];if(n!==0[0])return n;const{gl:t}=this;n=t.createTransformFeedback(),t.bindTransformFeedback(t.TRANSFORM_FEEDBACK,n);for(let n=0;n<e.length;n++){const s=e[n];t.bindBufferBase(t.TRANSFORM_FEEDBACK_BUFFER,n,s.transformBuffer)}return t.bindTransformFeedback(t.TRANSFORM_FEEDBACK,null),this.transformFeedbackCache[s]=n,n}_setupBindings(e,t){const n=this.gl;for(const s of e)for(const e of s.bindings){const i=this.get(e),o=i.index;if(e.isUniformsGroup||e.isUniformBuffer){const s=n.getUniformBlockIndex(t,e.name);n.uniformBlockBinding(t,s,o)}else if(e.isSampledTexture){const s=n.getUniformLocation(t,e.name);n.uniform1i(s,o)}}}_bindUniforms(e){const{gl:t,state:n}=this;for(const s of e)for(const e of s.bindings){const o=this.get(e),i=o.index;e.isUniformsGroup||e.isUniformBuffer?n.bindBufferBase(t.UNIFORM_BUFFER,i,o.bufferGPU):e.isSampledTexture&&n.bindTexture(o.glTextureType,o.textureGPU,t.TEXTURE0+i)}}_resolveRenderTarget(e){const{gl:t,state:s}=this,n=e.renderTarget;if(e.textures!==null&&n){const o=this.get(n);if(n.samples>0&&this._useMultisampledExtension(n)===!1){const l=o.framebuffers[e.getCacheKey()];let a=t.COLOR_BUFFER_BIT;n.resolveDepthBuffer&&(n.depthBuffer&&(a|=t.DEPTH_BUFFER_BIT),n.stencilBuffer&&n.resolveStencilBuffer&&(a|=t.STENCIL_BUFFER_BIT));const d=o.msaaFrameBuffer,c=o.msaaRenderbuffers,i=e.textures,r=i.length>1;if(s.bindFramebuffer(t.READ_FRAMEBUFFER,d),s.bindFramebuffer(t.DRAW_FRAMEBUFFER,l),r)for(let e=0;e<i.length;e++)t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.RENDERBUFFER,null),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.TEXTURE_2D,null,0);for(let n=0;n<i.length;n++){if(r){const{textureGPU:e}=this.get(i[n]);t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.RENDERBUFFER,c[n]),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)}if(e.scissor){const{x:n,y:r,width:i,height:o}=e.scissorValue,s=e.height-o-r;t.blitFramebuffer(n,s,n+i,s+o,n,s,n+i,s+o,a,t.NEAREST)}else t.blitFramebuffer(0,0,e.width,e.height,0,0,e.width,e.height,a,t.NEAREST)}if(r)for(let e=0;e<i.length;e++){const{textureGPU:n}=this.get(i[e]);t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.RENDERBUFFER,c[e]),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.TEXTURE_2D,n,0)}this._supportsInvalidateFramebuffer===!0&&t.invalidateFramebuffer(t.READ_FRAMEBUFFER,o.invalidationArray)}else if(n.resolveDepthBuffer===!1&&o.framebuffers){const n=o.framebuffers[e.getCacheKey()];s.bindFramebuffer(t.DRAW_FRAMEBUFFER,n),t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER,o.depthInvalidationArray)}}}_useMultisampledExtension(e){return e.multiview===!0||e.samples>0&&this.extensions.has("WEBGL_multisampled_render_to_texture")===!0&&e._autoAllocateDepthBuffer!==!1}dispose(){const e=this.extensions.get("WEBGL_lose_context");e&&e.loseContext(),this.renderer.domElement.removeEventListener("webglcontextlost",this._onContextLost)}},z3=IA,ii={PointList:"point-list",LineList:"line-list",LineStrip:"line-strip",TriangleList:"triangle-list",TriangleStrip:"triangle-strip"},ye={Never:"never",Less:"less",Equal:"equal",LessEqual:"less-equal",Greater:"greater",NotEqual:"not-equal",GreaterEqual:"greater-equal",Always:"always"},Ne={Store:"store",Discard:"discard"},N={Load:"load",Clear:"clear"},w4={CCW:"ccw",CW:"cw"},C4={None:"none",Front:"front",Back:"back"},di={Uint16:"uint16",Uint32:"uint32"},e={R8Unorm:"r8unorm",R8Snorm:"r8snorm",R8Uint:"r8uint",R8Sint:"r8sint",R16Uint:"r16uint",R16Sint:"r16sint",R16Float:"r16float",RG8Unorm:"rg8unorm",RG8Snorm:"rg8snorm",RG8Uint:"rg8uint",RG8Sint:"rg8sint",R32Uint:"r32uint",R32Sint:"r32sint",R32Float:"r32float",RG16Uint:"rg16uint",RG16Sint:"rg16sint",RG16Float:"rg16float",RGBA8Unorm:"rgba8unorm",RGBA8UnormSRGB:"rgba8unorm-srgb",RGBA8Snorm:"rgba8snorm",RGBA8Uint:"rgba8uint",RGBA8Sint:"rgba8sint",BGRA8Unorm:"bgra8unorm",BGRA8UnormSRGB:"bgra8unorm-srgb",RGB9E5UFloat:"rgb9e5ufloat",RGB10A2Unorm:"rgb10a2unorm",RG11B10UFloat:"rg11b10ufloat",RG32Uint:"rg32uint",RG32Sint:"rg32sint",RG32Float:"rg32float",RGBA16Uint:"rgba16uint",RGBA16Sint:"rgba16sint",RGBA16Float:"rgba16float",RGBA32Uint:"rgba32uint",RGBA32Sint:"rgba32sint",RGBA32Float:"rgba32float",Stencil8:"stencil8",Depth16Unorm:"depth16unorm",Depth24Plus:"depth24plus",Depth24PlusStencil8:"depth24plus-stencil8",Depth32Float:"depth32float",Depth32FloatStencil8:"depth32float-stencil8",BC1RGBAUnorm:"bc1-rgba-unorm",BC1RGBAUnormSRGB:"bc1-rgba-unorm-srgb",BC2RGBAUnorm:"bc2-rgba-unorm",BC2RGBAUnormSRGB:"bc2-rgba-unorm-srgb",BC3RGBAUnorm:"bc3-rgba-unorm",BC3RGBAUnormSRGB:"bc3-rgba-unorm-srgb",BC4RUnorm:"bc4-r-unorm",BC4RSnorm:"bc4-r-snorm",BC5RGUnorm:"bc5-rg-unorm",BC5RGSnorm:"bc5-rg-snorm",BC6HRGBUFloat:"bc6h-rgb-ufloat",BC6HRGBFloat:"bc6h-rgb-float",BC7RGBAUnorm:"bc7-rgba-unorm",BC7RGBAUnormSRGB:"bc7-rgba-unorm-srgb",ETC2RGB8Unorm:"etc2-rgb8unorm",ETC2RGB8UnormSRGB:"etc2-rgb8unorm-srgb",ETC2RGB8A1Unorm:"etc2-rgb8a1unorm",ETC2RGB8A1UnormSRGB:"etc2-rgb8a1unorm-srgb",ETC2RGBA8Unorm:"etc2-rgba8unorm",ETC2RGBA8UnormSRGB:"etc2-rgba8unorm-srgb",EACR11Unorm:"eac-r11unorm",EACR11Snorm:"eac-r11snorm",EACRG11Unorm:"eac-rg11unorm",EACRG11Snorm:"eac-rg11snorm",ASTC4x4Unorm:"astc-4x4-unorm",ASTC4x4UnormSRGB:"astc-4x4-unorm-srgb",ASTC5x4Unorm:"astc-5x4-unorm",ASTC5x4UnormSRGB:"astc-5x4-unorm-srgb",ASTC5x5Unorm:"astc-5x5-unorm",ASTC5x5UnormSRGB:"astc-5x5-unorm-srgb",ASTC6x5Unorm:"astc-6x5-unorm",ASTC6x5UnormSRGB:"astc-6x5-unorm-srgb",ASTC6x6Unorm:"astc-6x6-unorm",ASTC6x6UnormSRGB:"astc-6x6-unorm-srgb",ASTC8x5Unorm:"astc-8x5-unorm",ASTC8x5UnormSRGB:"astc-8x5-unorm-srgb",ASTC8x6Unorm:"astc-8x6-unorm",ASTC8x6UnormSRGB:"astc-8x6-unorm-srgb",ASTC8x8Unorm:"astc-8x8-unorm",ASTC8x8UnormSRGB:"astc-8x8-unorm-srgb",ASTC10x5Unorm:"astc-10x5-unorm",ASTC10x5UnormSRGB:"astc-10x5-unorm-srgb",ASTC10x6Unorm:"astc-10x6-unorm",ASTC10x6UnormSRGB:"astc-10x6-unorm-srgb",ASTC10x8Unorm:"astc-10x8-unorm",ASTC10x8UnormSRGB:"astc-10x8-unorm-srgb",ASTC10x10Unorm:"astc-10x10-unorm",ASTC10x10UnormSRGB:"astc-10x10-unorm-srgb",ASTC12x10Unorm:"astc-12x10-unorm",ASTC12x10UnormSRGB:"astc-12x10-unorm-srgb",ASTC12x12Unorm:"astc-12x12-unorm",ASTC12x12UnormSRGB:"astc-12x12-unorm-srgb"},g4={ClampToEdge:"clamp-to-edge",Repeat:"repeat",MirrorRepeat:"mirror-repeat"},Js={Linear:"linear",Nearest:"nearest"},k={Zero:"zero",One:"one",Src:"src",OneMinusSrc:"one-minus-src",SrcAlpha:"src-alpha",OneMinusSrcAlpha:"one-minus-src-alpha",Dst:"dst",OneMinusDst:"one-minus-dst",DstAlpha:"dst-alpha",OneMinusDstAlpha:"one-minus-dst-alpha",SrcAlphaSaturated:"src-alpha-saturated",Constant:"constant",OneMinusConstant:"one-minus-constant"},Zs={Add:"add",Subtract:"subtract",ReverseSubtract:"reverse-subtract",Min:"min",Max:"max"},A4={None:0,Red:1,Green:2,Blue:4,Alpha:8,All:15},Zn={Keep:"keep",Zero:"zero",Replace:"replace",Invert:"invert",IncrementClamp:"increment-clamp",DecrementClamp:"decrement-clamp",IncrementWrap:"increment-wrap",DecrementWrap:"decrement-wrap"},p4={Uniform:"uniform",Storage:"storage",ReadOnlyStorage:"read-only-storage"},f4={WriteOnly:"write-only",ReadOnly:"read-only",ReadWrite:"read-write"},z4={Filtering:"filtering",NonFiltering:"non-filtering",Comparison:"comparison"},Ys={Float:"float",UnfilterableFloat:"unfilterable-float",Depth:"depth",SInt:"sint",UInt:"uint"},B4={OneD:"1d",TwoD:"2d",ThreeD:"3d"},Z={OneD:"1d",TwoD:"2d",TwoDArray:"2d-array",Cube:"cube",CubeArray:"cube-array",ThreeD:"3d"},cS={All:"all",StencilOnly:"stencil-only",DepthOnly:"depth-only"},Jr={Vertex:"vertex",Instance:"instance"},ec={CoreFeaturesAndLimits:"core-features-and-limits",DepthClipControl:"depth-clip-control",Depth32FloatStencil8:"depth32float-stencil8",TextureCompressionBC:"texture-compression-bc",TextureCompressionBCSliced3D:"texture-compression-bc-sliced-3d",TextureCompressionETC2:"texture-compression-etc2",TextureCompressionASTC:"texture-compression-astc",TextureCompressionASTCSliced3D:"texture-compression-astc-sliced-3d",TimestampQuery:"timestamp-query",IndirectFirstInstance:"indirect-first-instance",ShaderF16:"shader-f16",RG11B10UFloat:"rg11b10ufloat-renderable",BGRA8UNormStorage:"bgra8unorm-storage",Float32Filterable:"float32-filterable",Float32Blendable:"float32-blendable",ClipDistances:"clip-distances",DualSourceBlending:"dual-source-blending",Subgroups:"subgroups",TextureFormatsTier1:"texture-formats-tier1",TextureFormatsTier2:"texture-formats-tier2"},uS=class extends u2{constructor(e,t,n){super(e,t?t.value:null),this.textureNode=t,this.groupNode=n}update(){this.texture=this.textureNode.value}},hS=uS,mS=class extends E2{constructor(e,t){super(e,t?t.array:null),this.attribute=t,this.isStorageBuffer=!0}},fS=mS,pS=0,gS=class extends fS{constructor(e,t){super("StorageBuffer_"+pS++,e?e.value:null),this.nodeUniform=e,this.access=e?e.access:Vt.READ_WRITE,this.groupNode=t}get buffer(){return this.nodeUniform.value}},vS=gS,bS=class extends Bn{constructor(e){super(),this.device=e;const t=`
struct VarysStruct {
	@builtin( position ) Position: vec4<f32>,
	@location( 0 ) vTex : vec2<f32>
};

@vertex
fn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {

	var Varys : VarysStruct;

	var pos = array< vec2<f32>, 4 >(
		vec2<f32>( -1.0,  1.0 ),
		vec2<f32>(  1.0,  1.0 ),
		vec2<f32>( -1.0, -1.0 ),
		vec2<f32>(  1.0, -1.0 )
	);

	var tex = array< vec2<f32>, 4 >(
		vec2<f32>( 0.0, 0.0 ),
		vec2<f32>( 1.0, 0.0 ),
		vec2<f32>( 0.0, 1.0 ),
		vec2<f32>( 1.0, 1.0 )
	);

	Varys.vTex = tex[ vertexIndex ];
	Varys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );

	return Varys;

}
`,n=`
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vTex );

}
`,s=`
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );

}
`;this.mipmapSampler=e.createSampler({minFilter:Js.Linear}),this.flipYSampler=e.createSampler({minFilter:Js.Nearest}),this.transferPipelines={},this.flipYPipelines={},this.mipmapVertexShaderModule=e.createShaderModule({label:"mipmapVertex",code:t}),this.mipmapFragmentShaderModule=e.createShaderModule({label:"mipmapFragment",code:n}),this.flipYFragmentShaderModule=e.createShaderModule({label:"flipYFragment",code:s})}getTransferPipeline(e){let t=this.transferPipelines[e];return t===0[0]&&(t=this.device.createRenderPipeline({label:`mipmap-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.mipmapFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:ii.TriangleStrip,stripIndexFormat:di.Uint32},layout:"auto"}),this.transferPipelines[e]=t),t}getFlipYPipeline(e){let t=this.flipYPipelines[e];return t===0[0]&&(t=this.device.createRenderPipeline({label:`flipY-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.flipYFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:ii.TriangleStrip,stripIndexFormat:di.Uint32},layout:"auto"}),this.flipYPipelines[e]=t),t}flipY(e,t,n=0){const s=t.format,{width:l,height:d}=t.size,u=this.getTransferPipeline(s),h=this.getFlipYPipeline(s),o=this.device.createTexture({size:{width:l,height:d,depthOrArrayLayers:1},format:s,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),i=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:Z.TwoD,baseArrayLayer:n}),a=o.createView({baseMipLevel:0,mipLevelCount:1,dimension:Z.TwoD,baseArrayLayer:0}),r=this.device.createCommandEncoder({}),c=(e,t,n)=>{const o=e.getBindGroupLayout(0),i=this.device.createBindGroup({layout:o,entries:[{binding:0,resource:this.flipYSampler},{binding:1,resource:t}]}),s=r.beginRenderPass({colorAttachments:[{view:n,loadOp:N.Clear,storeOp:Ne.Store,clearValue:[0,0,0,0]}]});s.setPipeline(e),s.setBindGroup(0,i),s.draw(4,1,0,0),s.end()};c(u,i,a),c(h,a,i),this.device.queue.submit([r.finish()]),o.destroy()}generateMipmaps(e,t,n=0){const s=this.get(e);s.useCount===0[0]&&(s.useCount=0,s.layers=[]);const o=s.layers[n]||this._mipmapCreateBundles(e,t,n),i=this.device.createCommandEncoder({});this._mipmapRunBundles(i,o),this.device.queue.submit([i.finish()]),s.useCount!==0&&(s.layers[n]=o),s.useCount++}_mipmapCreateBundles(e,t,n){const s=this.getTransferPipeline(t.format),a=s.getBindGroupLayout(0);let o=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:Z.TwoD,baseArrayLayer:n});const i=[];for(let c=1;c<t.mipLevelCount;c++){const d=this.device.createBindGroup({layout:a,entries:[{binding:0,resource:this.mipmapSampler},{binding:1,resource:o}]}),l=e.createView({baseMipLevel:c,mipLevelCount:1,dimension:Z.TwoD,baseArrayLayer:n}),u={colorAttachments:[{view:l,loadOp:N.Clear,storeOp:Ne.Store,clearValue:[0,0,0,0]}]},r=this.device.createRenderBundleEncoder({colorFormats:[t.format]});r.setPipeline(s),r.setBindGroup(0,d),r.draw(4,1,0,0),i.push({renderBundles:[r.finish()],passDescriptor:u}),o=l}return i}_mipmapRunBundles(e,t){const n=t.length;for(let s=0;s<n;s++){const o=t[s],i=e.beginRenderPass(o.passDescriptor);i.executeBundles(o.renderBundles),i.end()}}},jS=bS,yS={[Qd]:"never",[Jd]:"less",[eu]:"equal",[Ic]:"less-equal",[ru]:"greater",[du]:"greater-equal",[uu]:"always",[lu]:"not-equal"},_S=[0,1,3,2,4,5],wS=class{constructor(e){this.backend=e,this._passUtils=null,this.defaultTexture={},this.defaultCubeTexture={},this.defaultVideoFrame=null,this.colorBuffer=null,this.depthTexture=new At,this.depthTexture.name="depthBuffer"}createSampler(e){const n=this.backend,s=n.device,o=n.get(e),t={addressModeU:this._convertAddressMode(e.wrapS),addressModeV:this._convertAddressMode(e.wrapT),addressModeW:this._convertAddressMode(e.wrapR),magFilter:this._convertFilterMode(e.magFilter),minFilter:this._convertFilterMode(e.minFilter),mipmapFilter:this._convertFilterMode(e.minFilter),maxAnisotropy:1};t.magFilter===Js.Linear&&t.minFilter===Js.Linear&&t.mipmapFilter===Js.Linear&&(t.maxAnisotropy=e.anisotropy),e.isDepthTexture&&e.compareFunction!==null&&(t.compare=yS[e.compareFunction]),o.sampler=s.createSampler(t)}createDefaultTexture(e){let t;const n=V4(e);e.isCubeTexture?t=this._getDefaultCubeTextureGPU(n):t=this._getDefaultTextureGPU(n),this.backend.get(e).texture=t}createTexture(t,n={}){const o=this.backend,s=o.get(t);if(s.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");if(t.isExternalTexture){s.texture=t.sourceTexture,s.initialized=!0;return}n.needsMipmaps===0[0]&&(n.needsMipmaps=!1),n.levels===0[0]&&(n.levels=1),n.depth===0[0]&&(n.depth=1);const{width:p,height:f,depth:d,levels:l}=n;t.isFramebufferTexture&&(n.renderTarget?n.format=this.backend.utils.getCurrentColorFormat(n.renderTarget):n.format=this.backend.utils.getPreferredCanvasFormat());const c=this._getDimension(t),a=t.internalFormat||n.format||V4(t,o.device);s.format=a;const{samples:u,primarySamples:h,isMSAA:m}=o.utils.getTextureSampleData(t);let r=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;t.isStorageTexture===!0&&(r|=GPUTextureUsage.STORAGE_BINDING),t.isCompressedTexture!==!0&&t.isCompressedArrayTexture!==!0&&a!==e.RGB9E5UFloat&&(r|=GPUTextureUsage.RENDER_ATTACHMENT);const i={label:t.name,size:{width:p,height:f,depthOrArrayLayers:d},mipLevelCount:l,sampleCount:h,dimension:c,format:a,usage:r};if(a===0[0]){console.warn("WebGPURenderer: Texture format not supported."),this.createDefaultTexture(t);return}if(t.isCubeTexture&&(i.textureBindingViewDimension=Z.Cube),s.texture=o.device.createTexture(i),m){const e=Object.assign({},i);e.label=e.label+"-msaa",e.sampleCount=u,e.mipLevelCount=1,s.msaaTexture=o.device.createTexture(e)}s.initialized=!0,s.textureDescriptorGPU=i}destroyTexture(e){const n=this.backend,t=n.get(e);t.texture!==0[0]&&t.texture.destroy(),t.msaaTexture!==0[0]&&t.msaaTexture.destroy(),n.delete(e)}destroySampler(e){const t=this.backend,n=t.get(e);delete n.sampler}generateMipmaps(e){const t=this.backend.get(e);if(e.isCubeTexture)for(let e=0;e<6;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e);else{const n=e.image.depth||1;for(let e=0;e<n;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e)}}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const e=this.backend,{width:t,height:n}=e.getDrawingBufferSize();return this.colorBuffer=e.device.createTexture({label:"colorBuffer",size:{width:t,height:n,depthOrArrayLayers:1},sampleCount:e.utils.getSampleCount(e.renderer.samples),format:e.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(e=!0,t=!1){const i=this.backend,{width:a,height:r}=i.getDrawingBufferSize(),n=this.depthTexture,c=i.get(n).texture;let s,o;if(t?(s=tt,o=dt):e&&(s=nt,o=I),c!==0[0]){if(n.image.width===a&&n.image.height===r&&n.format===s&&n.type===o)return c;this.destroyTexture(n)}return n.name="depthBuffer",n.format=s,n.type=o,n.image.width=a,n.image.height=r,this.createTexture(n,{width:a,height:r}),i.get(n).texture}updateTexture(e,t){const n=this.backend.get(e),o=e.mipmaps,{textureDescriptorGPU:s}=n;if(e.isRenderTargetTexture||s===0[0])return;if(e.isDataTexture)if(o.length>0)for(let t=0,i=o.length;t<i;t++){const a=o[t];this._copyBufferToTexture(a,n.texture,s,0,e.flipY,0,t)}else this._copyBufferToTexture(t.image,n.texture,s,0,e.flipY);else if(e.isArrayTexture||e.isDataArrayTexture||e.isData3DTexture)for(let o=0;o<t.image.depth;o++)this._copyBufferToTexture(t.image,n.texture,s,o,e.flipY,o);else if(e.isCompressedTexture||e.isCompressedArrayTexture)this._copyCompressedBufferToTexture(e.mipmaps,n.texture,s);else if(e.isCubeTexture)this._copyCubeMapToTexture(e,n.texture,s);else if(o.length>0)for(let t=0,i=o.length;t<i;t++){const a=o[t];this._copyImageToTexture(a,n.texture,s,0,e.flipY,e.premultiplyAlpha,t)}else this._copyImageToTexture(t.image,n.texture,s,0,e.flipY,e.premultiplyAlpha);n.version=e.version}async copyTextureToBuffer(e,t,n,s,o,i){const r=this.backend.device,l=this.backend.get(e),m=l.texture,d=l.textureDescriptorGPU.format,u=this._getBytesPerTexel(d);let a=s*u;a=Math.ceil(a/256)*256;const c=r.createBuffer({size:(o-1)*a+s*u,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),h=r.createCommandEncoder();h.copyTextureToBuffer({texture:m,origin:{x:t,y:n,z:i}},{buffer:c,bytesPerRow:a},{width:s,height:o});const f=this._getTypedArrayType(d);r.queue.submit([h.finish()]),await c.mapAsync(GPUMapMode.READ);const p=c.getMappedRange();return new f(p)}_getDefaultTextureGPU(e){let t=this.defaultTexture[e];if(t===0[0]){const n=new Te;n.minFilter=V,n.magFilter=V,this.createTexture(n,{width:1,height:1,format:e}),this.defaultTexture[e]=t=n}return this.backend.get(t).texture}_getDefaultCubeTextureGPU(e){let t=this.defaultTexture[e];if(t===0[0]){const n=new oa;n.minFilter=V,n.magFilter=V,this.createTexture(n,{width:1,height:1,depth:6}),this.defaultCubeTexture[e]=t=n}return this.backend.get(t).texture}_copyCubeMapToTexture(e,t,n){const o=e.images,s=e.mipmaps;for(let i=0;i<6;i++){const r=o[i],a=e.flipY===!0?_S[i]:i;r.isDataTexture?this._copyBufferToTexture(r.image,t,n,a,e.flipY):this._copyImageToTexture(r,t,n,a,e.flipY,e.premultiplyAlpha);for(let o=0;o<s.length;o++){const c=s[o],r=c.images[i];r.isDataTexture?this._copyBufferToTexture(r.image,t,n,a,e.flipY,0,o+1):this._copyImageToTexture(r,t,n,a,e.flipY,e.premultiplyAlpha,o+1)}}}_copyImageToTexture(e,t,n,s,o,i,a=0){const r=this.backend.device,c=a>0?e.width:n.size.width,l=a>0?e.height:n.size.height;r.queue.copyExternalImageToTexture({source:e,flipY:o},{texture:t,mipLevel:a,origin:{x:0,y:0,z:s},premultipliedAlpha:i},{width:c,height:l,depthOrArrayLayers:1})}_getPassUtils(){let e=this._passUtils;return e===null&&(this._passUtils=e=new jS(this.backend.device)),e}_generateMipmaps(e,t,n=0){this._getPassUtils().generateMipmaps(e,t,n)}_flipY(e,t,n=0){this._getPassUtils().flipY(e,t,n)}_copyBufferToTexture(e,t,n,s,o,i=0,a=0){const c=this.backend.device,l=e.data,r=this._getBytesPerTexel(n.format),d=e.width*r;c.queue.writeTexture({texture:t,mipLevel:a,origin:{x:0,y:0,z:s}},l,{offset:e.width*e.height*r*i,bytesPerRow:d},{width:e.width,height:e.height,depthOrArrayLayers:1}),o===!0&&this._flipY(t,n,s)}_copyCompressedBufferToTexture(e,t,n){const o=this.backend.device,s=this._getBlockData(n.format),i=n.size.depthOrArrayLayers>1;for(let a=0;a<e.length;a++){const r=e[a],l=r.width,c=r.height,u=i?n.size.depthOrArrayLayers:1,d=Math.ceil(l/s.width)*s.byteLength,h=d*Math.ceil(c/s.height);for(let e=0;e<u;e++)o.queue.writeTexture({texture:t,mipLevel:a,origin:{x:0,y:0,z:e}},r.data,{offset:e*h,bytesPerRow:d,rowsPerImage:Math.ceil(c/s.height)},{width:Math.ceil(l/s.width)*s.width,height:Math.ceil(c/s.height)*s.height,depthOrArrayLayers:1})}}_getBlockData(t){if(t===e.BC1RGBAUnorm||t===e.BC1RGBAUnormSRGB)return{byteLength:8,width:4,height:4};if(t===e.BC2RGBAUnorm||t===e.BC2RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(t===e.BC3RGBAUnorm||t===e.BC3RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(t===e.BC4RUnorm||t===e.BC4RSnorm)return{byteLength:8,width:4,height:4};if(t===e.BC5RGUnorm||t===e.BC5RGSnorm)return{byteLength:16,width:4,height:4};if(t===e.BC6HRGBUFloat||t===e.BC6HRGBFloat)return{byteLength:16,width:4,height:4};if(t===e.BC7RGBAUnorm||t===e.BC7RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(t===e.ETC2RGB8Unorm||t===e.ETC2RGB8UnormSRGB)return{byteLength:8,width:4,height:4};if(t===e.ETC2RGB8A1Unorm||t===e.ETC2RGB8A1UnormSRGB)return{byteLength:8,width:4,height:4};if(t===e.ETC2RGBA8Unorm||t===e.ETC2RGBA8UnormSRGB)return{byteLength:16,width:4,height:4};if(t===e.EACR11Unorm)return{byteLength:8,width:4,height:4};if(t===e.EACR11Snorm)return{byteLength:8,width:4,height:4};if(t===e.EACRG11Unorm)return{byteLength:16,width:4,height:4};if(t===e.EACRG11Snorm)return{byteLength:16,width:4,height:4};if(t===e.ASTC4x4Unorm||t===e.ASTC4x4UnormSRGB)return{byteLength:16,width:4,height:4};if(t===e.ASTC5x4Unorm||t===e.ASTC5x4UnormSRGB)return{byteLength:16,width:5,height:4};if(t===e.ASTC5x5Unorm||t===e.ASTC5x5UnormSRGB)return{byteLength:16,width:5,height:5};if(t===e.ASTC6x5Unorm||t===e.ASTC6x5UnormSRGB)return{byteLength:16,width:6,height:5};if(t===e.ASTC6x6Unorm||t===e.ASTC6x6UnormSRGB)return{byteLength:16,width:6,height:6};if(t===e.ASTC8x5Unorm||t===e.ASTC8x5UnormSRGB)return{byteLength:16,width:8,height:5};if(t===e.ASTC8x6Unorm||t===e.ASTC8x6UnormSRGB)return{byteLength:16,width:8,height:6};if(t===e.ASTC8x8Unorm||t===e.ASTC8x8UnormSRGB)return{byteLength:16,width:8,height:8};if(t===e.ASTC10x5Unorm||t===e.ASTC10x5UnormSRGB)return{byteLength:16,width:10,height:5};if(t===e.ASTC10x6Unorm||t===e.ASTC10x6UnormSRGB)return{byteLength:16,width:10,height:6};if(t===e.ASTC10x8Unorm||t===e.ASTC10x8UnormSRGB)return{byteLength:16,width:10,height:8};if(t===e.ASTC10x10Unorm||t===e.ASTC10x10UnormSRGB)return{byteLength:16,width:10,height:10};if(t===e.ASTC12x10Unorm||t===e.ASTC12x10UnormSRGB)return{byteLength:16,width:12,height:10};if(t===e.ASTC12x12Unorm||t===e.ASTC12x12UnormSRGB)return{byteLength:16,width:12,height:12}}_convertAddressMode(e){let t=g4.ClampToEdge;return e===Es?t=g4.Repeat:e===js&&(t=g4.MirrorRepeat),t}_convertFilterMode(e){let t=Js.Linear;return(e===V||e===Ed||e===An)&&(t=Js.Nearest),t}_getBytesPerTexel(t){if(t===e.R8Unorm||t===e.R8Snorm||t===e.R8Uint||t===e.R8Sint)return 1;if(t===e.R16Uint||t===e.R16Sint||t===e.R16Float||t===e.RG8Unorm||t===e.RG8Snorm||t===e.RG8Uint||t===e.RG8Sint)return 2;if(t===e.R32Uint||t===e.R32Sint||t===e.R32Float||t===e.RG16Uint||t===e.RG16Sint||t===e.RG16Float||t===e.RGBA8Unorm||t===e.RGBA8UnormSRGB||t===e.RGBA8Snorm||t===e.RGBA8Uint||t===e.RGBA8Sint||t===e.BGRA8Unorm||t===e.BGRA8UnormSRGB||t===e.RGB9E5UFloat||t===e.RGB10A2Unorm||t===e.RG11B10UFloat||t===e.Depth32Float||t===e.Depth24Plus||t===e.Depth24PlusStencil8||t===e.Depth32FloatStencil8)return 4;if(t===e.RG32Uint||t===e.RG32Sint||t===e.RG32Float||t===e.RGBA16Uint||t===e.RGBA16Sint||t===e.RGBA16Float)return 8;if(t===e.RGBA32Uint||t===e.RGBA32Sint||t===e.RGBA32Float)return 16}_getTypedArrayType(t){if(t===e.R8Uint)return Uint8Array;if(t===e.R8Sint)return Int8Array;if(t===e.R8Unorm)return Uint8Array;if(t===e.R8Snorm)return Int8Array;if(t===e.RG8Uint)return Uint8Array;if(t===e.RG8Sint)return Int8Array;if(t===e.RG8Unorm)return Uint8Array;if(t===e.RG8Snorm)return Int8Array;if(t===e.RGBA8Uint)return Uint8Array;if(t===e.RGBA8Sint)return Int8Array;if(t===e.RGBA8Unorm||t===e.RGBA8UnormSRGB)return Uint8Array;if(t===e.RGBA8Snorm)return Int8Array;if(t===e.R16Uint)return Uint16Array;if(t===e.R16Sint)return Int16Array;if(t===e.RG16Uint)return Uint16Array;if(t===e.RG16Sint)return Int16Array;if(t===e.RGBA16Uint)return Uint16Array;if(t===e.RGBA16Sint)return Int16Array;if(t===e.R16Float)return Uint16Array;if(t===e.RG16Float)return Uint16Array;if(t===e.RGBA16Float)return Uint16Array;if(t===e.R32Uint)return Uint32Array;if(t===e.R32Sint)return Int32Array;if(t===e.R32Float)return Float32Array;if(t===e.RG32Uint)return Uint32Array;if(t===e.RG32Sint)return Int32Array;if(t===e.RG32Float)return Float32Array;if(t===e.RGBA32Uint)return Uint32Array;if(t===e.RGBA32Sint)return Int32Array;if(t===e.RGBA32Float)return Float32Array;if(t===e.BGRA8Unorm||t===e.BGRA8UnormSRGB)return Uint8Array;if(t===e.RGB10A2Unorm)return Uint32Array;if(t===e.RGB9E5UFloat)return Uint32Array;if(t===e.RG11B10UFloat)return Uint32Array;if(t===e.Depth32Float)return Float32Array;if(t===e.Depth24Plus)return Uint32Array;if(t===e.Depth24PlusStencil8)return Uint32Array;if(t===e.Depth32FloatStencil8)return Float32Array}_getDimension(e){let t;return e.is3DTexture||e.isData3DTexture?t=B4.ThreeD:t=B4.TwoD,t}};function V4(t,n=null){const a=t.format,i=t.type,r=t.colorSpace,o=v.getTransfer(r);let s;if(t.isCompressedTexture===!0||t.isCompressedArrayTexture===!0)switch(a){case Xn:case Un:s=o===c?e.BC1RGBAUnormSRGB:e.BC1RGBAUnorm;break;case qn:s=o===c?e.BC2RGBAUnormSRGB:e.BC2RGBAUnorm;break;case Wn:s=o===c?e.BC3RGBAUnormSRGB:e.BC3RGBAUnorm;break;case Ei:s=e.BC4RUnorm;break;case ki:s=e.BC4RSnorm;break;case Si:s=e.BC5RGUnorm;break;case zi:s=e.BC5RGSnorm;break;case Ci:s=o===c?e.BC7RGBAUnormSRGB:e.BC7RGBAUnorm;break;case ti:case ei:s=o===c?e.ETC2RGB8UnormSRGB:e.ETC2RGB8Unorm;break;case oi:s=o===c?e.ETC2RGBA8UnormSRGB:e.ETC2RGBA8Unorm;break;case ai:s=o===c?e.ASTC4x4UnormSRGB:e.ASTC4x4Unorm;break;case ri:s=o===c?e.ASTC5x4UnormSRGB:e.ASTC5x4Unorm;break;case ci:s=o===c?e.ASTC5x5UnormSRGB:e.ASTC5x5Unorm;break;case li:s=o===c?e.ASTC6x5UnormSRGB:e.ASTC6x5Unorm;break;case ui:s=o===c?e.ASTC6x6UnormSRGB:e.ASTC6x6Unorm;break;case hi:s=o===c?e.ASTC8x5UnormSRGB:e.ASTC8x5Unorm;break;case mi:s=o===c?e.ASTC8x6UnormSRGB:e.ASTC8x6Unorm;break;case fi:s=o===c?e.ASTC8x8UnormSRGB:e.ASTC8x8Unorm;break;case pi:s=o===c?e.ASTC10x5UnormSRGB:e.ASTC10x5Unorm;break;case gi:s=o===c?e.ASTC10x6UnormSRGB:e.ASTC10x6Unorm;break;case vi:s=o===c?e.ASTC10x8UnormSRGB:e.ASTC10x8Unorm;break;case bi:s=o===c?e.ASTC10x10UnormSRGB:e.ASTC10x10Unorm;break;case Oi:s=o===c?e.ASTC12x10UnormSRGB:e.ASTC12x10Unorm;break;case xi:s=o===c?e.ASTC12x12UnormSRGB:e.ASTC12x12Unorm;break;case G:s=o===c?e.RGBA8UnormSRGB:e.RGBA8Unorm;break;default:console.error("WebGPURenderer: Unsupported texture format.",a)}else switch(a){case G:switch(i){case Fs:s=e.RGBA8Snorm;break;case Ns:s=e.RGBA16Sint;break;case St:s=e.RGBA16Uint;break;case I:s=e.RGBA32Uint;break;case ue:s=e.RGBA32Sint;break;case Y:s=o===c?e.RGBA8UnormSRGB:e.RGBA8Unorm;break;case ht:s=e.RGBA16Float;break;case X:s=e.RGBA32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",i)}break;case sr:switch(i){case Ac:s=e.RGB9E5UFloat;break;case kc:s=e.RG11B10UFloat;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBFormat.",i)}break;case or:switch(i){case Fs:s=e.R8Snorm;break;case Ns:s=e.R16Sint;break;case St:s=e.R16Uint;break;case I:s=e.R32Uint;break;case ue:s=e.R32Sint;break;case Y:s=e.R8Unorm;break;case ht:s=e.R16Float;break;case X:s=e.R32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",i)}break;case ur:switch(i){case Fs:s=e.RG8Snorm;break;case Ns:s=e.RG16Sint;break;case St:s=e.RG16Uint;break;case I:s=e.RG32Uint;break;case ue:s=e.RG32Sint;break;case Y:s=e.RG8Unorm;break;case ht:s=e.RG16Float;break;case X:s=e.RG32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",i)}break;case nt:switch(i){case St:s=e.Depth16Unorm;break;case I:s=e.Depth24Plus;break;case X:s=e.Depth32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",i)}break;case tt:switch(i){case dt:s=e.Depth24PlusStencil8;break;case X:n&&n.features.has(ec.Depth32FloatStencil8)===!1&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),s=e.Depth32FloatStencil8;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",i)}break;case Yo:switch(i){case ue:s=e.R32Sint;break;case I:s=e.R32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.",i)}break;case Go:switch(i){case ue:s=e.RG32Sint;break;case I:s=e.RG32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.",i)}break;case Xo:switch(i){case ue:s=e.RGBA32Sint;break;case I:s=e.RGBA32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.",i)}break;default:console.error("WebGPURenderer: Unsupported texture format.",a)}return s}xS=wS,CS=/^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[->]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i,ES=/([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/ig,$4={f32:"float",i32:"int",u32:"uint",bool:"bool","vec2<f32>":"vec2","vec2<i32>":"ivec2","vec2<u32>":"uvec2","vec2<bool>":"bvec2",vec2f:"vec2",vec2i:"ivec2",vec2u:"uvec2",vec2b:"bvec2","vec3<f32>":"vec3","vec3<i32>":"ivec3","vec3<u32>":"uvec3","vec3<bool>":"bvec3",vec3f:"vec3",vec3i:"ivec3",vec3u:"uvec3",vec3b:"bvec3","vec4<f32>":"vec4","vec4<i32>":"ivec4","vec4<u32>":"uvec4","vec4<bool>":"bvec4",vec4f:"vec4",vec4i:"ivec4",vec4u:"uvec4",vec4b:"bvec4","mat2x2<f32>":"mat2",mat2x2f:"mat2","mat3x3<f32>":"mat3",mat3x3f:"mat3","mat4x4<f32>":"mat4",mat4x4f:"mat4",sampler:"sampler",texture_1d:"texture",texture_2d:"texture",texture_2d_array:"texture",texture_multisampled_2d:"cubeTexture",texture_depth_2d:"depthTexture",texture_depth_2d_array:"depthTexture",texture_depth_multisampled_2d:"depthTexture",texture_depth_cube:"depthTexture",texture_depth_cube_array:"depthTexture",texture_3d:"texture3D",texture_cube:"cubeTexture",texture_cube_array:"cubeTexture",texture_storage_1d:"storageTexture",texture_storage_2d:"storageTexture",texture_storage_2d_array:"storageTexture",texture_storage_3d:"storageTexture"},AS=e=>{e=e.trim();const t=e.match(CS);if(t!==null&&t.length===4){const i=t[2],n=[];let s=null;for(;(s=ES.exec(i))!==null;)n.push({name:s[1],type:s[2]});const a=[];for(let t=0;t<n.length;t++){const{name:o,type:s}=n[t];let e=s;e.startsWith("ptr")?e="pointer":(e.startsWith("texture")&&(e=s.split("<")[0]),e=$4[e]),a.push(new Y3(e,o))}const r=e.substring(t[0].length),o=t[3]||"void",c=t[1]!==0[0]?t[1]:"",l=$4[o]||o;return{type:l,inputs:a,name:c,inputsCode:i,blockCode:r,outputType:o}}throw new Error("FunctionNode: Function is not a WGSL code.")},SS=class extends C3{constructor(e){const{type:t,inputs:n,name:s,inputsCode:o,blockCode:i,outputType:a}=AS(e);super(t,n,s),this.inputsCode=o,this.blockCode=i,this.outputType=a}getCode(e=this.name){const t=this.outputType!=="void"?"-> "+this.outputType:"";return`fn ${e} ( ${this.inputsCode.trim()} ) ${t}`+this.blockCode}},MS=SS,FS=class extends W3{parseFunction(e){return new MS(e)}},TS=FS,Ai=typeof self!="undefined"?self.GPUShaderStage:{VERTEX:1,FRAGMENT:2,COMPUTE:4},DS={[Vt.READ_ONLY]:"read",[Vt.WRITE_ONLY]:"write",[Vt.READ_WRITE]:"read_write"},W4={[Es]:"repeat",[$t]:"clamp",[js]:"mirror"},oc={vertex:Ai?Ai.VERTEX:1,fragment:Ai?Ai.FRAGMENT:2,compute:Ai?Ai.COMPUTE:4},U4={instance:!0,swizzleAssign:!1,storageBuffer:!0},PS={"^^":"tsl_xor"},HS={float:"f32",int:"i32",uint:"u32",bool:"bool",color:"vec3<f32>",vec2:"vec2<f32>",ivec2:"vec2<i32>",uvec2:"vec2<u32>",bvec2:"vec2<bool>",vec3:"vec3<f32>",ivec3:"vec3<i32>",uvec3:"vec3<u32>",bvec3:"vec3<bool>",vec4:"vec4<f32>",ivec4:"vec4<i32>",uvec4:"vec4<u32>",bvec4:"vec4<bool>",mat2:"mat2x2<f32>",mat3:"mat3x3<f32>",mat4:"mat4x4<f32>"},q4={},dr={tsl_xor:new ze("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new ze("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new ze("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new ze("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new ze("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new ze("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new ze("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new ze("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new ze("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping_float:new ze("fn tsl_repeatWrapping_float( coord: f32 ) -> f32 { return fract( coord ); }"),mirrorWrapping_float:new ze("fn tsl_mirrorWrapping_float( coord: f32 ) -> f32 { let mirrored = fract( coord * 0.5 ) * 2.0; return 1.0 - abs( 1.0 - mirrored ); }"),clampWrapping_float:new ze("fn tsl_clampWrapping_float( coord: f32 ) -> f32 { return clamp( coord, 0.0, 1.0 ); }"),biquadraticTexture:new ze(`
fn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, iRes : vec2u, level : u32 ) -> vec4f {

	let res = vec2f( iRes );

	let uvScaled = coord * res;
	let uvWrapping = ( ( uvScaled % res ) + res ) % res;

	// https://www.shadertoy.com/view/WtyXRy

	let uv = uvWrapping - 0.5;
	let iuv = floor( uv );
	let f = fract( uv );

	let rg1 = textureLoad( map, vec2u( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );
	let rg2 = textureLoad( map, vec2u( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );
	let rg3 = textureLoad( map, vec2u( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );
	let rg4 = textureLoad( map, vec2u( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );

	return mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );

}
`)},VS={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"},Y4="",(typeof navigator!="undefined"&&/Firefox|Deno/g.test(navigator.userAgent))!==!0&&(Y4+=`diagnostic( off, derivative_uniformity );
`),WS=class extends bh{constructor(e,t){super(e,t,new TS),this.uniformGroups={},this.builtins={},this.directives={},this.scopedArrays=new Map}_generateTextureSample(e,t,n,s,o,i=this.shaderStage){return i==="fragment"?s?o?`textureSample( ${t}, ${t}_sampler, ${n}, ${s}, ${o} )`:`textureSample( ${t}, ${t}_sampler, ${n}, ${s} )`:o?`textureSample( ${t}, ${t}_sampler, ${n}, ${o} )`:`textureSample( ${t}, ${t}_sampler, ${n} )`:this.generateTextureSampleLevel(e,t,n,"0",s)}generateTextureSampleLevel(e,t,n,s,o,i){return this.isUnfilterable(e)===!1?i?`textureSampleLevel( ${t}, ${t}_sampler, ${n}, ${s}, ${i} )`:`textureSampleLevel( ${t}, ${t}_sampler, ${n}, ${s} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,n,i,s):this.generateTextureLod(e,t,n,o,i,s)}generateWrapFunction(e){const t=`tsl_coord_${W4[e.wrapS]}S_${W4[e.wrapT]}_${e.isData3DTexture?"3d":"2d"}T`;let n=q4[t];if(n===0[0]){const o=[],i=e.isData3DTexture?"vec3f":"vec2f";let s=`fn ${t}( coord : ${i} ) -> ${i} {

	return ${i}(
`;const a=(e,t)=>{e===Es?(o.push(dr.repeatWrapping_float),s+=`		tsl_repeatWrapping_float( coord.${t} )`):e===$t?(o.push(dr.clampWrapping_float),s+=`		tsl_clampWrapping_float( coord.${t} )`):e===js?(o.push(dr.mirrorWrapping_float),s+=`		tsl_mirrorWrapping_float( coord.${t} )`):(s+=`		coord.${t}`,console.warn(`WebGPURenderer: Unsupported texture wrap type "${e}" for vertex shader.`))};a(e.wrapS,"x"),s+=`,
`,a(e.wrapT,"y"),e.isData3DTexture&&(s+=`,
`,a(e.wrapR,"z")),s+=`
	);

}
`,q4[t]=n=new ze(s,o)}return n.build(this),t}generateArrayDeclaration(e,t){return`array< ${this.getType(e)}, ${t} >`}generateTextureDimension(e,t,n){const s=this.getDataFromNode(e,this.shaderStage,this.globalCache);s.dimensionsSnippet===0[0]&&(s.dimensionsSnippet={});let o=s.dimensionsSnippet[n];if(s.dimensionsSnippet[n]===0[0]){let i,a;const{primarySamples:r}=this.renderer.backend.utils.getTextureSampleData(e),c=r>1;e.isData3DTexture?a="vec3<u32>":a="vec2<u32>",c||e.isStorageTexture?i=t:i=`${t}${n?`, u32( ${n} )`:""}`,o=new b4(new u4(`textureDimensions( ${i} )`,a)),s.dimensionsSnippet[n]=o,(e.isArrayTexture||e.isDataArrayTexture||e.isData3DTexture)&&(s.arrayLayerCount=new b4(new u4(`textureNumLayers(${t})`,"u32"))),e.isTextureCube&&(s.cubeFaceCount=new b4(new u4("6u","u32")))}return o.build(this)}generateFilteredTexture(e,t,n,s,o="0u"){this._include("biquadraticTexture");const a=this.generateWrapFunction(e),i=this.generateTextureDimension(e,t,o);return s&&(n=`${n} + vec2<f32>(${s}) / ${i}`),`tsl_biquadraticTexture( ${t}, ${a}( ${n} ), ${i}, u32( ${o} ) )`}generateTextureLod(e,t,n,s,o,i="0u"){const c=this.generateWrapFunction(e),r=this.generateTextureDimension(e,t,i),a=e.isData3DTexture?"vec3":"vec2";o&&(n=`${n} + ${a}<f32>(${o}) / ${a}<f32>( ${r} )`);const l=`${a}<u32>( ${c}( ${n} ) * ${a}<f32>( ${r} ) )`;return this.generateTextureLoad(e,t,l,s,null,i)}generateTextureLoad(e,t,n,s,o,i="0u"){let a;return o&&(n=`${n} + ${o}`),s?a=`textureLoad( ${t}, ${n}, ${s}, u32( ${i} ) )`:(a=`textureLoad( ${t}, ${n}, u32( ${i} ) )`,this.renderer.backend.compatibilityMode&&e.isDepthTexture&&(a+=".x")),a}generateTextureStore(e,t,n,s,o){let i;return s?i=`textureStore( ${t}, ${n}, ${s}, ${o} )`:i=`textureStore( ${t}, ${n}, ${o} )`,i}isSampleCompare(e){return e.isDepthTexture===!0&&e.compareFunction!==null}isUnfilterable(e){return this.getComponentTypeFromTexture(e)!=="float"||!this.isAvailable("float32Filterable")&&e.isDataTexture===!0&&e.type===X||this.isSampleCompare(e)===!1&&e.minFilter===V&&e.magFilter===V||this.renderer.backend.utils.getTextureSampleData(e).primarySamples>1}generateTexture(e,t,n,s,o,i=this.shaderStage){let a=null;return this.isUnfilterable(e)?a=this.generateTextureLod(e,t,n,s,o,"0",i):a=this._generateTextureSample(e,t,n,s,o,i),a}generateTextureGrad(e,t,n,s,o,i,a=this.shaderStage){if(a==="fragment")return i?`textureSampleGrad( ${t}, ${t}_sampler, ${n},  ${s[0]}, ${s[1]}, ${i} )`:`textureSampleGrad( ${t}, ${t}_sampler, ${n},  ${s[0]}, ${s[1]} )`;console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${a} shader.`)}generateTextureCompare(e,t,n,s,o,i,a=this.shaderStage){if(a==="fragment")return e.isDepthTexture===!0&&e.isArrayTexture===!0?i?`textureSampleCompare( ${t}, ${t}_sampler, ${n}, ${o}, ${s}, ${i} )`:`textureSampleCompare( ${t}, ${t}_sampler, ${n}, ${o}, ${s} )`:i?`textureSampleCompare( ${t}, ${t}_sampler, ${n}, ${s}, ${i} )`:`textureSampleCompare( ${t}, ${t}_sampler, ${n}, ${s} )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${a} shader.`)}generateTextureLevel(e,t,n,s,o,i){return this.isUnfilterable(e)===!1?i?`textureSampleLevel( ${t}, ${t}_sampler, ${n}, ${s}, ${i} )`:`textureSampleLevel( ${t}, ${t}_sampler, ${n}, ${s} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,n,i,s):this.generateTextureLod(e,t,n,o,i,s)}generateTextureBias(e,t,n,s,o,i,a=this.shaderStage){if(a==="fragment")return i?`textureSampleBias( ${t}, ${t}_sampler, ${n}, ${s}, ${i} )`:`textureSampleBias( ${t}, ${t}_sampler, ${n}, ${s} )`;console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${a} shader.`)}getPropertyName(e,t=this.shaderStage){if(e.isNodeVarying===!0&&e.needsInterpolation===!0){if(t==="vertex")return`varyings.${e.name}`}else if(e.isNodeUniform===!0){const n=e.name,t=e.type;return t==="texture"||t==="cubeTexture"||t==="storageTexture"||t==="texture3D"?n:t==="buffer"||t==="storageBuffer"||t==="indirectStorageBuffer"?this.isCustomStruct(e)?n:n+".value":e.groupNode.name+"."+n}return super.getPropertyName(e)}getOutputStructName(){return"output"}getFunctionOperator(e){const t=PS[e];return t!==0[0]?(this._include(t),t):null}getNodeAccess(e,t){return t!=="compute"?e.isAtomic===!0?(console.warn("WebGPURenderer: Atomic operations are only supported in compute shaders."),Vt.READ_WRITE):Vt.READ_ONLY:e.access}getStorageAccess(e,t){return DS[this.getNodeAccess(e,t)]}getUniformFromNode(e,t,n,s=null){const o=super.getUniformFromNode(e,t,n,s),i=this.getDataFromNode(e,n,this.globalCache);if(i.uniformGPU===0[0]){let r;const a=e.groupNode,c=a.name,l=this.getBindGroupArray(c,n);if(t==="texture"||t==="cubeTexture"||t==="storageTexture"||t==="texture3D"){let s=null;const i=this.getNodeAccess(e,n);if(t==="texture"||t==="storageTexture"?e.value.is3DTexture===!0?s=new D1(o.name,o.node,a,i):s=new ic(o.name,o.node,a,i):t==="cubeTexture"?s=new c2(o.name,o.node,a,i):t==="texture3D"&&(s=new D1(o.name,o.node,a,i)),s.store=e.isStorageTextureNode===!0,s.setVisibility(oc[n]),this.isUnfilterable(e.value)===!1&&s.store===!1){const e=new hS(`${o.name}_sampler`,o.node,a);e.setVisibility(oc[n]),l.push(e,s),r=[e,s]}else l.push(s),r=[s]}else if(t==="buffer"||t==="storageBuffer"||t==="indirectStorageBuffer"){const c=t==="buffer"?v2:vS,i=new c(e,a);i.setVisibility(oc[n]),l.push(i),r=i,o.name=s||"NodeBuffer_"+o.id}else{const s=this.uniformGroups[n]||(this.uniformGroups[n]={});let e=s[c];e===0[0]&&(e=new h2(c,a),e.setVisibility(oc[n]),s[c]=e,l.push(e)),r=this.getNodeUniform(o,t),e.addUniform(r)}i.uniformGPU=r}return o}getBuiltin(e,t,n,s=this.shaderStage){const o=this.builtins[s]||(this.builtins[s]=new Map);return o.has(e)===!1&&o.set(e,{name:e,property:t,type:n}),t}hasBuiltin(e,t=this.shaderStage){return this.builtins[t]!==0[0]&&this.builtins[t].has(e)}getVertexIndex(){return this.shaderStage==="vertex"?this.getBuiltin("vertex_index","vertexIndex","u32","attribute"):"vertexIndex"}buildFunctionCode(e){const n=e.layout,t=this.flowShaderNode(e),o=[];for(const e of n.inputs)o.push(e.name+" : "+this.getType(e.type));let s=`fn ${n.name}( ${o.join(", ")} ) -> ${this.getType(n.type)} {
${t.vars}
${t.code}
`;return t.result&&(s+=`	return ${t.result};
`),s+=`
}
`,s}getInstanceIndex(){return this.shaderStage==="vertex"?this.getBuiltin("instance_index","instanceIndex","u32","attribute"):"instanceIndex"}getInvocationLocalIndex(){return this.getBuiltin("local_invocation_index","invocationLocalIndex","u32","attribute")}getSubgroupSize(){return this.enableSubGroups(),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute")}getInvocationSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_invocation_id","invocationSubgroupIndex","u32","attribute")}getSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_id","subgroupIndex","u32","attribute")}getDrawIndex(){return null}getFrontFacing(){return this.getBuiltin("front_facing","isFront","bool")}getFragCoord(){return this.getBuiltin("position","fragCoord","vec4<f32>")+".xy"}getFragDepth(){return"output."+this.getBuiltin("frag_depth","depth","f32","output")}getClipDistance(){return"varyings.hw_clip_distances"}isFlipY(){return!1}enableDirective(e,t=this.shaderStage){const n=this.directives[t]||(this.directives[t]=new Set);n.add(e)}getDirectives(e){const t=[],n=this.directives[e];if(n!==0[0])for(const e of n)t.push(`enable ${e};`);return t.join(`
`)}enableSubGroups(){this.enableDirective("subgroups")}enableSubgroupsF16(){this.enableDirective("subgroups-f16")}enableClipDistances(){this.enableDirective("clip_distances")}enableShaderF16(){this.enableDirective("f16")}enableDualSourceBlending(){this.enableDirective("dual_source_blending")}enableHardwareClipping(e){this.enableClipDistances(),this.getBuiltin("clip_distances","hw_clip_distances",`array<f32, ${e} >`,"vertex")}getBuiltins(e){const t=[],n=this.builtins[e];if(n!==0[0])for(const{name:e,property:s,type:o}of n.values())t.push(`@builtin( ${e} ) ${s} : ${o}`);return t.join(`,
	`)}getScopedArray(e,t,n,s){return this.scopedArrays.has(e)===!1&&this.scopedArrays.set(e,{name:e,scope:t,bufferType:n,bufferCount:s}),e}getScopedArrays(e){if(e!=="compute")return;const t=[];for(const{name:e,scope:n,bufferType:s,bufferCount:o}of this.scopedArrays.values()){const i=this.getType(s);t.push(`var<${n}> ${e}: array< ${i}, ${o} >;`)}return t.join(`
`)}getAttributes(e){const t=[];if(e==="compute"&&(this.getBuiltin("global_invocation_id","globalId","vec3<u32>","attribute"),this.getBuiltin("workgroup_id","workgroupId","vec3<u32>","attribute"),this.getBuiltin("local_invocation_id","localId","vec3<u32>","attribute"),this.getBuiltin("num_workgroups","numWorkgroups","vec3<u32>","attribute"),this.renderer.hasFeature("subgroups")&&(this.enableDirective("subgroups",e),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute"))),e==="vertex"||e==="compute"){const e=this.getBuiltins("attribute");e&&t.push(e);const n=this.getAttributesArray();for(let e=0,o=n.length;e<o;e++){const s=n[e],i=s.name,a=this.getType(s.type);t.push(`@location( ${e} ) ${i} : ${a}`)}}return t.join(`,
	`)}getStructMembers(e){const t=[];for(const n of e.members){const o=e.output?"@location( "+n.index+" ) ":"";let s=this.getType(n.type);n.atomic&&(s="atomic< "+s+" >"),t.push(`	${o+n.name} : ${s}`)}return e.output&&t.push(`	${this.getBuiltins("output")}`),t.join(`,
`)}getStructs(e){let t="";const n=this.structs[e];if(n.length>0){const e=[];for(const s of n){let t=`struct ${s.name} {
`;t+=this.getStructMembers(s),t+=`
};`,e.push(t)}t=`
`+e.join(`

`)+`
`}return t}getVar(e,t,n=null){let s=`var ${t} : `;return n!==null?s+=this.generateArrayDeclaration(e,n):s+=this.getType(e),s}getVars(e){const t=[],n=this.vars[e];if(n!==0[0])for(const e of n)t.push(`	${this.getVar(e.type,e.name,e.count)};`);return`
${t.join(`
`)}
`}getVaryings(e){const t=[];if(e==="vertex"&&this.getBuiltin("position","Vertex","vec4<f32>","vertex"),e==="vertex"||e==="fragment"){const n=this.varyings,s=this.vars[e];for(let i=0;i<n.length;i++){const o=n[i];if(o.needsInterpolation){let e=`@location( ${i} )`;if(o.interpolationType){const t=o.interpolationSampling!==null?`, ${o.interpolationSampling} )`:" )";e+=` @interpolate( ${o.interpolationType}${t}`}else/^(int|uint|ivec|uvec)/.test(o.type)&&(e+=` @interpolate( ${this.renderer.backend.compatibilityMode?"flat, either":"flat"} )`);t.push(`${e} ${o.name} : ${this.getType(o.type)}`)}else e==="vertex"&&s.includes(o)===!1&&s.push(o)}}const n=this.getBuiltins(e);n&&t.push(n);const s=t.join(`,
	`);return e==="vertex"?this._getWGSLStruct("VaryingsStruct","	"+s):s}isCustomStruct(e){const n=e.value,t=e.node,s=(n.isBufferAttribute||n.isInstancedBufferAttribute)&&t.structTypeNode!==null,o=t.value&&t.value.array&&typeof t.value.itemSize=="number"&&t.value.array.length>t.value.itemSize;return s&&!o}getUniforms(e){const a=this.uniforms[e],t=[],s=[],i=[],n={};for(const o of a){const r=o.groupNode.name,i=this.bindingsIndexes[r];if(o.type==="texture"||o.type==="cubeTexture"||o.type==="storageTexture"||o.type==="texture3D"){const n=o.node.value;this.isUnfilterable(n)===!1&&o.node.isStorageTextureNode!==!0&&(this.isSampleCompare(n)?t.push(`@binding( ${i.binding++} ) @group( ${i.group} ) var ${o.name}_sampler : sampler_comparison;`):t.push(`@binding( ${i.binding++} ) @group( ${i.group} ) var ${o.name}_sampler : sampler;`));let s,a="";const{primarySamples:r}=this.renderer.backend.utils.getTextureSampleData(n);if(r>1&&(a="_multisampled"),n.isCubeTexture===!0)s="texture_cube<f32>";else if(n.isDepthTexture===!0)this.renderer.backend.compatibilityMode&&n.compareFunction===null?s=`texture${a}_2d<f32>`:s=`texture_depth${a}_2d${n.isArrayTexture===!0?"_array":""}`;else if(o.node.isStorageTextureNode===!0){const t=V4(n),i=this.getStorageAccess(o.node,e),a=o.node.value.is3DTexture,r=o.node.value.isArrayTexture,c=a?"3d":`2d${r?"_array":""}`;s=`texture_storage_${c}<${t}, ${i}>`}else if(n.isArrayTexture===!0||n.isDataArrayTexture===!0||n.isCompressedArrayTexture===!0)s="texture_2d_array<f32>";else if(n.is3DTexture===!0||n.isData3DTexture===!0)s="texture_3d<f32>";else{const e=this.getComponentTypeFromTexture(n).charAt(0);s=`texture${a}_2d<${e}32>`}t.push(`@binding( ${i.binding++} ) @group( ${i.group} ) var ${o.name} : ${s};`)}else if(o.type==="buffer"||o.type==="storageBuffer"||o.type==="indirectStorageBuffer"){const t=o.node,n=this.getType(t.getNodeType(this)),a=t.bufferCount,c=a>0&&o.type==="buffer"?", "+a:"",r=t.isStorageBufferNode?`storage, ${this.getStorageAccess(t,e)}`:"uniform";if(this.isCustomStruct(o))s.push(`@binding( ${i.binding++} ) @group( ${i.group} ) var<${r}> ${o.name} : ${n};`);else{const e=t.isAtomic?`atomic<${n}>`:`${n}`,a=`	value : array< ${e}${c} >`;s.push(this._getWGSLStructBinding(o.name,a,r,i.binding++,i.group))}}else{const t=this.getType(this.getVectorType(o.type)),e=o.groupNode.name,s=n[e]||(n[e]={index:i.binding++,id:i.group,snippets:[]});s.snippets.push(`	${o.name} : ${t}`)}}for(const t in n){const e=n[t];i.push(this._getWGSLStructBinding(t,e.snippets.join(`,
`),"uniform",e.index,e.id))}let o=t.join(`
`);return o+=s.join(`
`),o+=i.join(`
`),o}buildCode(){const e=this.material!==null?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){this.shaderStage=t;const n=e[t];n.uniforms=this.getUniforms(t),n.attributes=this.getAttributes(t),n.varyings=this.getVaryings(t),n.structs=this.getStructs(t),n.vars=this.getVars(t),n.codes=this.getCodes(t),n.directives=this.getDirectives(t),n.scopedArrays=this.getScopedArrays(t);let s=`// code

`;s+=this.flowCode[t];const o=this.flowNodes[t],a=o[o.length-1],i=a.outputNode,r=i!==0[0]&&i.isOutputStructNode===!0;for(const c of o){const e=this.getFlowData(c),l=c.name;if(l&&(s.length>0&&(s+=`
`),s+=`	// flow -> ${l}
`),s+=`${e.code}
	`,c===a&&t!=="compute")if(s+=`// result

	`,t==="vertex")s+=`varyings.Vertex = ${e.result};`;else if(t==="fragment")if(r)n.returnType=i.getNodeType(this),n.structs+="var<private> output : "+n.returnType+";",s+=`return ${e.result};`;else{let t="	@location(0) color: vec4<f32>";const o=this.getBuiltins("output");o&&(t+=`,
	`+o),n.returnType="OutputStruct",n.structs+=this._getWGSLStruct("OutputStruct",t),n.structs+=`
var<private> output : OutputStruct;`,s+=`output.color = ${e.result};

	return output;`}}n.flow=s}if(this.shaderStage=null,this.material!==null)this.vertexShader=this._getWGSLVertexCode(e.vertex),this.fragmentShader=this._getWGSLFragmentCode(e.fragment);else{const t=this.object.workgroupSize;this.computeShader=this._getWGSLComputeCode(e.compute,t)}}getMethod(e,t=null){let n;return t!==null&&(n=this._getWGSLMethod(e+"_"+t)),n===0[0]&&(n=this._getWGSLMethod(e)),n||e}getBitcastMethod(e){const t=this.getType(e);return`bitcast<${t}>`}getTernary(e,t,n){return`select( ${n}, ${t}, ${e} )`}getType(e){return HS[e]||e}isAvailable(e){let t=U4[e];return t===0[0]&&(e==="float32Filterable"?t=this.renderer.hasFeature("float32-filterable"):e==="clipDistance"&&(t=this.renderer.hasFeature("clip-distances")),U4[e]=t),t}_getWGSLMethod(e){return dr[e]!==0[0]&&this._include(e),VS[e]}_include(e){const t=dr[e];return t.build(this),this.currentFunctionNode!==null&&this.currentFunctionNode.includes.push(t),t}_getWGSLVertexCode(e){return`${this.getSignature()}
// directives
${e.directives}

// structs
${e.structs}

// uniforms
${e.uniforms}

// varyings
${e.varyings}
var<private> varyings : VaryingsStruct;

// codes
${e.codes}

@vertex
fn main( ${e.attributes} ) -> VaryingsStruct {

	// vars
	${e.vars}

	// flow
	${e.flow}

	return varyings;

}
`}_getWGSLFragmentCode(e){return`${this.getSignature()}
// global
${Y4}

// structs
${e.structs}

// uniforms
${e.uniforms}

// codes
${e.codes}

@fragment
fn main( ${e.varyings} ) -> ${e.returnType} {

	// vars
	${e.vars}

	// flow
	${e.flow}

}
`}_getWGSLComputeCode(e,t){const[n,s,o]=t;return`${this.getSignature()}
// directives
${e.directives}

// system
var<private> instanceIndex : u32;

// locals
${e.scopedArrays}

// structs
${e.structs}

// uniforms
${e.uniforms}

// codes
${e.codes}

@compute @workgroup_size( ${n}, ${s}, ${o} )
fn main( ${e.attributes} ) {

	// system
	instanceIndex = globalId.x
		+ globalId.y * ( ${n} * numWorkgroups.x )
		+ globalId.z * ( ${n} * numWorkgroups.x ) * ( ${s} * numWorkgroups.y );

	// vars
	${e.vars}

	// flow
	${e.flow}

}
`}_getWGSLStruct(e,t){return`
struct ${e} {
${t}
};`}_getWGSLStructBinding(e,t,n,s=0,o=0){const i=e+"Struct",a=this._getWGSLStruct(i,t);return`${a}
@binding( ${s} ) @group( ${o} )
var<${n}> ${e} : ${i};`}},US=WS,KS=class{constructor(e){this.backend=e}getCurrentDepthStencilFormat(t){let n;return t.depthTexture!==null?n=this.getTextureFormatGPU(t.depthTexture):t.depth&&t.stencil?n=e.Depth24PlusStencil8:t.depth&&(n=e.Depth24Plus),n}getTextureFormatGPU(e){return this.backend.get(e).format}getTextureSampleData(e){let t;if(e.isFramebufferTexture)t=1;else if(e.isDepthTexture&&!e.renderTarget){const e=this.backend.renderer,n=e.getRenderTarget();t=n?n.samples:e.samples}else e.renderTarget&&(t=e.renderTarget.samples);t=t||1;const n=t>1&&e.renderTarget!==null&&e.isDepthTexture!==!0&&e.isFramebufferTexture!==!0,s=n?1:t;return{samples:t,primarySamples:s,isMSAA:n}}getCurrentColorFormat(e){let t;return e.textures!==null?t=this.getTextureFormatGPU(e.textures[0]):t=this.getPreferredCanvasFormat(),t}getCurrentColorSpace(e){return e.textures!==null?e.textures[0].colorSpace:this.backend.renderer.outputColorSpace}getPrimitiveTopology(e,t){if(e.isPoints)return ii.PointList;if(e.isLineSegments||e.isMesh&&t.wireframe===!0)return ii.LineList;if(e.isLine)return ii.LineStrip;if(e.isMesh)return ii.TriangleList}getSampleCount(e){return e>=4?4:1}getSampleCountRenderContext(e){return e.textures!==null?this.getSampleCount(e.sampleCount):this.getSampleCount(this.backend.renderer.samples)}getPreferredCanvasFormat(){const t=this.backend.parameters.outputType;if(t===0[0])return navigator.gpu.getPreferredCanvasFormat();if(t===Y)return e.BGRA8Unorm;if(t===ht)return e.RGBA16Float;throw new Error("Unsupported outputType")}},qS=KS,X4=new Map([[Int8Array,["sint8","snorm8"]],[Uint8Array,["uint8","unorm8"]],[Int16Array,["sint16","snorm16"]],[Uint16Array,["uint16","unorm16"]],[Int32Array,["sint32","snorm32"]],[Uint32Array,["uint32","unorm32"]],[Float32Array,["float32"]]]),typeof Float16Array!="undefined"&&X4.set(Float16Array,["float16"]),Vk=new Map([[R2,["float16"]]]),zk=new Map([[Int32Array,"sint32"],[Int16Array,"sint32"],[Uint32Array,"uint32"],[Uint16Array,"uint32"],[Float32Array,"float32"]]),yk=class{constructor(e){this.backend=e}createAttribute(e,t){const n=this._getBufferAttribute(e),i=this.backend,o=i.get(n);let s=o.buffer;if(s===0[0]){const c=i.device;let a=n.array;if(e.normalized===!1)if(a.constructor===Int16Array||a.constructor===Int8Array)a=new Int32Array(a);else if((a.constructor===Uint16Array||a.constructor===Uint8Array)&&(a=new Uint32Array(a),t&GPUBufferUsage.INDEX))for(let e=0;e<a.length;e++)a[e]===65535&&(a[e]=4294967295);if(n.array=a,(n.isStorageBufferAttribute||n.isStorageInstancedBufferAttribute)&&n.itemSize===3){a=new a.constructor(n.count*4);for(let e=0;e<n.count;e++)a.set(n.array.subarray(e*3,e*3+3),e*4);n.itemSize=4,n.array=a,o._force3to4BytesAlignment=!0}const r=a.byteLength,l=r+(4-r%4)%4;s=c.createBuffer({label:n.name,size:l,usage:t,mappedAtCreation:!0}),new a.constructor(s.getMappedRange()).set(a),s.unmap(),o.buffer=s}}updateAttribute(e){const t=this._getBufferAttribute(e),s=this.backend,i=s.device,a=s.get(t),r=s.get(t).buffer;let n=t.array;if(a._force3to4BytesAlignment===!0){n=new n.constructor(t.count*4);for(let e=0;e<t.count;e++)n.set(t.array.subarray(e*3,e*3+3),e*4);t.array=n}const c=this._isTypedArray(n),o=t.updateRanges;if(o.length===0)i.queue.writeBuffer(r,0,n,0);else{const e=c?1:n.BYTES_PER_ELEMENT;for(let l=0,u=o.length;l<u;l++){const t=o[l];let s,d;if(a._force3to4BytesAlignment===!0){const n=Math.floor(t.start/3),o=Math.ceil(t.count/3);s=n*4*e,d=o*4*e}else s=t.start*e,d=t.count*e;const h=s*(c?n.BYTES_PER_ELEMENT:1);i.queue.writeBuffer(r,h,n,s,d)}t.clearUpdateRanges()}}createShaderVertexBuffers(e){const n=e.getAttributes(),t=new Map;for(let s=0;s<n.length;s++){const e=n[s],i=e.array.BYTES_PER_ELEMENT,a=this._getBufferAttribute(e);let o=t.get(a);if(o===0[0]){let n,s;e.isInterleavedBufferAttribute===!0?(n=e.data.stride*i,s=e.data.isInstancedInterleavedBuffer?Jr.Instance:Jr.Vertex):(n=e.itemSize*i,s=e.isInstancedBufferAttribute?Jr.Instance:Jr.Vertex),e.normalized===!1&&(e.array.constructor===Int16Array||e.array.constructor===Uint16Array)&&(n=4),o={arrayStride:n,attributes:[],stepMode:s},t.set(a,o)}const r=this._getVertexFormat(e),c=e.isInterleavedBufferAttribute===!0?e.offset*i:0;o.attributes.push({shaderLocation:s,offset:c,format:r})}return Array.from(t.values())}destroyAttribute(e){const t=this.backend,n=t.get(this._getBufferAttribute(e));n.buffer.destroy(),t.delete(e)}async getArrayBufferAsync(e){const s=this.backend,n=s.device,r=s.get(this._getBufferAttribute(e)),o=r.buffer,i=o.size,t=n.createBuffer({label:`${e.name}_readback`,size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),a=n.createCommandEncoder({label:`readback_encoder_${e.name}`});a.copyBufferToBuffer(o,0,t,0,i);const c=a.finish();n.queue.submit([c]),await t.mapAsync(GPUMapMode.READ);const l=t.getMappedRange(),d=new e.array.constructor(l.slice(0));return t.unmap(),d.buffer}_getVertexFormat(e){const{itemSize:s,normalized:o}=e,t=e.array.constructor,i=e.constructor;let n;if(s===1)n=zk.get(t);else{const a=Vk.get(i)||X4.get(t),e=a[o?1:0];if(e){const i=t.BYTES_PER_ELEMENT*s,a=Math.floor((i+3)/4)*4,o=a/t.BYTES_PER_ELEMENT;if(o%1)throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");n=`${e}x${o}`}}return n||console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet."),n}_isTypedArray(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}},jk=yk,bk=class{constructor(e){this.backend=e,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(e){const t=this.backend,s=t.device,n=[];let o=0;for(const s of e.bindings){const i={binding:o++,visibility:s.visibility};if(s.isUniformBuffer||s.isStorageBuffer){const e={};s.isStorageBuffer&&(s.visibility&4?s.access===Vt.READ_WRITE||s.access===Vt.WRITE_ONLY?e.type=p4.Storage:e.type=p4.ReadOnlyStorage:e.type=p4.ReadOnlyStorage),i.buffer=e}else if(s.isSampledTexture&&s.store){const e={};e.format=this.backend.get(s.texture).texture.format;const t=s.access;t===Vt.READ_WRITE?e.access=f4.ReadWrite:t===Vt.WRITE_ONLY?e.access=f4.WriteOnly:e.access=f4.ReadOnly,s.texture.isArrayTexture?e.viewDimension=Z.TwoDArray:s.texture.is3DTexture&&(e.viewDimension=Z.ThreeD),i.storageTexture=e}else if(s.isSampledTexture){const e={},{primarySamples:n}=t.utils.getTextureSampleData(s.texture);if(n>1&&(e.multisampled=!0,s.texture.isDepthTexture||(e.sampleType=Ys.UnfilterableFloat)),s.texture.isDepthTexture)t.compatibilityMode&&s.texture.compareFunction===null?e.sampleType=Ys.UnfilterableFloat:e.sampleType=Ys.Depth;else if(s.texture.isDataTexture||s.texture.isDataArrayTexture||s.texture.isData3DTexture){const t=s.texture.type;t===ue?e.sampleType=Ys.SInt:t===I?e.sampleType=Ys.UInt:t===X&&(this.backend.hasFeature("float32-filterable")?e.sampleType=Ys.Float:e.sampleType=Ys.UnfilterableFloat)}s.isSampledCubeTexture?e.viewDimension=Z.Cube:s.texture.isArrayTexture||s.texture.isDataArrayTexture||s.texture.isCompressedArrayTexture?e.viewDimension=Z.TwoDArray:s.isSampledTexture3D&&(e.viewDimension=Z.ThreeD),i.texture=e}else if(s.isSampler){const e={};s.texture.isDepthTexture&&(s.texture.compareFunction!==null?e.type=z4.Comparison:t.compatibilityMode&&(e.type=z4.NonFiltering)),i.sampler=e}else console.error(`WebGPUBindingUtils: Unsupported binding "${s}".`);n.push(i)}return s.createBindGroupLayout({entries:n})}createBindings(e,t,n,s=0){const{backend:c,bindGroupLayoutCache:r}=this,o=c.get(e);let i=r.get(e.bindingsReference);i===0[0]&&(i=this.createBindingsLayout(e),r.set(e.bindingsReference,i));let a;n>0&&(o.groups===0[0]&&(o.groups=[],o.versions=[]),o.versions[n]===s&&(a=o.groups[n])),a===0[0]&&(a=this.createBindGroup(e,i),n>0&&(o.groups[n]=a,o.versions[n]=s)),o.group=a,o.layout=i}updateBinding(e){const t=this.backend,n=t.device,s=e.buffer,o=t.get(e).buffer;n.queue.writeBuffer(o,0,s,0)}createBindGroupIndex(e,t){const i=this.backend,n=i.device,a=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,s=e[0],o=n.createBuffer({label:"bindingCameraIndex_"+s,size:16,usage:a});n.queue.writeBuffer(o,0,e,0);const r=[{binding:0,resource:{buffer:o}}];return n.createBindGroup({label:"bindGroupCameraIndex_"+s,layout:t,entries:r})}createBindGroup(e,t){const n=this.backend,i=n.device;let s=0;const o=[];for(const t of e.bindings){if(t.isUniformBuffer){const e=n.get(t);if(e.buffer===0[0]){const n=t.byteLength,s=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,o=i.createBuffer({label:"bindingBuffer_"+t.name,size:n,usage:s});e.buffer=o}o.push({binding:s,resource:{buffer:e.buffer}})}else if(t.isStorageBuffer){const e=n.get(t);if(e.buffer===0[0]){const s=t.attribute;e.buffer=n.get(s).buffer}o.push({binding:s,resource:{buffer:e.buffer}})}else if(t.isSampledTexture){const e=n.get(t.texture);let a;if(e.externalTexture!==0[0])a=i.importExternalTexture({source:e.externalTexture});else{const s=t.store?1:e.texture.mipLevelCount;let n=`view-${e.texture.width}-${e.texture.height}`;if(e.texture.depthOrArrayLayers>1&&(n+=`-${e.texture.depthOrArrayLayers}`),n+=`-${s}`,a=e[n],a===0[0]){const i=cS.All;let o;t.isSampledCubeTexture?o=Z.Cube:t.isSampledTexture3D?o=Z.ThreeD:t.texture.isArrayTexture||t.texture.isDataArrayTexture||t.texture.isCompressedArrayTexture?o=Z.TwoDArray:o=Z.TwoD,a=e[n]=e.texture.createView({aspect:i,dimension:o,mipLevelCount:s})}}o.push({binding:s,resource:a})}else if(t.isSampler){const e=n.get(t.texture);o.push({binding:s,resource:e.sampler})}s++}return i.createBindGroup({label:"bindGroup_"+e.name,layout:t,entries:o})}},vk=bk,gk=class{constructor(e){this.backend=e,this._activePipelines=new WeakMap}setPipeline(e,t){const n=this._activePipelines.get(e);n!==t&&(e.setPipeline(t),this._activePipelines.set(e,t))}_getSampleCount(e){return this.backend.utils.getSampleCountRenderContext(e)}createRenderPipeline(e,t){const{object:E,material:n,geometry:C,pipeline:v}=e,{vertexProgram:O,fragmentProgram:x}=v,o=this.backend,l=o.device,a=o.utils,g=o.get(v),h=[];for(const t of e.getBindings()){const n=o.get(t);h.push(n.layout)}const k=o.attributeUtils.createShaderVertexBuffers(e);let i;n.blending!==Qe&&(n.blending!==rt||n.transparent!==!1)&&(i=this._getBlending(n));let p={};n.stencilWrite===!0&&(p={compare:this._getStencilCompare(n),failOp:this._getStencilOperation(n.stencilFail),depthFailOp:this._getStencilOperation(n.stencilZFail),passOp:this._getStencilOperation(n.stencilZPass)});const d=this._getColorWriteMask(n),c=[];if(e.context.textures!==null){const t=e.context.textures;for(let e=0;e<t.length;e++){const n=a.getTextureFormatGPU(t[e]);c.push({format:n,blend:i,writeMask:d})}}else{const t=a.getCurrentColorFormat(e.context);c.push({format:t,blend:i,writeMask:d})}const b=o.get(O).module,j=o.get(x).module,y=this._getPrimitiveState(E,C,n),_=this._getDepthCompare(n),w=a.getCurrentDepthStencilFormat(e.context),u=this._getSampleCount(e.context),r={label:`renderPipeline_${n.name||n.type}_${n.id}`,vertex:Object.assign({},b,{buffers:k}),fragment:Object.assign({},j,{targets:c}),primitive:y,multisample:{count:u,alphaToCoverageEnabled:n.alphaToCoverage&&u>1},layout:l.createPipelineLayout({bindGroupLayouts:h})},s={},f=e.context.depth,m=e.context.stencil;if((f===!0||m===!0)&&(f===!0&&(s.format=w,s.depthWriteEnabled=n.depthWrite,s.depthCompare=_),m===!0&&(s.stencilFront=p,s.stencilBack={},s.stencilReadMask=n.stencilFuncMask,s.stencilWriteMask=n.stencilWriteMask),n.polygonOffset===!0&&(s.depthBias=n.polygonOffsetUnits,s.depthBiasSlopeScale=n.polygonOffsetFactor,s.depthBiasClamp=0),r.depthStencil=s),t===null)g.pipeline=l.createRenderPipeline(r);else{const e=new Promise(e=>{l.createRenderPipelineAsync(r).then(t=>{g.pipeline=t,e()})});t.push(e)}}createBundleEncoder(e,t="renderBundleEncoder"){const s=this.backend,{utils:n,device:o}=s,i=n.getCurrentDepthStencilFormat(e),a=n.getCurrentColorFormat(e),r=this._getSampleCount(e),c={label:t,colorFormats:[a],depthStencilFormat:i,sampleCount:r};return o.createRenderBundleEncoder(c)}createComputePipeline(e,t){const n=this.backend,s=n.device,i=n.get(e.computeProgram).module,a=n.get(e),o=[];for(const e of t){const s=n.get(e);o.push(s.layout)}a.pipeline=s.createComputePipeline({compute:i,layout:s.createPipelineLayout({bindGroupLayouts:o})})}_getBlending(e){let t,n;const s=e.blending,o=e.blendSrc,i=e.blendDst,a=e.blendEquation;if(s===xo){const s=e.blendSrcAlpha!==null?e.blendSrcAlpha:o,r=e.blendDstAlpha!==null?e.blendDstAlpha:i,c=e.blendEquationAlpha!==null?e.blendEquationAlpha:a;t={srcFactor:this._getBlendFactor(o),dstFactor:this._getBlendFactor(i),operation:this._getBlendOperation(a)},n={srcFactor:this._getBlendFactor(s),dstFactor:this._getBlendFactor(r),operation:this._getBlendOperation(c)}}else{const i=e.premultipliedAlpha,o=(e,s,o,i)=>{t={srcFactor:e,dstFactor:s,operation:Zs.Add},n={srcFactor:o,dstFactor:i,operation:Zs.Add}};if(i)switch(s){case rt:o(k.One,k.OneMinusSrcAlpha,k.One,k.OneMinusSrcAlpha);break;case bo:o(k.One,k.One,k.One,k.One);break;case wo:o(k.Zero,k.OneMinusSrc,k.Zero,k.One);break;case Oo:o(k.Dst,k.OneMinusSrcAlpha,k.Zero,k.One);break}else switch(s){case rt:o(k.SrcAlpha,k.OneMinusSrcAlpha,k.One,k.OneMinusSrcAlpha);break;case bo:o(k.SrcAlpha,k.One,k.One,k.One);break;case wo:console.error("THREE.WebGPURenderer: SubtractiveBlending requires material.premultipliedAlpha = true");break;case Oo:console.error("THREE.WebGPURenderer: MultiplyBlending requires material.premultipliedAlpha = true");break}}if(t!==0[0]&&n!==0[0])return{color:t,alpha:n};console.error("THREE.WebGPURenderer: Invalid blending: ",s)}_getBlendFactor(e){let t;switch(e){case Pn:t=k.Zero;break;case ql:t=k.One;break;case Jl:t=k.Src;break;case td:t=k.OneMinusSrc;break;case _a:t=k.SrcAlpha;break;case wa:t=k.OneMinusSrcAlpha;break;case cd:t=k.Dst;break;case ld:t=k.OneMinusDst;break;case nd:t=k.DstAlpha;break;case ad:t=k.OneMinusDstAlpha;break;case dd:t=k.SrcAlphaSaturated;break;case hg:t=k.Constant;break;case mg:t=k.OneMinusConstant;break;default:console.error("THREE.WebGPURenderer: Blend factor not supported.",e)}return t}_getStencilCompare(e){let t;const n=e.stencilFunc;switch(n){case pv:t=ye.Never;break;case Xd:t=ye.Always;break;case h9:t=ye.Less;break;case ub:t=ye.LessEqual;break;case cb:t=ye.Equal;break;case Hb:t=ye.GreaterEqual;break;case fb:t=ye.Greater;break;case Cb:t=ye.NotEqual;break;default:console.error("THREE.WebGPURenderer: Invalid stencil function.",n)}return t}_getStencilOperation(e){let t;switch(e){case Ds:t=Zn.Keep;break;case Gp:t=Zn.Zero;break;case Jp:t=Zn.Replace;break;case nv:t=Zn.Invert;break;case eg:t=Zn.IncrementClamp;break;case ng:t=Zn.DecrementClamp;break;case Ng:t=Zn.IncrementWrap;break;case g7:t=Zn.DecrementWrap;break;default:console.error("THREE.WebGPURenderer: Invalid stencil operation.",t)}return t}_getBlendOperation(e){let t;switch(e){case Se:t=Zs.Add;break;case Vl:t=Zs.Subtract;break;case $l:t=Zs.ReverseSubtract;break;case T8:t=Zs.Min;break;case M8:t=Zs.Max;break;default:console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.",e)}return t}_getPrimitiveState(e,t,n){const s={},i=this.backend.utils;s.topology=i.getPrimitiveTopology(e,n),t.index!==null&&e.isLine===!0&&e.isLineSegments!==!0&&(s.stripIndexFormat=t.index.array instanceof Uint16Array?di.Uint16:di.Uint32);let o=n.side===B;return e.isMesh&&e.matrixWorld.determinant()<0&&(o=!o),s.frontFace=o===!0?w4.CW:w4.CCW,s.cullMode=n.side===Fe?C4.None:C4.Back,s}_getColorWriteMask(e){return e.colorWrite===!0?A4.All:A4.None}_getDepthCompare(e){let t;if(e.depthTest===!1)t=ye.Always;else{const n=e.depthFunc;switch(n){case Ma:t=ye.Never;break;case Ta:t=ye.Always;break;case za:t=ye.Less;break;case ps:t=ye.LessEqual;break;case Da:t=ye.Equal;break;case Na:t=ye.GreaterEqual;break;case La:t=ye.Greater;break;case Ba:t=ye.NotEqual;break;default:console.error("THREE.WebGPUPipelineUtils: Invalid depth function.",n)}}return t}},pk=gk,mk=class extends Q4{constructor(e,t,n=2048){super(n),this.device=e,this.type=t,this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxQueries,label:`queryset_global_timestamp_${t}`});const s=this.maxQueries*8;this.resolveBuffer=this.device.createBuffer({label:`buffer_timestamp_resolve_${t}`,size:s,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.resultBuffer=this.device.createBuffer({label:`buffer_timestamp_result_${t}`,size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ})}allocateQueriesForContext(e){if(!this.trackTimestamp||this.isDisposed)return null;if(this.currentQueryIndex+2>this.maxQueries)return gt(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`),null;const t=this.currentQueryIndex;return this.currentQueryIndex+=2,this.queryOffsets.set(e,t),t}async resolveQueriesAsync(){if(!this.trackTimestamp||this.currentQueryIndex===0||this.isDisposed)return this.lastValue;if(this.pendingResolve)return this.pendingResolve;this.pendingResolve=this._resolveQueries();try{const e=await this.pendingResolve;return e}finally{this.pendingResolve=null}}async _resolveQueries(){if(this.isDisposed)return this.lastValue;try{if(this.resultBuffer.mapState!=="unmapped")return this.lastValue;const i=new Map(this.queryOffsets),s=this.currentQueryIndex,e=s*8;this.currentQueryIndex=0,this.queryOffsets.clear();const t=this.device.createCommandEncoder();t.resolveQuerySet(this.querySet,0,s,this.resolveBuffer,0),t.copyBufferToBuffer(this.resolveBuffer,0,this.resultBuffer,0,e);const a=t.finish();if(this.device.queue.submit([a]),this.resultBuffer.mapState!=="unmapped")return this.lastValue;if(await this.resultBuffer.mapAsync(GPUMapMode.READ,0,e),this.isDisposed)return this.resultBuffer.mapState==="mapped"&&this.resultBuffer.unmap(),this.lastValue;const o=new BigUint64Array(this.resultBuffer.getMappedRange(0,e));let n=0;for(const[,e]of i){const t=o[e],s=o[e+1],a=Number(s-t)/1e6;n+=a}return this.resultBuffer.unmap(),this.lastValue=n,n}catch(e){return console.error("Error resolving queries:",e),this.resultBuffer.mapState==="mapped"&&this.resultBuffer.unmap(),this.lastValue}}async dispose(){if(this.isDisposed)return;if(this.isDisposed=!0,this.pendingResolve)try{await this.pendingResolve}catch(e){console.error("Error waiting for pending resolve:",e)}if(this.resultBuffer&&this.resultBuffer.mapState==="mapped")try{this.resultBuffer.unmap()}catch(e){console.error("Error unmapping buffer:",e)}this.querySet&&(this.querySet.destroy(),this.querySet=null),this.resolveBuffer&&(this.resolveBuffer.destroy(),this.resolveBuffer=null),this.resultBuffer&&(this.resultBuffer.destroy(),this.resultBuffer=null),this.queryOffsets.clear(),this.pendingResolve=null}},$E=mk,VE=class extends y0{constructor(e={}){super(e),this.isWebGPUBackend=!0,this.parameters.alpha=e.alpha===0[0]||e.alpha,this.parameters.compatibilityMode=e.compatibilityMode!==0[0]&&e.compatibilityMode,this.parameters.requiredLimits=e.requiredLimits===0[0]?{}:e.requiredLimits,this.compatibilityMode=this.parameters.compatibilityMode,this.device=null,this.context=null,this.colorBuffer=null,this.defaultRenderPassdescriptor=null,this.utils=new qS(this),this.attributeUtils=new jk(this),this.bindingUtils=new vk(this),this.pipelineUtils=new pk(this),this.textureUtils=new xS(this),this.occludedResolveCache=new Map}async init(e){await super.init(e);const t=this.parameters;let n;if(t.device===0[0]){const o={powerPreference:t.powerPreference,featureLevel:t.compatibilityMode?"compatibility":0[0]},e=typeof navigator!="undefined"?await navigator.gpu.requestAdapter(o):null;if(e===null)throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");const i=Object.values(ec),s=[];for(const t of i)e.features.has(t)&&s.push(t);const a={requiredFeatures:s,requiredLimits:t.requiredLimits};n=await e.requestDevice(a)}else n=t.device;n.lost.then(t=>{const n={api:"WebGPU",message:t.message||"Unknown reason",reason:t.reason||null,originalEvent:t};e.onDeviceLost(n)});const s=t.context!==0[0]?t.context:e.domElement.getContext("webgpu");this.device=n,this.context=s;const o=t.alpha?"premultiplied":"opaque",i=v.getToneMappingMode(this.renderer.outputColorSpace);this.context.configure({device:this.device,format:this.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:o,toneMapping:{mode:i}}),this.trackTimestamp=this.trackTimestamp&&this.hasFeature(ec.TimestampQuery),this.updateSize()}get coordinateSystem(){return Os}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}getContext(){return this.context}_getDefaultRenderPassDescriptor(){let e=this.defaultRenderPassdescriptor;if(e===null){const t=this.renderer;e={colorAttachments:[{view:null}]},(this.renderer.depth===!0||this.renderer.stencil===!0)&&(e.depthStencilAttachment={view:this.textureUtils.getDepthBuffer(t.depth,t.stencil).createView()});const n=e.colorAttachments[0];this.renderer.samples>0?n.view=this.colorBuffer.createView():n.resolveTarget=0[0],this.defaultRenderPassdescriptor=e}const t=e.colorAttachments[0];return this.renderer.samples>0?t.resolveTarget=this.context.getCurrentTexture().createView():t.view=this.context.getCurrentTexture().createView(),e}_isRenderCameraDepthArray(e){return e.depthTexture&&e.depthTexture.image.depth>1&&e.camera.isArrayCamera}_getRenderPassDescriptor(e,t={}){const s=e.renderTarget,n=this.get(s);let i=n.descriptors;(i===0[0]||n.width!==s.width||n.height!==s.height||n.samples!==s.samples)&&(i={},n.descriptors=i);const r=e.getCacheKey();let o=i[r];if(o===0[0]){const t=e.textures,a=[];let c;const l=this._isRenderCameraDepthArray(e);for(let n=0;n<t.length;n++){const i=this.get(t[n]),o={label:`colorAttachment_${n}`,baseMipLevel:e.activeMipmapLevel,mipLevelCount:1,baseArrayLayer:e.activeCubeFace,arrayLayerCount:1,dimension:Z.TwoD};if(s.isRenderTarget3D)c=e.activeCubeFace,o.baseArrayLayer=0,o.dimension=Z.ThreeD,o.depthOrArrayLayers=t[n].image.depth;else if(s.isRenderTarget&&t[n].image.depth>1)if(l===!0){const t=e.camera.cameras;for(let e=0;e<t.length;e++){const n={...o,baseArrayLayer:e,arrayLayerCount:1,dimension:Z.TwoD},s=i.texture.createView(n);a.push({view:s,resolveTarget:0[0],depthSlice:0[0]})}}else o.dimension=Z.TwoDArray,o.depthOrArrayLayers=t[n].image.depth;if(l!==!0){const n=i.texture.createView(o);let e,t;i.msaaTexture!==0[0]?(e=i.msaaTexture.createView(),t=n):(e=n,t=0[0]),a.push({view:e,resolveTarget:t,depthSlice:c})}}if(o={textureViews:a},e.depth){const n=this.get(e.depthTexture),t={};e.depthTexture.isArrayTexture&&(t.dimension=Z.TwoD,t.arrayLayerCount=1,t.baseArrayLayer=e.activeCubeFace),o.depthStencilView=n.texture.createView(t)}i[r]=o,n.width=s.width,n.height=s.height,n.samples=s.samples,n.activeMipmapLevel=e.activeMipmapLevel,n.activeCubeFace=e.activeCubeFace}const a={colorAttachments:[]};for(let e=0;e<o.textureViews.length;e++){const n=o.textureViews[e];let s={r:0,g:0,b:0,a:1};e===0&&t.clearValue&&(s=t.clearValue),a.colorAttachments.push({view:n.view,depthSlice:n.depthSlice,resolveTarget:n.resolveTarget,loadOp:t.loadOp||N.Load,storeOp:t.storeOp||Ne.Store,clearValue:s})}return o.depthStencilView&&(a.depthStencilAttachment={view:o.depthStencilView}),a}beginRender(e){const t=this.get(e);t.frameCalls=this.renderer.info.render.frameCalls;const a=this.device,o=e.occlusionQueryCount;let i;o>0&&(t.currentOcclusionQuerySet&&t.currentOcclusionQuerySet.destroy(),t.currentOcclusionQueryBuffer&&t.currentOcclusionQueryBuffer.destroy(),t.currentOcclusionQuerySet=t.occlusionQuerySet,t.currentOcclusionQueryBuffer=t.occlusionQueryBuffer,t.currentOcclusionQueryObjects=t.occlusionQueryObjects,i=a.createQuerySet({type:"occlusion",count:o,label:`occlusionQuerySet_${e.id}`}),t.occlusionQuerySet=i,t.occlusionQueryIndex=0,t.occlusionQueryObjects=new Array(o),t.lastOcclusionObject=null);let n;e.textures===null?n=this._getDefaultRenderPassDescriptor():n=this._getRenderPassDescriptor(e,{loadOp:N.Load}),this.initTimestampQuery(Pi.RENDER,this.getTimestampUID(e),n),n.occlusionQuerySet=i;const s=n.depthStencilAttachment;if(e.textures!==null){const t=n.colorAttachments;for(let n=0;n<t.length;n++){const s=t[n];e.clearColor?(s.clearValue=n===0?e.clearColorValue:{r:0,g:0,b:0,a:1},s.loadOp=N.Clear):s.loadOp=N.Load,s.storeOp=Ne.Store}}else{const t=n.colorAttachments[0];e.clearColor?(t.clearValue=e.clearColorValue,t.loadOp=N.Clear):t.loadOp=N.Load,t.storeOp=Ne.Store}e.depth&&(e.clearDepth?(s.depthClearValue=e.clearDepthValue,s.depthLoadOp=N.Clear):s.depthLoadOp=N.Load,s.depthStoreOp=Ne.Store),e.stencil&&(e.clearStencil?(s.stencilClearValue=e.clearStencilValue,s.stencilLoadOp=N.Clear):s.stencilLoadOp=N.Load,s.stencilStoreOp=Ne.Store);const r=a.createCommandEncoder({label:"renderContext_"+e.id});if(this._isRenderCameraDepthArray(e)===!0){const s=e.camera.cameras;!t.layerDescriptors||t.layerDescriptors.length!==s.length?this._createDepthLayerDescriptors(e,t,n,s):this._updateDepthLayerDescriptors(e,t,s),t.bundleEncoders=[],t.bundleSets=[];for(let n=0;n<s.length;n++){const o=this.pipelineUtils.createBundleEncoder(e,"renderBundleArrayCamera_"+n),i={attributes:{},bindingGroups:[],pipeline:null,index:null};t.bundleEncoders.push(o),t.bundleSets.push(i)}t.currentPass=null}else{const s=r.beginRenderPass(n);if(t.currentPass=s,e.viewport&&this.updateViewport(e),e.scissor){const{x:t,y:n,width:o,height:i}=e.scissorValue;s.setScissorRect(t,n,o,i)}}t.descriptor=n,t.encoder=r,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.renderBundles=[]}_createDepthLayerDescriptors(e,t,n,s){const o=n.depthStencilAttachment;t.layerDescriptors=[];const i=this.get(e.depthTexture);i.viewCache||(i.viewCache=[]);for(let r=0;r<s.length;r++){const a={...n,colorAttachments:[{...n.colorAttachments[0],view:n.colorAttachments[r].view}]};if(n.depthStencilAttachment){const t=r;i.viewCache[t]||(i.viewCache[t]=i.texture.createView({dimension:Z.TwoD,baseArrayLayer:r,arrayLayerCount:1})),a.depthStencilAttachment={view:i.viewCache[t],depthLoadOp:o.depthLoadOp||N.Clear,depthStoreOp:o.depthStoreOp||Ne.Store,depthClearValue:o.depthClearValue||1},e.stencil&&(a.depthStencilAttachment.stencilLoadOp=o.stencilLoadOp,a.depthStencilAttachment.stencilStoreOp=o.stencilStoreOp,a.depthStencilAttachment.stencilClearValue=o.stencilClearValue)}else a.depthStencilAttachment={...o};t.layerDescriptors.push(a)}}_updateDepthLayerDescriptors(e,t,n){for(let s=0;s<n.length;s++){const o=t.layerDescriptors[s];if(o.depthStencilAttachment){const t=o.depthStencilAttachment;e.depth&&(e.clearDepth?(t.depthClearValue=e.clearDepthValue,t.depthLoadOp=N.Clear):t.depthLoadOp=N.Load),e.stencil&&(e.clearStencil?(t.stencilClearValue=e.clearStencilValue,t.stencilLoadOp=N.Clear):t.stencilLoadOp=N.Load)}}}finishRender(e){const t=this.get(e),n=e.occlusionQueryCount;t.renderBundles.length>0&&t.currentPass.executeBundles(t.renderBundles),n>t.occlusionQueryIndex&&t.currentPass.endOcclusionQuery();const s=t.encoder;if(this._isRenderCameraDepthArray(e)===!0){{const n=[];for(let e=0;e<t.bundleEncoders.length;e++){const s=t.bundleEncoders[e];n.push(s.finish())}for(let o=0;o<t.layerDescriptors.length;o++)if(o<n.length){const a=t.layerDescriptors[o],i=s.beginRenderPass(a);if(e.viewport){const{x:t,y:n,width:s,height:o,minDepth:a,maxDepth:r}=e.viewportValue;i.setViewport(t,n,s,o,a,r)}if(e.scissor){const{x:t,y:n,width:s,height:o}=e.scissorValue;i.setScissorRect(t,n,s,o)}i.executeBundles([n[o]]),i.end()}}}else t.currentPass&&t.currentPass.end();if(n>0){const s=n*8;let o=this.occludedResolveCache.get(s);o===0[0]&&(o=this.device.createBuffer({size:s,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.occludedResolveCache.set(s,o));const i=this.device.createBuffer({size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});t.encoder.resolveQuerySet(t.occlusionQuerySet,0,n,o,0),t.encoder.copyBufferToBuffer(o,0,i,0,s),t.occlusionQueryBuffer=i,this.resolveOccludedAsync(e)}if(this.device.queue.submit([t.encoder.finish()]),e.textures!==null){const t=e.textures;for(let e=0;e<t.length;e++){const n=t[e];n.generateMipmaps===!0&&this.textureUtils.generateMipmaps(n)}}}isOccluded(e,t){const n=this.get(e);return n.occluded&&n.occluded.has(t)}async resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueryBuffer:n,currentOcclusionQueryObjects:s}=t;if(n&&s){const e=new WeakSet;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueryBuffer=null,await n.mapAsync(GPUMapMode.READ);const o=n.getMappedRange(),i=new BigUint64Array(o);for(let t=0;t<s.length;t++)i[t]===BigInt(0)&&e.add(s[t]);n.destroy(),t.occluded=e}}updateViewport(e){const{currentPass:t}=this.get(e),{x:n,y:s,width:o,height:i,minDepth:a,maxDepth:r}=e.viewportValue;t.setViewport(n,s,o,i,a,r)}getClearColor(){const e=super.getClearColor();return this.renderer.alpha===!0&&(e.r*=e.a,e.g*=e.a,e.b*=e.a),e}clear(e,t,n,s=null){const d=this.device,i=this.renderer;let c=[],o,l,a,r;if(e){const e=this.getClearColor();l={r:e.r,g:e.g,b:e.b,a:e.a}}if(s===null){a=i.depth,r=i.stencil;const t=this._getDefaultRenderPassDescriptor();if(e){c=t.colorAttachments;const e=c[0];e.clearValue=l,e.loadOp=N.Clear,e.storeOp=Ne.Store}(a||r)&&(o=t.depthStencilAttachment)}else{a=s.depth,r=s.stencil;const d={loadOp:e?N.Clear:N.Load,clearValue:e?l:0[0]};a&&(d.depthLoadOp=t?N.Clear:N.Load,d.depthClearValue=t?i.getClearDepth():0[0],d.depthStoreOp=Ne.Store),r&&(d.stencilLoadOp=n?N.Clear:N.Load,d.stencilClearValue=n?i.getClearStencil():0[0],d.stencilStoreOp=Ne.Store);const u=this._getRenderPassDescriptor(s,d);c=u.colorAttachments,o=u.depthStencilAttachment}a&&o&&(t?(o.depthLoadOp=N.Clear,o.depthClearValue=i.getClearDepth(),o.depthStoreOp=Ne.Store):(o.depthLoadOp=N.Load,o.depthStoreOp=Ne.Store)),r&&o&&(n?(o.stencilLoadOp=N.Clear,o.stencilClearValue=i.getClearStencil(),o.stencilStoreOp=Ne.Store):(o.stencilLoadOp=N.Load,o.stencilStoreOp=Ne.Store));const u=d.createCommandEncoder({label:"clear"}),h=u.beginRenderPass({colorAttachments:c,depthStencilAttachment:o});h.end(),d.queue.submit([u.finish()])}beginCompute(e){const t=this.get(e);t.frameCalls=this.renderer.info.compute.frameCalls;const n={label:"computeGroup_"+e.id};this.initTimestampQuery(Pi.COMPUTE,this.getTimestampUID(e),n),t.cmdEncoderGPU=this.device.createCommandEncoder({label:"computeGroup_"+e.id}),t.passEncoderGPU=t.cmdEncoderGPU.beginComputePass(n)}compute(e,t,n,s,o=null){const a=this.get(t),{passEncoderGPU:r}=this.get(e),c=this.get(s).pipeline;this.pipelineUtils.setPipeline(r,c);for(let e=0,t=n.length;e<t;e++){const s=n[e],o=this.get(s);r.setBindGroup(e,o.group)}let i;if(o===null&&(o=t.count),typeof o=="number"){const e=o;if(a.dispatchSize===0[0]||a.count!==e){a.dispatchSize=[0,1,1],a.count=e;const s=t.workgroupSize;let r=s[0];for(let e=1;e<s.length;e++)r*=s[e];const n=Math.ceil(e/r),o=this.device.limits.maxComputeWorkgroupsPerDimension;i=[n,1,1],n>o&&(i[0]=Math.min(n,o),i[1]=Math.ceil(n/o)),a.dispatchSize=i}i=a.dispatchSize}else i=o;r.dispatchWorkgroups(i[0],i[1]||1,i[2]||1)}finishCompute(e){const t=this.get(e);t.passEncoderGPU.end(),this.device.queue.submit([t.cmdEncoderGPU.finish()])}async waitForGPU(){await this.device.queue.onSubmittedWorkDone()}draw(e,t){const{object:s,material:i,context:a,pipeline:h}=e,l=e.getBindings(),n=this.get(a),d=this.get(h).pipeline,o=e.getIndex(),r=o!==null,c=e.getDrawParameters();if(c===null)return;const m=(t,s)=>{this.pipelineUtils.setPipeline(t,d),s.pipeline=d;const c=s.bindingGroups;for(let n=0,s=l.length;n<s;n++){const e=l[n],o=this.get(e);c[e.index]!==e.id&&(t.setBindGroup(e.index,o.group),c[e.index]=e.id)}if(r===!0&&s.index!==o){const e=this.get(o).buffer,n=o.array instanceof Uint16Array?di.Uint16:di.Uint32;t.setIndexBuffer(e,n),s.index=o}const u=e.getVertexBuffers();for(let e=0,o=u.length;e<o;e++){const n=u[e];if(s.attributes[e]!==n){const o=this.get(n).buffer;t.setVertexBuffer(e,o),s.attributes[e]=n}}a.stencil===!0&&i.stencilWrite===!0&&n.currentStencilRef!==i.stencilRef&&(t.setStencilReference(i.stencilRef),n.currentStencilRef=i.stencilRef)},u=(n,i)=>{if(m(n,i),s.isBatchedMesh===!0){const a=s._multiDrawStarts,e=s._multiDrawCounts,c=s._multiDrawCount,i=s._multiDrawInstances;i!==null&&gt("THREE.WebGPUBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.");for(let l=0;l<c;l++){const d=i?i[l]:1,u=d>1?0:l;r===!0?n.drawIndexed(e[l],d,a[l]/o.array.BYTES_PER_ELEMENT,0,u):n.draw(e[l],d,a[l],u),t.update(s,e[l],d)}}else if(r===!0){const{vertexCount:o,instanceCount:i,firstVertex:r}=c,a=e.getIndirect();if(a!==null){const e=this.get(a).buffer;n.drawIndexedIndirect(e,0)}else n.drawIndexed(o,i,r,0,0);t.update(s,o,i)}else{const{vertexCount:o,instanceCount:i,firstVertex:r}=c,a=e.getIndirect();if(a!==null){const e=this.get(a).buffer;n.drawIndirect(e,0)}else n.draw(o,i,r,0);t.update(s,o,i)}};if(e.camera.isArrayCamera&&e.camera.cameras.length>0){{const t=this.get(e.camera),i=e.camera.cameras,o=e.getBindingGroup("cameraIndex");if(t.indexesGPU===0[0]||t.indexesGPU.length!==i.length){const s=this.get(o),e=[],n=new Uint32Array([0,0,0,0]);for(let t=0,o=i.length;t<o;t++){n[0]=t;const a=this.bindingUtils.createBindGroupIndex(n,s.layout);e.push(a)}t.indexesGPU=e}const r=this.renderer.getPixelRatio();for(let e=0,l=i.length;e<l;e++){const c=i[e];if(s.layers.test(c.layers)){const s=c.viewport;let i=n.currentPass,l=n.currentSets;if(n.bundleEncoders){const t=n.bundleEncoders[e],s=n.bundleSets[e];i=t,l=s}s&&i.setViewport(Math.floor(s.x*r),Math.floor(s.y*r),Math.floor(s.width*r),Math.floor(s.height*r),a.viewportValue.minDepth,a.viewportValue.maxDepth),o&&t.indexesGPU&&(i.setBindGroup(o.index,t.indexesGPU[e]),l.bindingGroups[o.index]=o.id),u(i,l)}}}}else if(n.currentPass){if(n.occlusionQuerySet!==0[0]){const e=n.lastOcclusionObject;e!==s&&(e!==null&&e.occlusionTest===!0&&(n.currentPass.endOcclusionQuery(),n.occlusionQueryIndex++),s.occlusionTest===!0&&(n.currentPass.beginOcclusionQuery(n.occlusionQueryIndex),n.occlusionQueryObjects[n.occlusionQueryIndex]=s),n.lastOcclusionObject=s)}u(n.currentPass,n.currentSets)}}needsRenderUpdate(e){const t=this.get(e),{object:d,material:n}=e,s=this.utils,o=s.getSampleCountRenderContext(e.context),i=s.getCurrentColorSpace(e.context),a=s.getCurrentColorFormat(e.context),r=s.getCurrentDepthStencilFormat(e.context),c=s.getPrimitiveTopology(d,n);let l=!1;return(t.material!==n||t.materialVersion!==n.version||t.transparent!==n.transparent||t.blending!==n.blending||t.premultipliedAlpha!==n.premultipliedAlpha||t.blendSrc!==n.blendSrc||t.blendDst!==n.blendDst||t.blendEquation!==n.blendEquation||t.blendSrcAlpha!==n.blendSrcAlpha||t.blendDstAlpha!==n.blendDstAlpha||t.blendEquationAlpha!==n.blendEquationAlpha||t.colorWrite!==n.colorWrite||t.depthWrite!==n.depthWrite||t.depthTest!==n.depthTest||t.depthFunc!==n.depthFunc||t.stencilWrite!==n.stencilWrite||t.stencilFunc!==n.stencilFunc||t.stencilFail!==n.stencilFail||t.stencilZFail!==n.stencilZFail||t.stencilZPass!==n.stencilZPass||t.stencilFuncMask!==n.stencilFuncMask||t.stencilWriteMask!==n.stencilWriteMask||t.side!==n.side||t.alphaToCoverage!==n.alphaToCoverage||t.sampleCount!==o||t.colorSpace!==i||t.colorFormat!==a||t.depthStencilFormat!==r||t.primitiveTopology!==c||t.clippingContextCacheKey!==e.clippingContextCacheKey)&&(t.material=n,t.materialVersion=n.version,t.transparent=n.transparent,t.blending=n.blending,t.premultipliedAlpha=n.premultipliedAlpha,t.blendSrc=n.blendSrc,t.blendDst=n.blendDst,t.blendEquation=n.blendEquation,t.blendSrcAlpha=n.blendSrcAlpha,t.blendDstAlpha=n.blendDstAlpha,t.blendEquationAlpha=n.blendEquationAlpha,t.colorWrite=n.colorWrite,t.depthWrite=n.depthWrite,t.depthTest=n.depthTest,t.depthFunc=n.depthFunc,t.stencilWrite=n.stencilWrite,t.stencilFunc=n.stencilFunc,t.stencilFail=n.stencilFail,t.stencilZFail=n.stencilZFail,t.stencilZPass=n.stencilZPass,t.stencilFuncMask=n.stencilFuncMask,t.stencilWriteMask=n.stencilWriteMask,t.side=n.side,t.alphaToCoverage=n.alphaToCoverage,t.sampleCount=o,t.colorSpace=i,t.colorFormat=a,t.depthStencilFormat=r,t.primitiveTopology=c,t.clippingContextCacheKey=e.clippingContextCacheKey,l=!0),l}getRenderCacheKey(e){const{object:o,material:t}=e,n=this.utils,s=e.context,i=o.isMesh&&o.matrixWorld.determinant()<0;return[t.transparent,t.blending,t.premultipliedAlpha,t.blendSrc,t.blendDst,t.blendEquation,t.blendSrcAlpha,t.blendDstAlpha,t.blendEquationAlpha,t.colorWrite,t.depthWrite,t.depthTest,t.depthFunc,t.stencilWrite,t.stencilFunc,t.stencilFail,t.stencilZFail,t.stencilZPass,t.stencilFuncMask,t.stencilWriteMask,t.side,i,n.getSampleCountRenderContext(s),n.getCurrentColorSpace(s),n.getCurrentColorFormat(s),n.getCurrentDepthStencilFormat(s),n.getPrimitiveTopology(o,t),e.getGeometryCacheKey(),e.clippingContextCacheKey].join()}createSampler(e){this.textureUtils.createSampler(e)}destroySampler(e){this.textureUtils.destroySampler(e)}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}async copyTextureToBuffer(e,t,n,s,o,i){return this.textureUtils.copyTextureToBuffer(e,t,n,s,o,i)}initTimestampQuery(e,t,n){if(!this.trackTimestamp)return;this.timestampQueryPool[e]||(this.timestampQueryPool[e]=new $E(this.device,e,2048));const s=this.timestampQueryPool[e],o=s.allocateQueriesForContext(t);n.timestampWrites={querySet:s.querySet,beginningOfPassWriteIndex:o,endOfPassWriteIndex:o+1}}createNodeBuilder(e,t){return new US(e,t)}createProgram(e){const t=this.get(e);t.module={module:this.device.createShaderModule({code:e.code,label:e.stage+(e.name!==""?`_${e.name}`:"")}),entryPoint:"main"}}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){this.pipelineUtils.createRenderPipeline(e,t)}createComputePipeline(e,t){this.pipelineUtils.createComputePipeline(e,t)}beginBundle(e){const t=this.get(e);t._currentPass=t.currentPass,t._currentSets=t.currentSets,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.currentPass=this.pipelineUtils.createBundleEncoder(e)}finishBundle(e,t){const n=this.get(e),s=n.currentPass,o=s.finish();this.get(t).bundleGPU=o,n.currentSets=n._currentSets,n.currentPass=n._currentPass}addBundle(e,t){const n=this.get(e);n.renderBundles.push(this.get(t).bundleGPU)}createBindings(e,t,n,s){this.bindingUtils.createBindings(e,t,n,s)}updateBindings(e,t,n,s){this.bindingUtils.createBindings(e,t,n,s)}updateBinding(e){this.bindingUtils.updateBinding(e)}createIndexAttribute(e){let t=GPUBufferUsage.INDEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST;(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute)&&(t|=GPUBufferUsage.STORAGE),this.attributeUtils.createAttribute(e,t)}createAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createIndirectStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.INDIRECT|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}updateSize(){this.colorBuffer=this.textureUtils.getColorBuffer(),this.defaultRenderPassdescriptor=null}getMaxAnisotropy(){return 16}hasFeature(e){return this.device.features.has(e)}copyTextureToTexture(e,t,n=null,s=null,o=0,i=0){let u=0,h=0,m=0,a=0,r=0,f=0,c=e.image.width,l=e.image.height,d=1;n!==null&&(n.isBox3===!0?(a=n.min.x,r=n.min.y,f=n.min.z,c=n.max.x-n.min.x,l=n.max.y-n.min.y,d=n.max.z-n.min.z):(a=n.min.x,r=n.min.y,c=n.max.x-n.min.x,l=n.max.y-n.min.y,d=1)),s!==null&&(u=s.x,h=s.y,m=s.z||0);const p=this.device.createCommandEncoder({label:"copyTextureToTexture_"+e.id+"_"+t.id}),g=this.get(e).texture,v=this.get(t).texture;p.copyTextureToTexture({texture:g,mipLevel:o,origin:{x:a,y:r,z:f}},{texture:v,mipLevel:i,origin:{x:u,y:h,z:m}},[c,l,d]),this.device.queue.submit([p.finish()]),i===0&&t.generateMipmaps&&this.textureUtils.generateMipmaps(t)}copyFramebufferToTexture(e,t,n){const s=this.get(t);let o=null;t.renderTarget?e.isDepthTexture?o=this.get(t.depthTexture).texture:o=this.get(t.textures[0]).texture:e.isDepthTexture?o=this.textureUtils.getDepthBuffer(t.depth,t.stencil):o=this.context.getCurrentTexture();const a=this.get(e).texture;if(o.format!==a.format){console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.",o.format,a.format);return}let i;if(s.currentPass?(s.currentPass.end(),i=s.encoder):i=this.device.createCommandEncoder({label:"copyFramebufferToTexture_"+e.id}),i.copyTextureToTexture({texture:o,origin:[n.x,n.y,0]},{texture:a},[n.z,n.w]),s.currentPass){{const{descriptor:e}=s;for(let t=0;t<e.colorAttachments.length;t++)e.colorAttachments[t].loadOp=N.Load;if(t.depth&&(e.depthStencilAttachment.depthLoadOp=N.Load),t.stencil&&(e.depthStencilAttachment.stencilLoadOp=N.Load),s.currentPass=i.beginRenderPass(e),s.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.viewport&&this.updateViewport(t),t.scissor){const{x:e,y:n,width:o,height:i}=t.scissorValue;s.currentPass.setScissorRect(e,n,o,i)}}}else this.device.queue.submit([i.finish()]);e.generateMipmaps&&this.textureUtils.generateMipmaps(e)}},HC=VE,EC=class extends HC{async init(t){await super.init(t);const n=this.parameters;let s;if(n.device===0[0]){const o={powerPreference:n.powerPreference},e=await navigator.gpu.requestAdapter(o);if(e===null)throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");const i=Object.values(ec),t=[];for(const n of i)e.features.has(n)&&t.push(n);const a={requiredFeatures:t,requiredLimits:n.requiredLimits};s=await e.requestDevice(a)}else s=n.device;const o=n.context!==0[0]?n.context:t.domElement.getContext("webgpu");this.device=s,this.context=o;const i=n.alpha?"premultiplied":"opaque";this.context.configure({device:this.device,format:e.BGRA8Unorm,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:i,colorSpace:"rec2100-hlg",colorMetadata:{mode:"extended"}}),this.updateSize()}},CC=EC,OC=class extends Mk{constructor(e={}){let t;e.forceWebGL?t=z3:g8.isAvailable()?t=CC:(t=z3,console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend."));const n=new t(e);super(n,e),this.isWebGPURenderer=!0}},wC=OC;function K(e,t){let s=e.length;Array.isArray(e[0])||(e=[e]),Array.isArray(t[0])||(t=t.map(e=>[e]));let o=t[0].length,i=t[0].map((e,n)=>t.map(e=>e[n])),n=e.map(e=>i.map(t=>{let n=0;if(!Array.isArray(e)){for(let s of t)n+=e*s;return n}for(let s=0;s<e.length;s++)n+=e[s]*(t[s]||0);return n}));return s===1&&(n=n[0]),o===1?n.map(e=>e[0]):n}function uc(e){return Ps(e)==="string"}function Ps(e){let t=Object.prototype.toString.call(e);return(t.match(/^\[object\s+(.*?)\]$/)[1]||"").toLowerCase()}function l4(e,{precision:t,unit:n}){return Ts(e)?"none":oC(e,t)+(n??"")}function Ts(e){return Number.isNaN(e)||e instanceof Number&&e?.none}function ae(e){return Ts(e)?0:e}function oC(e,t){if(e===0)return 0;let n=~~e,s=0;n&&t&&(s=~~Math.log10(Math.abs(n))+1);const o=10**(t-s);return Math.floor(e*o+.5)/o}nC={deg:1,grad:.9,rad:180/Math.PI,turn:360};function tC(e){if(!e)return;e=e.trim();const n=/^([a-z]+)\((.+?)\)$/i,s=/^-?[\d.]+$/,o=/%|deg|g?rad|turn$/,i=/\/?\s*(none|[-\w.]+(?:%|deg|g?rad|turn)?)/g;let t=e.match(n);if(t){let e=[];return t[2].replace(i,(t,n)=>{let a=n.match(o),i=n;if(a){let e=a[0],t=i.slice(0,-e.length);e==="%"?(i=new Number(t/100),i.type="<percentage>"):(i=new Number(t*nC[e]),i.type="<angle>",i.unit=e)}else s.test(i)?(i=new Number(i),i.type="<number>"):i==="none"&&(i=new Number(NaN),i.none=!0);t.startsWith("/")&&(i=i instanceof Number?i:new Number(i),i.alpha=!0),typeof i=="object"&&i instanceof Number&&(i.raw=n),e.push(i)}),{name:t[1].toLowerCase(),rawName:t[1],rawArgs:t[2],args:e}}}function eC(e){return e[e.length-1]}function wc(e,t,n){return isNaN(e)?t:isNaN(t)?e:e+(t-e)*n}function Qx(e,t,n){return(n-e)/(t-e)}function J4(e,t,n){return wc(t[0],t[1],Qx(e[0],e[1],n))}function Ux(e){return e.map(e=>e.split("|").map(e=>{e=e.trim();let t=e.match(/^(<[a-z]+>)\[(-?[.\d]+),\s*(-?[.\d]+)\]?$/);if(t){let e=new String(t[1]);return e.range=[+t[2],+t[3]],e}return e}))}function $x(e,t,n){return Math.max(Math.min(n,t),e)}function c4(e,t){return Math.sign(e)===Math.sign(t)?e:-e}function Fn(e,t){return c4((e<0?-e:e)**t,e)}function t0(e,t){return t===0?0:e/t}function Tx(e,t,n=0,s=e.length){for(;n<s;){const o=n+s>>1;e[o]<t?n=o+1:s=o}return n}Fx=Object.freeze({__proto__:null,bisectLeft:Tx,clamp:$x,copySign:c4,interpolate:wc,interpolateInv:Qx,isNone:Ts,isString:uc,last:eC,mapRange:J4,multiplyMatrices:K,parseCoordGrammar:Ux,parseFunction:tC,serializeNumber:l4,skipNone:ae,spow:Fn,toPrecision:oC,type:Ps,zdiv:t0}),Mx=class{add(e,t,n){if(typeof arguments[0]!="string"){for(var e in arguments[0])this.add(e,arguments[0][e],arguments[1]);return}(Array.isArray(e)?e:[e]).forEach(function(e){this[e]=this[e]||[],t&&this[e][n?"unshift":"push"](t)},this)}run(e,t){this[e]=this[e]||[],this[e].forEach(function(e){e.call(t&&t.context?t.context:t,t)})}},cs=new Mx,Xe={gamut_mapping:"css",precision:5,deltaE:"76",verbose:globalThis?.process?.env?.NODE_ENV?.toLowerCase()!=="test",warn:function(t){this.verbose&&globalThis?.console?.warn?.(t)}},Pe={D50:[.3457/.3585,1,(1-.3457-.3585)/.3585],D65:[.3127/.329,1,(1-.3127-.329)/.329]};function n0(e){return Array.isArray(e)?e:Pe[e]}function r4(e,t,n,s={}){if(e=n0(e),t=n0(t),!e||!t)throw new TypeError(`Missing white point to convert ${e?"":"from"}${!e&&!t?"/":""}${t?"":"to"}`);if(e===t)return n;let o={W1:e,W2:t,XYZ:n,options:s};if(cs.run("chromatic-adaptation-start",o),o.M||(o.W1===Pe.D65&&o.W2===Pe.D50?o.M=[[1.0479297925449969,.022946870601609652,-.05019226628920524],[.02962780877005599,.9904344267538799,-.017073799063418826],[-.009243040646204504,.015055191490298152,.7518742814281371]]:o.W1===Pe.D50&&o.W2===Pe.D65&&(o.M=[[.955473421488075,-.02309845494876471,.06325924320057072],[-.0283697093338637,1.0099953980813041,.021041441191917323],[.012314014864481998,-.020507649298898964,1.330365926242124]])),cs.run("chromatic-adaptation-end",o),o.M)return K(o.M,o.XYZ);throw new TypeError("Only Bradford CAT with white points D50 and D65 supported for now.")}xx=new Set(["<number>","<percentage>","<angle>"]);function wx(e,t,n,s){let o=Object.entries(e.coords).map(([e,o],i)=>{let d=t.coordGrammar[i],r=s[i],c=r?.type,a;if(r.none?a=d.find(e=>xx.has(e)):a=d.find(e=>e==c),!a){let t=o.name||e;throw new TypeError(`${c??r.raw} not allowed for ${t} in ${n}()`)}let l=a.range;c==="<percentage>"&&(l||=[0,1]);let u=o.range||o.refRange;return l&&u&&(s[i]=J4(l,u,s[i])),a});return o}function _x(e,{meta:t}={}){let n={str:String(e)?.trim()};if(cs.run("parse-start",n),n.color)return n.color;if(n.parsed=tC(n.str),n.parsed){{let e=n.parsed.name;if(e==="color"){let e=n.parsed.args.shift(),s=e.startsWith("--")?e.substring(2):`--${e}`,o=[e,s],r=n.parsed.rawArgs.indexOf("/")>0?n.parsed.args.pop():1;for(let i of p.all){let s=i.getFormat("color");if(s&&(o.includes(s.id)||s.ids?.filter(e=>o.includes(e)).length)){const o=Object.keys(i.coords).map((e,t)=>n.parsed.args[t]||0);let a;return s.coordGrammar&&(a=wx(i,s,"color",o)),t&&Object.assign(t,{formatId:"color",types:a}),s.id.startsWith("--")&&!e.startsWith("--")&&Xe.warn(`${i.name} is a non-standard space and not currently supported in the CSS spec. Use prefixed color(${s.id}) instead of color(${e}).`),e.startsWith("--")&&!s.id.startsWith("--")&&Xe.warn(`${i.name} is a standard space and supported in the CSS spec. Use color(${s.id}) instead of prefixed color(${e}).`),{spaceId:i.id,coords:o,alpha:r}}}let i="",a=e in p.registry?e:s;if(a in p.registry){let e=p.registry[a].formats?.color?.id;e&&(i=`Did you mean color(${e})?`)}throw new TypeError(`Cannot parse color(${e}). `+(i||"Missing a plugin?"))}for(let o of p.all){let s=o.getFormat(e);if(s&&s.type==="function"){let i=1;(s.lastAlpha||eC(n.parsed.args).alpha)&&(i=n.parsed.args.pop());let a=n.parsed.args,r;return s.coordGrammar&&(r=wx(o,s,e,a)),t&&Object.assign(t,{formatId:s.name,types:r}),{spaceId:o.id,coords:a,alpha:i}}}}}else for(let e of p.all)for(let i in e.formats){let s=e.formats[i];if(s.type!=="custom")continue;if(s.test&&!s.test(n.str))continue;let o=s.parse(n.str);if(o)return o.alpha??=1,t&&(t.formatId=i),o}throw new TypeError(`Could not parse ${e} as a color. Missing a plugin?`)}function _(e){if(Array.isArray(e))return e.map(_);if(!e)throw new TypeError("Empty color reference");uc(e)&&(e=_x(e));let t=e.space||e.spaceId;return t instanceof p||(e.space=p.get(t)),e.alpha===0[0]&&(e.alpha=1),e}vx=75e-6,p=class _ColorSpace{constructor(e){this.id=e.id,this.name=e.name,this.base=e.base?_ColorSpace.get(e.base):null,this.aliases=e.aliases,this.base&&(this.fromBase=e.fromBase,this.toBase=e.toBase);let t=e.coords??this.base.coords;for(let e in t)"name"in t[e]||(t[e].name=e);this.coords=t;let n=e.white??this.base.white??"D65";this.white=n0(n),this.formats=e.formats??{};for(let e in this.formats){let t=this.formats[e];t.type||="function",t.name||=e}this.formats.color?.id||(this.formats.color={...this.formats.color??{},id:e.cssId||this.id}),e.gamutSpace?this.gamutSpace=e.gamutSpace==="self"?this:_ColorSpace.get(e.gamutSpace):this.isPolar?this.gamutSpace=this.base:this.gamutSpace=this,this.gamutSpace.isUnbounded&&(this.inGamut=()=>!0),this.referred=e.referred,Object.defineProperty(this,"path",{value:$M(this).reverse(),writable:!1,enumerable:!0,configurable:!0}),cs.run("colorspace-init-end",this)}inGamut(e,{epsilon:t=vx}={}){if(!this.equals(this.gamutSpace))return e=this.to(this.gamutSpace,e),this.gamutSpace.inGamut(e,{epsilon:t});let n=Object.values(this.coords);return e.every((e,s)=>{let o=n[s];if(o.type!=="angle"&&o.range){if(Number.isNaN(e))return!0;let[n,s]=o.range;return(n===0[0]||e>=n-t)&&(s===0[0]||e<=s+t)}return!0})}get isUnbounded(){return Object.values(this.coords).every(e=>!("range"in e))}get cssId(){return this.formats?.color?.id||this.id}get isPolar(){for(let e in this.coords)if(this.coords[e].type==="angle")return!0;return!1}getFormat(e){if(typeof e=="object")return e=px(e,this),e;let t;return e==="default"?t=Object.values(this.formats)[0]:t=this.formats[e],t?(t=px(t,this),t):null}equals(e){return!!e&&(this===e||this.id===e||this.id===e.id)}to(e,t){if(arguments.length===1){const n=_(e);[e,t]=[n.space,n.coords]}if(e=_ColorSpace.get(e),this.equals(e))return t;t=t.map(e=>Number.isNaN(e)?0:e);let n=this.path,s=e.path,i,o;for(let e=0;e<n.length;e++)if(n[e].equals(s[e]))i=n[e],o=e;else break;if(!i)throw new Error(`Cannot convert between color spaces ${this} and ${e}: no connection space was found`);for(let e=n.length-1;e>o;e--)t=n[e].toBase(t);for(let e=o+1;e<s.length;e++)t=s[e].fromBase(t);return t}from(e,t){if(arguments.length===1){const n=_(e);[e,t]=[n.space,n.coords]}return e=_ColorSpace.get(e),e.to(this,t)}toString(){return`${this.name} (${this.id})`}getMinCoords(){let e=[];for(let n in this.coords){let t=this.coords[n],s=t.range||t.refRange;e.push(s?.min??0)}return e}static registry={};static get all(){return[...new Set(Object.values(_ColorSpace.registry))]}static register(e,t){if(arguments.length===1&&(t=arguments[0],e=t.id),t=this.get(t),this.registry[e]&&this.registry[e]!==t)throw new Error(`Duplicate color space registration: '${e}'`);if(this.registry[e]=t,arguments.length===1&&t.aliases)for(let e of t.aliases)this.register(e,t);return t}static get(e,...t){if(!e||e instanceof _ColorSpace)return e;let n=Ps(e);if(n==="string"){let t=_ColorSpace.registry[e.toLowerCase()];if(!t)throw new TypeError(`No color space found with id = "${e}"`);return t}if(t.length)return _ColorSpace.get(...t);throw new TypeError(`${e} is not a valid color space`)}static resolveCoord(e,t){let o=Ps(e),n,s;if(o==="string"?e.includes(".")?[n,s]=e.split("."):[n,s]=[,e]:Array.isArray(e)?[n,s]=e:(n=e.space,s=e.coordId),n=_ColorSpace.get(n),n||(n=t),!n)throw new TypeError(`Cannot resolve coordinate reference ${e}: No color space specified and relative references are not allowed here`);if(o=Ps(s),o==="number"||o==="string"&&s>=0){let e=Object.entries(n.coords)[s];if(e)return{space:n,id:e[0],index:s,...e[1]}}n=_ColorSpace.get(n);let i=s.toLowerCase(),a=0;for(let e in n.coords){let t=n.coords[e];if(e.toLowerCase()===i||t.name?.toLowerCase()===i)return{space:n,id:e,index:a,...t};a++}throw new TypeError(`No "${s}" coordinate found in ${n.name}. Its coordinates are: ${Object.keys(n.coords).join(", ")}`)}static DEFAULT_FORMAT={type:"functions",name:"color"}};function $M(e){let t=[e];for(let n=e;n=n.base;)t.push(n);return t}function px(e,{coords:t}={}){if(e.coords&&!e.coordGrammar){e.type||="function",e.name||="color",e.coordGrammar=Ux(e.coords);let n=Object.entries(t).map(([t,n],s)=>{let o=e.coordGrammar[s][0],r=n.range||n.refRange,a=o.range,i="";return o=="<percentage>"?(a=[0,100],i="%"):o=="<angle>"&&(i="deg"),{fromRange:r,toRange:a,suffix:i}});e.serializeCoords=(e,t)=>e.map((e,s)=>{let{fromRange:o,toRange:i,suffix:a}=n[s];return o&&i&&(e=J4(o,i,e)),e=l4(e,{precision:t,unit:a}),e})}return e}_e=new p({id:"xyz-d65",name:"XYZ D65",coords:{x:{name:"X"},y:{name:"Y"},z:{name:"Z"}},white:"D65",formats:{color:{ids:["xyz-d65","xyz"]}},aliases:["xyz"]}),Ve=class extends p{constructor(e){e.coords||(e.coords={r:{range:[0,1],name:"Red"},g:{range:[0,1],name:"Green"},b:{range:[0,1],name:"Blue"}}),e.base||(e.base=_e),e.toXYZ_M&&e.fromXYZ_M&&(e.toBase??=t=>{let n=K(e.toXYZ_M,t);return this.white!==this.base.white&&(n=r4(this.white,this.base.white,n)),n},e.fromBase??=t=>(t=r4(this.base.white,this.white,t),K(e.fromXYZ_M,t))),e.referred??="display",super(e)}};function qc(e,t){return e=_(e),!t||e.space.equals(t)?e.coords.slice():(t=p.get(t),t.from(e))}function _t(e,t){e=_(e);let{space:n,index:s}=p.resolveCoord(t,e.space),o=qc(e,n);return o[s]}function o0(e,t,n){return e=_(e),t=p.get(t),e.coords=t.to(e.space,n),e}o0.returns="color";function hs(e,t,n){if(e=_(e),arguments.length===2&&Ps(arguments[1])==="object"){let t=arguments[1];for(let n in t)hs(e,n,t[n])}else{typeof n=="function"&&(n=n(_t(e,t)));let{space:s,index:i}=p.resolveCoord(t,e.space),o=qc(e,s);o[i]=n,o0(e,s,o)}return e}hs.returns="color",i4=new p({id:"xyz-d50",name:"XYZ D50",white:"D50",base:_e,fromBase:e=>r4(_e.white,"D50",e),toBase:e=>r4("D50",_e.white,e)}),ZO=216/24389,a0=24/116,Xc=24389/27,s4=Pe.D50,Ge=new p({id:"lab",name:"Lab",coords:{l:{refRange:[0,100],name:"Lightness"},a:{refRange:[-125,125]},b:{refRange:[-125,125]}},white:s4,base:i4,fromBase(e){let n=e.map((e,t)=>e/s4[t]),t=n.map(e=>e>ZO?Math.cbrt(e):(Xc*e+16)/116);return[116*t[1]-16,500*(t[0]-t[1]),200*(t[1]-t[2])]},toBase(e){let t=[];t[1]=(e[0]+16)/116,t[0]=e[1]/500+t[1],t[2]=t[1]-e[2]/200;let n=[t[0]>a0?t[0]**3:(116*t[0]-16)/Xc,e[0]>8?((e[0]+16)/116)**3:e[0]/Xc,t[2]>a0?t[2]**3:(116*t[2]-16)/Xc];return n.map((e,t)=>e*s4[t])},formats:{lab:{coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}});function pn(e){return(e%360+360)%360}function oF(e,t){if(e==="raw")return t;let[s,o]=t.map(pn),n=o-s;return e==="increasing"?n<0&&(o+=360):e==="decreasing"?n>0&&(s+=360):e==="longer"?-180<n&&n<180&&(n>0?s+=360:o+=360):e==="shorter"&&(n>180?s+=360:n<-180&&(o+=360)),[s,o]}Fa=new p({id:"lch",name:"LCH",coords:{l:{refRange:[0,100],name:"Lightness"},c:{refRange:[0,150],name:"Chroma"},h:{refRange:[0,360],type:"angle",name:"Hue"}},base:Ge,fromBase(e){let[i,t,n]=e,s;const o=.02;return(t<0?-t:t)<o&&(n<0?-n:n)<o?s=NaN:s=Math.atan2(n,t)*180/Math.PI,[i,(t**2+n**2)**.5,pn(s)]},toBase(e){let[s,t,n]=e;return t<0&&(t=0),isNaN(n)&&(n=0),[s,t*Math.cos(n*Math.PI/180),t*Math.sin(n*Math.PI/180)]},formats:{lch:{coords:["<number> | <percentage>","<number> | <percentage>","<number> | <angle>"]}}}),c0=25**7,sl=Math.PI,l0=180/sl,Ui=sl/180;function AO(e){const t=e*e,n=t*t*t*e;return n}function kO(e,t,{kL:n=1,kC:s=1,kH:o=1}={}){[e,t]=_([e,t]);let[w,A,p]=Ge.from(e),x=Fa.from(Ge,[w,A,p])[1],[v,z,g]=Ge.from(t),O=Fa.from(Ge,[v,z,g])[1];x<0&&(x=0),O<0&&(O=0);let R=(x+O)/2,C=AO(R),F=.5*(1-(C/(C+c0))**.5),j=(1+F)*A,b=(1+F)*z,r=(j**2+p**2)**.5,m=(b**2+g**2)**.5,h=j===0&&p===0?0:Math.atan2(p,j),u=b===0&&g===0?0:Math.atan2(g,b);h<0&&(h+=2*sl),u<0&&(u+=2*sl),h*=l0,u*=l0;let V=v-w,M=m-r,a=u-h,c=h+u,k=a<0?-a:a,d;r*m===0?d=0:k<=180?d=a:a>180?d=a-360:a<-180?d=a+360:Xe.warn("the unthinkable has happened");let S=2*(m*r)**.5*Math.sin(d*Ui/2),P=(w+v)/2,y=(r+m)/2,T=AO(y),i;r*m===0?i=c:k<=180?i=c/2:c<360?i=(c+360)/2:i=(c-360)/2;let D=(P-50)**2,L=1+.015*D/(20+D)**.5,N=1+.045*y,l=1;l-=.17*Math.cos((i-30)*Ui),l+=.24*Math.cos(2*i*Ui),l+=.32*Math.cos((3*i+6)*Ui),l-=.2*Math.cos((4*i-63)*Ui);let E=1+.015*y*l,H=30*Math.exp(-1*((i-275)/25)**2),I=2*(T/(T+c0))**.5,B=-1*Math.sin(2*H*Ui)*I,f=(V/(n*L))**2;return f+=(M/(s*N))**2,f+=(S/(o*E))**2,f+=B*(M/(s*N))*(S/(o*E)),f**.5}OO=[[.819022437996703,.3619062600528904,-.1288737815209879],[.0329836539323885,.9292868615863434,.0361446663506424],[.0481771893596242,.2642395317527308,.6335478284694309]],bO=[[1.2268798758459243,-.5578149944602171,.2813910456659647],[-.0405757452148008,1.112286803280317,-.0717110580655164],[-.0763729366746601,-.4214933324022432,1.5869240198367816]],uO=[[.210454268309314,.7936177747023054,-.0040720430116193],[1.9779985324311684,-2.42859224204858,.450593709617411],[.0259040424655478,.7827717124575296,-.8086757549230774]],rO=[[1,.3963377773761749,.2158037573099136],[1,-.1055613458156586,-.0638541728258133],[1,-.0894841775298119,-1.2914855480194092]],Ki=new p({id:"oklab",name:"Oklab",coords:{l:{refRange:[0,1],name:"Lightness"},a:{refRange:[-.4,.4]},b:{refRange:[-.4,.4]}},white:"D65",base:_e,fromBase(e){let t=K(OO,e),n=t.map(e=>Math.cbrt(e));return K(uO,n)},toBase(e){let t=K(rO,e),n=t.map(e=>e**3);return K(bO,n)},formats:{oklab:{coords:["<percentage> | <number>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}});function d0(e,t){[e,t]=_([e,t]);let[n,s,o]=Ki.from(e),[i,a,r]=Ki.from(t),c=n-i,l=s-a,d=o-r;return(c**2+l**2+d**2)**.5}oO=75e-6;function qi(e,t,{epsilon:n=oO}={}){e=_(e),t||(t=e.space),t=p.get(t);let s=e.coords;return t!==e.space&&(s=t.from(e)),t.inGamut(s,{epsilon:n})}function Oa(e){return{space:e.space,coords:e.coords.slice(),alpha:e.alpha}}function qw(e,t,n="lab"){n=p.get(n);let s=n.from(e),o=n.from(t);return s.reduce((e,t,n)=>{let s=o[n];return isNaN(t)||isNaN(s)?e:e+(s-t)**2},0)**.5}function wF(e,t){return qw(e,t,"lab")}Ww=Math.PI,u0=Ww/180;function CF(e,t,{l:n=2,c:s=1}={}){[e,t]=_([e,t]);let[a,m,u]=Ge.from(e),[,o,i]=Fa.from(Ge,[a,m,u]),[f,h,v]=Ge.from(t),r=Fa.from(Ge,[f,h,v])[1];o<0&&(o=0),r<0&&(r=0);let C=a-f,d=o-r,O=m-h,w=u-v,y=O**2+w**2-d**2,b=.511;a>=16&&(b=.040975*a/(1+.01765*a));let j=.0638*o/(1+.0131*o)+.638,l;Number.isNaN(i)&&(i=0),i>=164&&i<=345?l=.56+Math.abs(.2*Math.cos((i+168)*u0)):l=.36+Math.abs(.4*Math.cos((i+35)*u0));let g=o**4,p=(g/(g+1900))**.5,x=j*(p*l+1-p),c=(C/(n*b))**2;return c+=(d/(s*j))**2,c+=y/x**2,c**.5}h0=203,n4=new p({id:"xyz-abs-d65",cssId:"--xyz-abs-d65",name:"Absolute XYZ D65",coords:{x:{refRange:[0,9504.7],name:"Xa"},y:{refRange:[0,1e4],name:"Ya"},z:{refRange:[0,10888.3],name:"Za"}},base:_e,fromBase(e){return e.map(e=>Math.max(e*h0,0))},toBase(e){return e.map(e=>Math.max(e/h0,0))}}),wl=1.15,Ol=.66,p0=2610/2**14,Rw=2**14/2610,g0=3424/2**12,b0=2413/2**7,j0=2392/2**7,Nw=1.7*2523/2**5,x0=2**5/(1.7*2523),Fl=-.56,K1=16295499532821565e-27,Fw=[[.41478972,.579999,.014648],[-.20151,1.120649,.0531008],[-.0166008,.2648,.6684799]],Mw=[[1.9242264357876067,-1.0047923125953657,.037651404030618],[.35031676209499907,.7264811939316552,-.06538442294808501],[-.09098281098284752,-.3127282905230739,1.5227665613052603]],Sw=[[.5,.5,0],[3.524,-4.066708,.542708],[.199076,1.096799,-1.295875]],Aw=[[1,.1386050432715393,.05804731615611886],[.9999999999999999,-.1386050432715393,-.05804731615611886],[.9999999999999998,-.09601924202631895,-.8118918960560388]],S0=new p({id:"jzazbz",name:"Jzazbz",coords:{jz:{refRange:[0,1],name:"Jz"},az:{refRange:[-.5,.5]},bz:{refRange:[-.5,.5]}},base:n4,fromBase(e){let[t,o,n]=e,i=wl*t-(wl-1)*n,a=Ol*o-(Ol-1)*t,r=K(Fw,[i,a,n]),c=r.map(function(e){let t=g0+b0*(e/1e4)**p0,n=1+j0*(e/1e4)**p0;return(t/n)**Nw}),[s,l,d]=K(Sw,c),u=(1+Fl)*s/(1+Fl*s)-K1;return[u,l,d]},toBase(e){let[t,o,i]=e,a=(t+K1)/(1+Fl-Fl*(t+K1)),r=K(Aw,[a,o,i]),c=r.map(function(e){let t=g0-e**x0,n=j0*e**x0-b0,s=1e4*(t/n)**Rw;return s}),[l,d,n]=K(Mw,c),s=(l+(wl-1)*n)/wl,u=(d+(Ol-1)*s)/Ol;return[s,u,n]},formats:{color:{coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}}),W1=new p({id:"jzczhz",name:"JzCzHz",coords:{jz:{refRange:[0,1],name:"Jz"},cz:{refRange:[0,1],name:"Chroma"},hz:{refRange:[0,360],type:"angle",name:"Hue"}},base:S0,fromBase(e){let[i,t,n]=e,s;const o=2e-4;return(t<0?-t:t)<o&&(n<0?-n:n)<o?s=NaN:s=Math.atan2(n,t)*180/Math.PI,[i,(t**2+n**2)**.5,pn(s)]},toBase(e){return[e[0],e[1]*Math.cos(e[2]*Math.PI/180),e[1]*Math.sin(e[2]*Math.PI/180)]}});function UF(e,t){[e,t]=_([e,t]);let[a,o,n]=W1.from(e),[r,i,s]=W1.from(t),c=a-r,l=o-i;Number.isNaN(n)&&Number.isNaN(s)?(n=0,s=0):Number.isNaN(n)?n=s:Number.isNaN(s)&&(s=n);let d=n-s,u=2*(o*i)**.5*Math.sin(d/2*(Math.PI/180));return(c**2+l**2+u**2)**.5}R0=3424/4096,B0=2413/128,y4=2392/128,$0=2610/16384,yw=2523/32,jw=16384/2610,W0=32/2523,vw=[[.3592832590121217,.6976051147779502,-.035891593232029],[-.1920808463704993,1.100476797037432,.0753748658519118],[.0070797844607479,.0748396662186362,.8433265453898765]],gw=[[2048/4096,2048/4096,0],[6610/4096,-13613/4096,7003/4096],[17933/4096,-17390/4096,-543/4096]],pw=[[.9999999999999998,.0086090370379328,.111029625003026],[.9999999999999998,-.0086090370379328,-.1110296250030259],[.9999999999999998,.5600313357106791,-.3206271749873188]],hw=[[2.0701522183894223,-1.3263473389671563,.2066510476294053],[.3647385209748072,.6805660249472273,-.0453045459220347],[-.0497472075358123,-.0492609666966131,1.1880659249923042]],I1=new p({id:"ictcp",name:"ICTCP",coords:{i:{refRange:[0,1],name:"I"},ct:{refRange:[-.5,.5],name:"CT"},cp:{refRange:[-.5,.5],name:"CP"}},base:n4,fromBase(e){let t=K(vw,e);return oT(t)},toBase(e){let t=iT(e);return K(hw,t)}});function oT(e){let t=e.map(function(e){let t=R0+B0*(e/1e4)**$0,n=1+y4*(e/1e4)**$0;return(t/n)**yw});return K(gw,t)}function iT(e){let t=K(pw,e),n=t.map(function(e){let t=Math.max(e**W0-R0,0),n=B0-y4*e**W0;return 1e4*(t/n)**jw});return n}function aT(e,t){[e,t]=_([e,t]);let[n,s,o]=I1.from(e),[i,a,r]=I1.from(t);return 720*((n-i)**2+.25*(s-a)**2+(o-r)**2)**.5}cw=Pe.D65,e2=.42,t2=1/e2,L1=2*Math.PI,j2=[[.401288,.650173,-.051461],[-.250268,1.204414,.045854],[-.002079,.048952,.953127]],I_=[[1.8620678550872327,-1.0112546305316843,.14918677544445175],[.38752654323613717,.6214474419314753,-.008973985167612518],[-.015841498849333856,-.03412293802851557,1.0499644368778496]],L_=[[460,451,288],[460,-891,-261],[460,-220,-6300]],N_={dark:[.8,.525,.8],dim:[.9,.59,.9],average:[1,.69,1]},ks={h:[20.14,90,164.25,237.53,380.14],e:[.8,.7,1,1.2,.8],H:[0,100,200,300,400]},T_=180/Math.PI,y2=Math.PI/180;function A_(e,t){const n=e.map(e=>{const n=Fn(t*(e<0?-e:e)*.01,e2);return 400*c4(n,e)/(n+27.13)});return n}function jT(e,t){const n=100/t*27.13**t2;return e.map(e=>{const t=e<0?-e:e;return c4(n*Fn(t/(400-t),t2),e)})}function yT(e){let t=pn(e);t<=ks.h[0]&&(t+=360);const n=Tx(ks.h,t)-1,[o,i]=ks.h.slice(n,n+2),[a,r]=ks.e.slice(n,n+2),c=ks.H[n],s=(t-o)/a;return c+100*s/(s+(i-t)/r)}function _T(e){let t=(e%400+400)%400;const n=Math.floor(.01*t);t=t%100;const[o,a]=ks.h.slice(n,n+2),[i,s]=ks.e.slice(n,n+2);return pn((t*(s*o-i*a)-100*o*s)/(t*(s-i)-100*s))}function g_(e,t,n,s,o){const i={};i.discounting=o,i.refWhite=e,i.surround=s;const c=e.map(e=>e*100);i.la=t,i.yb=n;const l=c[1],d=K(j2,c);s=N_[i.surround];const u=s[0];i.c=s[1],i.nc=s[2];const h=1/(5*i.la+1),a=h**4;i.fl=a*i.la+.1*(1-a)*(1-a)*Math.cbrt(5*i.la),i.flRoot=i.fl**.25,i.n=i.yb/l,i.z=1.48+i.n**.5,i.nbb=.725*i.n**-.2,i.ncb=i.nbb;const m=Math.max(Math.min(u*(1-1/3.6*Math.exp((-i.la-42)/92)),1),0);i.dRgb=d.map(e=>wc(1,l/e,m)),i.dRgbInv=i.dRgb.map(e=>1/e);const f=d.map((e,t)=>e*i.dRgb[t]),r=A_(f,i.fl);return i.aW=i.nbb*(2*r[0]+r[1]+.05*r[2]),i}w2=g_(cw,64/Math.PI*.2,20,"average",!1);function O2(e,t){if(!(e.J!==0[0]^e.Q!==0[0]))throw new Error("Conversion requires one and only one: 'J' or 'Q'");if(!(e.C!==0[0]^e.M!==0[0]^e.s!==0[0]))throw new Error("Conversion requires one and only one: 'C', 'M' or 's'");if(!(e.h!==0[0]^e.H!==0[0]))throw new Error("Conversion requires one and only one: 'h' or 'H'");if(e.J===0||e.Q===0)return[0,0,0];let s=0;e.h!==0[0]?s=pn(e.h)*y2:s=_T(e.H)*y2;const c=Math.cos(s),a=Math.sin(s);let n=0;e.J!==0[0]?n=Fn(e.J,1/2)*.1:e.Q!==0[0]&&(n=.25*t.c*e.Q/((t.aW+4)*t.flRoot));let o=0;e.C!==0[0]?o=e.C/n:e.M!==0[0]?o=e.M/t.flRoot/n:e.s!==0[0]&&(o=4e-4*e.s**2*(t.aW+4)/t.c);const r=Fn(o*(1.64-.29**t.n)**-.73,10/9),d=.25*(Math.cos(s+2)+3.8),u=t.aW*Fn(n,2/t.c/t.z),h=5e4/13*t.nc*t.ncb*d,i=u/t.nbb,l=23*(i+.305)*t0(r,23*h+r*(11*c+108*a)),m=l*c,f=l*a,p=jT(K(L_,[i,m,f]).map(e=>e*1/1403),t.fl);return K(I_,p.map((e,n)=>e*t.dRgbInv[n])).map(e=>e/100)}function m_(e,t){const f=e.map(e=>e*100),n=A_(K(j2,f).map((e,n)=>e*t.dRgb[n]),t.fl),i=n[0]+(-12*n[1]+n[2])/11,c=(n[0]+n[1]-2*n[2])/9,a=(Math.atan2(c,i)%L1+L1)%L1,g=.25*(Math.cos(a+2)+3.8),d=5e4/13*t.nc*t.ncb*t0(g*(i**2+c**2)**.5,n[0]+n[1]+1.05*n[2]+.305),l=Fn(d,.9)*(1.64-.29**t.n)**.73,u=t.nbb*(2*n[0]+n[1]+.05*n[2]),s=Fn(u/t.aW,.5*t.c*t.z),h=100*Fn(s,2),m=4/t.c*s*(t.aW+4)*t.flRoot,o=l*s,p=o*t.flRoot,r=pn(a*T_),v=yT(r),b=50*Fn(t.c*l/(t.aW+4),1/2);return{J:h,C:o,h:r,s:b,Q:m,M:p,H:v}}h_=new p({id:"cam16-jmh",cssId:"--cam16-jmh",name:"CAM16-JMh",coords:{j:{refRange:[0,100],name:"J"},m:{refRange:[0,105],name:"Colorfulness"},h:{refRange:[0,360],type:"angle",name:"Hue"}},base:_e,fromBase(e){const t=m_(e,w2);return[t.J,t.M,t.h]},toBase(e){return O2({J:e[0],M:e[1],h:e[2]},w2)}}),u_=Pe.D65,d_=216/24389,C2=24389/27;function MT(e){const t=e>d_?Math.cbrt(e):(C2*e+16)/116;return 116*t-16}function L2(e){return e>8?((e+16)/116)**3:e/C2}function TT(e,t){let[i,a,n]=e,o=[],s=0;if(n===0)return[0,0,0];let r=L2(n);n>0?s=.00379058511492914*n**2+.608983189401032*n+.9155088574762233:s=9514440756550361e-21*n**2+.08693057439788597*n-21.928975842194614;const d=2e-12,u=15;let c=0,l=1/0;for(;c<=u;){o=O2({J:s,C:a,h:i},t);const e=Math.abs(o[1]-r);if(e<l){if(e<=d)return o;l=e}s=s-(o[1]-r)*s/(2*o[1]),c+=1}return O2({J:s,C:a,h:i},t)}function zT(e){const n=MT(e[1]);if(n===0)return[0,0,0];const s=m_(e,f1);return[pn(s.h),s.C,n]}f1=g_(u_,200/Math.PI*L2(50),L2(50)*100,"average",!1),Wa=new p({id:"hct",name:"HCT",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},c:{refRange:[0,145],name:"Colorfulness"},t:{refRange:[0,100],name:"Tone"}},base:_e,fromBase(e){return zT(e)},toBase(e){return TT(e,f1)},formats:{color:{id:"--hct",coords:["<number> | <angle>","<percentage> | <number>","<percentage> | <number>"]}}}),r_=Math.PI/180,W2=[1,.007,.0228];function i_(e){e[1]<0&&(e=Wa.fromBase(Wa.toBase(e)));const t=Math.log(Math.max(1+W2[2]*e[1]*f1.flRoot,1))/W2[2],n=e[0]*r_,s=t*Math.cos(n),o=t*Math.sin(n);return[e[2],s,o]}function HT(e,t){[e,t]=_([e,t]);let[n,s,o]=i_(Wa.from(e)),[i,a,r]=i_(Wa.from(t));return((n-i)**2+(s-a)**2+(o-r)**2)**.5}_o={deltaE76:wF,deltaECMC:CF,deltaE2000:kO,deltaEJz:UF,deltaEITP:aT,deltaEOK:d0,deltaEHCT:HT};function BT(e){const t=e?Math.floor(Math.log10(e<0?-e:e)):0;return Math.max(parseFloat(`1e${t-2}`),1e-6)}M3={hct:{method:"hct.c",jnd:2,deltaEMethod:"hct",blackWhiteClamp:{}},"hct-tonal":{method:"hct.c",jnd:0,deltaEMethod:"hct",blackWhiteClamp:{channel:"hct.t",min:0,max:100}}};function no(e,{method:t=Xe.gamut_mapping,space:n=0[0],deltaEMethod:s="",jnd:o=2,blackWhiteClamp:i={}}={}){if(e=_(e),uc(arguments[1])?n=arguments[1]:n||(n=e.space),n=p.get(n),qi(e,n,{epsilon:0}))return e;let a;if(t==="css")a=UT(e,{space:n});else{if(t!=="clip"&&!qi(e,n)){Object.prototype.hasOwnProperty.call(M3,t)&&({method:t,jnd:o,deltaEMethod:s,blackWhiteClamp:i}=M3[t]);let r=kO;if(s!=="")for(let e in _o)if("deltae"+s.toLowerCase()===e.toLowerCase()){r=_o[e];break}let c=no(q(e,n),{method:"clip",space:n});if(r(e,c)>o){if(Object.keys(i).length===3){let n=p.resolveCoord(i.channel),t=_t(q(e,n.space),n.id);if(Ts(t)&&(t=0),t>=i.max)return q({space:"xyz-d65",coords:Pe.D65},e.space);if(t<=i.min)return q({space:"xyz-d65",coords:[0,0,0]},e.space)}let c=p.resolveCoord(t),m=c.space,l=c.id,s=q(e,m);s.coords.forEach((e,t)=>{Ts(e)&&(s.coords[t]=0)});let f=c.range||c.refRange,g=f[0],h=BT(o),d=g,u=_t(s,l);for(;u-d>h;){let e=Oa(s);e=no(e,{space:n,method:"clip"});let t=r(s,e);t-o<h?d=_t(s,l):u=_t(s,l),hs(s,l,(d+u)/2)}a=q(s,n)}else a=c}else a=q(e,n);if(t==="clip"||!qi(a,n,{epsilon:0})){let e=Object.values(n.coords).map(e=>e.range||[]);a.coords=a.coords.map((t,n)=>{let[s,o]=e[n];return s!==0[0]&&(t=Math.max(s,t)),o!==0[0]&&(t=Math.min(t,o)),t})}}return n!==e.space&&(a=q(a,e.space)),e.coords=a.coords,e}no.returns="color",T3={WHITE:{space:Ki,coords:[1,0,0]},BLACK:{space:Ki,coords:[0,0,0]}};function UT(e,{space:t}={}){const r=.02,l=1e-4;e=_(e),t||(t=e.space),t=p.get(t);const m=p.get("oklch");if(t.isUnbounded)return q(e,t);const s=q(e,m);let d=s.coords[0];if(d>=1){const n=q(T3.WHITE,t);return n.alpha=e.alpha,q(n,t)}if(d<=0){const n=q(T3.BLACK,t);return n.alpha=e.alpha,q(n,t)}if(qi(s,t,{epsilon:0}))return q(s,t);function u(e){const n=q(e,t),s=Object.values(t.coords);return n.coords=n.coords.map((e,t)=>{if("range"in s[t]){const[n,o]=s[t].range;return $x(n,e,o)}return e}),n}let i=0,c=s.coords[1],h=!0,n=Oa(s),o=u(n),a=d0(o,n);if(a<r)return o;for(;c-i>l;){const e=(i+c)/2;if(n.coords[1]=e,h&&qi(n,t,{epsilon:0}))i=e;else if(o=u(n),a=d0(o,n),a<r){if(r-a<l)break;h=!1,i=e}else c=e}return o}function q(e,t,{inGamut:n}={}){e=_(e),t=p.get(t);let o=t.from(e),s={space:t,coords:o,alpha:e.alpha};return n&&(s=no(s,n===!0?0[0]:n)),s}q.returns="color";function yc(e,{precision:t=Xe.precision,format:n="default",inGamut:s=!0,...o}={}){let a;e=_(e);let r=n;n=e.space.getFormat(n)??e.space.getFormat("default")??p.DEFAULT_FORMAT;let i=e.coords.slice();if(s||=n.toGamut,s&&!qi(e)&&(i=no(Oa(e),s===!0?0[0]:s).coords),n.type==="custom")if(o.precision=t,n.serialize)a=n.serialize(i,e.alpha,o);else throw new TypeError(`format ${r} can only be used to parse colors, not for serialization`);else{let o=n.name||"color";n.serializeCoords?i=n.serializeCoords(i,t):t!==null&&(i=i.map(e=>l4(e,{precision:t})));let r=[...i];if(o==="color"){let t=n.id||n.ids?.[0]||e.space.id;r.unshift(t)}let s=e.alpha;t!==null&&(s=l4(s,{precision:t}));let c=e.alpha>=1||n.noAlpha?"":`${n.commas?",":" /"} ${s}`;a=`${o}(${r.join(n.commas?", ":" ")}${c})`}return a}if(By=[[.6369580483012914,.14461690358620832,.1688809751641721],[.2627002120112671,.6779980715188708,.05930171646986196],[0,.028072693049087428,1.060985057710791]],Hy=[[1.716651187971268,-.355670783776392,-.25336628137366],[-.666684351832489,1.616481236634939,.0157685458139111],[.017639857445311,-.042770613257809,.942103121235474]],vc=new Ve({id:"rec2020-linear",cssId:"--rec2020-linear",name:"Linear REC.2020",white:"D65",toXYZ_M:By,fromXYZ_M:Hy}),Dr=1.09929682680944,q3=.018053968510807,ih=new Ve({id:"rec2020",name:"REC.2020",base:vc,toBase(e){return e.map(function(e){return e<q3*4.5?e/4.5:((e+Dr-1)/Dr)**(1/.45)})},fromBase(e){return e.map(function(e){return e>=q3?Dr*e**.45-(Dr-1):4.5*e})}}),Sy=[[.4865709486482162,.26566769316909306,.1982172852343625],[.2289745640697488,.6917385218365064,.079286914093745],[0,.04511338185890264,1.043944368900976]],xy=[[2.493496911941425,-.9313836179191239,-.40271078445071684],[-.8294889695615747,1.7626640603183463,.023624685841943577],[.03584583024378447,-.07617238926804182,.9568845240076872]],dh=new Ve({id:"p3-linear",cssId:"--display-p3-linear",name:"Linear P3",white:"D65",toXYZ_M:Sy,fromXYZ_M:xy}),yy=[[.41239079926595934,.357584339383878,.1804807884018343],[.21263900587151027,.715168678767756,.07219231536073371],[.01933081871559182,.11919477979462598,.9505321522496607]],ce=[[3.2409699419045226,-1.537383177570094,-.4986107602930034],[-.9692436362808796,1.8759675015077202,.04155505740717559],[.05563007969699366,-.20397695888897652,1.0569715142428786]],hh=new Ve({id:"srgb-linear",name:"Linear sRGB",white:"D65",toXYZ_M:yy,fromXYZ_M:ce}),ph={aliceblue:[240/255,248/255,1],antiquewhite:[250/255,235/255,215/255],aqua:[0,1,1],aquamarine:[127/255,1,212/255],azure:[240/255,1,1],beige:[245/255,245/255,220/255],bisque:[1,228/255,196/255],black:[0,0,0],blanchedalmond:[1,235/255,205/255],blue:[0,0,1],blueviolet:[138/255,43/255,226/255],brown:[165/255,42/255,42/255],burlywood:[222/255,184/255,135/255],cadetblue:[95/255,158/255,160/255],chartreuse:[127/255,1,0],chocolate:[210/255,105/255,30/255],coral:[1,127/255,80/255],cornflowerblue:[100/255,149/255,237/255],cornsilk:[1,248/255,220/255],crimson:[220/255,20/255,60/255],cyan:[0,1,1],darkblue:[0,0,139/255],darkcyan:[0,139/255,139/255],darkgoldenrod:[184/255,134/255,11/255],darkgray:[169/255,169/255,169/255],darkgreen:[0,100/255,0],darkgrey:[169/255,169/255,169/255],darkkhaki:[189/255,183/255,107/255],darkmagenta:[139/255,0,139/255],darkolivegreen:[85/255,107/255,47/255],darkorange:[1,140/255,0],darkorchid:[153/255,50/255,204/255],darkred:[139/255,0,0],darksalmon:[233/255,150/255,122/255],darkseagreen:[143/255,188/255,143/255],darkslateblue:[72/255,61/255,139/255],darkslategray:[47/255,79/255,79/255],darkslategrey:[47/255,79/255,79/255],darkturquoise:[0,206/255,209/255],darkviolet:[148/255,0,211/255],deeppink:[1,20/255,147/255],deepskyblue:[0,191/255,1],dimgray:[105/255,105/255,105/255],dimgrey:[105/255,105/255,105/255],dodgerblue:[30/255,144/255,1],firebrick:[178/255,34/255,34/255],floralwhite:[1,250/255,240/255],forestgreen:[34/255,139/255,34/255],fuchsia:[1,0,1],gainsboro:[220/255,220/255,220/255],ghostwhite:[248/255,248/255,1],gold:[1,215/255,0],goldenrod:[218/255,165/255,32/255],gray:[128/255,128/255,128/255],green:[0,128/255,0],greenyellow:[173/255,1,47/255],grey:[128/255,128/255,128/255],honeydew:[240/255,1,240/255],hotpink:[1,105/255,180/255],indianred:[205/255,92/255,92/255],indigo:[75/255,0,130/255],ivory:[1,1,240/255],khaki:[240/255,230/255,140/255],lavender:[230/255,230/255,250/255],lavenderblush:[1,240/255,245/255],lawngreen:[124/255,252/255,0],lemonchiffon:[1,250/255,205/255],lightblue:[173/255,216/255,230/255],lightcoral:[240/255,128/255,128/255],lightcyan:[224/255,1,1],lightgoldenrodyellow:[250/255,250/255,210/255],lightgray:[211/255,211/255,211/255],lightgreen:[144/255,238/255,144/255],lightgrey:[211/255,211/255,211/255],lightpink:[1,182/255,193/255],lightsalmon:[1,160/255,122/255],lightseagreen:[32/255,178/255,170/255],lightskyblue:[135/255,206/255,250/255],lightslategray:[119/255,136/255,153/255],lightslategrey:[119/255,136/255,153/255],lightsteelblue:[176/255,196/255,222/255],lightyellow:[1,1,224/255],lime:[0,1,0],limegreen:[50/255,205/255,50/255],linen:[250/255,240/255,230/255],magenta:[1,0,1],maroon:[128/255,0,0],mediumaquamarine:[102/255,205/255,170/255],mediumblue:[0,0,205/255],mediumorchid:[186/255,85/255,211/255],mediumpurple:[147/255,112/255,219/255],mediumseagreen:[60/255,179/255,113/255],mediumslateblue:[123/255,104/255,238/255],mediumspringgreen:[0,250/255,154/255],mediumturquoise:[72/255,209/255,204/255],mediumvioletred:[199/255,21/255,133/255],midnightblue:[25/255,25/255,112/255],mintcream:[245/255,1,250/255],mistyrose:[1,228/255,225/255],moccasin:[1,228/255,181/255],navajowhite:[1,222/255,173/255],navy:[0,0,128/255],oldlace:[253/255,245/255,230/255],olive:[128/255,128/255,0],olivedrab:[107/255,142/255,35/255],orange:[1,165/255,0],orangered:[1,69/255,0],orchid:[218/255,112/255,214/255],palegoldenrod:[238/255,232/255,170/255],palegreen:[152/255,251/255,152/255],paleturquoise:[175/255,238/255,238/255],palevioletred:[219/255,112/255,147/255],papayawhip:[1,239/255,213/255],peachpuff:[1,218/255,185/255],peru:[205/255,133/255,63/255],pink:[1,192/255,203/255],plum:[221/255,160/255,221/255],powderblue:[176/255,224/255,230/255],purple:[128/255,0,128/255],rebeccapurple:[102/255,51/255,153/255],red:[1,0,0],rosybrown:[188/255,143/255,143/255],royalblue:[65/255,105/255,225/255],saddlebrown:[139/255,69/255,19/255],salmon:[250/255,128/255,114/255],sandybrown:[244/255,164/255,96/255],seagreen:[46/255,139/255,87/255],seashell:[1,245/255,238/255],sienna:[160/255,82/255,45/255],silver:[192/255,192/255,192/255],skyblue:[135/255,206/255,235/255],slateblue:[106/255,90/255,205/255],slategray:[112/255,128/255,144/255],slategrey:[112/255,128/255,144/255],snow:[1,250/255,250/255],springgreen:[0,1,127/255],steelblue:[70/255,130/255,180/255],tan:[210/255,180/255,140/255],teal:[0,128/255,128/255],thistle:[216/255,191/255,216/255],tomato:[1,99/255,71/255],turquoise:[64/255,224/255,208/255],violet:[238/255,130/255,238/255],wheat:[245/255,222/255,179/255],white:[1,1,1],whitesmoke:[245/255,245/255,245/255],yellow:[1,1,0],yellowgreen:[154/255,205/255,50/255]},vh=Array(3).fill("<percentage> | <number>[0, 255]"),Eh=Array(3).fill("<number>[0, 255]"),Qi=new Ve({id:"srgb",name:"sRGB",base:hh,fromBase:e=>e.map(e=>{let t=e<0?-1:1,n=e*t;return n>.0031308?t*(1.055*n**(1/2.4)-.055):12.92*e}),toBase:e=>e.map(e=>{let t=e<0?-1:1,n=e*t;return n<=.04045?e/12.92:t*((n+.055)/1.055)**2.4}),formats:{rgb:{coords:vh},rgb_number:{name:"rgb",commas:!0,coords:Eh,noAlpha:!0},color:{},rgba:{coords:vh,commas:!0,lastAlpha:!0},rgba_number:{name:"rgba",commas:!0,coords:Eh},hex:{type:"custom",toGamut:!0,test:e=>/^#([a-f0-9]{3,4}){1,2}$/i.test(e),parse(e){e.length<=5&&(e=e.replace(/[a-f0-9]/gi,"$&$&"));let t=[];return e.replace(/[a-f0-9]{2}/gi,e=>{t.push(parseInt(e,16)/255)}),{spaceId:"srgb",coords:t.slice(0,3),alpha:t.slice(3)[0]}},serialize:(e,t,{collapse:n=!0}={})=>{t<1&&e.push(t),e=e.map(e=>Math.round(e*255));let s=n&&e.every(e=>e%17===0),o=e.map(e=>s?(e/17).toString(16):e.toString(16).padStart(2,"0")).join("");return"#"+o}},keyword:{type:"custom",test:e=>/^[a-z]+$/i.test(e),parse(e){e=e.toLowerCase();let t={spaceId:"srgb",coords:null,alpha:1};if(e==="transparent"?(t.coords=ph.black,t.alpha=0):t.coords=ph[e],t.coords)return t}}}}),kh=new Ve({id:"p3",cssId:"display-p3",name:"P3",base:dh,fromBase:Qi.fromBase,toBase:Qi.toBase}),Xe.display_space=Qi,typeof CSS!="undefined"&&CSS.supports)for(let e of[Ge,ih,kh]){let t=e.getMinCoords(),n={space:e,coords:t,alpha:1},s=yc(n);if(CSS.supports("color",s)){Xe.display_space=e;break}}function hz(e,{space:t=Xe.display_space,...n}={}){let s=yc(e,n);if(typeof CSS=="undefined"||CSS.supports("color",s)||!Xe.display_space)s=new String(s),s.color=e;else{let o=e,i=e.coords.some(Ts)||Ts(e.alpha);if(i&&!(uz??=CSS.supports("color","hsl(none 50% 50%)"))&&(o=Oa(e),o.coords=o.coords.map(ae),o.alpha=ae(o.alpha),s=yc(o,n),CSS.supports("color",s)))return s=new String(s),s.color=o,s;o=q(o,t),s=new String(yc(o,n)),s.color=o}return s}function mz(e,t){return e=_(e),t=_(t),e.space===t.space&&e.alpha===t.alpha&&e.coords.every((e,n)=>e===t.coords[n])}function ao(e){return _t(e,[_e,"y"])}function dy(e,t){hs(e,[_e,"y"],t)}function gz(e){Object.defineProperty(e.prototype,"luminance",{get(){return ao(this)},set(e){dy(this,e)}})}ly=Object.freeze({__proto__:null,getLuminance:ao,register:gz,setLuminance:dy});function bz(e,t){e=_(e),t=_(t);let n=Math.max(ao(e),0),s=Math.max(ao(t),0);return s>n&&([n,s]=[s,n]),(n+.05)/(s+.05)}ry=.56,ny=.57,ty=.62,ey=.65,Ah=.022,Jj=1.414,Zj=.1,Qj=5e-4,Gj=1.14,Fh=.027,qj=1.14;function Kj(e){return e>=Ah?e:e+(Ah-e)**Jj}function fa(e){let t=e<0?-1:1,n=e<0?-e:e;return t*n**2.4}function Tz(e,t){t=_(t),e=_(e);let s,n,o,i,a,r;t=q(t,"srgb"),[i,a,r]=t.coords;let d=fa(i)*.2126729+fa(a)*.7151522+fa(r)*.072175;e=q(e,"srgb"),[i,a,r]=e.coords;let u=fa(i)*.2126729+fa(a)*.7151522+fa(r)*.072175,c=Kj(d),l=Kj(u),h=l>c;return Math.abs(l-c)<Qj?n=0:h?(s=l**ry-c**ny,n=s*Gj):(s=l**ey-c**ty,n=s*qj),(n<0?-n:n)<Zj?o=0:n>0?o=n-Fh:o=n+Fh,o*100}function zz(e,t){e=_(e),t=_(t);let n=Math.max(ao(e),0),s=Math.max(ao(t),0);s>n&&([n,s]=[s,n]);let o=n+s;return o===0?0:(n-s)/o}Wj=5e4;function Nz(e,t){e=_(e),t=_(t);let s=Math.max(ao(e),0),n=Math.max(ao(t),0);return n>s&&([s,n]=[n,s]),n===0?Wj:(s-n)/n}function Lz(e,t){e=_(e),t=_(t);let n=_t(e,[Ge,"l"]),s=_t(t,[Ge,"l"]);return Math.abs(n-s)}$j=216/24389,Dh=24/116,_l=24389/27,xu=Pe.D65,Ou=new p({id:"lab-d65",name:"Lab D65",coords:{l:{refRange:[0,100],name:"Lightness"},a:{refRange:[-125,125]},b:{refRange:[-125,125]}},white:xu,base:_e,fromBase(e){let n=e.map((e,t)=>e/xu[t]),t=n.map(e=>e>$j?Math.cbrt(e):(_l*e+16)/116);return[116*t[1]-16,500*(t[0]-t[1]),200*(t[1]-t[2])]},toBase(e){let t=[];t[1]=(e[0]+16)/116,t[0]=e[1]/500+t[1],t[2]=t[1]-e[2]/200;let n=[t[0]>Dh?t[0]**3:(116*t[0]-16)/_l,e[0]>8?((e[0]+16)/116)**3:e[0]/_l,t[2]>Dh?t[2]**3:(116*t[2]-16)/_l];return n.map((e,t)=>e*xu[t])},formats:{"lab-d65":{coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}}),wu=5**.5*.5+.5;function $z(e,t){e=_(e),t=_(t);let s=_t(e,[Ou,"l"]),o=_t(t,[Ou,"l"]),i=Math.abs(s**wu-o**wu),n=i**(1/wu)*Math.SQRT2-40;return n<7.5?0:n}nl=Object.freeze({__proto__:null,contrastAPCA:Tz,contrastDeltaPhi:$z,contrastLstar:Lz,contrastMichelson:zz,contrastWCAG21:bz,contrastWeber:Nz});function Uz(e,t,n={}){uc(n)&&(n={algorithm:n});let{algorithm:s,...o}=n;if(!s){let e=Object.keys(nl).map(e=>e.replace(/^contrast/,"")).join(", ");throw new TypeError(`contrast() function needs a contrast algorithm. Please specify one of: ${e}`)}e=_(e),t=_(t);for(let n in nl)if("contrast"+s.toLowerCase()===n.toLowerCase())return nl[n](e,t,o);throw new TypeError(`Unknown contrast algorithm: ${s}`)}function _u(e){let[t,n,o]=qc(e,_e),s=t+15*n+3*o;return[4*t/s,9*n/s]}function Pj(e){let[t,n,o]=qc(e,_e),s=t+n+o;return[t/s,n/s]}function Yz(e){Object.defineProperty(e.prototype,"uv",{get(){return _u(this)}}),Object.defineProperty(e.prototype,"xy",{get(){return Pj(this)}})}Rj=Object.freeze({__proto__:null,register:Yz,uv:_u,xy:Pj});function el(e,t,n={}){uc(n)&&(n={method:n});let{method:s=Xe.deltaE,...o}=n;for(let n in _o)if("deltae"+s.toLowerCase()===n.toLowerCase())return _o[n](e,t,o);throw new TypeError(`Unknown deltaE method: ${s}`)}function Qz(e,t=.25){let n=p.get("oklch","lch"),s=[n,"l"];return hs(e,s,e=>e*(1+t))}function Zz(e,t=.25){let n=p.get("oklch","lch"),s=[n,"l"];return hs(e,s,e=>e*(1-t))}Lj=Object.freeze({__proto__:null,darken:Zz,lighten:Qz});function pj(e,t,n=.5,s={}){[e,t]=[_(e),_(t)],Ps(n)==="object"&&([n,s]=[.5,n]);let o=zr(e,t,s);return o(n)}function fj(e,t,n={}){let o;Kh(e)&&([o,n]=[e,t],[e,t]=o.rangeArgs.colors);let{maxDeltaE:a,deltaEMethod:l,steps:c=2,maxSteps:r=1e3,...d}=n;o||([e,t]=[_(e),_(t)],o=zr(e,t,d));let u=el(e,t),i=a>0?Math.max(c,Math.ceil(u/a)+1):c,s=[];if(r!==0[0]&&(i=Math.min(i,r)),i===1)s=[{p:.5,color:o(.5)}];else{let e=1/(i-1);s=Array.from({length:i},(t,n)=>{let s=n*e;return{p:s,color:o(s)}})}if(a>0){let e=s.reduce((e,t,n)=>{if(n===0)return 0;let o=el(t.color,s[n-1].color,l);return Math.max(e,o)},0);for(;e>a;){e=0;for(let t=1;t<s.length&&s.length<r;t++){let i=s[t-1],a=s[t],n=(a.p+i.p)/2,c=o(n);e=Math.max(e,el(c,i.color),el(c,a.color)),s.splice(t,0,{p:n,color:o(n)}),t++}}}return s=s.map(e=>e.color),s}function zr(e,t,n={}){if(Kh(e)){let[n,s]=[e,t];return zr(...n.rangeArgs.colors,{...n.rangeArgs.options,...s})}let{space:s,outputSpace:o,progression:i,premultiplied:a}=n;e=_(e),t=_(t),e=Oa(e),t=Oa(t);let r={colors:[e,t],options:n};if(s?s=p.get(s):s=p.registry[Xe.interpolationSpace]||e.space,o=o?p.get(o):s,e=q(e,s),t=q(t,s),e=no(e),t=no(t),s.coords.h&&s.coords.h.type==="angle"){let r=n.hue=n.hue||"shorter",a=[s,"h"],[o,i]=[_t(e,a),_t(t,a)];isNaN(o)&&!isNaN(i)?o=i:isNaN(i)&&!isNaN(o)&&(i=o),[o,i]=oF(r,[o,i]),hs(e,a,o),hs(t,a,i)}return a&&(e.coords=e.coords.map(t=>t*e.alpha),t.coords=t.coords.map(e=>e*t.alpha)),Object.assign(n=>{n=i?i(n):n;let l=e.coords.map((e,s)=>{let o=t.coords[s];return wc(e,o,n)}),c=wc(e.alpha,t.alpha,n),r={space:s,coords:l,alpha:c};return a&&(r.coords=r.coords.map(e=>e/c)),o!==s&&(r=q(r,o)),r},{rangeArgs:r})}function Kh(e){return Ps(e)==="function"&&!!e.rangeArgs}Xe.interpolationSpace="lab";function oD(e){e.defineFunction("mix",pj,{returns:"color"}),e.defineFunction("range",zr,{returns:"function<color>"}),e.defineFunction("steps",fj,{returns:"array<color>"})}var q8,Hl,W8,Il,r6,fn,ot,B,Fe,Qe,rt,bo,wo,Oo,xo,Se,Vl,$l,T8,M8,Pn,ql,Jl,td,_a,wa,nd,ad,cd,ld,dd,c6,l6,d6,m6,Ma,Ta,za,ps,Da,Na,La,Ba,r8,tp,np,Ke,sp,lp,wp,Op,xp,Ap,Sp,Cd,Zt,Qt,Po,Ho,Cs,Es,$t,js,V,Ed,An,ie,Bo,Be,Y,Fs,Ns,St,ue,I,X,ht,Fc,Mc,dt,Ac,kc,Sd,sr,G,nt,tt,or,Yo,ur,Go,Fp,Xo,Xn,Un,qn,Wn,br,jr,_r,ia,ei,ti,oi,ai,ri,ci,li,ui,hi,mi,fi,pi,gi,vi,bi,Oi,xi,Ci,zd,Dd,Ei,ki,Si,zi,Tp,zp,Pd,Nm,$e,lt,Rs,Ni,c,Gp,Ds,Jp,eg,ng,Ng,g7,nv,pv,h9,cb,ub,fb,Cb,Hb,Xd,Qd,Jd,eu,Ic,ru,lu,du,uu,$c,Ri,Qh,Re,Os,Pi,fs,Ae,Gh,Ia,Ii,hy,w,po,t,Au,Oh,b,Su,gh,fh,mh,v,Pa,fy,wy,zu,My,Nu,Te,j,zs,Ss,Lu,Fy,Or,mn,Tt,Gr,wi,_i,yi,bs,Vn,Vs,Cr,Kr,Hr,xs,Ry,Mr,Bu,$r,Tn,Vu,Zr,rs,$u,tc,Wu,Py,W,Ko,Ft,Vy,$y,Jn,Ec,mt,H3,P3,Hn,R3,Gy,F3,Lo,_n,Gc,Ea,e_,s_,A3,E3,x3,O3,o_,jo,Yu,Sn,Et,Dn,Zu,gn,vo,fo,c3,e1,i1,a1,r1,l1,d1,ja,q2,Qn,bl,T,xe,a_,Do,sn,un,te,Tc,c_,Me,p1,g1,R2,Le,l_,pt,v1,Qo,at,wr,he,Cn,D2,As,Ir,T2,Pr,Rr,Lr,y1,Dc,k2,Lc,be,kr,M_,z_,B_,us,x1,ds,g2,f2,Ee,Mi,Fi,a2,oa,i2,hc,U_,Wc,Uc,n2,Ie,Z_,sw,lw,B1,bw,_w,Mn,mo,Ow,Al,Ml,rn,nn,xw,Cw,At,D0,Ew,U1,kw,Tw,zw,q1,E0,Dw,w0,Pw,Hw,Iw,Bw,Vw,$w,Yw,tO,iO,aO,NO,LO,IO,BO,VO,$O,WO,UO,KO,qO,ex,tx,nx,sx,ix,lx,mx,gx,bx,Cx,Ex,kx,Ax,Sx,zx,Nx,Vx,Yx,Jx,aC,lC,mC,bC,jC,yC,$k,$S,BS,IS,RS,LS,NS,zS,kS,OS,dS,lS,rS,G8,iS,oS,sS,nS,tS,eS,JA,ZA,QA,XA,GA,YA,qA,KA,UA,WA,$A,VA,BA,RA,DA,AA,CA,xA,OA,bA,vA,hA,dA,lA,aA,iA,oA,sA,tA,eA,Jk,Zk,Gk,qk,Ik,Rk,Nk,Tk,Ak,kk,Ek,Ck,xk,Ok,wk,uk,dk,lk,ak,ek,QE,GE,KE,UE,WE,LE,zE,TE,FE,SE,AE,kE,CE,OE,_E,oE,tE,YC,WC,RC,LC,TC,kC,vC,hC,uC,r,O,Yt,Jc,co,rC,To,cm,Hs,Zd,dm,Vd,Td,Fd,kd,ws,So,Jm,Zx,u8,S8,F8,V0,U8,$8,B8,P8,R8,D8,z8,Q_,X_,q_,Hd,ml,$_,V_,_m,ul,v_,t_,Zy,Ly,Dy,Ay,uy,ay,oy,Xj,Uj,Vj,Bj,Ij,Ks,Hj,Nj,p3,Wo,Uo,bc,Dj,Tj,i3,n3,e3,J2,Z2,X2,G2,fc,K2,$2,B2,I2,Sj,N2,kj,M2,ar,rr,w1,lc,Cj,xj,rc,wj,A1,d2,M1,l2,yj,mr,vr,N1,o2,s2,J0,hj,dj,U0,V1,lj,z0,Oe,It,k0,Y1,Zo,O0,Q1,uo,J1,xr,Ce,m0,Ar,Sr,k4,F,Gt,n,m4,T4,E,h4,R4,H4,I4,Ze,hr,ab,ib,Q9,Y9,d4,Ls,it,zn,En,Ct,Vc,Hi,Bi,Vi,ns,ts,ys,Ca,gl,vl,Xs,q9,ga,t4,Ut,On,e4,kl,Yn,X1,Sl,G1,da,D,Zi,Rt,K9,I9,$n,Yr,ut,N0,L0,Ll,H9,P9,I0,ea,Rn,cl,ka,z9,T9,q0,Y0,G0,X0,O9,$i,P1,je,Ht,bn,R1,vn,Di,Ti,r2,z1,F1,S1,k1,E1,C1,pr,p2,ls,Xr,z,ke,w9,_s,ji,ee,Ur,j9,Mt,b9,v9,j1,g9,wt,b1,ni,ct,cr,me,jc,H2,Bs,Sc,V2,Tr,il,hl,h1,yl,Y2,xl,El,t3,Kn,s3,o3,o1,t1,d9,He,l9,d3,u3,h3,c9,f3,dc,Qu,v3,Gu,r9,y3,_3,w3,o9,n9,qu,Ao,k3,ll,S3,Yv,Xa,Qa,kv,Ku,Ev,Cv,Gs,qs,xv,nc,Ov,V3,Wr,Vr,U3,Fr,sc,Iu,G3,Hu,Z3,J3,wv,_v,nh,sh,Du,ac,Qc,vv,Tu,tn,pa,dv,lv,cv,kt,Ji,wh,na,rv,sa,ta,Xi,av,xn,ev,G7,Gi,yn,Y7,Rh,Wi,q7,$7,yu,ju,$h,Wh,bu,H7,L7,Yh,Va,gu,N7,D7,Jh,T7,F7,qa,cu,A7,au,k7,su,E7,C7,w7,_7,y7,j7,b7,v7,U,KD,bm,p7,m7,h7,u7,d7,l7,c7,r7,a7,i7,X5,K5,U5,W5,$5,V5,B5,I5,P5,R5,L5,z5,F5,M5,j5,v5,p5,m5,l5,c5,r5,i5,o5,s5,n5,qg,Ig,Mg,Og,ug,dg,lg,ig,Qp,Xp,Yp,Kp,Wp,$p,Bp,Ip,Lp,Dp,yp,jp,bp,vp,pp,fp,mp,hp,up,ip,op,ep,J6,Q6,G6,Y6,q6,K6,U6,W6,$6,I6,N6,D6,z6,f6,i6,o6,s6,n6,t6,aS,X8,Q8,Z8,J8,ef,tf,nf,sf,af,rf,cf,lf,df,uf,hf,mf,ff,pf,gf,vf,bf,jf,yf,_f,wf,Of,xf,Cf,Ef,kf,Af,Sf,Mf,Ff,Tf,zf,Df,Nf,Lf,Rf,Pf,Hf,If,Bf,Vf,$f,Wf,Uf,Kf,qf,Yf,Gf,Xf,Qf,Zf,Jf,e6,l,S,K8,lo,go,kN,CN,xN,ON,wN,h6,A,p6,g6,v6,b6,j6,y6,_6,w6,O6,x6,C6,E6,k6,A6,S6,M6,F6,T6,V8,ra,I8,L6,R6,P6,H6,H8,B6,V6,vt,Co,L8,N8,Wl,Ul,os,X6,Kl,rp,cp,E8,Ql,x8,jl,w8,gp,le,Ye,P,rd,_p,fl,Np,g8,Rp,Pp,Hp,ln,Vp,hd,al,qp,d8,tg,sg,og,ho,ag,rg,cg,Bn,ft,ms,hg,mg,fg,pg,bg,jg,yg,_g,wg,s8,xg,Cg,Eg,kg,Ag,Sg,_d,Fg,Tg,zg,Dg,Pg,Hg,Ya,Bg,Vg,$g,Wg,Kg,Ga,Yg,Gg,Xg,Qg,Zg,Jg,e5,t5,xd,Nc,x,Vt,a5,Gm,Ym,$o,d5,u5,h5,m,f5,de,g5,yr,b5,$m,y5,_5,w5,O5,x5,C5,E5,k5,A5,S5,Nd,Bm,T5,cn,D5,N5,ss,Rd,H5,Lm,ir,Bt,qt,Kt,Mm,q5,Y5,G5,Sm,Q5,Z5,t7,n7,s7,o7,Am,Wd,Ud,Kd,pc,_c,wm,qd,se,f7,a,zc,Gd,Li,d,u,L,O7,x7,Hc,ou,yt,M7,g,ne,z7,pu,re,hn,R7,P7,h,I7,B7,V7,we,W7,U7,K7,Hh,$s,Eu,X7,Q7,Z7,J7,Th,tv,Mh,sv,ku,iv,oe,xh,jh,Dl,R,Yi,hv,pl,Yc,Pt,ch,Ha,bv,jv,yv,Q,gr,Ln,J,L3,Uu,_4,Av,Sv,Mv,Fv,Tv,zv,Dv,Nv,Lv,Rv,Pv,Hv,Iv,Bv,Vv,$v,Wv,Uv,Kv,qv,s,Gv,BD,Qv,Zv,Jv,e9,t9,ha,s9,ro,i9,a9,aa,m3,Ju,ua,ma,Q2,m9,f9,p9,F2,Lt,A2,_1,y9,_9,_2,Q0,x9,C9,E9,k9,A9,S9,M9,F9,K0,rl,D9,N9,L9,R9,$1,P0,F0,B9,V9,$9,W9,U9,M0,va,cc,G9,X9,lr,Z9,J9,eb,tb,nb,sb,ob,Nt,K4,rb,Qr,lb,P4,N4,b4,j4,pb,gb,vb,bb,Nr,yb,so,wb,Ob,xb,Pl,Eb,O4,Ab,x4,Mb,Fb,Tb,zb,Db,Nb,Lb,Rb,Pb,v4,Ib,E4,S4,$b,M4,Ub,Kb,qb,Yb,Gb,F4,Qb,Zb,D4,u4,si,nj,sj,oj,ij,aj,e0,cj,oo,ge,uj,H1,aD,tD,eD,gj,vj,bj,jj,T1,_j,to,Oj,m2,eo,Ej,z2,Aj,P2,Mj,Fj,wn,zj,gc,xc,Cc,De,qz,Vo,D3,N3,I3,Rz,Dz,B3,Us,Ms,Yj,Io,Ot,Ez,Pu,xz,wz,_z,yz,sy,Q3,iy,eh,th,oh,Ue,lh,uh,fe,_h,Ch,py,gy,Sh,Pc,jy,en,_y,Nh,Oy,xt,Cy,Ey,ky,Ph,ez,JT,ZT,Ty,zy,Ka,Ny,Ro,Vh,Uh,$a,Iy,Wt,zt,No,Wy,Uy,tl,qy,Yy,kn,Sa,Qy,tm,Jy,nm,sm,n_,VT,IT,YS,kD,gD,DT,FT,AT,kT,ET,CT,OT,p_,wT,im,iu,j_,am,__,w_,O_,x_,C_,E_,k_,Aa,S_,tu,F_,bt,lm,D_,Mo,um,R_,P_,fm,vm,Cm,Em,km,$d,Bd,Dm,Rm,Y_,G_,Pm,Ld,Vm,J_,ew,tw,nw,Wm,ow,iw,aw,rw,Um,i,dw,uw,nT,mw,fw,tT,eT,JF,ZF,QF,XF,GF,ww,YF,qF,KF,WF,$F,PT,BF,IF,HF,PF,RF,LF,NF,zF,FF,MF,SF,AF,kF,EF,xF,OF,Uw,Kw,xa,Km,Gw,Xw,Qw,Zw,Jw,eO,qm,nO,sO,Ad,Je,Xm,cO,lO,dO,Qm,hO,mO,fO,pO,gO,vO,gs,jO,yO,_O,wO,Od,xO,CO,EO,e8,n8,SO,MO,FO,TO,zO,DO,ko,jd,RO,PO,HO,o8,l8,iF,ya,pd,In,Y8,m8,YO,GO,XO,QO,Cl,JO,f8,p8,GM,YM,ox,ze,ax,rx,cx,KM,ux,hx,b8,fx,WM,dn,BM,$,jx,yx,od,ca,Ox,y8,_8,ed,Tl,Zl,zl,Xl,Nl,Yl,C8,Dx,O8,Lx,Rx,Px,Hx,Ix,Bx,sd,id,Wx,yo,v8,Ws,ud,Gx,h8,fd,yd,nu,io,zo,rm,sC,em,iC,hu,mu,cC,gC,Xh,_C,xC,cM,rM,Dt,AC,SC,MC,FC,vu,zC,DC,NC,Bh,Ua,PC,VC,$C,Ih,UC,KC,qC,Lh,GC,XC,QC,ZC,JC,eE,Cu,nE,sE,vs,iE,aE,rE,cE,lE,dE,uE,hE,mE,fE,pE,gE,vE,bE,jE,yE,zh,wE,Rc,xE,bh,EE,rh,X3,Y3,ME,W3,$3,C3,DE,NE,j3,RE,PE,HE,IE,BE,iM,oM,b3,on,Qs,qE,YE,Xu,XE,g3,ZE,JE,er,tk,nk,sk,ok,ik,tr,rk,ck,nr,l3,r3,hk,_k,a3,qo,n1,s1,u1,mc,jn,Sk,Mk,Fk,S2,Dk,E2,Lk,x2,Pk,Hk,v2,Bk,Wk,Uk,Kk,h2,Yk,u2,Xk,Qk,ic,c2,D1,Z0,nA,H0,T0,A0,C0,rA,cA,Z1,Jo,uA,y0,mA,fA,pA,gA,v0,qr,jA,yA,_A,wA,r0,o4,i0,EA,kA,SA,MA,FA,TA,zA,Z4,NA,LA,Q4,PA,HA,IA,z3,ii,ye,Ne,N,w4,C4,di,e,g4,Js,k,Zs,A4,Zn,p4,f4,z4,Ys,B4,Z,cS,Jr,ec,uS,hS,mS,fS,pS,gS,vS,bS,jS,yS,_S,wS,xS,CS,ES,$4,AS,SS,MS,FS,TS,Ai,DS,W4,oc,U4,PS,HS,q4,dr,VS,Y4,WS,US,KS,qS,X4,Vk,zk,yk,jk,bk,vk,gk,pk,mk,$E,VE,HC,EC,CC,OC,wC,nC,Fx,Mx,cs,Xe,Pe,xx,vx,p,_e,Ve,i4,ZO,a0,Xc,s4,Ge,Fa,c0,sl,l0,Ui,OO,bO,uO,rO,Ki,oO,Ww,u0,h0,n4,wl,Ol,p0,Rw,g0,b0,j0,Nw,x0,Fl,K1,Fw,Mw,Sw,Aw,S0,W1,R0,B0,y4,$0,yw,jw,W0,vw,gw,pw,hw,I1,cw,e2,t2,L1,j2,I_,L_,N_,ks,T_,y2,w2,h_,u_,d_,C2,f1,Wa,r_,W2,_o,M3,T3,By,Hy,vc,Dr,q3,ih,Sy,xy,dh,yy,ce,hh,ph,vh,Eh,Qi,kh,uz,ly,ry,ny,ty,ey,Ah,Jj,Zj,Qj,Gj,Fh,qj,Wj,$j,Dh,_l,xu,Ou,wu,nl,Rj,Lj,ba,Xv,ov,jm,ym,e7,J5,Om,xm,Fm,Tm,Zp,zm,Hm,Im,Md,Mp,Zm,Ep,Cp,t8,Bc,bd,Kc,ap,i8,st,Z6,yN,md,Xt,Fo,Is,Bl,iD=Object.freeze({__proto__:null,isRange:Kh,mix:pj,range:zr,register:oD,steps:fj}),mj=new p({id:"hsl",name:"HSL",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},l:{range:[0,100],name:"Lightness"}},base:Qi,fromBase:e=>{let o=Math.max(...e),l=Math.min(...e),[c,i,a]=e,[t,s,n]=[NaN,0,(l+o)/2],r=o-l;if(r!==0){switch(s=n===0||n===1?0:(o-n)/Math.min(n,1-n),o){case c:t=(i-a)/r+(i<a?6:0);break;case i:t=(a-c)/r+2;break;case a:t=(c-i)/r+4}t=t*60}return s<0&&(t+=180,s=s<0?-s:s),t>=360&&(t-=360),[t,s*100,n*100]},toBase:e=>{let[t,o,n]=e;t=t%360,t<0&&(t+=360),o/=100,n/=100;function s(e){let s=(e+t/30)%12,i=o*Math.min(n,1-n);return n-i*Math.max(-1,Math.min(s-3,9-s,1))}return[s(0),s(8),s(4)]},formats:{hsl:{coords:["<number> | <angle>","<percentage>","<percentage>"]},hsla:{coords:["<number> | <angle>","<percentage>","<percentage>"],commas:!0,lastAlpha:!0}}}),rj=new p({id:"hsv",name:"HSV",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},v:{range:[0,100],name:"Value"}},base:mj,fromBase(e){let[o,s,t]=e;s/=100,t/=100;let n=t+s*Math.min(t,1-t);return[o,n===0?0:200*(1-t/n),100*n]},toBase(e){let[o,s,n]=e;s/=100,n/=100;let t=n*(1-s/2);return[o,t===0||t===1?0:(n-t)/Math.min(t,1-t)*100,t*100]},formats:{color:{id:"--hsv",coords:["<number> | <angle>","<percentage> | <number>","<percentage> | <number>"]}}}),cD=new p({id:"hwb",name:"HWB",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},w:{range:[0,100],name:"Whiteness"},b:{range:[0,100],name:"Blackness"}},base:rj,fromBase(e){let[n,s,t]=e;return[n,t*(100-s)/100,100-t]},toBase(e){let[o,t,n]=e;t/=100,n/=100;let i=t+n;if(i>=1){let e=t/i;return[o,0,e*100]}let s=1-n,a=s===0?0:1-t/s;return[o,a*100,s*100]},formats:{hwb:{coords:["<number> | <angle>","<percentage> | <number>","<percentage> | <number>"]}}}),lD=[[.5766690429101305,.1855582379065463,.1882286462349947],[.29734497525053605,.6273635662554661,.07529145849399788],[.02703136138641234,.07068885253582723,.9913375368376388]],dD=[[2.0415879038107465,-.5650069742788596,-.34473135077832956],[-.9692436362808795,1.8759675015077202,.04155505740717557],[.013444280632031142,-.11836239223101838,1.0151749943912054]],tj=new Ve({id:"a98rgb-linear",cssId:"--a98-rgb-linear",name:"Linear Adobe\xAE 98 RGB compatible",white:"D65",toXYZ_M:lD,fromXYZ_M:dD}),hD=new Ve({id:"a98rgb",cssId:"a98-rgb",name:"Adobe\xAE 98 RGB compatible",base:tj,toBase:e=>e.map(e=>(e<0?-e:e)**(563/256)*Math.sign(e)),fromBase:e=>e.map(e=>(e<0?-e:e)**(256/563)*Math.sign(e))}),mD=[[.7977666449006423,.13518129740053308,.0313477341283922],[.2880748288194013,.711835234241873,8993693872564e-17],[0,0,.8251046025104602]],fD=[[1.3457868816471583,-.25557208737979464,-.05110186497554526],[-.5446307051249019,1.5082477428451468,.02052744743642139],[0,0,1.2119675456389452]],ej=new Ve({id:"prophoto-linear",cssId:"--prophoto-rgb-linear",name:"Linear ProPhoto",white:"D50",base:i4,toXYZ_M:mD,fromXYZ_M:fD}),LT=1/512,vD=16/512,bD=new Ve({id:"prophoto",cssId:"prophoto-rgb",name:"ProPhoto",base:ej,toBase(e){return e.map(e=>e<vD?e/16:e**1.8)},fromBase(e){return e.map(e=>e>=LT?e**(1/1.8):16*e)}}),jD=new p({id:"oklch",name:"Oklch",coords:{l:{refRange:[0,1],name:"Lightness"},c:{refRange:[0,.4],name:"Chroma"},h:{refRange:[0,360],type:"angle",name:"Hue"}},white:"D65",base:Ki,fromBase(e){let[i,t,n]=e,s;const o=2e-4;return(t<0?-t:t)<o&&(n<0?-n:n)<o?s=NaN:s=Math.atan2(n,t)*180/Math.PI,[i,(t**2+n**2)**.5,pn(s)]},toBase(e){let[i,o,t]=e,n,s;return isNaN(t)?(n=0,s=0):(n=o*Math.cos(t*Math.PI/180),s=o*Math.sin(t*Math.PI/180)),[i,n,s]},formats:{oklch:{coords:["<percentage> | <number>","<number> | <percentage>[0,1]","<number> | <angle>"]}}}),Jb=Pe.D65,_D=216/24389,Xb=24389/27,[Wb,Vb]=_u({space:_e,coords:Jb}),Bb=new p({id:"luv",name:"Luv",coords:{l:{refRange:[0,100],name:"Lightness"},u:{refRange:[-215,215]},v:{refRange:[-215,215]}},white:Jb,base:_e,fromBase(e){let s=[ae(e[0]),ae(e[1]),ae(e[2])],t=s[1],[o,i]=_u({space:_e,coords:s});if(!Number.isFinite(o)||!Number.isFinite(i))return[0,0,0];let n=t<=_D?Xb*t:116*Math.cbrt(t)-16;return[n,13*n*(o-Wb),13*n*(i-Vb)]},toBase(e){let[t,n,s]=e;if(t===0||Ts(t))return[0,0,0];n=ae(n),s=ae(s);let a=n/(13*t)+Wb,o=s/(13*t)+Vb,i=t<=8?t/Xb:((t+16)/116)**3;return[i*(9*a/(4*o)),i,i*((12-3*a-20*o)/(4*o))]},formats:{color:{id:"--luv",coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}}),hm=new p({id:"lchuv",name:"LChuv",coords:{l:{refRange:[0,100],name:"Lightness"},c:{refRange:[0,220],name:"Chroma"},h:{refRange:[0,360],type:"angle",name:"Hue"}},base:Bb,fromBase(e){let[i,t,n]=e,s;const o=.02;return(t<0?-t:t)<o&&(n<0?-n:n)<o?s=NaN:s=Math.atan2(n,t)*180/Math.PI,[i,(t**2+n**2)**.5,pn(s)]},toBase(e){let[s,t,n]=e;return t<0&&(t=0),isNaN(n)&&(n=0),[s,t*Math.cos(n*Math.PI/180),t*Math.sin(n*Math.PI/180)]},formats:{color:{id:"--lchuv",coords:["<number> | <percentage>","<number> | <percentage>","<number> | <angle>"]}}}),GS=216/24389,AD=24389/27,Sb=ce[0][0],kb=ce[0][1],mm=ce[0][2],_b=ce[1][0],jb=ce[1][1],pm=ce[1][2],mb=ce[2][0],hb=ce[2][1],gm=ce[2][2];function Za(e,t,n){const s=t/(Math.sin(n)-e*Math.cos(n));return s<0?1/0:s}function Yd(e){const i=(e+16)**3/1560896,t=i>GS?i:e/AD,a=t*(284517*Sb-94839*mm),r=t*(838422*mm+769860*kb+731718*Sb),n=t*(632260*mm-126452*kb),c=t*(284517*_b-94839*pm),l=t*(838422*pm+769860*jb+731718*_b),s=t*(632260*pm-126452*jb),d=t*(284517*mb-94839*gm),u=t*(838422*gm+769860*hb+731718*mb),o=t*(632260*gm-126452*hb);return{r0s:a/n,r0i:r*e/n,r1s:a/(n+126452),r1i:(r-769860)*e/(n+126452),g0s:c/s,g0i:l*e/s,g1s:c/(s+126452),g1i:(l-769860)*e/(s+126452),b0s:d/o,b0i:u*e/o,b1s:d/(o+126452),b1i:(u-769860)*e/(o+126452)}}function u9(e,t){const n=t/360*Math.PI*2,s=Za(e.r0s,e.r0i,n),o=Za(e.r1s,e.r1i,n),i=Za(e.g0s,e.g0i,n),a=Za(e.g1s,e.g1i,n),r=Za(e.b0s,e.b0i,n),c=Za(e.b1s,e.b1i,n);return Math.min(s,o,i,a,r,c)}Xv=new p({id:"hsluv",name:"HSLuv",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},l:{range:[0,100],name:"Lightness"}},base:hm,gamutSpace:Qi,fromBase(e){let[t,o,s]=[ae(e[0]),ae(e[1]),ae(e[2])],n;if(t>99.9999999)n=0,t=100;else if(t<1e-8)n=0,t=0;else{let e=Yd(t),i=u9(e,s);n=o/i*100}return[s,n,t]},toBase(e){let[s,o,t]=[ae(e[0]),ae(e[1]),ae(e[2])],n;if(t>99.9999999)t=100,n=0;else if(t<1e-8)t=0,n=0;else{let e=Yd(t),i=u9(e,s);n=i/100*o}return[t,n,s]},formats:{color:{id:"--hsluv",coords:["<number> | <angle>","<percentage> | <number>","<percentage> | <number>"]}}}),ce[0][0],ce[0][1],ce[0][2],ce[1][0],ce[1][1],ce[1][2],ce[2][0],ce[2][1],ce[2][2];function Ja(e,t){return(t<0?-t:t)/(e**2+1)**.5}function fv(e){let t=Ja(e.r0s,e.r0i),n=Ja(e.r1s,e.r1i),s=Ja(e.g0s,e.g0i),o=Ja(e.g1s,e.g1i),i=Ja(e.b0s,e.b0i),a=Ja(e.b1s,e.b1i);return Math.min(t,n,s,o,i,a)}ov=new p({id:"hpluv",name:"HPLuv",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},l:{range:[0,100],name:"Lightness"}},base:hm,gamutSpace:"self",fromBase(e){let[t,s,o]=[ae(e[0]),ae(e[1]),ae(e[2])],n;if(t>99.9999999)n=0,t=100;else if(t<1e-8)n=0,t=0;else{let e=Yd(t),o=fv(e);n=s/o*100}return[o,n,t]},toBase(e){let[s,o,t]=[ae(e[0]),ae(e[1]),ae(e[2])],n;if(t>99.9999999)t=100,n=0;else if(t<1e-8)t=0,n=0;else{let e=Yd(t),s=fv(e);n=s/100*o}return[t,n,s]},formats:{color:{id:"--hpluv",coords:["<number> | <angle>","<percentage> | <number>","<percentage> | <number>"]}}}),jm=203,ym=2610/2**14,e7=2**14/2610,J5=2523/2**5,Om=2**5/2523,xm=3424/2**12,Fm=2413/2**7,Tm=2392/2**7,Zp=new Ve({id:"rec2100pq",cssId:"rec2100-pq",name:"REC.2100-PQ",base:vc,toBase(e){return e.map(function(e){let t=(Math.max(e**Om-xm,0)/(Fm-Tm*e**Om))**e7;return t*1e4/jm})},fromBase(e){return e.map(function(e){let t=Math.max(e*jm/1e4,0),n=xm+Fm*t**ym,s=1+Tm*t**ym;return(n/s)**J5})}}),zm=.17883277,Hm=.28466892,Im=.55991073,Md=3.7743,Mp=new Ve({id:"rec2100hlg",cssId:"rec2100-hlg",name:"REC.2100-HLG",referred:"scene",base:vc,toBase(e){return e.map(function(e){return e<=.5?e**2/3*Md:(Math.exp((e-Im)/zm)+Hm)/12*Md})},fromBase(e){return e.map(function(e){return e/=Md,e<=1/12?(3*e)**.5:zm*Math.log(12*e-Hm)+Im})}}),Zm={},cs.add("chromatic-adaptation-start",e=>{e.options.method&&(e.M=kp(e.W1,e.W2,e.options.method))}),cs.add("chromatic-adaptation-end",e=>{e.M||(e.M=kp(e.W1,e.W2,e.options.method))});function wd({id:e,toCone_M:t,fromCone_M:n}){Zm[e]=arguments[0]}function kp(e,t,n="Bradford"){let s=Zm[n],[o,i,a]=K(s.toCone_M,e),[r,c,l]=K(s.toCone_M,t),d=[[r/o,0,0],[0,c/i,0],[0,0,l/a]],u=K(d,s.toCone_M),h=K(s.fromCone_M,u);return h}wd({id:"von Kries",toCone_M:[[.40024,.7076,-.08081],[-.2263,1.16532,.0457],[0,0,.91822]],fromCone_M:[[1.8599363874558397,-1.1293816185800916,.21989740959619328],[.3611914362417676,.6388124632850422,-6370596838649899e-21],[0,0,1.0890636230968613]]}),wd({id:"Bradford",toCone_M:[[.8951,.2664,-.1614],[-.7502,1.7135,.0367],[.0389,-.0685,1.0296]],fromCone_M:[[.9869929054667121,-.14705425642099013,.15996265166373122],[.4323052697233945,.5183602715367774,.049291228212855594],[-.00852866457517732,.04004282165408486,.96848669578755]]}),wd({id:"CAT02",toCone_M:[[.7328,.4296,-.1624],[-.7036,1.6975,.0061],[.003,.0136,.9834]],fromCone_M:[[1.0961238208355142,-.27886900021828726,.18274517938277307],[.4543690419753592,.4735331543074117,.07209780371722911],[-.009627608738429355,-.00569803121611342,1.0153256399545427]]}),wd({id:"CAT16",toCone_M:[[.401288,.650173,-.051461],[-.250268,1.204414,.045854],[-.002079,.048952,.953127]],fromCone_M:[[1.862067855087233,-1.0112546305316845,.14918677544445172],[.3875265432361372,.6214474419314753,-.008973985167612521],[-.01584149884933386,-.03412293802851557,1.0499644368778496]]}),Object.assign(Pe,{A:[1.0985,1,.35585],C:[.98074,1,1.18232],D55:[.95682,1,.92149],D75:[.94972,1,1.22638],E:[1,1,1],F2:[.99186,1,.67393],F7:[.95041,1,1.08747],F11:[1.00962,1,.6435]}),Pe.ACES=[.32168/.33767,1,(1-.32168-.33767)/.33767],Ep=[[.6624541811085053,.13400420645643313,.1561876870049078],[.27222871678091454,.6740817658111484,.05368951740793705],[-.005574649490394108,.004060733528982826,1.0103391003129971]],Cp=[[1.6410233796943257,-.32480329418479,-.23642469523761225],[-.6636628587229829,1.6153315916573379,.016756347685530137],[.011721894328375376,-.008284441996237409,.9883948585390215]],t8=new Ve({id:"acescg",cssId:"--acescg",name:"ACEScg",coords:{r:{range:[0,65504],name:"Red"},g:{range:[0,65504],name:"Green"},b:{range:[0,65504],name:"Blue"}},referred:"scene",white:Pe.ACES,toXYZ_M:Ep,fromXYZ_M:Cp}),Bc=2**-16,bd=-.35828683,Kc=(Math.log2(65504)+9.72)/17.52,ap=new Ve({id:"acescc",cssId:"--acescc",name:"ACEScc",coords:{r:{range:[bd,Kc],name:"Red"},g:{range:[bd,Kc],name:"Green"},b:{range:[bd,Kc],name:"Blue"}},referred:"scene",base:t8,toBase(e){const t=(9.72-15)/17.52;return e.map(function(e){return e<=t?(2**(e*17.52-9.72)-Bc)*2:e<Kc?2**(e*17.52-9.72):65504})},fromBase(e){return e.map(function(e){return e<=0?(Math.log2(Bc)+9.72)/17.52:e<Bc?(Math.log2(Bc+e*.5)+9.72)/17.52:(Math.log2(e)+9.72)/17.52})}}),i8=Object.freeze({__proto__:null,A98RGB:hD,A98RGB_Linear:tj,ACEScc:ap,ACEScg:t8,CAM16_JMh:h_,HCT:Wa,HPLuv:ov,HSL:mj,HSLuv:Xv,HSV:rj,HWB:cD,ICTCP:I1,JzCzHz:W1,Jzazbz:S0,LCH:Fa,LCHuv:hm,Lab:Ge,Lab_D65:Ou,Luv:Bb,OKLCH:jD,OKLab:Ki,P3:kh,P3_Linear:dh,ProPhoto:bD,ProPhoto_Linear:ej,REC_2020:ih,REC_2020_Linear:vc,REC_2100_HLG:Mp,REC_2100_PQ:Zp,XYZ_ABS_D65:n4,XYZ_D50:i4,XYZ_D65:_e,sRGB:Qi,sRGB_Linear:hh}),st=class _Color{constructor(...s){let e;s.length===1&&(e=_(s[0]));let o,n,t;e?(o=e.space||e.spaceId,n=e.coords,t=e.alpha):[o,n,t]=s,Object.defineProperty(this,"space",{value:p.get(o),writable:!1,enumerable:!0,configurable:!0}),this.coords=n?n.slice():[0,0,0],this.alpha=t>1||t===0[0]?1:t<0?0:t;for(let e=0;e<this.coords.length;e++)this.coords[e]==="NaN"&&(this.coords[e]=NaN);for(let e in this.space.coords)Object.defineProperty(this,e,{get:()=>this.get(e),set:t=>this.set(e,t)})}get spaceId(){return this.space.id}clone(){return new _Color(this.space,this.coords,this.alpha)}toJSON(){return{spaceId:this.spaceId,coords:this.coords,alpha:this.alpha}}display(...t){let e=hz(this,...t);return e.color=new _Color(e.color),e}static get(e,...t){return e instanceof _Color?e:new _Color(e,...t)}static defineFunction(e,t,n=t){let{instance:i=!0,returns:s}=n,o=function(...n){let e=t(...n);if(s==="color")e=_Color.get(e);else if(s==="function<color>"){let t=e;e=function(...e){let n=t(...e);return _Color.get(n)},Object.assign(e,t)}else s==="array<color>"&&(e=e.map(e=>_Color.get(e)));return e};e in _Color||(_Color[e]=o),i&&(_Color.prototype[e]=function(...e){return o(this,...e)})}static defineFunctions(e){for(let t in e)_Color.defineFunction(t,e[t],e[t])}static extend(e){if(e.register)e.register(_Color);else for(let t in e)_Color.defineFunction(t,e[t])}},st.defineFunctions({get:_t,getAll:qc,set:hs,setAll:o0,to:q,equals:mz,inGamut:qi,toGamut:no,distance:qw,toString:yc}),Object.assign(st,{util:Fx,hooks:cs,WHITES:Pe,Space:p,spaces:p.registry,parse:_x,defaults:Xe});for(let e of Object.keys(i8))p.register(i8[e]);for(let e in p.registry)a8(e,p.registry[e]);cs.add("colorspace-init-end",e=>{a8(e.id,e),e.aliases?.forEach(t=>{a8(t,e)})});function a8(e,t){let n=e.replace(/-/g,"_");Object.defineProperty(st.prototype,n,{get(){let n=this.getAll(e);return typeof Proxy=="undefined"?n:new Proxy(n,{has:(e,n)=>{try{return p.resolveCoord([t,n]),!0}catch{}return Reflect.has(e,n)},get:(e,n,s)=>{if(n&&typeof n!="symbol"&&!(n in e)){let{index:s}=p.resolveCoord([t,n]);if(s>=0)return e[s]}return Reflect.get(e,n,s)},set:(n,s,o,i)=>{if(s&&typeof s!="symbol"&&!(s in n)||s>=0){let{index:i}=p.resolveCoord([t,s]);if(i>=0)return n[i]=o,this.setAll(e,n),!0}return Reflect.set(n,s,o,i)}})},set(t){this.setAll(e,t)},configurable:!0,enumerable:!0})}st.extend(_o),st.extend({deltaE:el}),Object.assign(st,{deltaEMethods:_o}),st.extend(Lj),st.extend({contrast:Uz}),st.extend(Rj),st.extend(ly),st.extend(iD),st.extend(nl),Z6=class _Uint16Image{height;width;data;static DEFAULT_COLORSPACE="rec2100-hlg";static SDR_MULTIPLIER=2**16-1;static COLORSPACES={"rec2100-hlg":"rec2100hlg","display-p3":"p3",srgb:"sRGB","rec2100-pq":"rec2100pq"};colorSpace;constructor(e,t,n){n==null?this.colorSpace=_Uint16Image.DEFAULT_COLORSPACE:this.colorSpace=n,this.height=t,this.width=e,this.data=new Uint16Array(t*e*4)}fill(e){if(e.length!=4)return;for(let t=0;t<this.data.length;t+=4)this.data[t]=e[0],this.data[t+1]=e[1],this.data[t+2]=e[2],this.data[t+3]=e[3];return this}getPixel(e,t){const n=(t*this.width+e)*4;return this.data.slice(n,n+4)}setPixel(e,t,n){const s=(t*this.width+e)*4;this.data[s+0]=n[0],this.data[s+1]=n[1],this.data[s+2]=n[2],this.data[s+3]=n[3]}static scaleUint8ToUint16(e){return e<<8|e}getImageData(){return this.data===0[0]||this.data===null?null:new ImageData(this.data,this.width,this.height,{colorSpace:this.colorSpace})}static convertPixelToRec2100_hlg(e){const s=_Uint16Image.COLORSPACES["rec2100-hlg"],o=new st("srgb",Array.from(e.slice(0,3)).map(e=>e/255),e[3]/255),t=o.to(s),n=t.coords.map(e=>Math.round(e*_Uint16Image.SDR_MULTIPLIER));return n.push(t.alpha*_Uint16Image.SDR_MULTIPLIER),Uint16Array.from(n)}static convertArrayToRec2100_hlg(e){const t=new Uint16Array(e.length);for(let n=0;n<e.length;n+=4){const s=e.slice(n,n+4),o=_Uint16Image.convertPixelToRec2100_hlg(s);t.set(o,n)}return t}pixelCallback(e){for(let t=0;t<this.data.length;t+=4)this.data.set(e(this.data[t],this.data[t+1],this.data[t+2],this.data[t+3]),t)}static async loadSDRImageData(e){return fetch(e).then(e=>e.blob()).then(e=>createImageBitmap(e)).then(e=>{const{width:n,height:s}=e,o=new OffscreenCanvas(n,s),t=o.getContext("2d");return t?.drawImage(e,0,0),t}).then(e=>e?.getImageData(0,0,e?.canvas.width,e?.canvas.height))}static fromImageData(e){const t=new _Uint16Image(e.width,e.height);if(e.colorSpace=="srgb")t.data=_Uint16Image.convertArrayToRec2100_hlg(e.data);else if(e.colorSpace==_Uint16Image.DEFAULT_COLORSPACE)t.data=e.data;else throw new Error(`ColorSpace ${e.colorSpace} isn't supported!`);return t}static async fromURL(e){return _Uint16Image.loadSDRImageData(e).then(e=>{if(e!==0[0])return _Uint16Image.fromImageData(e)})}setImageData(e){if(this.width=e.width,this.height=e.height,e.colorSpace=="srgb")this.data=_Uint16Image.convertArrayToRec2100_hlg(e.data);else if(e.colorSpace==_Uint16Image.DEFAULT_COLORSPACE)this.data=e.data;else throw new Error(`ColorSpace ${e.colorSpace} isn't supported!`);this.colorSpace=_Uint16Image.DEFAULT_COLORSPACE}clone(){const e=new _Uint16Image(this.width,this.height,this.colorSpace);return e.data=this.data.slice(),e}};function jN(){const e="rec2100-pq";try{const t=document.createElement("canvas");if(!t.getContext)return!1;const n=t.getContext("2d",{colorSpace:e,pixelFormat:"float16"});return n!==null}catch{return console.error("Bad canvas ColorSpace test - make sure that the Chromium browser flag 'enable-experimental-web-platform-features' has been enabled"),!1}}yN={colorSpace:Z6.DEFAULT_COLORSPACE,pixelFormat:"float16"};function EN(e,t){e===null&&console.log("Model canvas is null!");const i=new h6;md=new Uc,i.load(t,function(e){Bl=e.scene,Bl.traverse(e=>{if(e?.material?.type!=0[0]){let t=new sn;sn.prototype.copy.call(t,e.material),e.material=t}}),Bl.position.y=-1,md.add(Bl)},function(){},function(e){console.log("An error happened",e)}),g8.isAvailable()&&jN()?Xt=new wC({canvas:e,antialias:!0}):Xt=new Nj({canvas:e,antialias:!0});const s=Xt.domElement.parentNode.clientWidth,o=Xt.domElement.parentNode.clientHeight;Fo=new Ee(40,s/o,.25,20),Fo.position.set(0,6,10),Fo.lookAt(0,0,0);const a=window.devicePixelRatio||1;Xt.setPixelRatio(a),Xt.setSize(s,o),Xt.setAnimationLoop(a6),Xt.setClearColor(0,0),Is=new _p(Fo,Xt.domElement),Is.autoRotate=!0,Is.autoRotateSpeed=.05,Is.minPolarAngle=0,Is.maxPolarAngle=Math.PI*.5,Is.maxDistance=18,Is.minDistance=4,window.addEventListener("resize",()=>{Fo.aspect=e.parentNode.clientWidth/e.parentNode.clientHeight,Fo.updateProjectionMatrix(),Xt.setSize(e.parentNode.clientWidth,e.parentNode.clientHeight)}),e.scene=md}function a6(){setTimeout(function(){requestAnimationFrame(a6)},1e3/30),Is.update(),Xt.render(md,Fo)}window.initModel=EN})()